
MCP3202_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000169a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000169a  0000172e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080006a  0080006a  00001738  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e16  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001364  00000000  00000000  000057ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001364  00000000  00000000  00006b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ac  00000000  00000000  00007e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d2e  00000000  00000000  00008430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ced  00000000  00000000  0000915e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000ae4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
       2:	6d c0       	rjmp	.+218    	; 0xde <__bad_interrupt>
       4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
       6:	6b c0       	rjmp	.+214    	; 0xde <__bad_interrupt>
       8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
       a:	69 c0       	rjmp	.+210    	; 0xde <__bad_interrupt>
       c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
       e:	67 c0       	rjmp	.+206    	; 0xde <__bad_interrupt>
      10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
      12:	ab c2       	rjmp	.+1366   	; 0x56a <__vector_9>
      14:	64 c0       	rjmp	.+200    	; 0xde <__bad_interrupt>
      16:	63 c0       	rjmp	.+198    	; 0xde <__bad_interrupt>
      18:	62 c0       	rjmp	.+196    	; 0xde <__bad_interrupt>
      1a:	61 c0       	rjmp	.+194    	; 0xde <__bad_interrupt>
      1c:	60 c0       	rjmp	.+192    	; 0xde <__bad_interrupt>
      1e:	5f c0       	rjmp	.+190    	; 0xde <__bad_interrupt>
      20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
      22:	5d c0       	rjmp	.+186    	; 0xde <__bad_interrupt>
      24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
      26:	07 63       	ori	r16, 0x37	; 55
      28:	42 36       	cpi	r20, 0x62	; 98
      2a:	b7 9b       	sbis	0x16, 7	; 22
      2c:	d8 a7       	std	Y+40, r29	; 0x28
      2e:	1a 39       	cpi	r17, 0x9A	; 154
      30:	68 56       	subi	r22, 0x68	; 104
      32:	18 ae       	std	Y+56, r1	; 0x38
      34:	ba ab       	std	Y+50, r27	; 0x32
      36:	55 8c       	ldd	r5, Z+29	; 0x1d
      38:	1d 3c       	cpi	r17, 0xCD	; 205
      3a:	b7 cc       	rjmp	.-1682   	; 0xfffff9aa <__eeprom_end+0xff7ef9aa>
      3c:	57 63       	ori	r21, 0x37	; 55
      3e:	bd 6d       	ori	r27, 0xDD	; 221
      40:	ed fd       	.word	0xfded	; ????
      42:	75 3e       	cpi	r23, 0xE5	; 229
      44:	f6 17       	cp	r31, r22
      46:	72 31       	cpi	r23, 0x12	; 18
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	08 00       	.word	0x0008	; ????
      50:	00 00       	nop
      52:	be 92       	st	-X, r11
      54:	24 49       	sbci	r18, 0x94	; 148
      56:	12 3e       	cpi	r17, 0xE2	; 226
      58:	ab aa       	std	Y+51, r10	; 0x33
      5a:	aa 2a       	or	r10, r26
      5c:	be cd       	rjmp	.-1156   	; 0xfffffbda <__eeprom_end+0xff7efbda>
      5e:	cc cc       	rjmp	.-1640   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      60:	4c 3e       	cpi	r20, 0xEC	; 236
      62:	00 00       	nop
      64:	00 80       	ld	r0, Z
      66:	be ab       	std	Y+54, r27	; 0x36
      68:	aa aa       	std	Y+50, r10	; 0x32
      6a:	aa 3e       	cpi	r26, 0xEA	; 234
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	bf 00       	.word	0x00bf	; ????
      72:	00 00       	nop
      74:	80 3f       	cpi	r24, 0xF0	; 240
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	41 78       	andi	r20, 0x81	; 129
      7e:	d3 bb       	out	0x13, r29	; 19
      80:	43 87       	std	Z+11, r20	; 0x0b
      82:	d1 13       	cpse	r29, r17
      84:	3d 19       	sub	r19, r13
      86:	0e 3c       	cpi	r16, 0xCE	; 206
      88:	c3 bd       	out	0x23, r28	; 35
      8a:	42 82       	std	Z+2, r4	; 0x02
      8c:	ad 2b       	or	r26, r29
      8e:	3e 68       	ori	r19, 0x8E	; 142
      90:	ec 82       	std	Y+4, r14	; 0x04
      92:	76 be       	out	0x36, r7	; 54
      94:	d9 8f       	std	Y+25, r29	; 0x19
      96:	e1 a9       	ldd	r30, Z+49	; 0x31
      98:	3e 4c       	sbci	r19, 0xCE	; 206
      9a:	80 ef       	ldi	r24, 0xF0	; 240
      9c:	ff be       	out	0x3f, r15	; 63
      9e:	01 c4       	rjmp	.+2050   	; 0x8a2 <_ZN4Port11SetAsOutputEv+0x1a>
      a0:	ff 7f       	andi	r31, 0xFF	; 255
      a2:	3f 00       	.word	0x003f	; ????
      a4:	00 00       	nop
	...

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf e5       	ldi	r28, 0x5F	; 95
      ae:	d4 e0       	ldi	r29, 0x04	; 4
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	10 e0       	ldi	r17, 0x00	; 0
      b6:	a0 e6       	ldi	r26, 0x60	; 96
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	ea e9       	ldi	r30, 0x9A	; 154
      bc:	f6 e1       	ldi	r31, 0x16	; 22
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	aa 36       	cpi	r26, 0x6A	; 106
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
      ca:	20 e0       	ldi	r18, 0x00	; 0
      cc:	aa e6       	ldi	r26, 0x6A	; 106
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a3 37       	cpi	r26, 0x73	; 115
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	7a d2       	rcall	.+1268   	; 0x5d0 <main>
      dc:	dc ca       	rjmp	.-2632   	; 0xfffff696 <__eeprom_end+0xff7ef696>

000000de <__bad_interrupt>:
      de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <_ZN7HD44780nwEj>:
	
	for(uint8_t i = 0; i < 7; i++)
	{
		SendByte(symbol[i], LCD_Data);
	}
}
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	ec 01       	movw	r28, r24
      e6:	ce 01       	movw	r24, r28
      e8:	82 d9       	rcall	.-3324   	; 0xfffff3ee <__eeprom_end+0xff7ef3ee>
      ea:	00 97       	sbiw	r24, 0x00	; 0
      ec:	e1 f3       	breq	.-8      	; 0xe6 <_ZN7HD44780nwEj+0x6>
      ee:	df 91       	pop	r29
      f0:	cf 91       	pop	r28
      f2:	08 95       	ret

000000f4 <_ZN7HD4478012SelectDeviceEv>:
      f4:	fc 01       	movw	r30, r24
      f6:	84 81       	ldd	r24, Z+4	; 0x04
      f8:	95 81       	ldd	r25, Z+5	; 0x05
      fa:	d9 d3       	rcall	.+1970   	; 0x8ae <_ZN4Port3SetEv>
      fc:	08 95       	ret

000000fe <_ZN7HD447809LatchDataEv>:
      fe:	fc 01       	movw	r30, r24
     100:	84 81       	ldd	r24, Z+4	; 0x04
     102:	95 81       	ldd	r25, Z+5	; 0x05
     104:	e6 d3       	rcall	.+1996   	; 0x8d2 <_ZN4Port5ClearEv>
     106:	08 95       	ret

00000108 <_ZN7HD447804WaitEv>:
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	ec 01       	movw	r28, r24
     114:	f1 2c       	mov	r15, r1
     116:	83 e0       	ldi	r24, 0x03	; 3
     118:	8f 15       	cp	r24, r15
     11a:	90 f0       	brcs	.+36     	; 0x140 <_ZN7HD447804WaitEv+0x38>
     11c:	0f 2d       	mov	r16, r15
     11e:	10 e0       	ldi	r17, 0x00	; 0
     120:	0d 5f       	subi	r16, 0xFD	; 253
     122:	1f 4f       	sbci	r17, 0xFF	; 255
     124:	00 0f       	add	r16, r16
     126:	11 1f       	adc	r17, r17
     128:	0c 0f       	add	r16, r28
     12a:	1d 1f       	adc	r17, r29
     12c:	f8 01       	movw	r30, r16
     12e:	80 81       	ld	r24, Z
     130:	91 81       	ldd	r25, Z+1	; 0x01
     132:	bd d3       	rcall	.+1914   	; 0x8ae <_ZN4Port3SetEv>
     134:	f8 01       	movw	r30, r16
     136:	80 81       	ld	r24, Z
     138:	91 81       	ldd	r25, Z+1	; 0x01
     13a:	91 d3       	rcall	.+1826   	; 0x85e <_ZN4Port10SetAsInputEv>
     13c:	f3 94       	inc	r15
     13e:	eb cf       	rjmp	.-42     	; 0x116 <_ZN7HD447804WaitEv+0xe>
     140:	8a 81       	ldd	r24, Y+2	; 0x02
     142:	9b 81       	ldd	r25, Y+3	; 0x03
     144:	b4 d3       	rcall	.+1896   	; 0x8ae <_ZN4Port3SetEv>
     146:	88 81       	ld	r24, Y
     148:	99 81       	ldd	r25, Y+1	; 0x01
     14a:	c3 d3       	rcall	.+1926   	; 0x8d2 <_ZN4Port5ClearEv>
     14c:	ce 01       	movw	r24, r28
     14e:	d2 df       	rcall	.-92     	; 0xf4 <_ZN7HD4478012SelectDeviceEv>
     150:	8c 85       	ldd	r24, Y+12	; 0x0c
     152:	9d 85       	ldd	r25, Y+13	; 0x0d
     154:	e4 d3       	rcall	.+1992   	; 0x91e <_ZN4Port5IsSetEv>
     156:	18 2f       	mov	r17, r24
     158:	ce 01       	movw	r24, r28
     15a:	d1 df       	rcall	.-94     	; 0xfe <_ZN7HD447809LatchDataEv>
     15c:	ce 01       	movw	r24, r28
     15e:	ca df       	rcall	.-108    	; 0xf4 <_ZN7HD4478012SelectDeviceEv>
     160:	ce 01       	movw	r24, r28
     162:	cd df       	rcall	.-102    	; 0xfe <_ZN7HD447809LatchDataEv>
     164:	11 11       	cpse	r17, r1
     166:	f2 cf       	rjmp	.-28     	; 0x14c <_ZN7HD447804WaitEv+0x44>
     168:	f1 2c       	mov	r15, r1
     16a:	f3 e0       	ldi	r31, 0x03	; 3
     16c:	ff 15       	cp	r31, r15
     16e:	90 f0       	brcs	.+36     	; 0x194 <_ZN7HD447804WaitEv+0x8c>
     170:	0f 2d       	mov	r16, r15
     172:	10 e0       	ldi	r17, 0x00	; 0
     174:	0d 5f       	subi	r16, 0xFD	; 253
     176:	1f 4f       	sbci	r17, 0xFF	; 255
     178:	00 0f       	add	r16, r16
     17a:	11 1f       	adc	r17, r17
     17c:	0c 0f       	add	r16, r28
     17e:	1d 1f       	adc	r17, r29
     180:	f8 01       	movw	r30, r16
     182:	80 81       	ld	r24, Z
     184:	91 81       	ldd	r25, Z+1	; 0x01
     186:	80 d3       	rcall	.+1792   	; 0x888 <_ZN4Port11SetAsOutputEv>
     188:	f8 01       	movw	r30, r16
     18a:	80 81       	ld	r24, Z
     18c:	91 81       	ldd	r25, Z+1	; 0x01
     18e:	a1 d3       	rcall	.+1858   	; 0x8d2 <_ZN4Port5ClearEv>
     190:	f3 94       	inc	r15
     192:	eb cf       	rjmp	.-42     	; 0x16a <_ZN7HD447804WaitEv+0x62>
     194:	8a 81       	ldd	r24, Y+2	; 0x02
     196:	9b 81       	ldd	r25, Y+3	; 0x03
     198:	9c d3       	rcall	.+1848   	; 0x8d2 <_ZN4Port5ClearEv>
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	ff 90       	pop	r15
     1a4:	08 95       	ret

000001a6 <_ZN7HD447808SendByteEc16HD44780_DataType>:
     1a6:	ef 92       	push	r14
     1a8:	ff 92       	push	r15
     1aa:	0f 93       	push	r16
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	ec 01       	movw	r28, r24
     1b4:	e6 2e       	mov	r14, r22
     1b6:	14 2f       	mov	r17, r20
     1b8:	a7 df       	rcall	.-178    	; 0x108 <_ZN7HD447804WaitEv>
     1ba:	11 30       	cpi	r17, 0x01	; 1
     1bc:	21 f4       	brne	.+8      	; 0x1c6 <_ZN7HD447808SendByteEc16HD44780_DataType+0x20>
     1be:	88 81       	ld	r24, Y
     1c0:	99 81       	ldd	r25, Y+1	; 0x01
     1c2:	87 d3       	rcall	.+1806   	; 0x8d2 <_ZN4Port5ClearEv>
     1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <_ZN7HD447808SendByteEc16HD44780_DataType+0x2a>
     1c6:	11 11       	cpse	r17, r1
     1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <_ZN7HD447808SendByteEc16HD44780_DataType+0x2a>
     1ca:	88 81       	ld	r24, Y
     1cc:	99 81       	ldd	r25, Y+1	; 0x01
     1ce:	6f d3       	rcall	.+1758   	; 0x8ae <_ZN4Port3SetEv>
     1d0:	0e 2d       	mov	r16, r14
     1d2:	10 e0       	ldi	r17, 0x00	; 0
     1d4:	15 95       	asr	r17
     1d6:	07 95       	ror	r16
     1d8:	15 95       	asr	r17
     1da:	07 95       	ror	r16
     1dc:	15 95       	asr	r17
     1de:	07 95       	ror	r16
     1e0:	15 95       	asr	r17
     1e2:	07 95       	ror	r16
     1e4:	f1 2c       	mov	r15, r1
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	8f 15       	cp	r24, r15
     1ea:	58 f1       	brcs	.+86     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
     1ec:	ce 01       	movw	r24, r28
     1ee:	82 df       	rcall	.-252    	; 0xf4 <_ZN7HD4478012SelectDeviceEv>
     1f0:	10 e0       	ldi	r17, 0x00	; 0
     1f2:	14 30       	cpi	r17, 0x04	; 4
     1f4:	08 f5       	brcc	.+66     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
     1f6:	81 2f       	mov	r24, r17
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	20 2f       	mov	r18, r16
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	01 2e       	mov	r0, r17
     200:	02 c0       	rjmp	.+4      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
     202:	35 95       	asr	r19
     204:	27 95       	ror	r18
     206:	0a 94       	dec	r0
     208:	e2 f7       	brpl	.-8      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     20a:	20 ff       	sbrs	r18, 0
     20c:	0a c0       	rjmp	.+20     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
     20e:	fc 01       	movw	r30, r24
     210:	33 96       	adiw	r30, 0x03	; 3
     212:	ee 0f       	add	r30, r30
     214:	ff 1f       	adc	r31, r31
     216:	ec 0f       	add	r30, r28
     218:	fd 1f       	adc	r31, r29
     21a:	80 81       	ld	r24, Z
     21c:	91 81       	ldd	r25, Z+1	; 0x01
     21e:	47 d3       	rcall	.+1678   	; 0x8ae <_ZN4Port3SetEv>
     220:	09 c0       	rjmp	.+18     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
     222:	fc 01       	movw	r30, r24
     224:	33 96       	adiw	r30, 0x03	; 3
     226:	ee 0f       	add	r30, r30
     228:	ff 1f       	adc	r31, r31
     22a:	ec 0f       	add	r30, r28
     22c:	fd 1f       	adc	r31, r29
     22e:	80 81       	ld	r24, Z
     230:	91 81       	ldd	r25, Z+1	; 0x01
     232:	4f d3       	rcall	.+1694   	; 0x8d2 <_ZN4Port5ClearEv>
     234:	1f 5f       	subi	r17, 0xFF	; 255
     236:	dd cf       	rjmp	.-70     	; 0x1f2 <_ZN7HD447808SendByteEc16HD44780_DataType+0x4c>
     238:	ce 01       	movw	r24, r28
     23a:	61 df       	rcall	.-318    	; 0xfe <_ZN7HD447809LatchDataEv>
     23c:	f3 94       	inc	r15
     23e:	0e 2d       	mov	r16, r14
     240:	d2 cf       	rjmp	.-92     	; 0x1e6 <_ZN7HD447808SendByteEc16HD44780_DataType+0x40>
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	ff 90       	pop	r15
     24c:	ef 90       	pop	r14
     24e:	08 95       	ret

00000250 <_ZN7HD447802OnEv>:
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	6c e0       	ldi	r22, 0x0C	; 12
     254:	a8 df       	rcall	.-176    	; 0x1a6 <_ZN7HD447808SendByteEc16HD44780_DataType>
     256:	08 95       	ret

00000258 <_ZN7HD447803OffEv>:
     258:	41 e0       	ldi	r20, 0x01	; 1
     25a:	68 e0       	ldi	r22, 0x08	; 8
     25c:	a4 df       	rcall	.-184    	; 0x1a6 <_ZN7HD447808SendByteEc16HD44780_DataType>
     25e:	08 95       	ret

00000260 <_ZN7HD447805ClearEv>:
     260:	41 e0       	ldi	r20, 0x01	; 1
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	a0 df       	rcall	.-192    	; 0x1a6 <_ZN7HD447808SendByteEc16HD44780_DataType>
     266:	08 95       	ret

00000268 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type>:
     268:	2f 92       	push	r2
     26a:	3f 92       	push	r3
     26c:	4f 92       	push	r4
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	3c 01       	movw	r6, r24
     292:	fb 01       	movw	r30, r22
     294:	dc 01       	movw	r26, r24
     296:	15 96       	adiw	r26, 0x05	; 5
     298:	3c 93       	st	X, r19
     29a:	2e 93       	st	-X, r18
     29c:	14 97       	sbiw	r26, 0x04	; 4
     29e:	18 01       	movw	r2, r16
     2a0:	24 01       	movw	r4, r8
     2a2:	56 94       	lsr	r5
     2a4:	47 94       	ror	r4
     2a6:	56 94       	lsr	r5
     2a8:	47 94       	ror	r4
     2aa:	92 01       	movw	r18, r4
     2ac:	ab e7       	ldi	r26, 0x7B	; 123
     2ae:	b4 e1       	ldi	r27, 0x14	; 20
     2b0:	92 d8       	rcall	.-3804   	; 0xfffff3d6 <__eeprom_end+0xff7ef3d6>
     2b2:	8c 01       	movw	r16, r24
     2b4:	16 95       	lsr	r17
     2b6:	07 95       	ror	r16
     2b8:	d3 01       	movw	r26, r6
     2ba:	1e 96       	adiw	r26, 0x0e	; 14
     2bc:	0c 93       	st	X, r16
     2be:	24 e6       	ldi	r18, 0x64	; 100
     2c0:	20 9f       	mul	r18, r16
     2c2:	c0 01       	movw	r24, r0
     2c4:	21 9f       	mul	r18, r17
     2c6:	90 0d       	add	r25, r0
     2c8:	11 24       	eor	r1, r1
     2ca:	88 1a       	sub	r8, r24
     2cc:	99 0a       	sbc	r9, r25
     2ce:	d3 01       	movw	r26, r6
     2d0:	1f 96       	adiw	r26, 0x0f	; 15
     2d2:	8c 92       	st	X, r8
     2d4:	1f 97       	sbiw	r26, 0x0f	; 15
     2d6:	11 96       	adiw	r26, 0x01	; 1
     2d8:	fc 93       	st	X, r31
     2da:	ee 93       	st	-X, r30
     2dc:	13 96       	adiw	r26, 0x03	; 3
     2de:	5c 93       	st	X, r21
     2e0:	4e 93       	st	-X, r20
     2e2:	12 97       	sbiw	r26, 0x02	; 2
     2e4:	17 96       	adiw	r26, 0x07	; 7
     2e6:	3c 92       	st	X, r3
     2e8:	2e 92       	st	-X, r2
     2ea:	16 97       	sbiw	r26, 0x06	; 6
     2ec:	19 96       	adiw	r26, 0x09	; 9
     2ee:	fc 92       	st	X, r15
     2f0:	ee 92       	st	-X, r14
     2f2:	18 97       	sbiw	r26, 0x08	; 8
     2f4:	1b 96       	adiw	r26, 0x0b	; 11
     2f6:	dc 92       	st	X, r13
     2f8:	ce 92       	st	-X, r12
     2fa:	1a 97       	sbiw	r26, 0x0a	; 10
     2fc:	1d 96       	adiw	r26, 0x0d	; 13
     2fe:	bc 92       	st	X, r11
     300:	ae 92       	st	-X, r10
     302:	1c 97       	sbiw	r26, 0x0c	; 12
     304:	cf 01       	movw	r24, r30
     306:	c0 d2       	rcall	.+1408   	; 0x888 <_ZN4Port11SetAsOutputEv>
     308:	f3 01       	movw	r30, r6
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	93 81       	ldd	r25, Z+3	; 0x03
     30e:	bc d2       	rcall	.+1400   	; 0x888 <_ZN4Port11SetAsOutputEv>
     310:	d3 01       	movw	r26, r6
     312:	14 96       	adiw	r26, 0x04	; 4
     314:	8d 91       	ld	r24, X+
     316:	9c 91       	ld	r25, X
     318:	15 97       	sbiw	r26, 0x05	; 5
     31a:	b6 d2       	rcall	.+1388   	; 0x888 <_ZN4Port11SetAsOutputEv>
     31c:	f3 01       	movw	r30, r6
     31e:	82 81       	ldd	r24, Z+2	; 0x02
     320:	93 81       	ldd	r25, Z+3	; 0x03
     322:	d7 d2       	rcall	.+1454   	; 0x8d2 <_ZN4Port5ClearEv>
     324:	f1 2c       	mov	r15, r1
     326:	f3 e0       	ldi	r31, 0x03	; 3
     328:	ff 15       	cp	r31, r15
     32a:	90 f0       	brcs	.+36     	; 0x350 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type+0xe8>
     32c:	0f 2d       	mov	r16, r15
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	0d 5f       	subi	r16, 0xFD	; 253
     332:	1f 4f       	sbci	r17, 0xFF	; 255
     334:	00 0f       	add	r16, r16
     336:	11 1f       	adc	r17, r17
     338:	06 0d       	add	r16, r6
     33a:	17 1d       	adc	r17, r7
     33c:	d8 01       	movw	r26, r16
     33e:	8d 91       	ld	r24, X+
     340:	9c 91       	ld	r25, X
     342:	a2 d2       	rcall	.+1348   	; 0x888 <_ZN4Port11SetAsOutputEv>
     344:	f8 01       	movw	r30, r16
     346:	80 81       	ld	r24, Z
     348:	91 81       	ldd	r25, Z+1	; 0x01
     34a:	c3 d2       	rcall	.+1414   	; 0x8d2 <_ZN4Port5ClearEv>
     34c:	f3 94       	inc	r15
     34e:	eb cf       	rjmp	.-42     	; 0x326 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type+0xbe>
     350:	d3 01       	movw	r26, r6
     352:	16 96       	adiw	r26, 0x06	; 6
     354:	8d 91       	ld	r24, X+
     356:	9c 91       	ld	r25, X
     358:	17 97       	sbiw	r26, 0x07	; 7
     35a:	a9 d2       	rcall	.+1362   	; 0x8ae <_ZN4Port3SetEv>
     35c:	f3 01       	movw	r30, r6
     35e:	80 85       	ldd	r24, Z+8	; 0x08
     360:	91 85       	ldd	r25, Z+9	; 0x09
     362:	a5 d2       	rcall	.+1354   	; 0x8ae <_ZN4Port3SetEv>
     364:	10 e0       	ldi	r17, 0x00	; 0
     366:	12 30       	cpi	r17, 0x02	; 2
     368:	60 f4       	brcc	.+24     	; 0x382 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type+0x11a>
     36a:	c3 01       	movw	r24, r6
     36c:	c3 de       	rcall	.-634    	; 0xf4 <_ZN7HD4478012SelectDeviceEv>
     36e:	c3 01       	movw	r24, r6
     370:	c6 de       	rcall	.-628    	; 0xfe <_ZN7HD447809LatchDataEv>
     372:	8f e0       	ldi	r24, 0x0F	; 15
     374:	97 e2       	ldi	r25, 0x27	; 39
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type+0x10e>
     37a:	00 c0       	rjmp	.+0      	; 0x37c <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type+0x114>
     37c:	00 00       	nop
     37e:	1f 5f       	subi	r17, 0xFF	; 255
     380:	f2 cf       	rjmp	.-28     	; 0x366 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type+0xfe>
     382:	d3 01       	movw	r26, r6
     384:	16 96       	adiw	r26, 0x06	; 6
     386:	8d 91       	ld	r24, X+
     388:	9c 91       	ld	r25, X
     38a:	17 97       	sbiw	r26, 0x07	; 7
     38c:	a2 d2       	rcall	.+1348   	; 0x8d2 <_ZN4Port5ClearEv>
     38e:	c3 01       	movw	r24, r6
     390:	b1 de       	rcall	.-670    	; 0xf4 <_ZN7HD4478012SelectDeviceEv>
     392:	c3 01       	movw	r24, r6
     394:	b4 de       	rcall	.-664    	; 0xfe <_ZN7HD447809LatchDataEv>
     396:	e7 ec       	ldi	r30, 0xC7	; 199
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	31 97       	sbiw	r30, 0x01	; 1
     39c:	f1 f7       	brne	.-4      	; 0x39a <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type+0x132>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type+0x138>
     3a0:	00 00       	nop
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	68 e2       	ldi	r22, 0x28	; 40
     3a6:	c3 01       	movw	r24, r6
     3a8:	fe de       	rcall	.-516    	; 0x1a6 <_ZN7HD447808SendByteEc16HD44780_DataType>
     3aa:	c3 01       	movw	r24, r6
     3ac:	55 df       	rcall	.-342    	; 0x258 <_ZN7HD447803OffEv>
     3ae:	c3 01       	movw	r24, r6
     3b0:	57 df       	rcall	.-338    	; 0x260 <_ZN7HD447805ClearEv>
     3b2:	41 e0       	ldi	r20, 0x01	; 1
     3b4:	66 e0       	ldi	r22, 0x06	; 6
     3b6:	c3 01       	movw	r24, r6
     3b8:	f6 de       	rcall	.-532    	; 0x1a6 <_ZN7HD447808SendByteEc16HD44780_DataType>
     3ba:	c3 01       	movw	r24, r6
     3bc:	49 df       	rcall	.-366    	; 0x250 <_ZN7HD447802OnEv>
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	0f 91       	pop	r16
     3c6:	ff 90       	pop	r15
     3c8:	ef 90       	pop	r14
     3ca:	df 90       	pop	r13
     3cc:	cf 90       	pop	r12
     3ce:	bf 90       	pop	r11
     3d0:	af 90       	pop	r10
     3d2:	9f 90       	pop	r9
     3d4:	8f 90       	pop	r8
     3d6:	7f 90       	pop	r7
     3d8:	6f 90       	pop	r6
     3da:	5f 90       	pop	r5
     3dc:	4f 90       	pop	r4
     3de:	3f 90       	pop	r3
     3e0:	2f 90       	pop	r2
     3e2:	08 95       	ret

000003e4 <_ZN7HD4478017SetCursorPositionEhh>:
	}
}

void HD44780::SetCursorPosition(uint8_t slot, uint8_t line)
{
	if(line > 1)
     3e4:	42 30       	cpi	r20, 0x02	; 2
     3e6:	20 f0       	brcs	.+8      	; 0x3f0 <_ZN7HD4478017SetCursorPositionEhh+0xc>
	{
		line %= 2;
     3e8:	41 70       	andi	r20, 0x01	; 1
		slot += this->symbols;
     3ea:	fc 01       	movw	r30, r24
     3ec:	26 85       	ldd	r18, Z+14	; 0x0e
     3ee:	62 0f       	add	r22, r18
	}
	
	uint8_t adress = 0x40 * line;
	adress += slot;
     3f0:	f0 e4       	ldi	r31, 0x40	; 64
     3f2:	4f 9f       	mul	r20, r31
     3f4:	60 0d       	add	r22, r0
     3f6:	11 24       	eor	r1, r1
	adress |= 0x80;
     3f8:	60 68       	ori	r22, 0x80	; 128
	SendByte(adress, LCD_Command);
     3fa:	41 e0       	ldi	r20, 0x01	; 1
     3fc:	d4 de       	rcall	.-600    	; 0x1a6 <_ZN7HD447808SendByteEc16HD44780_DataType>
     3fe:	08 95       	ret

00000400 <_ZN7HD4478014CursorOversideEhh>:
}

bool HD44780::CursorOverside(uint8_t slot, uint8_t line)
{
	return (slot >= this->symbols) || (line >= this->lines);
     400:	fc 01       	movw	r30, r24
     402:	26 85       	ldd	r18, Z+14	; 0x0e
     404:	62 17       	cp	r22, r18
     406:	28 f4       	brcc	.+10     	; 0x412 <_ZN7HD4478014CursorOversideEhh+0x12>
     408:	87 85       	ldd	r24, Z+15	; 0x0f
     40a:	48 17       	cp	r20, r24
     40c:	20 f0       	brcs	.+8      	; 0x416 <_ZN7HD4478014CursorOversideEhh+0x16>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	08 95       	ret
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	08 95       	ret
     416:	80 e0       	ldi	r24, 0x00	; 0
}
     418:	08 95       	ret

0000041a <_ZN7HD4478015NormaliseLengthERhh>:

void HD44780::NormaliseLength(uint8_t &length, uint8_t slot)
{
	uint8_t *_length = (uint8_t *)&length;
	*_length = slot + *_length <= this->symbols ? *_length : this->symbols - slot;
     41a:	fb 01       	movw	r30, r22
     41c:	50 81       	ld	r21, Z
     41e:	25 2f       	mov	r18, r21
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	24 0f       	add	r18, r20
     424:	31 1d       	adc	r19, r1
     426:	fc 01       	movw	r30, r24
     428:	86 85       	ldd	r24, Z+14	; 0x0e
     42a:	e8 2f       	mov	r30, r24
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	e2 17       	cp	r30, r18
     430:	f3 07       	cpc	r31, r19
     432:	14 f4       	brge	.+4      	; 0x438 <_ZN7HD4478015NormaliseLengthERhh+0x1e>
     434:	58 2f       	mov	r21, r24
     436:	54 1b       	sub	r21, r20
     438:	fb 01       	movw	r30, r22
     43a:	50 83       	st	Z, r21
     43c:	08 95       	ret

0000043e <_ZN7HD447809ClearAreaEhhh>:
{
	SendByte(0b00000001, LCD_Command);
}

void HD44780::ClearArea(uint8_t length, uint8_t slot, uint8_t line)
{
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	0f 93       	push	r16
     444:	1f 93       	push	r17
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	1f 92       	push	r1
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	7c 01       	movw	r14, r24
     452:	69 83       	std	Y+1, r22	; 0x01
     454:	14 2f       	mov	r17, r20
     456:	02 2f       	mov	r16, r18
	if(CursorOverside(slot, line)) return;
     458:	42 2f       	mov	r20, r18
     45a:	61 2f       	mov	r22, r17
     45c:	d1 df       	rcall	.-94     	; 0x400 <_ZN7HD4478014CursorOversideEhh>
     45e:	81 11       	cpse	r24, r1
     460:	14 c0       	rjmp	.+40     	; 0x48a <__stack+0x2b>
	SetCursorPosition(slot, line);	
     462:	40 2f       	mov	r20, r16
     464:	61 2f       	mov	r22, r17
     466:	c7 01       	movw	r24, r14
     468:	bd df       	rcall	.-134    	; 0x3e4 <_ZN7HD4478017SetCursorPositionEhh>
	
	NormaliseLength(length, slot);
     46a:	41 2f       	mov	r20, r17
     46c:	be 01       	movw	r22, r28
     46e:	6f 5f       	subi	r22, 0xFF	; 255
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	c7 01       	movw	r24, r14
     474:	d2 df       	rcall	.-92     	; 0x41a <_ZN7HD4478015NormaliseLengthERhh>
	for(uint8_t i = 0; i < length; i++) SendByte(' ', LCD_Data);
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	18 17       	cp	r17, r24
     47c:	30 f4       	brcc	.+12     	; 0x48a <__stack+0x2b>
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	60 e2       	ldi	r22, 0x20	; 32
     482:	c7 01       	movw	r24, r14
     484:	90 de       	rcall	.-736    	; 0x1a6 <_ZN7HD447808SendByteEc16HD44780_DataType>
     486:	1f 5f       	subi	r17, 0xFF	; 255
     488:	f7 cf       	rjmp	.-18     	; 0x478 <__stack+0x19>
}
     48a:	0f 90       	pop	r0
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	08 95       	ret

0000049a <_ZN7HD447805PrintEPKchh>:
		SendByte(symbol[i], LCD_Data);
	}
}

void HD44780::Print(const char *text, uint8_t slot, uint8_t line)
{
     49a:	af 92       	push	r10
     49c:	bf 92       	push	r11
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	1f 92       	push	r1
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	5c 01       	movw	r10, r24
     4b4:	8b 01       	movw	r16, r22
     4b6:	f4 2e       	mov	r15, r20
     4b8:	d2 2e       	mov	r13, r18
	if(CursorOverside(slot, line)) return;
     4ba:	42 2f       	mov	r20, r18
     4bc:	6f 2d       	mov	r22, r15
     4be:	a0 df       	rcall	.-192    	; 0x400 <_ZN7HD4478014CursorOversideEhh>
     4c0:	81 11       	cpse	r24, r1
     4c2:	22 c0       	rjmp	.+68     	; 0x508 <_ZN7HD447805PrintEPKchh+0x6e>
	SetCursorPosition(slot, line);
     4c4:	4d 2d       	mov	r20, r13
     4c6:	6f 2d       	mov	r22, r15
     4c8:	c5 01       	movw	r24, r10
     4ca:	8c df       	rcall	.-232    	; 0x3e4 <_ZN7HD4478017SetCursorPositionEhh>
	
	uint8_t length = strlen(text);
     4cc:	f8 01       	movw	r30, r16
     4ce:	01 90       	ld	r0, Z+
     4d0:	00 20       	and	r0, r0
     4d2:	e9 f7       	brne	.-6      	; 0x4ce <_ZN7HD447805PrintEPKchh+0x34>
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	e0 1b       	sub	r30, r16
     4d8:	f1 0b       	sbc	r31, r17
     4da:	e9 83       	std	Y+1, r30	; 0x01
	NormaliseLength(length, slot);
     4dc:	4f 2d       	mov	r20, r15
     4de:	be 01       	movw	r22, r28
     4e0:	6f 5f       	subi	r22, 0xFF	; 255
     4e2:	7f 4f       	sbci	r23, 0xFF	; 255
     4e4:	c5 01       	movw	r24, r10
     4e6:	99 df       	rcall	.-206    	; 0x41a <_ZN7HD4478015NormaliseLengthERhh>
	for(uint8_t i = 0; i < length; i++)
     4e8:	f1 2c       	mov	r15, r1
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	f8 16       	cp	r15, r24
     4ee:	60 f4       	brcc	.+24     	; 0x508 <_ZN7HD447805PrintEPKchh+0x6e>
	{
		SendByte(*text++, LCD_Data);
     4f0:	68 01       	movw	r12, r16
     4f2:	8f ef       	ldi	r24, 0xFF	; 255
     4f4:	c8 1a       	sub	r12, r24
     4f6:	d8 0a       	sbc	r13, r24
     4f8:	f8 01       	movw	r30, r16
     4fa:	60 81       	ld	r22, Z
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	c5 01       	movw	r24, r10
     500:	52 de       	rcall	.-860    	; 0x1a6 <_ZN7HD447808SendByteEc16HD44780_DataType>
	if(CursorOverside(slot, line)) return;
	SetCursorPosition(slot, line);
	
	uint8_t length = strlen(text);
	NormaliseLength(length, slot);
	for(uint8_t i = 0; i < length; i++)
     502:	f3 94       	inc	r15
	{
		SendByte(*text++, LCD_Data);
     504:	86 01       	movw	r16, r12
	if(CursorOverside(slot, line)) return;
	SetCursorPosition(slot, line);
	
	uint8_t length = strlen(text);
	NormaliseLength(length, slot);
	for(uint8_t i = 0; i < length; i++)
     506:	f1 cf       	rjmp	.-30     	; 0x4ea <_ZN7HD447805PrintEPKchh+0x50>
	{
		SendByte(*text++, LCD_Data);
	}
}
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	df 90       	pop	r13
     516:	cf 90       	pop	r12
     518:	bf 90       	pop	r11
     51a:	af 90       	pop	r10
     51c:	08 95       	ret

0000051e <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment>:

void HD44780::PrintAlignment(const char* text, uint8_t line, HD44780_Alignment alignment)
{
     51e:	54 2f       	mov	r21, r20
	uint8_t slot = 0;
	
	switch(alignment)
     520:	21 30       	cpi	r18, 0x01	; 1
     522:	19 f0       	breq	.+6      	; 0x52a <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0xc>
     524:	22 30       	cpi	r18, 0x02	; 2
     526:	69 f0       	breq	.+26     	; 0x542 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x24>
     528:	1c c0       	rjmp	.+56     	; 0x562 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x44>
			slot = 0;
		}break;
		
		case RIGHT_SIDE:
		{
			slot = this->symbols - strlen(text);
     52a:	fc 01       	movw	r30, r24
     52c:	26 85       	ldd	r18, Z+14	; 0x0e
     52e:	fb 01       	movw	r30, r22
     530:	01 90       	ld	r0, Z+
     532:	00 20       	and	r0, r0
     534:	e9 f7       	brne	.-6      	; 0x530 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x12>
     536:	31 97       	sbiw	r30, 0x01	; 1
     538:	e6 1b       	sub	r30, r22
     53a:	f7 0b       	sbc	r31, r23
     53c:	42 2f       	mov	r20, r18
     53e:	4e 1b       	sub	r20, r30
		}break;
     540:	11 c0       	rjmp	.+34     	; 0x564 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x46>
		
		case CENTER_SCREEN:
		{
			slot = (this->symbols - strlen(text)) / 2;
     542:	fc 01       	movw	r30, r24
     544:	26 85       	ldd	r18, Z+14	; 0x0e
     546:	fb 01       	movw	r30, r22
     548:	01 90       	ld	r0, Z+
     54a:	00 20       	and	r0, r0
     54c:	e9 f7       	brne	.-6      	; 0x548 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x2a>
     54e:	31 97       	sbiw	r30, 0x01	; 1
     550:	e6 1b       	sub	r30, r22
     552:	f7 0b       	sbc	r31, r23
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	2e 1b       	sub	r18, r30
     558:	3f 0b       	sbc	r19, r31
     55a:	36 95       	lsr	r19
     55c:	27 95       	ror	r18
     55e:	42 2f       	mov	r20, r18
		}break;
     560:	01 c0       	rjmp	.+2      	; 0x564 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x46>
	}
}

void HD44780::PrintAlignment(const char* text, uint8_t line, HD44780_Alignment alignment)
{
	uint8_t slot = 0;
     562:	40 e0       	ldi	r20, 0x00	; 0
		{
			slot = (this->symbols - strlen(text)) / 2;
		}break;
	}
	
	Print(text, slot, line);
     564:	25 2f       	mov	r18, r21
     566:	99 df       	rcall	.-206    	; 0x49a <_ZN7HD447805PrintEPKchh>
     568:	08 95       	ret

0000056a <__vector_9>:
bool allowedMeasuring = false;
uint16_t displayedValue1 = 0;
uint16_t displayedValue2 = 0;

ISR(TIMER0_OVF_vect)
{
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	8f 93       	push	r24
	if(!allowedMeasuring) allowedMeasuring = true;
     576:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <allowedMeasuring>
     57a:	81 11       	cpse	r24, r1
     57c:	03 c0       	rjmp	.+6      	; 0x584 <__vector_9+0x1a>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <allowedMeasuring>
}
     584:	8f 91       	pop	r24
     586:	0f 90       	pop	r0
     588:	0f be       	out	0x3f, r0	; 63
     58a:	0f 90       	pop	r0
     58c:	1f 90       	pop	r1
     58e:	18 95       	reti

00000590 <_Z11PrintResultP7HD44780hj>:

void PrintResult(HD44780 *lcd, uint8_t line, uint16_t result)
{	
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	8c 01       	movw	r16, r24
     59c:	f6 2e       	mov	r15, r22
     59e:	ea 01       	movw	r28, r20
	lcd->ClearArea(5, 0, line);
     5a0:	26 2f       	mov	r18, r22
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	65 e0       	ldi	r22, 0x05	; 5
     5a6:	4b df       	rcall	.-362    	; 0x43e <_ZN7HD447809ClearAreaEhhh>
	
	const char* txt = StringHandler::FloatToString(result, 0);
     5a8:	be 01       	movw	r22, r28
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	d4 d3       	rcall	.+1960   	; 0xd58 <__floatunsisf>
     5b0:	40 e0       	ldi	r20, 0x00	; 0
     5b2:	23 d2       	rcall	.+1094   	; 0x9fa <_ZN13StringHandler13FloatToStringEfh>
     5b4:	ec 01       	movw	r28, r24
	
	lcd->PrintAlignment(txt, line, LEFT_SIDE);
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	4f 2d       	mov	r20, r15
     5ba:	bc 01       	movw	r22, r24
     5bc:	c8 01       	movw	r24, r16
     5be:	af df       	rcall	.-162    	; 0x51e <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment>
	
	free((char*)txt);
     5c0:	ce 01       	movw	r24, r28
     5c2:	ad d7       	rcall	.+3930   	; 0x151e <free>
	txt = nullptr;	
}
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	ff 90       	pop	r15
     5ce:	08 95       	ret

000005d0 <main>:

int main(void)
{
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <main+0x6>
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <main+0x8>
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
	Port *rs = new Port(&PORTD, &DDRD, &PIND, 0);
     5dc:	87 e0       	ldi	r24, 0x07	; 7
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	b0 d1       	rcall	.+864    	; 0x942 <_ZN4PortnwEj>
     5e2:	3c 01       	movw	r6, r24
     5e4:	00 e0       	ldi	r16, 0x00	; 0
     5e6:	20 e3       	ldi	r18, 0x30	; 48
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	41 e3       	ldi	r20, 0x31	; 49
     5ec:	50 e0       	ldi	r21, 0x00	; 0
     5ee:	62 e3       	ldi	r22, 0x32	; 50
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	83 d1       	rcall	.+774    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	Port *rw = new Port(&PORTD, &DDRD, &PIND, 1);
     5f4:	87 e0       	ldi	r24, 0x07	; 7
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	a4 d1       	rcall	.+840    	; 0x942 <_ZN4PortnwEj>
     5fa:	2c 01       	movw	r4, r24
     5fc:	01 e0       	ldi	r16, 0x01	; 1
     5fe:	20 e3       	ldi	r18, 0x30	; 48
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	41 e3       	ldi	r20, 0x31	; 49
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	62 e3       	ldi	r22, 0x32	; 50
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	77 d1       	rcall	.+750    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	Port *e = new Port(&PORTD, &DDRD, &PIND, 2);
     60c:	87 e0       	ldi	r24, 0x07	; 7
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	98 d1       	rcall	.+816    	; 0x942 <_ZN4PortnwEj>
     612:	1c 01       	movw	r2, r24
     614:	02 e0       	ldi	r16, 0x02	; 2
     616:	20 e3       	ldi	r18, 0x30	; 48
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	41 e3       	ldi	r20, 0x31	; 49
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	62 e3       	ldi	r22, 0x32	; 50
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	6b d1       	rcall	.+726    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	Port *d4 = new Port(&PORTD, &DDRD, &PIND, 3);
     624:	87 e0       	ldi	r24, 0x07	; 7
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	8c d1       	rcall	.+792    	; 0x942 <_ZN4PortnwEj>
     62a:	9a 83       	std	Y+2, r25	; 0x02
     62c:	89 83       	std	Y+1, r24	; 0x01
     62e:	03 e0       	ldi	r16, 0x03	; 3
     630:	20 e3       	ldi	r18, 0x30	; 48
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	41 e3       	ldi	r20, 0x31	; 49
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	62 e3       	ldi	r22, 0x32	; 50
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	5e d1       	rcall	.+700    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	Port *d5 = new Port(&PORTD, &DDRD, &PIND, 4);
     63e:	87 e0       	ldi	r24, 0x07	; 7
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	7f d1       	rcall	.+766    	; 0x942 <_ZN4PortnwEj>
     644:	7c 01       	movw	r14, r24
     646:	04 e0       	ldi	r16, 0x04	; 4
     648:	20 e3       	ldi	r18, 0x30	; 48
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	41 e3       	ldi	r20, 0x31	; 49
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	62 e3       	ldi	r22, 0x32	; 50
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	52 d1       	rcall	.+676    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	Port *d6 = new Port(&PORTD, &DDRD, &PIND, 5);
     656:	87 e0       	ldi	r24, 0x07	; 7
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	73 d1       	rcall	.+742    	; 0x942 <_ZN4PortnwEj>
     65c:	6c 01       	movw	r12, r24
     65e:	05 e0       	ldi	r16, 0x05	; 5
     660:	20 e3       	ldi	r18, 0x30	; 48
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	41 e3       	ldi	r20, 0x31	; 49
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	62 e3       	ldi	r22, 0x32	; 50
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	46 d1       	rcall	.+652    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	Port *d7 = new Port(&PORTD, &DDRD, &PIND, 6);
     66e:	87 e0       	ldi	r24, 0x07	; 7
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	67 d1       	rcall	.+718    	; 0x942 <_ZN4PortnwEj>
     674:	5c 01       	movw	r10, r24
     676:	06 e0       	ldi	r16, 0x06	; 6
     678:	20 e3       	ldi	r18, 0x30	; 48
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	41 e3       	ldi	r20, 0x31	; 49
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	62 e3       	ldi	r22, 0x32	; 50
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	3a d1       	rcall	.+628    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	
	HD44780 *lcd = new HD44780(rs, rw, e, d4, d5, d6, d7, WH1602);
     686:	80 e1       	ldi	r24, 0x10	; 16
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	2a dd       	rcall	.-1452   	; 0xe0 <_ZN7HD44780nwEj>
     68c:	9c 83       	std	Y+4, r25	; 0x04
     68e:	8b 83       	std	Y+3, r24	; 0x03
     690:	0f 2e       	mov	r0, r31
     692:	f2 e4       	ldi	r31, 0x42	; 66
     694:	8f 2e       	mov	r8, r31
     696:	f6 e0       	ldi	r31, 0x06	; 6
     698:	9f 2e       	mov	r9, r31
     69a:	f0 2d       	mov	r31, r0
     69c:	09 81       	ldd	r16, Y+1	; 0x01
     69e:	1a 81       	ldd	r17, Y+2	; 0x02
     6a0:	91 01       	movw	r18, r2
     6a2:	a2 01       	movw	r20, r4
     6a4:	b3 01       	movw	r22, r6
     6a6:	e0 dd       	rcall	.-1088   	; 0x268 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type>
	
	Port *sck = new Port(&PORTB, &DDRB, &PINB, 5);
     6a8:	87 e0       	ldi	r24, 0x07	; 7
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	4a d1       	rcall	.+660    	; 0x942 <_ZN4PortnwEj>
     6ae:	4c 01       	movw	r8, r24
     6b0:	05 e0       	ldi	r16, 0x05	; 5
     6b2:	26 e3       	ldi	r18, 0x36	; 54
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	47 e3       	ldi	r20, 0x37	; 55
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	68 e3       	ldi	r22, 0x38	; 56
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	1d d1       	rcall	.+570    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	Port *mosi = new Port(&PORTB, &DDRB, &PINB, 3);
     6c0:	87 e0       	ldi	r24, 0x07	; 7
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	3e d1       	rcall	.+636    	; 0x942 <_ZN4PortnwEj>
     6c6:	6c 01       	movw	r12, r24
     6c8:	03 e0       	ldi	r16, 0x03	; 3
     6ca:	26 e3       	ldi	r18, 0x36	; 54
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	47 e3       	ldi	r20, 0x37	; 55
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	68 e3       	ldi	r22, 0x38	; 56
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	11 d1       	rcall	.+546    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	Port *miso = new Port(&PORTB, &DDRB, &PINB, 4);
     6d8:	87 e0       	ldi	r24, 0x07	; 7
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	32 d1       	rcall	.+612    	; 0x942 <_ZN4PortnwEj>
     6de:	5c 01       	movw	r10, r24
     6e0:	04 e0       	ldi	r16, 0x04	; 4
     6e2:	26 e3       	ldi	r18, 0x36	; 54
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	47 e3       	ldi	r20, 0x37	; 55
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	68 e3       	ldi	r22, 0x38	; 56
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	05 d1       	rcall	.+522    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	Port *ss = new Port(&PORTB, &DDRB, &PINB, 2);
     6f0:	87 e0       	ldi	r24, 0x07	; 7
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	26 d1       	rcall	.+588    	; 0x942 <_ZN4PortnwEj>
     6f6:	3c 01       	movw	r6, r24
     6f8:	02 e0       	ldi	r16, 0x02	; 2
     6fa:	26 e3       	ldi	r18, 0x36	; 54
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	47 e3       	ldi	r20, 0x37	; 55
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	68 e3       	ldi	r22, 0x38	; 56
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	f9 d0       	rcall	.+498    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	
	SPI_Master *spi = new SPI_Master(sck, mosi, miso, ss);
     708:	88 e0       	ldi	r24, 0x08	; 8
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	6c d1       	rcall	.+728    	; 0x9e6 <_ZN10SPI_MasternwEj>
     70e:	7c 01       	movw	r14, r24
     710:	83 01       	movw	r16, r6
     712:	95 01       	movw	r18, r10
     714:	a6 01       	movw	r20, r12
     716:	b4 01       	movw	r22, r8
     718:	1e d1       	rcall	.+572    	; 0x956 <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>
	
	Port *cs = new Port(&PORTB, &DDRB, &PINB, 0);
     71a:	87 e0       	ldi	r24, 0x07	; 7
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	11 d1       	rcall	.+546    	; 0x942 <_ZN4PortnwEj>
     720:	4c 01       	movw	r8, r24
     722:	00 e0       	ldi	r16, 0x00	; 0
     724:	26 e3       	ldi	r18, 0x36	; 54
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	47 e3       	ldi	r20, 0x37	; 55
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	68 e3       	ldi	r22, 0x38	; 56
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	e4 d0       	rcall	.+456    	; 0x8fa <_ZN4PortC1EPVhS1_S1_h>
	
	MCP3202 *adc1 = new MCP3202(cs, 0);
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	89 d0       	rcall	.+274    	; 0x84a <_ZN7MCP3202nwEj>
     738:	5c 01       	movw	r10, r24
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	b4 01       	movw	r22, r8
     73e:	3b d0       	rcall	.+118    	; 0x7b6 <_ZN7MCP3202C1EP4Porth>
	MCP3202 *adc2 = new MCP3202(cs, 1);
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	82 d0       	rcall	.+260    	; 0x84a <_ZN7MCP3202nwEj>
     746:	6c 01       	movw	r12, r24
     748:	41 e0       	ldi	r20, 0x01	; 1
     74a:	b4 01       	movw	r22, r8
     74c:	34 d0       	rcall	.+104    	; 0x7b6 <_ZN7MCP3202C1EP4Porth>
	
	//T0
	TCCR0|=(1<<CS02)|(1<<CS00);	//prescaler 1024
     74e:	83 b7       	in	r24, 0x33	; 51
     750:	85 60       	ori	r24, 0x05	; 5
     752:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0);			//enable interrupt OVF
     754:	89 b7       	in	r24, 0x39	; 57
     756:	81 60       	ori	r24, 0x01	; 1
     758:	89 bf       	out	0x39, r24	; 57
	
	sei();
     75a:	78 94       	sei
	
	/* Replace with your application code */
	while (1)
	{
		if(allowedMeasuring)
     75c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <allowedMeasuring>
     760:	88 23       	and	r24, r24
     762:	e1 f3       	breq	.-8      	; 0x75c <main+0x18c>
		{
			allowedMeasuring = false;
     764:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <allowedMeasuring>
			
			uint16_t measuredValue1 = adc1->GetResult(spi);			
     768:	b7 01       	movw	r22, r14
     76a:	c5 01       	movw	r24, r10
     76c:	32 d0       	rcall	.+100    	; 0x7d2 <_ZN7MCP32029GetResultEP10SPI_Master>
			
			if(measuredValue1 != displayedValue1)
     76e:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <displayedValue1>
     772:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <displayedValue1+0x1>
     776:	82 17       	cp	r24, r18
     778:	93 07       	cpc	r25, r19
     77a:	49 f0       	breq	.+18     	; 0x78e <main+0x1be>
			{
				displayedValue1 = measuredValue1;
     77c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <displayedValue1+0x1>
     780:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <displayedValue1>
				
				PrintResult(lcd, 0, measuredValue1);
     784:	ac 01       	movw	r20, r24
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	9c 81       	ldd	r25, Y+4	; 0x04
     78c:	01 df       	rcall	.-510    	; 0x590 <_Z11PrintResultP7HD44780hj>
			}
			
			uint16_t measuredValue2 = adc2->GetResult(spi);
     78e:	b7 01       	movw	r22, r14
     790:	c6 01       	movw	r24, r12
     792:	1f d0       	rcall	.+62     	; 0x7d2 <_ZN7MCP32029GetResultEP10SPI_Master>
			
			if(measuredValue2 != displayedValue2)
     794:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
     798:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <__data_end+0x1>
     79c:	82 17       	cp	r24, r18
     79e:	93 07       	cpc	r25, r19
     7a0:	e9 f2       	breq	.-70     	; 0x75c <main+0x18c>
			{
				displayedValue2 = measuredValue2;	
     7a2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
     7a6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
				
				PrintResult(lcd, 1, measuredValue2);
     7aa:	ac 01       	movw	r20, r24
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	9c 81       	ldd	r25, Y+4	; 0x04
     7b2:	ee de       	rcall	.-548    	; 0x590 <_Z11PrintResultP7HD44780hj>
     7b4:	d3 cf       	rjmp	.-90     	; 0x75c <main+0x18c>

000007b6 <_ZN7MCP3202C1EP4Porth>:
	this->CS->Set();												//Deactivate chip
	
	return result;	
}

MCP3202::~MCP3202(){}
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ec 01       	movw	r28, r24
     7bc:	cb 01       	movw	r24, r22
     7be:	48 83       	st	Y, r20
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	69 83       	std	Y+1, r22	; 0x01
     7c4:	61 d0       	rcall	.+194    	; 0x888 <_ZN4Port11SetAsOutputEv>
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ca:	71 d0       	rcall	.+226    	; 0x8ae <_ZN4Port3SetEv>
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <_ZN7MCP32029GetResultEP10SPI_Master>:
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	8c 01       	movw	r16, r24
     7e0:	7b 01       	movw	r14, r22
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	c7 01       	movw	r24, r14
     7e8:	d9 d0       	rcall	.+434    	; 0x99c <_ZN10SPI_Master7SetModeE12SPI_Polarity9SPI_Phase>
     7ea:	f8 01       	movw	r30, r16
     7ec:	81 81       	ldd	r24, Z+1	; 0x01
     7ee:	92 81       	ldd	r25, Z+2	; 0x02
     7f0:	70 d0       	rcall	.+224    	; 0x8d2 <_ZN4Port5ClearEv>
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	c7 01       	movw	r24, r14
     7f6:	f1 d0       	rcall	.+482    	; 0x9da <_ZN10SPI_Master8SendByteEh>
     7f8:	f8 01       	movw	r30, r16
     7fa:	60 81       	ld	r22, Z
     7fc:	f0 e4       	ldi	r31, 0x40	; 64
     7fe:	6f 9f       	mul	r22, r31
     800:	b0 01       	movw	r22, r0
     802:	11 24       	eor	r1, r1
     804:	60 6a       	ori	r22, 0xA0	; 160
     806:	c7 01       	movw	r24, r14
     808:	e8 d0       	rcall	.+464    	; 0x9da <_ZN10SPI_Master8SendByteEh>
     80a:	c7 01       	movw	r24, r14
     80c:	ea d0       	rcall	.+468    	; 0x9e2 <_ZN10SPI_Master11ReceiveByteEv>
     80e:	c8 2f       	mov	r28, r24
     810:	d0 e0       	ldi	r29, 0x00	; 0
     812:	dc 2f       	mov	r29, r28
     814:	cc 27       	eor	r28, r28
     816:	d2 95       	swap	r29
     818:	d0 7f       	andi	r29, 0xF0	; 240
     81a:	d2 95       	swap	r29
     81c:	c2 95       	swap	r28
     81e:	cf 70       	andi	r28, 0x0F	; 15
     820:	cd 27       	eor	r28, r29
     822:	df 70       	andi	r29, 0x0F	; 15
     824:	cd 27       	eor	r28, r29
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	c7 01       	movw	r24, r14
     82a:	d7 d0       	rcall	.+430    	; 0x9da <_ZN10SPI_Master8SendByteEh>
     82c:	c7 01       	movw	r24, r14
     82e:	d9 d0       	rcall	.+434    	; 0x9e2 <_ZN10SPI_Master11ReceiveByteEv>
     830:	c8 2b       	or	r28, r24
     832:	f8 01       	movw	r30, r16
     834:	81 81       	ldd	r24, Z+1	; 0x01
     836:	92 81       	ldd	r25, Z+2	; 0x02
     838:	3a d0       	rcall	.+116    	; 0x8ae <_ZN4Port3SetEv>
     83a:	ce 01       	movw	r24, r28
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	08 95       	ret

0000084a <_ZN7MCP3202nwEj>:

void* MCP3202::operator new(size_t size)
{
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     850:	ce 01       	movw	r24, r28
     852:	cd d5       	rcall	.+2970   	; 0x13ee <malloc>
	}while(ptr == nullptr);
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	e1 f3       	breq	.-8      	; 0x850 <_ZN7MCP3202nwEj+0x6>
	
	return ptr;
}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN4Port10SetAsInputEv>:
bool Port::IsClear()
{
	return !(*this->PIN & (1<<this->pinNum));
}

Port::~Port(){}
     85e:	dc 01       	movw	r26, r24
     860:	12 96       	adiw	r26, 0x02	; 2
     862:	ed 91       	ld	r30, X+
     864:	fc 91       	ld	r31, X
     866:	13 97       	sbiw	r26, 0x03	; 3
     868:	40 81       	ld	r20, Z
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	b9 01       	movw	r22, r18
     870:	16 96       	adiw	r26, 0x06	; 6
     872:	0c 90       	ld	r0, X
     874:	02 c0       	rjmp	.+4      	; 0x87a <_ZN4Port10SetAsInputEv+0x1c>
     876:	66 0f       	add	r22, r22
     878:	77 1f       	adc	r23, r23
     87a:	0a 94       	dec	r0
     87c:	e2 f7       	brpl	.-8      	; 0x876 <_ZN4Port10SetAsInputEv+0x18>
     87e:	cb 01       	movw	r24, r22
     880:	80 95       	com	r24
     882:	84 23       	and	r24, r20
     884:	80 83       	st	Z, r24
     886:	08 95       	ret

00000888 <_ZN4Port11SetAsOutputEv>:
     888:	dc 01       	movw	r26, r24
     88a:	12 96       	adiw	r26, 0x02	; 2
     88c:	ed 91       	ld	r30, X+
     88e:	fc 91       	ld	r31, X
     890:	13 97       	sbiw	r26, 0x03	; 3
     892:	40 81       	ld	r20, Z
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	c9 01       	movw	r24, r18
     89a:	16 96       	adiw	r26, 0x06	; 6
     89c:	0c 90       	ld	r0, X
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <_ZN4Port11SetAsOutputEv+0x1c>
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	0a 94       	dec	r0
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <_ZN4Port11SetAsOutputEv+0x18>
     8a8:	84 2b       	or	r24, r20
     8aa:	80 83       	st	Z, r24
     8ac:	08 95       	ret

000008ae <_ZN4Port3SetEv>:
     8ae:	dc 01       	movw	r26, r24
     8b0:	ed 91       	ld	r30, X+
     8b2:	fc 91       	ld	r31, X
     8b4:	11 97       	sbiw	r26, 0x01	; 1
     8b6:	40 81       	ld	r20, Z
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	c9 01       	movw	r24, r18
     8be:	16 96       	adiw	r26, 0x06	; 6
     8c0:	0c 90       	ld	r0, X
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <_ZN4Port3SetEv+0x1a>
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	0a 94       	dec	r0
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <_ZN4Port3SetEv+0x16>
     8cc:	84 2b       	or	r24, r20
     8ce:	80 83       	st	Z, r24
     8d0:	08 95       	ret

000008d2 <_ZN4Port5ClearEv>:
     8d2:	dc 01       	movw	r26, r24
     8d4:	ed 91       	ld	r30, X+
     8d6:	fc 91       	ld	r31, X
     8d8:	11 97       	sbiw	r26, 0x01	; 1
     8da:	40 81       	ld	r20, Z
     8dc:	21 e0       	ldi	r18, 0x01	; 1
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	b9 01       	movw	r22, r18
     8e2:	16 96       	adiw	r26, 0x06	; 6
     8e4:	0c 90       	ld	r0, X
     8e6:	02 c0       	rjmp	.+4      	; 0x8ec <_ZN4Port5ClearEv+0x1a>
     8e8:	66 0f       	add	r22, r22
     8ea:	77 1f       	adc	r23, r23
     8ec:	0a 94       	dec	r0
     8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <_ZN4Port5ClearEv+0x16>
     8f0:	cb 01       	movw	r24, r22
     8f2:	80 95       	com	r24
     8f4:	84 23       	and	r24, r20
     8f6:	80 83       	st	Z, r24
     8f8:	08 95       	ret

000008fa <_ZN4PortC1EPVhS1_S1_h>:
     8fa:	0f 93       	push	r16
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24
     902:	79 83       	std	Y+1, r23	; 0x01
     904:	68 83       	st	Y, r22
     906:	5b 83       	std	Y+3, r21	; 0x03
     908:	4a 83       	std	Y+2, r20	; 0x02
     90a:	3d 83       	std	Y+5, r19	; 0x05
     90c:	2c 83       	std	Y+4, r18	; 0x04
     90e:	0e 83       	std	Y+6, r16	; 0x06
     910:	a6 df       	rcall	.-180    	; 0x85e <_ZN4Port10SetAsInputEv>
     912:	ce 01       	movw	r24, r28
     914:	de df       	rcall	.-68     	; 0x8d2 <_ZN4Port5ClearEv>
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	0f 91       	pop	r16
     91c:	08 95       	ret

0000091e <_ZN4Port5IsSetEv>:
     91e:	dc 01       	movw	r26, r24
     920:	14 96       	adiw	r26, 0x04	; 4
     922:	ed 91       	ld	r30, X+
     924:	fc 91       	ld	r31, X
     926:	15 97       	sbiw	r26, 0x05	; 5
     928:	20 81       	ld	r18, Z
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	f9 01       	movw	r30, r18
     92e:	16 96       	adiw	r26, 0x06	; 6
     930:	0c 90       	ld	r0, X
     932:	02 c0       	rjmp	.+4      	; 0x938 <_ZN4Port5IsSetEv+0x1a>
     934:	f5 95       	asr	r31
     936:	e7 95       	ror	r30
     938:	0a 94       	dec	r0
     93a:	e2 f7       	brpl	.-8      	; 0x934 <_ZN4Port5IsSetEv+0x16>
     93c:	cf 01       	movw	r24, r30
     93e:	81 70       	andi	r24, 0x01	; 1
     940:	08 95       	ret

00000942 <_ZN4PortnwEj>:

void* Port::operator new(size_t size)
{
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     948:	ce 01       	movw	r24, r28
     94a:	51 d5       	rcall	.+2722   	; 0x13ee <malloc>
	}while(ptr == nullptr);
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	e1 f3       	breq	.-8      	; 0x948 <_ZN4PortnwEj+0x6>
	
	return ptr;
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>:
uint8_t SPI_Master :: ReceiveByte()
{	
	return SPDR;
}

SPI_Master::~SPI_Master(){}
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
     960:	cb 01       	movw	r24, r22
     962:	79 83       	std	Y+1, r23	; 0x01
     964:	68 83       	st	Y, r22
     966:	5b 83       	std	Y+3, r21	; 0x03
     968:	4a 83       	std	Y+2, r20	; 0x02
     96a:	3d 83       	std	Y+5, r19	; 0x05
     96c:	2c 83       	std	Y+4, r18	; 0x04
     96e:	1f 83       	std	Y+7, r17	; 0x07
     970:	0e 83       	std	Y+6, r16	; 0x06
     972:	8a df       	rcall	.-236    	; 0x888 <_ZN4Port11SetAsOutputEv>
     974:	8a 81       	ldd	r24, Y+2	; 0x02
     976:	9b 81       	ldd	r25, Y+3	; 0x03
     978:	87 df       	rcall	.-242    	; 0x888 <_ZN4Port11SetAsOutputEv>
     97a:	8c 81       	ldd	r24, Y+4	; 0x04
     97c:	9d 81       	ldd	r25, Y+5	; 0x05
     97e:	97 df       	rcall	.-210    	; 0x8ae <_ZN4Port3SetEv>
     980:	8e 81       	ldd	r24, Y+6	; 0x06
     982:	9f 81       	ldd	r25, Y+7	; 0x07
     984:	94 df       	rcall	.-216    	; 0x8ae <_ZN4Port3SetEv>
     986:	8e 81       	ldd	r24, Y+6	; 0x06
     988:	9f 81       	ldd	r25, Y+7	; 0x07
     98a:	7e df       	rcall	.-260    	; 0x888 <_ZN4Port11SetAsOutputEv>
     98c:	8d b1       	in	r24, 0x0d	; 13
     98e:	83 65       	ori	r24, 0x53	; 83
     990:	8d b9       	out	0x0d, r24	; 13
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	08 95       	ret

0000099c <_ZN10SPI_Master7SetModeE12SPI_Polarity9SPI_Phase>:
     99c:	8d b1       	in	r24, 0x0d	; 13
     99e:	88 70       	andi	r24, 0x08	; 8
     9a0:	86 17       	cp	r24, r22
     9a2:	59 f0       	breq	.+22     	; 0x9ba <_ZN10SPI_Master7SetModeE12SPI_Polarity9SPI_Phase+0x1e>
     9a4:	61 11       	cpse	r22, r1
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <_ZN10SPI_Master7SetModeE12SPI_Polarity9SPI_Phase+0x14>
     9a8:	8d b1       	in	r24, 0x0d	; 13
     9aa:	87 7f       	andi	r24, 0xF7	; 247
     9ac:	8d b9       	out	0x0d, r24	; 13
     9ae:	05 c0       	rjmp	.+10     	; 0x9ba <_ZN10SPI_Master7SetModeE12SPI_Polarity9SPI_Phase+0x1e>
     9b0:	61 30       	cpi	r22, 0x01	; 1
     9b2:	19 f4       	brne	.+6      	; 0x9ba <_ZN10SPI_Master7SetModeE12SPI_Polarity9SPI_Phase+0x1e>
     9b4:	8d b1       	in	r24, 0x0d	; 13
     9b6:	88 60       	ori	r24, 0x08	; 8
     9b8:	8d b9       	out	0x0d, r24	; 13
     9ba:	8d b1       	in	r24, 0x0d	; 13
     9bc:	84 70       	andi	r24, 0x04	; 4
     9be:	84 17       	cp	r24, r20
     9c0:	59 f0       	breq	.+22     	; 0x9d8 <_ZN10SPI_Master7SetModeE12SPI_Polarity9SPI_Phase+0x3c>
     9c2:	41 11       	cpse	r20, r1
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <_ZN10SPI_Master7SetModeE12SPI_Polarity9SPI_Phase+0x32>
     9c6:	8d b1       	in	r24, 0x0d	; 13
     9c8:	8b 7f       	andi	r24, 0xFB	; 251
     9ca:	8d b9       	out	0x0d, r24	; 13
     9cc:	08 95       	ret
     9ce:	41 30       	cpi	r20, 0x01	; 1
     9d0:	19 f4       	brne	.+6      	; 0x9d8 <_ZN10SPI_Master7SetModeE12SPI_Polarity9SPI_Phase+0x3c>
     9d2:	8d b1       	in	r24, 0x0d	; 13
     9d4:	84 60       	ori	r24, 0x04	; 4
     9d6:	8d b9       	out	0x0d, r24	; 13
     9d8:	08 95       	ret

000009da <_ZN10SPI_Master8SendByteEh>:
     9da:	6f b9       	out	0x0f, r22	; 15
     9dc:	77 9b       	sbis	0x0e, 7	; 14
     9de:	fe cf       	rjmp	.-4      	; 0x9dc <_ZN10SPI_Master8SendByteEh+0x2>
     9e0:	08 95       	ret

000009e2 <_ZN10SPI_Master11ReceiveByteEv>:
     9e2:	8f b1       	in	r24, 0x0f	; 15
     9e4:	08 95       	ret

000009e6 <_ZN10SPI_MasternwEj>:

void* SPI_Master::operator new(size_t size)
{
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     9ec:	ce 01       	movw	r24, r28
     9ee:	ff d4       	rcall	.+2558   	; 0x13ee <malloc>
	}while(ptr == nullptr);
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	e1 f3       	breq	.-8      	; 0x9ec <_ZN10SPI_MasternwEj+0x6>
	
	return ptr;
}
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <_ZN13StringHandler13FloatToStringEfh>:
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
     9fa:	2f 92       	push	r2
     9fc:	3f 92       	push	r3
     9fe:	4f 92       	push	r4
     a00:	5f 92       	push	r5
     a02:	6f 92       	push	r6
     a04:	7f 92       	push	r7
     a06:	8f 92       	push	r8
     a08:	9f 92       	push	r9
     a0a:	af 92       	push	r10
     a0c:	bf 92       	push	r11
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <_ZN13StringHandler13FloatToStringEfh+0x26>
     a20:	00 d0       	rcall	.+0      	; 0xa22 <_ZN13StringHandler13FloatToStringEfh+0x28>
     a22:	00 d0       	rcall	.+0      	; 0xa24 <_ZN13StringHandler13FloatToStringEfh+0x2a>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	2b 01       	movw	r4, r22
     a2a:	3c 01       	movw	r6, r24
     a2c:	94 2e       	mov	r9, r20
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
	
	return resultString;
}
     a2e:	2d b6       	in	r2, 0x3d	; 61
     a30:	3e b6       	in	r3, 0x3e	; 62
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
	uint32_t integerPart = fabs(value);
     a32:	9f 77       	andi	r25, 0x7F	; 127
     a34:	6b 83       	std	Y+3, r22	; 0x03
     a36:	7c 83       	std	Y+4, r23	; 0x04
     a38:	8d 83       	std	Y+5, r24	; 0x05
     a3a:	9e 83       	std	Y+6, r25	; 0x06
     a3c:	61 d1       	rcall	.+706    	; 0xd00 <__fixunssfsi>
     a3e:	a6 2e       	mov	r10, r22
     a40:	b7 2e       	mov	r11, r23
     a42:	c8 2e       	mov	r12, r24
     a44:	d9 2e       	mov	r13, r25
     a46:	26 2f       	mov	r18, r22
     a48:	37 2f       	mov	r19, r23
     a4a:	48 2f       	mov	r20, r24
     a4c:	59 2f       	mov	r21, r25
	
	uint8_t stringLength = 0;	
     a4e:	81 2c       	mov	r8, r1
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <_ZN13StringHandler13FloatToStringEfh+0x5a>
	do
	{
		integerPart /= 10;
		stringLength++;
     a52:	8f 2c       	mov	r8, r15
	uint32_t integerPart = fabs(value);
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
     a54:	ca 01       	movw	r24, r20
     a56:	b9 01       	movw	r22, r18
     a58:	2a e0       	ldi	r18, 0x0A	; 10
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	98 d4       	rcall	.+2352   	; 0x1392 <__udivmodsi4>
		stringLength++;
     a62:	ff 24       	eor	r15, r15
     a64:	f3 94       	inc	r15
     a66:	f8 0c       	add	r15, r8
	}
	while(integerPart > 0);
     a68:	21 15       	cp	r18, r1
     a6a:	31 05       	cpc	r19, r1
     a6c:	41 05       	cpc	r20, r1
     a6e:	51 05       	cpc	r21, r1
     a70:	81 f7       	brne	.-32     	; 0xa52 <_ZN13StringHandler13FloatToStringEfh+0x58>
	
	integerPart = fabs(value);
	
	uint8_t integerPartLength = stringLength;
	
	if(digitsAfterDot > 0)
     a72:	99 20       	and	r9, r9
     a74:	21 f0       	breq	.+8      	; 0xa7e <_ZN13StringHandler13FloatToStringEfh+0x84>
	{
		stringLength++;										//for '.'
     a76:	83 94       	inc	r8
     a78:	83 94       	inc	r8
		stringLength += digitsAfterDot;						//for .xxxxx
     a7a:	89 0c       	add	r8, r9
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <_ZN13StringHandler13FloatToStringEfh+0x86>
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
		stringLength++;
     a7e:	8f 2c       	mov	r8, r15
	{
		stringLength++;										//for '.'
		stringLength += digitsAfterDot;						//for .xxxxx
	}
	
	if(value < 0) stringLength++;							//for '-'
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	a9 01       	movw	r20, r18
     a86:	c3 01       	movw	r24, r6
     a88:	b2 01       	movw	r22, r4
     a8a:	36 d1       	rcall	.+620    	; 0xcf8 <__cmpsf2>
     a8c:	88 23       	and	r24, r24
     a8e:	0c f4       	brge	.+2      	; 0xa92 <_ZN13StringHandler13FloatToStringEfh+0x98>
     a90:	83 94       	inc	r8
	
	stringLength++;											//for '\0'	
     a92:	83 94       	inc	r8
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
     a94:	8f 2d       	mov	r24, r15
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	ad b7       	in	r26, 0x3d	; 61
     a9c:	be b7       	in	r27, 0x3e	; 62
     a9e:	a8 1b       	sub	r26, r24
     aa0:	b9 0b       	sbc	r27, r25
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	be bf       	out	0x3e, r27	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	ad bf       	out	0x3d, r26	; 61
     aac:	2d b7       	in	r18, 0x3d	; 61
     aae:	3e b7       	in	r19, 0x3e	; 62
     ab0:	2f 5f       	subi	r18, 0xFF	; 255
     ab2:	3f 4f       	sbci	r19, 0xFF	; 255
     ab4:	3a 83       	std	Y+2, r19	; 0x02
     ab6:	29 83       	std	Y+1, r18	; 0x01
     ab8:	89 01       	movw	r16, r18
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     aba:	ee 24       	eor	r14, r14
     abc:	e3 94       	inc	r14
     abe:	fe 14       	cp	r15, r14
     ac0:	b8 f0       	brcs	.+46     	; 0xaf0 <_ZN13StringHandler13FloatToStringEfh+0xf6>
	{
		uint8_t dig = integerPart % 10;
				
		integerPart /= 10;
     ac2:	6a 2d       	mov	r22, r10
     ac4:	7b 2d       	mov	r23, r11
     ac6:	8c 2d       	mov	r24, r12
     ac8:	9d 2d       	mov	r25, r13
     aca:	2a e0       	ldi	r18, 0x0A	; 10
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	5f d4       	rcall	.+2238   	; 0x1392 <__udivmodsi4>
     ad4:	a2 2e       	mov	r10, r18
     ad6:	b3 2e       	mov	r11, r19
     ad8:	c4 2e       	mov	r12, r20
     ada:	d5 2e       	mov	r13, r21
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
     adc:	ef 2d       	mov	r30, r15
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ee 19       	sub	r30, r14
     ae2:	f1 09       	sbc	r31, r1
     ae4:	e0 0f       	add	r30, r16
     ae6:	f1 1f       	adc	r31, r17
     ae8:	60 5d       	subi	r22, 0xD0	; 208
     aea:	60 83       	st	Z, r22
	
	stringLength++;											//for '\0'	
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     aec:	e3 94       	inc	r14
     aee:	e7 cf       	rjmp	.-50     	; 0xabe <_ZN13StringHandler13FloatToStringEfh+0xc4>
		integerPart /= 10;
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
	}
	
	integerPartDigitsArray[integerPartLength] = '\0';
     af0:	e9 81       	ldd	r30, Y+1	; 0x01
     af2:	fa 81       	ldd	r31, Y+2	; 0x02
     af4:	ef 0d       	add	r30, r15
     af6:	f1 1d       	adc	r31, r1
     af8:	10 82       	st	Z, r1
				
	char* resultString;
	do 
	{
		resultString = (char*)malloc(stringLength);
     afa:	e8 2c       	mov	r14, r8
     afc:	f1 2c       	mov	r15, r1
     afe:	c7 01       	movw	r24, r14
     b00:	76 d4       	rcall	.+2284   	; 0x13ee <malloc>
     b02:	8c 01       	movw	r16, r24
	}while(resultString == NULL);
     b04:	89 2b       	or	r24, r25
     b06:	c9 f3       	breq	.-14     	; 0xafa <_ZN13StringHandler13FloatToStringEfh+0x100>
	 
			
	if(value < 0)
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	a9 01       	movw	r20, r18
     b0e:	c3 01       	movw	r24, r6
     b10:	b2 01       	movw	r22, r4
     b12:	f2 d0       	rcall	.+484    	; 0xcf8 <__cmpsf2>
     b14:	88 23       	and	r24, r24
     b16:	5c f4       	brge	.+22     	; 0xb2e <_ZN13StringHandler13FloatToStringEfh+0x134>
	{
		strlcpy(resultString, "-", stringLength);
     b18:	a7 01       	movw	r20, r14
     b1a:	66 e6       	ldi	r22, 0x66	; 102
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	c8 01       	movw	r24, r16
     b20:	a6 d5       	rcall	.+2892   	; 0x166e <strlcpy>
		strlcat(resultString, integerPartDigitsArray, stringLength);
     b22:	a7 01       	movw	r20, r14
     b24:	69 81       	ldd	r22, Y+1	; 0x01
     b26:	7a 81       	ldd	r23, Y+2	; 0x02
     b28:	c8 01       	movw	r24, r16
     b2a:	82 d5       	rcall	.+2820   	; 0x1630 <strlcat>
     b2c:	05 c0       	rjmp	.+10     	; 0xb38 <_ZN13StringHandler13FloatToStringEfh+0x13e>
	}
	else strlcpy(resultString, integerPartDigitsArray, stringLength);
     b2e:	a7 01       	movw	r20, r14
     b30:	69 81       	ldd	r22, Y+1	; 0x01
     b32:	7a 81       	ldd	r23, Y+2	; 0x02
     b34:	c8 01       	movw	r24, r16
     b36:	9b d5       	rcall	.+2870   	; 0x166e <strlcpy>
	
	if(digitsAfterDot == 0)
     b38:	99 20       	and	r9, r9
     b3a:	09 f4       	brne	.+2      	; 0xb3e <_ZN13StringHandler13FloatToStringEfh+0x144>
     b3c:	59 c0       	rjmp	.+178    	; 0xbf0 <_ZN13StringHandler13FloatToStringEfh+0x1f6>
	{		
		return resultString;
	}
		
	strlcat(resultString, ".", stringLength);
     b3e:	a7 01       	movw	r20, r14
     b40:	68 e6       	ldi	r22, 0x68	; 104
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	c8 01       	movw	r24, r16
     b46:	74 d5       	rcall	.+2792   	; 0x1630 <strlcat>
		
	value = fabs(value) - integerPart;	
     b48:	6a 2d       	mov	r22, r10
     b4a:	7b 2d       	mov	r23, r11
     b4c:	8c 2d       	mov	r24, r12
     b4e:	9d 2d       	mov	r25, r13
     b50:	03 d1       	rcall	.+518    	; 0xd58 <__floatunsisf>
     b52:	9b 01       	movw	r18, r22
     b54:	ac 01       	movw	r20, r24
     b56:	6b 81       	ldd	r22, Y+3	; 0x03
     b58:	7c 81       	ldd	r23, Y+4	; 0x04
     b5a:	8d 81       	ldd	r24, Y+5	; 0x05
     b5c:	9e 81       	ldd	r25, Y+6	; 0x06
     b5e:	67 d0       	rcall	.+206    	; 0xc2e <__subsf3>
     b60:	2b 01       	movw	r4, r22
     b62:	3c 01       	movw	r6, r24
			
	uint32_t mult = (uint32_t)round(pow(10, digitsAfterDot));
     b64:	69 2d       	mov	r22, r9
     b66:	70 e0       	ldi	r23, 0x00	; 0
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	f5 d0       	rcall	.+490    	; 0xd58 <__floatunsisf>
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	80 e2       	ldi	r24, 0x20	; 32
     b78:	91 e4       	ldi	r25, 0x41	; 65
     b7a:	03 d2       	rcall	.+1030   	; 0xf82 <pow>
     b7c:	4e d2       	rcall	.+1180   	; 0x101a <round>
     b7e:	c0 d0       	rcall	.+384    	; 0xd00 <__fixunssfsi>
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
     b80:	eb d0       	rcall	.+470    	; 0xd58 <__floatunsisf>
     b82:	9b 01       	movw	r18, r22
     b84:	ac 01       	movw	r20, r24
     b86:	c3 01       	movw	r24, r6
     b88:	b2 01       	movw	r22, r4
     b8a:	98 d1       	rcall	.+816    	; 0xebc <__mulsf3>
     b8c:	46 d2       	rcall	.+1164   	; 0x101a <round>
     b8e:	b8 d0       	rcall	.+368    	; 0xd00 <__fixunssfsi>
     b90:	9b 01       	movw	r18, r22
     b92:	ac 01       	movw	r20, r24
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
     b94:	89 2d       	mov	r24, r9
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	6d b7       	in	r22, 0x3d	; 61
     b9c:	7e b7       	in	r23, 0x3e	; 62
     b9e:	68 1b       	sub	r22, r24
     ba0:	79 0b       	sbc	r23, r25
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	7e bf       	out	0x3e, r23	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	6d bf       	out	0x3d, r22	; 61
     bac:	8d b7       	in	r24, 0x3d	; 61
     bae:	9e b7       	in	r25, 0x3e	; 62
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	5c 01       	movw	r10, r24
     bb4:	6c 01       	movw	r12, r24
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     bb6:	88 24       	eor	r8, r8
     bb8:	83 94       	inc	r8
     bba:	98 14       	cp	r9, r8
     bbc:	88 f0       	brcs	.+34     	; 0xbe0 <_ZN13StringHandler13FloatToStringEfh+0x1e6>
	{
		uint8_t dig = fractionalPart % 10;
				
		fractionalPart /= 10;
     bbe:	ca 01       	movw	r24, r20
     bc0:	b9 01       	movw	r22, r18
     bc2:	2a e0       	ldi	r18, 0x0A	; 10
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	e3 d3       	rcall	.+1990   	; 0x1392 <__udivmodsi4>
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
     bcc:	e9 2d       	mov	r30, r9
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	e8 19       	sub	r30, r8
     bd2:	f1 09       	sbc	r31, r1
     bd4:	ec 0d       	add	r30, r12
     bd6:	fd 1d       	adc	r31, r13
     bd8:	60 5d       	subi	r22, 0xD0	; 208
     bda:	60 83       	st	Z, r22
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     bdc:	83 94       	inc	r8
     bde:	ed cf       	rjmp	.-38     	; 0xbba <_ZN13StringHandler13FloatToStringEfh+0x1c0>
				
		fractionalPart /= 10;
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
	}			
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
     be0:	f5 01       	movw	r30, r10
     be2:	e9 0d       	add	r30, r9
     be4:	f1 1d       	adc	r31, r1
     be6:	10 82       	st	Z, r1
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
     be8:	a7 01       	movw	r20, r14
     bea:	b5 01       	movw	r22, r10
     bec:	c8 01       	movw	r24, r16
     bee:	20 d5       	rcall	.+2624   	; 0x1630 <strlcat>
	
	return resultString;
}
     bf0:	c8 01       	movw	r24, r16
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	3e be       	out	0x3e, r3	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	2d be       	out	0x3d, r2	; 61
     bfc:	26 96       	adiw	r28, 0x06	; 6
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	cf 90       	pop	r12
     c18:	bf 90       	pop	r11
     c1a:	af 90       	pop	r10
     c1c:	9f 90       	pop	r9
     c1e:	8f 90       	pop	r8
     c20:	7f 90       	pop	r7
     c22:	6f 90       	pop	r6
     c24:	5f 90       	pop	r5
     c26:	4f 90       	pop	r4
     c28:	3f 90       	pop	r3
     c2a:	2f 90       	pop	r2
     c2c:	08 95       	ret

00000c2e <__subsf3>:
     c2e:	50 58       	subi	r21, 0x80	; 128

00000c30 <__addsf3>:
     c30:	bb 27       	eor	r27, r27
     c32:	aa 27       	eor	r26, r26
     c34:	0e d0       	rcall	.+28     	; 0xc52 <__addsf3x>
     c36:	08 c1       	rjmp	.+528    	; 0xe48 <__fp_round>
     c38:	f9 d0       	rcall	.+498    	; 0xe2c <__fp_pscA>
     c3a:	30 f0       	brcs	.+12     	; 0xc48 <__addsf3+0x18>
     c3c:	fe d0       	rcall	.+508    	; 0xe3a <__fp_pscB>
     c3e:	20 f0       	brcs	.+8      	; 0xc48 <__addsf3+0x18>
     c40:	31 f4       	brne	.+12     	; 0xc4e <__addsf3+0x1e>
     c42:	9f 3f       	cpi	r25, 0xFF	; 255
     c44:	11 f4       	brne	.+4      	; 0xc4a <__addsf3+0x1a>
     c46:	1e f4       	brtc	.+6      	; 0xc4e <__addsf3+0x1e>
     c48:	ee c0       	rjmp	.+476    	; 0xe26 <__fp_nan>
     c4a:	0e f4       	brtc	.+2      	; 0xc4e <__addsf3+0x1e>
     c4c:	e0 95       	com	r30
     c4e:	e7 fb       	bst	r30, 7
     c50:	e4 c0       	rjmp	.+456    	; 0xe1a <__fp_inf>

00000c52 <__addsf3x>:
     c52:	e9 2f       	mov	r30, r25
     c54:	0a d1       	rcall	.+532    	; 0xe6a <__fp_split3>
     c56:	80 f3       	brcs	.-32     	; 0xc38 <__addsf3+0x8>
     c58:	ba 17       	cp	r27, r26
     c5a:	62 07       	cpc	r22, r18
     c5c:	73 07       	cpc	r23, r19
     c5e:	84 07       	cpc	r24, r20
     c60:	95 07       	cpc	r25, r21
     c62:	18 f0       	brcs	.+6      	; 0xc6a <__addsf3x+0x18>
     c64:	71 f4       	brne	.+28     	; 0xc82 <__addsf3x+0x30>
     c66:	9e f5       	brtc	.+102    	; 0xcce <__addsf3x+0x7c>
     c68:	22 c1       	rjmp	.+580    	; 0xeae <__fp_zero>
     c6a:	0e f4       	brtc	.+2      	; 0xc6e <__addsf3x+0x1c>
     c6c:	e0 95       	com	r30
     c6e:	0b 2e       	mov	r0, r27
     c70:	ba 2f       	mov	r27, r26
     c72:	a0 2d       	mov	r26, r0
     c74:	0b 01       	movw	r0, r22
     c76:	b9 01       	movw	r22, r18
     c78:	90 01       	movw	r18, r0
     c7a:	0c 01       	movw	r0, r24
     c7c:	ca 01       	movw	r24, r20
     c7e:	a0 01       	movw	r20, r0
     c80:	11 24       	eor	r1, r1
     c82:	ff 27       	eor	r31, r31
     c84:	59 1b       	sub	r21, r25
     c86:	99 f0       	breq	.+38     	; 0xcae <__addsf3x+0x5c>
     c88:	59 3f       	cpi	r21, 0xF9	; 249
     c8a:	50 f4       	brcc	.+20     	; 0xca0 <__addsf3x+0x4e>
     c8c:	50 3e       	cpi	r21, 0xE0	; 224
     c8e:	68 f1       	brcs	.+90     	; 0xcea <__addsf3x+0x98>
     c90:	1a 16       	cp	r1, r26
     c92:	f0 40       	sbci	r31, 0x00	; 0
     c94:	a2 2f       	mov	r26, r18
     c96:	23 2f       	mov	r18, r19
     c98:	34 2f       	mov	r19, r20
     c9a:	44 27       	eor	r20, r20
     c9c:	58 5f       	subi	r21, 0xF8	; 248
     c9e:	f3 cf       	rjmp	.-26     	; 0xc86 <__addsf3x+0x34>
     ca0:	46 95       	lsr	r20
     ca2:	37 95       	ror	r19
     ca4:	27 95       	ror	r18
     ca6:	a7 95       	ror	r26
     ca8:	f0 40       	sbci	r31, 0x00	; 0
     caa:	53 95       	inc	r21
     cac:	c9 f7       	brne	.-14     	; 0xca0 <__addsf3x+0x4e>
     cae:	7e f4       	brtc	.+30     	; 0xcce <__addsf3x+0x7c>
     cb0:	1f 16       	cp	r1, r31
     cb2:	ba 0b       	sbc	r27, r26
     cb4:	62 0b       	sbc	r22, r18
     cb6:	73 0b       	sbc	r23, r19
     cb8:	84 0b       	sbc	r24, r20
     cba:	ba f0       	brmi	.+46     	; 0xcea <__addsf3x+0x98>
     cbc:	91 50       	subi	r25, 0x01	; 1
     cbe:	a1 f0       	breq	.+40     	; 0xce8 <__addsf3x+0x96>
     cc0:	ff 0f       	add	r31, r31
     cc2:	bb 1f       	adc	r27, r27
     cc4:	66 1f       	adc	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	88 1f       	adc	r24, r24
     cca:	c2 f7       	brpl	.-16     	; 0xcbc <__addsf3x+0x6a>
     ccc:	0e c0       	rjmp	.+28     	; 0xcea <__addsf3x+0x98>
     cce:	ba 0f       	add	r27, r26
     cd0:	62 1f       	adc	r22, r18
     cd2:	73 1f       	adc	r23, r19
     cd4:	84 1f       	adc	r24, r20
     cd6:	48 f4       	brcc	.+18     	; 0xcea <__addsf3x+0x98>
     cd8:	87 95       	ror	r24
     cda:	77 95       	ror	r23
     cdc:	67 95       	ror	r22
     cde:	b7 95       	ror	r27
     ce0:	f7 95       	ror	r31
     ce2:	9e 3f       	cpi	r25, 0xFE	; 254
     ce4:	08 f0       	brcs	.+2      	; 0xce8 <__addsf3x+0x96>
     ce6:	b3 cf       	rjmp	.-154    	; 0xc4e <__addsf3+0x1e>
     ce8:	93 95       	inc	r25
     cea:	88 0f       	add	r24, r24
     cec:	08 f0       	brcs	.+2      	; 0xcf0 <__addsf3x+0x9e>
     cee:	99 27       	eor	r25, r25
     cf0:	ee 0f       	add	r30, r30
     cf2:	97 95       	ror	r25
     cf4:	87 95       	ror	r24
     cf6:	08 95       	ret

00000cf8 <__cmpsf2>:
     cf8:	6c d0       	rcall	.+216    	; 0xdd2 <__fp_cmp>
     cfa:	08 f4       	brcc	.+2      	; 0xcfe <__cmpsf2+0x6>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	08 95       	ret

00000d00 <__fixunssfsi>:
     d00:	bc d0       	rcall	.+376    	; 0xe7a <__fp_splitA>
     d02:	88 f0       	brcs	.+34     	; 0xd26 <__fixunssfsi+0x26>
     d04:	9f 57       	subi	r25, 0x7F	; 127
     d06:	90 f0       	brcs	.+36     	; 0xd2c <__fixunssfsi+0x2c>
     d08:	b9 2f       	mov	r27, r25
     d0a:	99 27       	eor	r25, r25
     d0c:	b7 51       	subi	r27, 0x17	; 23
     d0e:	a0 f0       	brcs	.+40     	; 0xd38 <__fixunssfsi+0x38>
     d10:	d1 f0       	breq	.+52     	; 0xd46 <__fixunssfsi+0x46>
     d12:	66 0f       	add	r22, r22
     d14:	77 1f       	adc	r23, r23
     d16:	88 1f       	adc	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	1a f0       	brmi	.+6      	; 0xd22 <__fixunssfsi+0x22>
     d1c:	ba 95       	dec	r27
     d1e:	c9 f7       	brne	.-14     	; 0xd12 <__fixunssfsi+0x12>
     d20:	12 c0       	rjmp	.+36     	; 0xd46 <__fixunssfsi+0x46>
     d22:	b1 30       	cpi	r27, 0x01	; 1
     d24:	81 f0       	breq	.+32     	; 0xd46 <__fixunssfsi+0x46>
     d26:	c3 d0       	rcall	.+390    	; 0xeae <__fp_zero>
     d28:	b1 e0       	ldi	r27, 0x01	; 1
     d2a:	08 95       	ret
     d2c:	c0 c0       	rjmp	.+384    	; 0xeae <__fp_zero>
     d2e:	67 2f       	mov	r22, r23
     d30:	78 2f       	mov	r23, r24
     d32:	88 27       	eor	r24, r24
     d34:	b8 5f       	subi	r27, 0xF8	; 248
     d36:	39 f0       	breq	.+14     	; 0xd46 <__fixunssfsi+0x46>
     d38:	b9 3f       	cpi	r27, 0xF9	; 249
     d3a:	cc f3       	brlt	.-14     	; 0xd2e <__fixunssfsi+0x2e>
     d3c:	86 95       	lsr	r24
     d3e:	77 95       	ror	r23
     d40:	67 95       	ror	r22
     d42:	b3 95       	inc	r27
     d44:	d9 f7       	brne	.-10     	; 0xd3c <__fixunssfsi+0x3c>
     d46:	3e f4       	brtc	.+14     	; 0xd56 <__fixunssfsi+0x56>
     d48:	90 95       	com	r25
     d4a:	80 95       	com	r24
     d4c:	70 95       	com	r23
     d4e:	61 95       	neg	r22
     d50:	7f 4f       	sbci	r23, 0xFF	; 255
     d52:	8f 4f       	sbci	r24, 0xFF	; 255
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	08 95       	ret

00000d58 <__floatunsisf>:
     d58:	e8 94       	clt
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <__floatsisf+0x12>

00000d5c <__floatsisf>:
     d5c:	97 fb       	bst	r25, 7
     d5e:	3e f4       	brtc	.+14     	; 0xd6e <__floatsisf+0x12>
     d60:	90 95       	com	r25
     d62:	80 95       	com	r24
     d64:	70 95       	com	r23
     d66:	61 95       	neg	r22
     d68:	7f 4f       	sbci	r23, 0xFF	; 255
     d6a:	8f 4f       	sbci	r24, 0xFF	; 255
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	99 23       	and	r25, r25
     d70:	a9 f0       	breq	.+42     	; 0xd9c <__floatsisf+0x40>
     d72:	f9 2f       	mov	r31, r25
     d74:	96 e9       	ldi	r25, 0x96	; 150
     d76:	bb 27       	eor	r27, r27
     d78:	93 95       	inc	r25
     d7a:	f6 95       	lsr	r31
     d7c:	87 95       	ror	r24
     d7e:	77 95       	ror	r23
     d80:	67 95       	ror	r22
     d82:	b7 95       	ror	r27
     d84:	f1 11       	cpse	r31, r1
     d86:	f8 cf       	rjmp	.-16     	; 0xd78 <__floatsisf+0x1c>
     d88:	fa f4       	brpl	.+62     	; 0xdc8 <__floatsisf+0x6c>
     d8a:	bb 0f       	add	r27, r27
     d8c:	11 f4       	brne	.+4      	; 0xd92 <__floatsisf+0x36>
     d8e:	60 ff       	sbrs	r22, 0
     d90:	1b c0       	rjmp	.+54     	; 0xdc8 <__floatsisf+0x6c>
     d92:	6f 5f       	subi	r22, 0xFF	; 255
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	8f 4f       	sbci	r24, 0xFF	; 255
     d98:	9f 4f       	sbci	r25, 0xFF	; 255
     d9a:	16 c0       	rjmp	.+44     	; 0xdc8 <__floatsisf+0x6c>
     d9c:	88 23       	and	r24, r24
     d9e:	11 f0       	breq	.+4      	; 0xda4 <__floatsisf+0x48>
     da0:	96 e9       	ldi	r25, 0x96	; 150
     da2:	11 c0       	rjmp	.+34     	; 0xdc6 <__floatsisf+0x6a>
     da4:	77 23       	and	r23, r23
     da6:	21 f0       	breq	.+8      	; 0xdb0 <__floatsisf+0x54>
     da8:	9e e8       	ldi	r25, 0x8E	; 142
     daa:	87 2f       	mov	r24, r23
     dac:	76 2f       	mov	r23, r22
     dae:	05 c0       	rjmp	.+10     	; 0xdba <__floatsisf+0x5e>
     db0:	66 23       	and	r22, r22
     db2:	71 f0       	breq	.+28     	; 0xdd0 <__floatsisf+0x74>
     db4:	96 e8       	ldi	r25, 0x86	; 134
     db6:	86 2f       	mov	r24, r22
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	2a f0       	brmi	.+10     	; 0xdc8 <__floatsisf+0x6c>
     dbe:	9a 95       	dec	r25
     dc0:	66 0f       	add	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	88 1f       	adc	r24, r24
     dc6:	da f7       	brpl	.-10     	; 0xdbe <__floatsisf+0x62>
     dc8:	88 0f       	add	r24, r24
     dca:	96 95       	lsr	r25
     dcc:	87 95       	ror	r24
     dce:	97 f9       	bld	r25, 7
     dd0:	08 95       	ret

00000dd2 <__fp_cmp>:
     dd2:	99 0f       	add	r25, r25
     dd4:	00 08       	sbc	r0, r0
     dd6:	55 0f       	add	r21, r21
     dd8:	aa 0b       	sbc	r26, r26
     dda:	e0 e8       	ldi	r30, 0x80	; 128
     ddc:	fe ef       	ldi	r31, 0xFE	; 254
     dde:	16 16       	cp	r1, r22
     de0:	17 06       	cpc	r1, r23
     de2:	e8 07       	cpc	r30, r24
     de4:	f9 07       	cpc	r31, r25
     de6:	c0 f0       	brcs	.+48     	; 0xe18 <__fp_cmp+0x46>
     de8:	12 16       	cp	r1, r18
     dea:	13 06       	cpc	r1, r19
     dec:	e4 07       	cpc	r30, r20
     dee:	f5 07       	cpc	r31, r21
     df0:	98 f0       	brcs	.+38     	; 0xe18 <__fp_cmp+0x46>
     df2:	62 1b       	sub	r22, r18
     df4:	73 0b       	sbc	r23, r19
     df6:	84 0b       	sbc	r24, r20
     df8:	95 0b       	sbc	r25, r21
     dfa:	39 f4       	brne	.+14     	; 0xe0a <__fp_cmp+0x38>
     dfc:	0a 26       	eor	r0, r26
     dfe:	61 f0       	breq	.+24     	; 0xe18 <__fp_cmp+0x46>
     e00:	23 2b       	or	r18, r19
     e02:	24 2b       	or	r18, r20
     e04:	25 2b       	or	r18, r21
     e06:	21 f4       	brne	.+8      	; 0xe10 <__fp_cmp+0x3e>
     e08:	08 95       	ret
     e0a:	0a 26       	eor	r0, r26
     e0c:	09 f4       	brne	.+2      	; 0xe10 <__fp_cmp+0x3e>
     e0e:	a1 40       	sbci	r26, 0x01	; 1
     e10:	a6 95       	lsr	r26
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	81 1d       	adc	r24, r1
     e16:	81 1d       	adc	r24, r1
     e18:	08 95       	ret

00000e1a <__fp_inf>:
     e1a:	97 f9       	bld	r25, 7
     e1c:	9f 67       	ori	r25, 0x7F	; 127
     e1e:	80 e8       	ldi	r24, 0x80	; 128
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	08 95       	ret

00000e26 <__fp_nan>:
     e26:	9f ef       	ldi	r25, 0xFF	; 255
     e28:	80 ec       	ldi	r24, 0xC0	; 192
     e2a:	08 95       	ret

00000e2c <__fp_pscA>:
     e2c:	00 24       	eor	r0, r0
     e2e:	0a 94       	dec	r0
     e30:	16 16       	cp	r1, r22
     e32:	17 06       	cpc	r1, r23
     e34:	18 06       	cpc	r1, r24
     e36:	09 06       	cpc	r0, r25
     e38:	08 95       	ret

00000e3a <__fp_pscB>:
     e3a:	00 24       	eor	r0, r0
     e3c:	0a 94       	dec	r0
     e3e:	12 16       	cp	r1, r18
     e40:	13 06       	cpc	r1, r19
     e42:	14 06       	cpc	r1, r20
     e44:	05 06       	cpc	r0, r21
     e46:	08 95       	ret

00000e48 <__fp_round>:
     e48:	09 2e       	mov	r0, r25
     e4a:	03 94       	inc	r0
     e4c:	00 0c       	add	r0, r0
     e4e:	11 f4       	brne	.+4      	; 0xe54 <__fp_round+0xc>
     e50:	88 23       	and	r24, r24
     e52:	52 f0       	brmi	.+20     	; 0xe68 <__fp_round+0x20>
     e54:	bb 0f       	add	r27, r27
     e56:	40 f4       	brcc	.+16     	; 0xe68 <__fp_round+0x20>
     e58:	bf 2b       	or	r27, r31
     e5a:	11 f4       	brne	.+4      	; 0xe60 <__fp_round+0x18>
     e5c:	60 ff       	sbrs	r22, 0
     e5e:	04 c0       	rjmp	.+8      	; 0xe68 <__fp_round+0x20>
     e60:	6f 5f       	subi	r22, 0xFF	; 255
     e62:	7f 4f       	sbci	r23, 0xFF	; 255
     e64:	8f 4f       	sbci	r24, 0xFF	; 255
     e66:	9f 4f       	sbci	r25, 0xFF	; 255
     e68:	08 95       	ret

00000e6a <__fp_split3>:
     e6a:	57 fd       	sbrc	r21, 7
     e6c:	90 58       	subi	r25, 0x80	; 128
     e6e:	44 0f       	add	r20, r20
     e70:	55 1f       	adc	r21, r21
     e72:	59 f0       	breq	.+22     	; 0xe8a <__fp_splitA+0x10>
     e74:	5f 3f       	cpi	r21, 0xFF	; 255
     e76:	71 f0       	breq	.+28     	; 0xe94 <__fp_splitA+0x1a>
     e78:	47 95       	ror	r20

00000e7a <__fp_splitA>:
     e7a:	88 0f       	add	r24, r24
     e7c:	97 fb       	bst	r25, 7
     e7e:	99 1f       	adc	r25, r25
     e80:	61 f0       	breq	.+24     	; 0xe9a <__fp_splitA+0x20>
     e82:	9f 3f       	cpi	r25, 0xFF	; 255
     e84:	79 f0       	breq	.+30     	; 0xea4 <__fp_splitA+0x2a>
     e86:	87 95       	ror	r24
     e88:	08 95       	ret
     e8a:	12 16       	cp	r1, r18
     e8c:	13 06       	cpc	r1, r19
     e8e:	14 06       	cpc	r1, r20
     e90:	55 1f       	adc	r21, r21
     e92:	f2 cf       	rjmp	.-28     	; 0xe78 <__fp_split3+0xe>
     e94:	46 95       	lsr	r20
     e96:	f1 df       	rcall	.-30     	; 0xe7a <__fp_splitA>
     e98:	08 c0       	rjmp	.+16     	; 0xeaa <__fp_splitA+0x30>
     e9a:	16 16       	cp	r1, r22
     e9c:	17 06       	cpc	r1, r23
     e9e:	18 06       	cpc	r1, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	f1 cf       	rjmp	.-30     	; 0xe86 <__fp_splitA+0xc>
     ea4:	86 95       	lsr	r24
     ea6:	71 05       	cpc	r23, r1
     ea8:	61 05       	cpc	r22, r1
     eaa:	08 94       	sec
     eac:	08 95       	ret

00000eae <__fp_zero>:
     eae:	e8 94       	clt

00000eb0 <__fp_szero>:
     eb0:	bb 27       	eor	r27, r27
     eb2:	66 27       	eor	r22, r22
     eb4:	77 27       	eor	r23, r23
     eb6:	cb 01       	movw	r24, r22
     eb8:	97 f9       	bld	r25, 7
     eba:	08 95       	ret

00000ebc <__mulsf3>:
     ebc:	0b d0       	rcall	.+22     	; 0xed4 <__mulsf3x>
     ebe:	c4 cf       	rjmp	.-120    	; 0xe48 <__fp_round>
     ec0:	b5 df       	rcall	.-150    	; 0xe2c <__fp_pscA>
     ec2:	28 f0       	brcs	.+10     	; 0xece <__mulsf3+0x12>
     ec4:	ba df       	rcall	.-140    	; 0xe3a <__fp_pscB>
     ec6:	18 f0       	brcs	.+6      	; 0xece <__mulsf3+0x12>
     ec8:	95 23       	and	r25, r21
     eca:	09 f0       	breq	.+2      	; 0xece <__mulsf3+0x12>
     ecc:	a6 cf       	rjmp	.-180    	; 0xe1a <__fp_inf>
     ece:	ab cf       	rjmp	.-170    	; 0xe26 <__fp_nan>
     ed0:	11 24       	eor	r1, r1
     ed2:	ee cf       	rjmp	.-36     	; 0xeb0 <__fp_szero>

00000ed4 <__mulsf3x>:
     ed4:	ca df       	rcall	.-108    	; 0xe6a <__fp_split3>
     ed6:	a0 f3       	brcs	.-24     	; 0xec0 <__mulsf3+0x4>

00000ed8 <__mulsf3_pse>:
     ed8:	95 9f       	mul	r25, r21
     eda:	d1 f3       	breq	.-12     	; 0xed0 <__mulsf3+0x14>
     edc:	95 0f       	add	r25, r21
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	55 1f       	adc	r21, r21
     ee2:	62 9f       	mul	r22, r18
     ee4:	f0 01       	movw	r30, r0
     ee6:	72 9f       	mul	r23, r18
     ee8:	bb 27       	eor	r27, r27
     eea:	f0 0d       	add	r31, r0
     eec:	b1 1d       	adc	r27, r1
     eee:	63 9f       	mul	r22, r19
     ef0:	aa 27       	eor	r26, r26
     ef2:	f0 0d       	add	r31, r0
     ef4:	b1 1d       	adc	r27, r1
     ef6:	aa 1f       	adc	r26, r26
     ef8:	64 9f       	mul	r22, r20
     efa:	66 27       	eor	r22, r22
     efc:	b0 0d       	add	r27, r0
     efe:	a1 1d       	adc	r26, r1
     f00:	66 1f       	adc	r22, r22
     f02:	82 9f       	mul	r24, r18
     f04:	22 27       	eor	r18, r18
     f06:	b0 0d       	add	r27, r0
     f08:	a1 1d       	adc	r26, r1
     f0a:	62 1f       	adc	r22, r18
     f0c:	73 9f       	mul	r23, r19
     f0e:	b0 0d       	add	r27, r0
     f10:	a1 1d       	adc	r26, r1
     f12:	62 1f       	adc	r22, r18
     f14:	83 9f       	mul	r24, r19
     f16:	a0 0d       	add	r26, r0
     f18:	61 1d       	adc	r22, r1
     f1a:	22 1f       	adc	r18, r18
     f1c:	74 9f       	mul	r23, r20
     f1e:	33 27       	eor	r19, r19
     f20:	a0 0d       	add	r26, r0
     f22:	61 1d       	adc	r22, r1
     f24:	23 1f       	adc	r18, r19
     f26:	84 9f       	mul	r24, r20
     f28:	60 0d       	add	r22, r0
     f2a:	21 1d       	adc	r18, r1
     f2c:	82 2f       	mov	r24, r18
     f2e:	76 2f       	mov	r23, r22
     f30:	6a 2f       	mov	r22, r26
     f32:	11 24       	eor	r1, r1
     f34:	9f 57       	subi	r25, 0x7F	; 127
     f36:	50 40       	sbci	r21, 0x00	; 0
     f38:	8a f0       	brmi	.+34     	; 0xf5c <__mulsf3_pse+0x84>
     f3a:	e1 f0       	breq	.+56     	; 0xf74 <__mulsf3_pse+0x9c>
     f3c:	88 23       	and	r24, r24
     f3e:	4a f0       	brmi	.+18     	; 0xf52 <__mulsf3_pse+0x7a>
     f40:	ee 0f       	add	r30, r30
     f42:	ff 1f       	adc	r31, r31
     f44:	bb 1f       	adc	r27, r27
     f46:	66 1f       	adc	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	88 1f       	adc	r24, r24
     f4c:	91 50       	subi	r25, 0x01	; 1
     f4e:	50 40       	sbci	r21, 0x00	; 0
     f50:	a9 f7       	brne	.-22     	; 0xf3c <__mulsf3_pse+0x64>
     f52:	9e 3f       	cpi	r25, 0xFE	; 254
     f54:	51 05       	cpc	r21, r1
     f56:	70 f0       	brcs	.+28     	; 0xf74 <__mulsf3_pse+0x9c>
     f58:	60 cf       	rjmp	.-320    	; 0xe1a <__fp_inf>
     f5a:	aa cf       	rjmp	.-172    	; 0xeb0 <__fp_szero>
     f5c:	5f 3f       	cpi	r21, 0xFF	; 255
     f5e:	ec f3       	brlt	.-6      	; 0xf5a <__mulsf3_pse+0x82>
     f60:	98 3e       	cpi	r25, 0xE8	; 232
     f62:	dc f3       	brlt	.-10     	; 0xf5a <__mulsf3_pse+0x82>
     f64:	86 95       	lsr	r24
     f66:	77 95       	ror	r23
     f68:	67 95       	ror	r22
     f6a:	b7 95       	ror	r27
     f6c:	f7 95       	ror	r31
     f6e:	e7 95       	ror	r30
     f70:	9f 5f       	subi	r25, 0xFF	; 255
     f72:	c1 f7       	brne	.-16     	; 0xf64 <__mulsf3_pse+0x8c>
     f74:	fe 2b       	or	r31, r30
     f76:	88 0f       	add	r24, r24
     f78:	91 1d       	adc	r25, r1
     f7a:	96 95       	lsr	r25
     f7c:	87 95       	ror	r24
     f7e:	97 f9       	bld	r25, 7
     f80:	08 95       	ret

00000f82 <pow>:
     f82:	fa 01       	movw	r30, r20
     f84:	ee 0f       	add	r30, r30
     f86:	ff 1f       	adc	r31, r31
     f88:	30 96       	adiw	r30, 0x00	; 0
     f8a:	21 05       	cpc	r18, r1
     f8c:	31 05       	cpc	r19, r1
     f8e:	99 f1       	breq	.+102    	; 0xff6 <pow+0x74>
     f90:	61 15       	cp	r22, r1
     f92:	71 05       	cpc	r23, r1
     f94:	61 f4       	brne	.+24     	; 0xfae <pow+0x2c>
     f96:	80 38       	cpi	r24, 0x80	; 128
     f98:	bf e3       	ldi	r27, 0x3F	; 63
     f9a:	9b 07       	cpc	r25, r27
     f9c:	49 f1       	breq	.+82     	; 0xff0 <pow+0x6e>
     f9e:	68 94       	set
     fa0:	90 38       	cpi	r25, 0x80	; 128
     fa2:	81 05       	cpc	r24, r1
     fa4:	61 f0       	breq	.+24     	; 0xfbe <pow+0x3c>
     fa6:	80 38       	cpi	r24, 0x80	; 128
     fa8:	bf ef       	ldi	r27, 0xFF	; 255
     faa:	9b 07       	cpc	r25, r27
     fac:	41 f0       	breq	.+16     	; 0xfbe <pow+0x3c>
     fae:	99 23       	and	r25, r25
     fb0:	42 f5       	brpl	.+80     	; 0x1002 <pow+0x80>
     fb2:	ff 3f       	cpi	r31, 0xFF	; 255
     fb4:	e1 05       	cpc	r30, r1
     fb6:	31 05       	cpc	r19, r1
     fb8:	21 05       	cpc	r18, r1
     fba:	11 f1       	breq	.+68     	; 0x1000 <pow+0x7e>
     fbc:	e8 94       	clt
     fbe:	08 94       	sec
     fc0:	e7 95       	ror	r30
     fc2:	d9 01       	movw	r26, r18
     fc4:	aa 23       	and	r26, r26
     fc6:	29 f4       	brne	.+10     	; 0xfd2 <pow+0x50>
     fc8:	ab 2f       	mov	r26, r27
     fca:	be 2f       	mov	r27, r30
     fcc:	f8 5f       	subi	r31, 0xF8	; 248
     fce:	d0 f3       	brcs	.-12     	; 0xfc4 <pow+0x42>
     fd0:	10 c0       	rjmp	.+32     	; 0xff2 <pow+0x70>
     fd2:	ff 5f       	subi	r31, 0xFF	; 255
     fd4:	70 f4       	brcc	.+28     	; 0xff2 <pow+0x70>
     fd6:	a6 95       	lsr	r26
     fd8:	e0 f7       	brcc	.-8      	; 0xfd2 <pow+0x50>
     fda:	f7 39       	cpi	r31, 0x97	; 151
     fdc:	50 f0       	brcs	.+20     	; 0xff2 <pow+0x70>
     fde:	19 f0       	breq	.+6      	; 0xfe6 <pow+0x64>
     fe0:	ff 3a       	cpi	r31, 0xAF	; 175
     fe2:	38 f4       	brcc	.+14     	; 0xff2 <pow+0x70>
     fe4:	9f 77       	andi	r25, 0x7F	; 127
     fe6:	9f 93       	push	r25
     fe8:	0c d0       	rcall	.+24     	; 0x1002 <pow+0x80>
     fea:	0f 90       	pop	r0
     fec:	07 fc       	sbrc	r0, 7
     fee:	90 58       	subi	r25, 0x80	; 128
     ff0:	08 95       	ret
     ff2:	3e f0       	brts	.+14     	; 0x1002 <pow+0x80>
     ff4:	18 cf       	rjmp	.-464    	; 0xe26 <__fp_nan>
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	80 e8       	ldi	r24, 0x80	; 128
     ffc:	9f e3       	ldi	r25, 0x3F	; 63
     ffe:	08 95       	ret
    1000:	4f e7       	ldi	r20, 0x7F	; 127
    1002:	9f 77       	andi	r25, 0x7F	; 127
    1004:	5f 93       	push	r21
    1006:	4f 93       	push	r20
    1008:	3f 93       	push	r19
    100a:	2f 93       	push	r18
    100c:	e7 d0       	rcall	.+462    	; 0x11dc <log>
    100e:	2f 91       	pop	r18
    1010:	3f 91       	pop	r19
    1012:	4f 91       	pop	r20
    1014:	5f 91       	pop	r21
    1016:	52 df       	rcall	.-348    	; 0xebc <__mulsf3>
    1018:	25 c0       	rjmp	.+74     	; 0x1064 <exp>

0000101a <round>:
    101a:	2f df       	rcall	.-418    	; 0xe7a <__fp_splitA>
    101c:	e0 f0       	brcs	.+56     	; 0x1056 <round+0x3c>
    101e:	9e 37       	cpi	r25, 0x7E	; 126
    1020:	d8 f0       	brcs	.+54     	; 0x1058 <round+0x3e>
    1022:	96 39       	cpi	r25, 0x96	; 150
    1024:	b8 f4       	brcc	.+46     	; 0x1054 <round+0x3a>
    1026:	9e 38       	cpi	r25, 0x8E	; 142
    1028:	48 f4       	brcc	.+18     	; 0x103c <round+0x22>
    102a:	67 2f       	mov	r22, r23
    102c:	78 2f       	mov	r23, r24
    102e:	88 27       	eor	r24, r24
    1030:	98 5f       	subi	r25, 0xF8	; 248
    1032:	f9 cf       	rjmp	.-14     	; 0x1026 <round+0xc>
    1034:	86 95       	lsr	r24
    1036:	77 95       	ror	r23
    1038:	67 95       	ror	r22
    103a:	93 95       	inc	r25
    103c:	95 39       	cpi	r25, 0x95	; 149
    103e:	d0 f3       	brcs	.-12     	; 0x1034 <round+0x1a>
    1040:	b6 2f       	mov	r27, r22
    1042:	b1 70       	andi	r27, 0x01	; 1
    1044:	6b 0f       	add	r22, r27
    1046:	71 1d       	adc	r23, r1
    1048:	81 1d       	adc	r24, r1
    104a:	20 f4       	brcc	.+8      	; 0x1054 <round+0x3a>
    104c:	87 95       	ror	r24
    104e:	77 95       	ror	r23
    1050:	67 95       	ror	r22
    1052:	93 95       	inc	r25
    1054:	33 c0       	rjmp	.+102    	; 0x10bc <__fp_mintl>
    1056:	4d c0       	rjmp	.+154    	; 0x10f2 <__fp_mpack>
    1058:	2b cf       	rjmp	.-426    	; 0xeb0 <__fp_szero>
    105a:	19 f4       	brne	.+6      	; 0x1062 <round+0x48>
    105c:	0e f0       	brts	.+2      	; 0x1060 <round+0x46>
    105e:	dd ce       	rjmp	.-582    	; 0xe1a <__fp_inf>
    1060:	26 cf       	rjmp	.-436    	; 0xeae <__fp_zero>
    1062:	e1 ce       	rjmp	.-574    	; 0xe26 <__fp_nan>

00001064 <exp>:
    1064:	0a df       	rcall	.-492    	; 0xe7a <__fp_splitA>
    1066:	c8 f3       	brcs	.-14     	; 0x105a <round+0x40>
    1068:	96 38       	cpi	r25, 0x86	; 134
    106a:	c0 f7       	brcc	.-16     	; 0x105c <round+0x42>
    106c:	07 f8       	bld	r0, 7
    106e:	0f 92       	push	r0
    1070:	e8 94       	clt
    1072:	2b e3       	ldi	r18, 0x3B	; 59
    1074:	3a ea       	ldi	r19, 0xAA	; 170
    1076:	48 eb       	ldi	r20, 0xB8	; 184
    1078:	5f e7       	ldi	r21, 0x7F	; 127
    107a:	2e df       	rcall	.-420    	; 0xed8 <__mulsf3_pse>
    107c:	0f 92       	push	r0
    107e:	0f 92       	push	r0
    1080:	0f 92       	push	r0
    1082:	4d b7       	in	r20, 0x3d	; 61
    1084:	5e b7       	in	r21, 0x3e	; 62
    1086:	0f 92       	push	r0
    1088:	e9 d0       	rcall	.+466    	; 0x125c <modf>
    108a:	e6 e2       	ldi	r30, 0x26	; 38
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	3f d0       	rcall	.+126    	; 0x110e <__fp_powser>
    1090:	4f 91       	pop	r20
    1092:	5f 91       	pop	r21
    1094:	ef 91       	pop	r30
    1096:	ff 91       	pop	r31
    1098:	e5 95       	asr	r30
    109a:	ee 1f       	adc	r30, r30
    109c:	ff 1f       	adc	r31, r31
    109e:	49 f0       	breq	.+18     	; 0x10b2 <exp+0x4e>
    10a0:	fe 57       	subi	r31, 0x7E	; 126
    10a2:	e0 68       	ori	r30, 0x80	; 128
    10a4:	44 27       	eor	r20, r20
    10a6:	ee 0f       	add	r30, r30
    10a8:	44 1f       	adc	r20, r20
    10aa:	fa 95       	dec	r31
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <exp+0x42>
    10ae:	41 95       	neg	r20
    10b0:	55 0b       	sbc	r21, r21
    10b2:	5b d0       	rcall	.+182    	; 0x116a <ldexp>
    10b4:	0f 90       	pop	r0
    10b6:	07 fe       	sbrs	r0, 7
    10b8:	4f c0       	rjmp	.+158    	; 0x1158 <inverse>
    10ba:	08 95       	ret

000010bc <__fp_mintl>:
    10bc:	88 23       	and	r24, r24
    10be:	71 f4       	brne	.+28     	; 0x10dc <__fp_mintl+0x20>
    10c0:	77 23       	and	r23, r23
    10c2:	21 f0       	breq	.+8      	; 0x10cc <__fp_mintl+0x10>
    10c4:	98 50       	subi	r25, 0x08	; 8
    10c6:	87 2b       	or	r24, r23
    10c8:	76 2f       	mov	r23, r22
    10ca:	07 c0       	rjmp	.+14     	; 0x10da <__fp_mintl+0x1e>
    10cc:	66 23       	and	r22, r22
    10ce:	11 f4       	brne	.+4      	; 0x10d4 <__fp_mintl+0x18>
    10d0:	99 27       	eor	r25, r25
    10d2:	0d c0       	rjmp	.+26     	; 0x10ee <__fp_mintl+0x32>
    10d4:	90 51       	subi	r25, 0x10	; 16
    10d6:	86 2b       	or	r24, r22
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	2a f0       	brmi	.+10     	; 0x10e8 <__fp_mintl+0x2c>
    10de:	9a 95       	dec	r25
    10e0:	66 0f       	add	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	da f7       	brpl	.-10     	; 0x10de <__fp_mintl+0x22>
    10e8:	88 0f       	add	r24, r24
    10ea:	96 95       	lsr	r25
    10ec:	87 95       	ror	r24
    10ee:	97 f9       	bld	r25, 7
    10f0:	08 95       	ret

000010f2 <__fp_mpack>:
    10f2:	9f 3f       	cpi	r25, 0xFF	; 255
    10f4:	31 f0       	breq	.+12     	; 0x1102 <__fp_mpack_finite+0xc>

000010f6 <__fp_mpack_finite>:
    10f6:	91 50       	subi	r25, 0x01	; 1
    10f8:	20 f4       	brcc	.+8      	; 0x1102 <__fp_mpack_finite+0xc>
    10fa:	87 95       	ror	r24
    10fc:	77 95       	ror	r23
    10fe:	67 95       	ror	r22
    1100:	b7 95       	ror	r27
    1102:	88 0f       	add	r24, r24
    1104:	91 1d       	adc	r25, r1
    1106:	96 95       	lsr	r25
    1108:	87 95       	ror	r24
    110a:	97 f9       	bld	r25, 7
    110c:	08 95       	ret

0000110e <__fp_powser>:
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	1f 93       	push	r17
    1114:	0f 93       	push	r16
    1116:	ff 92       	push	r15
    1118:	ef 92       	push	r14
    111a:	df 92       	push	r13
    111c:	7b 01       	movw	r14, r22
    111e:	8c 01       	movw	r16, r24
    1120:	68 94       	set
    1122:	05 c0       	rjmp	.+10     	; 0x112e <__fp_powser+0x20>
    1124:	da 2e       	mov	r13, r26
    1126:	ef 01       	movw	r28, r30
    1128:	d5 de       	rcall	.-598    	; 0xed4 <__mulsf3x>
    112a:	fe 01       	movw	r30, r28
    112c:	e8 94       	clt
    112e:	a5 91       	lpm	r26, Z+
    1130:	25 91       	lpm	r18, Z+
    1132:	35 91       	lpm	r19, Z+
    1134:	45 91       	lpm	r20, Z+
    1136:	55 91       	lpm	r21, Z+
    1138:	ae f3       	brts	.-22     	; 0x1124 <__fp_powser+0x16>
    113a:	ef 01       	movw	r28, r30
    113c:	8a dd       	rcall	.-1260   	; 0xc52 <__addsf3x>
    113e:	fe 01       	movw	r30, r28
    1140:	97 01       	movw	r18, r14
    1142:	a8 01       	movw	r20, r16
    1144:	da 94       	dec	r13
    1146:	79 f7       	brne	.-34     	; 0x1126 <__fp_powser+0x18>
    1148:	df 90       	pop	r13
    114a:	ef 90       	pop	r14
    114c:	ff 90       	pop	r15
    114e:	0f 91       	pop	r16
    1150:	1f 91       	pop	r17
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <inverse>:
    1158:	9b 01       	movw	r18, r22
    115a:	ac 01       	movw	r20, r24
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	80 e8       	ldi	r24, 0x80	; 128
    1162:	9f e3       	ldi	r25, 0x3F	; 63
    1164:	ae c0       	rjmp	.+348    	; 0x12c2 <__divsf3>
    1166:	59 ce       	rjmp	.-846    	; 0xe1a <__fp_inf>
    1168:	c4 cf       	rjmp	.-120    	; 0x10f2 <__fp_mpack>

0000116a <ldexp>:
    116a:	87 de       	rcall	.-754    	; 0xe7a <__fp_splitA>
    116c:	e8 f3       	brcs	.-6      	; 0x1168 <inverse+0x10>
    116e:	99 23       	and	r25, r25
    1170:	d9 f3       	breq	.-10     	; 0x1168 <inverse+0x10>
    1172:	94 0f       	add	r25, r20
    1174:	51 1d       	adc	r21, r1
    1176:	bb f3       	brvs	.-18     	; 0x1166 <inverse+0xe>
    1178:	91 50       	subi	r25, 0x01	; 1
    117a:	50 40       	sbci	r21, 0x00	; 0
    117c:	94 f0       	brlt	.+36     	; 0x11a2 <ldexp+0x38>
    117e:	59 f0       	breq	.+22     	; 0x1196 <ldexp+0x2c>
    1180:	88 23       	and	r24, r24
    1182:	32 f0       	brmi	.+12     	; 0x1190 <ldexp+0x26>
    1184:	66 0f       	add	r22, r22
    1186:	77 1f       	adc	r23, r23
    1188:	88 1f       	adc	r24, r24
    118a:	91 50       	subi	r25, 0x01	; 1
    118c:	50 40       	sbci	r21, 0x00	; 0
    118e:	c1 f7       	brne	.-16     	; 0x1180 <ldexp+0x16>
    1190:	9e 3f       	cpi	r25, 0xFE	; 254
    1192:	51 05       	cpc	r21, r1
    1194:	44 f7       	brge	.-48     	; 0x1166 <inverse+0xe>
    1196:	88 0f       	add	r24, r24
    1198:	91 1d       	adc	r25, r1
    119a:	96 95       	lsr	r25
    119c:	87 95       	ror	r24
    119e:	97 f9       	bld	r25, 7
    11a0:	08 95       	ret
    11a2:	5f 3f       	cpi	r21, 0xFF	; 255
    11a4:	ac f0       	brlt	.+42     	; 0x11d0 <ldexp+0x66>
    11a6:	98 3e       	cpi	r25, 0xE8	; 232
    11a8:	9c f0       	brlt	.+38     	; 0x11d0 <ldexp+0x66>
    11aa:	bb 27       	eor	r27, r27
    11ac:	86 95       	lsr	r24
    11ae:	77 95       	ror	r23
    11b0:	67 95       	ror	r22
    11b2:	b7 95       	ror	r27
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <ldexp+0x4e>
    11b6:	b1 60       	ori	r27, 0x01	; 1
    11b8:	93 95       	inc	r25
    11ba:	c1 f7       	brne	.-16     	; 0x11ac <ldexp+0x42>
    11bc:	bb 0f       	add	r27, r27
    11be:	58 f7       	brcc	.-42     	; 0x1196 <ldexp+0x2c>
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <ldexp+0x5c>
    11c2:	60 ff       	sbrs	r22, 0
    11c4:	e8 cf       	rjmp	.-48     	; 0x1196 <ldexp+0x2c>
    11c6:	6f 5f       	subi	r22, 0xFF	; 255
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8f 4f       	sbci	r24, 0xFF	; 255
    11cc:	9f 4f       	sbci	r25, 0xFF	; 255
    11ce:	e3 cf       	rjmp	.-58     	; 0x1196 <ldexp+0x2c>
    11d0:	6f ce       	rjmp	.-802    	; 0xeb0 <__fp_szero>
    11d2:	0e f0       	brts	.+2      	; 0x11d6 <ldexp+0x6c>
    11d4:	8e cf       	rjmp	.-228    	; 0x10f2 <__fp_mpack>
    11d6:	27 ce       	rjmp	.-946    	; 0xe26 <__fp_nan>
    11d8:	68 94       	set
    11da:	1f ce       	rjmp	.-962    	; 0xe1a <__fp_inf>

000011dc <log>:
    11dc:	4e de       	rcall	.-868    	; 0xe7a <__fp_splitA>
    11de:	c8 f3       	brcs	.-14     	; 0x11d2 <ldexp+0x68>
    11e0:	99 23       	and	r25, r25
    11e2:	d1 f3       	breq	.-12     	; 0x11d8 <ldexp+0x6e>
    11e4:	c6 f3       	brts	.-16     	; 0x11d6 <ldexp+0x6c>
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	1f 93       	push	r17
    11ec:	0f 93       	push	r16
    11ee:	ff 92       	push	r15
    11f0:	c9 2f       	mov	r28, r25
    11f2:	dd 27       	eor	r29, r29
    11f4:	88 23       	and	r24, r24
    11f6:	2a f0       	brmi	.+10     	; 0x1202 <log+0x26>
    11f8:	21 97       	sbiw	r28, 0x01	; 1
    11fa:	66 0f       	add	r22, r22
    11fc:	77 1f       	adc	r23, r23
    11fe:	88 1f       	adc	r24, r24
    1200:	da f7       	brpl	.-10     	; 0x11f8 <log+0x1c>
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	40 e8       	ldi	r20, 0x80	; 128
    1208:	5f eb       	ldi	r21, 0xBF	; 191
    120a:	9f e3       	ldi	r25, 0x3F	; 63
    120c:	88 39       	cpi	r24, 0x98	; 152
    120e:	20 f0       	brcs	.+8      	; 0x1218 <log+0x3c>
    1210:	80 3e       	cpi	r24, 0xE0	; 224
    1212:	30 f0       	brcs	.+12     	; 0x1220 <log+0x44>
    1214:	21 96       	adiw	r28, 0x01	; 1
    1216:	8f 77       	andi	r24, 0x7F	; 127
    1218:	0b dd       	rcall	.-1514   	; 0xc30 <__addsf3>
    121a:	ee e4       	ldi	r30, 0x4E	; 78
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	03 c0       	rjmp	.+6      	; 0x1226 <log+0x4a>
    1220:	07 dd       	rcall	.-1522   	; 0xc30 <__addsf3>
    1222:	eb e7       	ldi	r30, 0x7B	; 123
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	73 df       	rcall	.-282    	; 0x110e <__fp_powser>
    1228:	8b 01       	movw	r16, r22
    122a:	be 01       	movw	r22, r28
    122c:	ec 01       	movw	r28, r24
    122e:	fb 2e       	mov	r15, r27
    1230:	6f 57       	subi	r22, 0x7F	; 127
    1232:	71 09       	sbc	r23, r1
    1234:	75 95       	asr	r23
    1236:	77 1f       	adc	r23, r23
    1238:	88 0b       	sbc	r24, r24
    123a:	99 0b       	sbc	r25, r25
    123c:	8f dd       	rcall	.-1250   	; 0xd5c <__floatsisf>
    123e:	28 e1       	ldi	r18, 0x18	; 24
    1240:	32 e7       	ldi	r19, 0x72	; 114
    1242:	41 e3       	ldi	r20, 0x31	; 49
    1244:	5f e3       	ldi	r21, 0x3F	; 63
    1246:	46 de       	rcall	.-884    	; 0xed4 <__mulsf3x>
    1248:	af 2d       	mov	r26, r15
    124a:	98 01       	movw	r18, r16
    124c:	ae 01       	movw	r20, r28
    124e:	ff 90       	pop	r15
    1250:	0f 91       	pop	r16
    1252:	1f 91       	pop	r17
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	fc dc       	rcall	.-1544   	; 0xc52 <__addsf3x>
    125a:	f6 cd       	rjmp	.-1044   	; 0xe48 <__fp_round>

0000125c <modf>:
    125c:	fa 01       	movw	r30, r20
    125e:	dc 01       	movw	r26, r24
    1260:	aa 0f       	add	r26, r26
    1262:	bb 1f       	adc	r27, r27
    1264:	9b 01       	movw	r18, r22
    1266:	ac 01       	movw	r20, r24
    1268:	bf 57       	subi	r27, 0x7F	; 127
    126a:	28 f4       	brcc	.+10     	; 0x1276 <modf+0x1a>
    126c:	22 27       	eor	r18, r18
    126e:	33 27       	eor	r19, r19
    1270:	44 27       	eor	r20, r20
    1272:	50 78       	andi	r21, 0x80	; 128
    1274:	1f c0       	rjmp	.+62     	; 0x12b4 <modf+0x58>
    1276:	b7 51       	subi	r27, 0x17	; 23
    1278:	88 f4       	brcc	.+34     	; 0x129c <modf+0x40>
    127a:	ab 2f       	mov	r26, r27
    127c:	00 24       	eor	r0, r0
    127e:	46 95       	lsr	r20
    1280:	37 95       	ror	r19
    1282:	27 95       	ror	r18
    1284:	01 1c       	adc	r0, r1
    1286:	a3 95       	inc	r26
    1288:	d2 f3       	brmi	.-12     	; 0x127e <modf+0x22>
    128a:	00 20       	and	r0, r0
    128c:	69 f0       	breq	.+26     	; 0x12a8 <modf+0x4c>
    128e:	22 0f       	add	r18, r18
    1290:	33 1f       	adc	r19, r19
    1292:	44 1f       	adc	r20, r20
    1294:	b3 95       	inc	r27
    1296:	da f3       	brmi	.-10     	; 0x128e <modf+0x32>
    1298:	0d d0       	rcall	.+26     	; 0x12b4 <modf+0x58>
    129a:	c9 cc       	rjmp	.-1646   	; 0xc2e <__subsf3>
    129c:	61 30       	cpi	r22, 0x01	; 1
    129e:	71 05       	cpc	r23, r1
    12a0:	a0 e8       	ldi	r26, 0x80	; 128
    12a2:	8a 07       	cpc	r24, r26
    12a4:	b9 46       	sbci	r27, 0x69	; 105
    12a6:	30 f4       	brcc	.+12     	; 0x12b4 <modf+0x58>
    12a8:	9b 01       	movw	r18, r22
    12aa:	ac 01       	movw	r20, r24
    12ac:	66 27       	eor	r22, r22
    12ae:	77 27       	eor	r23, r23
    12b0:	88 27       	eor	r24, r24
    12b2:	90 78       	andi	r25, 0x80	; 128
    12b4:	30 96       	adiw	r30, 0x00	; 0
    12b6:	21 f0       	breq	.+8      	; 0x12c0 <modf+0x64>
    12b8:	20 83       	st	Z, r18
    12ba:	31 83       	std	Z+1, r19	; 0x01
    12bc:	42 83       	std	Z+2, r20	; 0x02
    12be:	53 83       	std	Z+3, r21	; 0x03
    12c0:	08 95       	ret

000012c2 <__divsf3>:
    12c2:	0c d0       	rcall	.+24     	; 0x12dc <__divsf3x>
    12c4:	c1 cd       	rjmp	.-1150   	; 0xe48 <__fp_round>
    12c6:	b9 dd       	rcall	.-1166   	; 0xe3a <__fp_pscB>
    12c8:	40 f0       	brcs	.+16     	; 0x12da <__divsf3+0x18>
    12ca:	b0 dd       	rcall	.-1184   	; 0xe2c <__fp_pscA>
    12cc:	30 f0       	brcs	.+12     	; 0x12da <__divsf3+0x18>
    12ce:	21 f4       	brne	.+8      	; 0x12d8 <__divsf3+0x16>
    12d0:	5f 3f       	cpi	r21, 0xFF	; 255
    12d2:	19 f0       	breq	.+6      	; 0x12da <__divsf3+0x18>
    12d4:	a2 cd       	rjmp	.-1212   	; 0xe1a <__fp_inf>
    12d6:	51 11       	cpse	r21, r1
    12d8:	eb cd       	rjmp	.-1066   	; 0xeb0 <__fp_szero>
    12da:	a5 cd       	rjmp	.-1206   	; 0xe26 <__fp_nan>

000012dc <__divsf3x>:
    12dc:	c6 dd       	rcall	.-1140   	; 0xe6a <__fp_split3>
    12de:	98 f3       	brcs	.-26     	; 0x12c6 <__divsf3+0x4>

000012e0 <__divsf3_pse>:
    12e0:	99 23       	and	r25, r25
    12e2:	c9 f3       	breq	.-14     	; 0x12d6 <__divsf3+0x14>
    12e4:	55 23       	and	r21, r21
    12e6:	b1 f3       	breq	.-20     	; 0x12d4 <__divsf3+0x12>
    12e8:	95 1b       	sub	r25, r21
    12ea:	55 0b       	sbc	r21, r21
    12ec:	bb 27       	eor	r27, r27
    12ee:	aa 27       	eor	r26, r26
    12f0:	62 17       	cp	r22, r18
    12f2:	73 07       	cpc	r23, r19
    12f4:	84 07       	cpc	r24, r20
    12f6:	38 f0       	brcs	.+14     	; 0x1306 <__divsf3_pse+0x26>
    12f8:	9f 5f       	subi	r25, 0xFF	; 255
    12fa:	5f 4f       	sbci	r21, 0xFF	; 255
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	44 1f       	adc	r20, r20
    1302:	aa 1f       	adc	r26, r26
    1304:	a9 f3       	breq	.-22     	; 0x12f0 <__divsf3_pse+0x10>
    1306:	33 d0       	rcall	.+102    	; 0x136e <__divsf3_pse+0x8e>
    1308:	0e 2e       	mov	r0, r30
    130a:	3a f0       	brmi	.+14     	; 0x131a <__divsf3_pse+0x3a>
    130c:	e0 e8       	ldi	r30, 0x80	; 128
    130e:	30 d0       	rcall	.+96     	; 0x1370 <__divsf3_pse+0x90>
    1310:	91 50       	subi	r25, 0x01	; 1
    1312:	50 40       	sbci	r21, 0x00	; 0
    1314:	e6 95       	lsr	r30
    1316:	00 1c       	adc	r0, r0
    1318:	ca f7       	brpl	.-14     	; 0x130c <__divsf3_pse+0x2c>
    131a:	29 d0       	rcall	.+82     	; 0x136e <__divsf3_pse+0x8e>
    131c:	fe 2f       	mov	r31, r30
    131e:	27 d0       	rcall	.+78     	; 0x136e <__divsf3_pse+0x8e>
    1320:	66 0f       	add	r22, r22
    1322:	77 1f       	adc	r23, r23
    1324:	88 1f       	adc	r24, r24
    1326:	bb 1f       	adc	r27, r27
    1328:	26 17       	cp	r18, r22
    132a:	37 07       	cpc	r19, r23
    132c:	48 07       	cpc	r20, r24
    132e:	ab 07       	cpc	r26, r27
    1330:	b0 e8       	ldi	r27, 0x80	; 128
    1332:	09 f0       	breq	.+2      	; 0x1336 <__divsf3_pse+0x56>
    1334:	bb 0b       	sbc	r27, r27
    1336:	80 2d       	mov	r24, r0
    1338:	bf 01       	movw	r22, r30
    133a:	ff 27       	eor	r31, r31
    133c:	93 58       	subi	r25, 0x83	; 131
    133e:	5f 4f       	sbci	r21, 0xFF	; 255
    1340:	2a f0       	brmi	.+10     	; 0x134c <__divsf3_pse+0x6c>
    1342:	9e 3f       	cpi	r25, 0xFE	; 254
    1344:	51 05       	cpc	r21, r1
    1346:	68 f0       	brcs	.+26     	; 0x1362 <__divsf3_pse+0x82>
    1348:	68 cd       	rjmp	.-1328   	; 0xe1a <__fp_inf>
    134a:	b2 cd       	rjmp	.-1180   	; 0xeb0 <__fp_szero>
    134c:	5f 3f       	cpi	r21, 0xFF	; 255
    134e:	ec f3       	brlt	.-6      	; 0x134a <__divsf3_pse+0x6a>
    1350:	98 3e       	cpi	r25, 0xE8	; 232
    1352:	dc f3       	brlt	.-10     	; 0x134a <__divsf3_pse+0x6a>
    1354:	86 95       	lsr	r24
    1356:	77 95       	ror	r23
    1358:	67 95       	ror	r22
    135a:	b7 95       	ror	r27
    135c:	f7 95       	ror	r31
    135e:	9f 5f       	subi	r25, 0xFF	; 255
    1360:	c9 f7       	brne	.-14     	; 0x1354 <__divsf3_pse+0x74>
    1362:	88 0f       	add	r24, r24
    1364:	91 1d       	adc	r25, r1
    1366:	96 95       	lsr	r25
    1368:	87 95       	ror	r24
    136a:	97 f9       	bld	r25, 7
    136c:	08 95       	ret
    136e:	e1 e0       	ldi	r30, 0x01	; 1
    1370:	66 0f       	add	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	bb 1f       	adc	r27, r27
    1378:	62 17       	cp	r22, r18
    137a:	73 07       	cpc	r23, r19
    137c:	84 07       	cpc	r24, r20
    137e:	ba 07       	cpc	r27, r26
    1380:	20 f0       	brcs	.+8      	; 0x138a <__divsf3_pse+0xaa>
    1382:	62 1b       	sub	r22, r18
    1384:	73 0b       	sbc	r23, r19
    1386:	84 0b       	sbc	r24, r20
    1388:	ba 0b       	sbc	r27, r26
    138a:	ee 1f       	adc	r30, r30
    138c:	88 f7       	brcc	.-30     	; 0x1370 <__divsf3_pse+0x90>
    138e:	e0 95       	com	r30
    1390:	08 95       	ret

00001392 <__udivmodsi4>:
    1392:	a1 e2       	ldi	r26, 0x21	; 33
    1394:	1a 2e       	mov	r1, r26
    1396:	aa 1b       	sub	r26, r26
    1398:	bb 1b       	sub	r27, r27
    139a:	fd 01       	movw	r30, r26
    139c:	0d c0       	rjmp	.+26     	; 0x13b8 <__udivmodsi4_ep>

0000139e <__udivmodsi4_loop>:
    139e:	aa 1f       	adc	r26, r26
    13a0:	bb 1f       	adc	r27, r27
    13a2:	ee 1f       	adc	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	a2 17       	cp	r26, r18
    13a8:	b3 07       	cpc	r27, r19
    13aa:	e4 07       	cpc	r30, r20
    13ac:	f5 07       	cpc	r31, r21
    13ae:	20 f0       	brcs	.+8      	; 0x13b8 <__udivmodsi4_ep>
    13b0:	a2 1b       	sub	r26, r18
    13b2:	b3 0b       	sbc	r27, r19
    13b4:	e4 0b       	sbc	r30, r20
    13b6:	f5 0b       	sbc	r31, r21

000013b8 <__udivmodsi4_ep>:
    13b8:	66 1f       	adc	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	88 1f       	adc	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	1a 94       	dec	r1
    13c2:	69 f7       	brne	.-38     	; 0x139e <__udivmodsi4_loop>
    13c4:	60 95       	com	r22
    13c6:	70 95       	com	r23
    13c8:	80 95       	com	r24
    13ca:	90 95       	com	r25
    13cc:	9b 01       	movw	r18, r22
    13ce:	ac 01       	movw	r20, r24
    13d0:	bd 01       	movw	r22, r26
    13d2:	cf 01       	movw	r24, r30
    13d4:	08 95       	ret

000013d6 <__umulhisi3>:
    13d6:	a2 9f       	mul	r26, r18
    13d8:	b0 01       	movw	r22, r0
    13da:	b3 9f       	mul	r27, r19
    13dc:	c0 01       	movw	r24, r0
    13de:	a3 9f       	mul	r26, r19
    13e0:	01 d0       	rcall	.+2      	; 0x13e4 <__umulhisi3+0xe>
    13e2:	b2 9f       	mul	r27, r18
    13e4:	70 0d       	add	r23, r0
    13e6:	81 1d       	adc	r24, r1
    13e8:	11 24       	eor	r1, r1
    13ea:	91 1d       	adc	r25, r1
    13ec:	08 95       	ret

000013ee <malloc>:
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	91 05       	cpc	r25, r1
    13fa:	10 f4       	brcc	.+4      	; 0x1400 <malloc+0x12>
    13fc:	82 e0       	ldi	r24, 0x02	; 2
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__flp>
    1404:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <__flp+0x1>
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	a0 e0       	ldi	r26, 0x00	; 0
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	30 97       	sbiw	r30, 0x00	; 0
    1412:	19 f1       	breq	.+70     	; 0x145a <malloc+0x6c>
    1414:	40 81       	ld	r20, Z
    1416:	51 81       	ldd	r21, Z+1	; 0x01
    1418:	02 81       	ldd	r16, Z+2	; 0x02
    141a:	13 81       	ldd	r17, Z+3	; 0x03
    141c:	48 17       	cp	r20, r24
    141e:	59 07       	cpc	r21, r25
    1420:	c8 f0       	brcs	.+50     	; 0x1454 <malloc+0x66>
    1422:	84 17       	cp	r24, r20
    1424:	95 07       	cpc	r25, r21
    1426:	69 f4       	brne	.+26     	; 0x1442 <malloc+0x54>
    1428:	10 97       	sbiw	r26, 0x00	; 0
    142a:	31 f0       	breq	.+12     	; 0x1438 <malloc+0x4a>
    142c:	12 96       	adiw	r26, 0x02	; 2
    142e:	0c 93       	st	X, r16
    1430:	12 97       	sbiw	r26, 0x02	; 2
    1432:	13 96       	adiw	r26, 0x03	; 3
    1434:	1c 93       	st	X, r17
    1436:	27 c0       	rjmp	.+78     	; 0x1486 <malloc+0x98>
    1438:	00 93 71 00 	sts	0x0071, r16	; 0x800071 <__flp>
    143c:	10 93 72 00 	sts	0x0072, r17	; 0x800072 <__flp+0x1>
    1440:	22 c0       	rjmp	.+68     	; 0x1486 <malloc+0x98>
    1442:	21 15       	cp	r18, r1
    1444:	31 05       	cpc	r19, r1
    1446:	19 f0       	breq	.+6      	; 0x144e <malloc+0x60>
    1448:	42 17       	cp	r20, r18
    144a:	53 07       	cpc	r21, r19
    144c:	18 f4       	brcc	.+6      	; 0x1454 <malloc+0x66>
    144e:	9a 01       	movw	r18, r20
    1450:	bd 01       	movw	r22, r26
    1452:	ef 01       	movw	r28, r30
    1454:	df 01       	movw	r26, r30
    1456:	f8 01       	movw	r30, r16
    1458:	db cf       	rjmp	.-74     	; 0x1410 <malloc+0x22>
    145a:	21 15       	cp	r18, r1
    145c:	31 05       	cpc	r19, r1
    145e:	f9 f0       	breq	.+62     	; 0x149e <malloc+0xb0>
    1460:	28 1b       	sub	r18, r24
    1462:	39 0b       	sbc	r19, r25
    1464:	24 30       	cpi	r18, 0x04	; 4
    1466:	31 05       	cpc	r19, r1
    1468:	80 f4       	brcc	.+32     	; 0x148a <malloc+0x9c>
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	9b 81       	ldd	r25, Y+3	; 0x03
    146e:	61 15       	cp	r22, r1
    1470:	71 05       	cpc	r23, r1
    1472:	21 f0       	breq	.+8      	; 0x147c <malloc+0x8e>
    1474:	fb 01       	movw	r30, r22
    1476:	93 83       	std	Z+3, r25	; 0x03
    1478:	82 83       	std	Z+2, r24	; 0x02
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <malloc+0x96>
    147c:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <__flp+0x1>
    1480:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__flp>
    1484:	fe 01       	movw	r30, r28
    1486:	32 96       	adiw	r30, 0x02	; 2
    1488:	44 c0       	rjmp	.+136    	; 0x1512 <malloc+0x124>
    148a:	fe 01       	movw	r30, r28
    148c:	e2 0f       	add	r30, r18
    148e:	f3 1f       	adc	r31, r19
    1490:	81 93       	st	Z+, r24
    1492:	91 93       	st	Z+, r25
    1494:	22 50       	subi	r18, 0x02	; 2
    1496:	31 09       	sbc	r19, r1
    1498:	39 83       	std	Y+1, r19	; 0x01
    149a:	28 83       	st	Y, r18
    149c:	3a c0       	rjmp	.+116    	; 0x1512 <malloc+0x124>
    149e:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <__brkval>
    14a2:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__brkval+0x1>
    14a6:	23 2b       	or	r18, r19
    14a8:	41 f4       	brne	.+16     	; 0x14ba <malloc+0xcc>
    14aa:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    14ae:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    14b2:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <__brkval+0x1>
    14b6:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__brkval>
    14ba:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    14be:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	41 f4       	brne	.+16     	; 0x14d8 <malloc+0xea>
    14c8:	2d b7       	in	r18, 0x3d	; 61
    14ca:	3e b7       	in	r19, 0x3e	; 62
    14cc:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    14d0:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    14d4:	24 1b       	sub	r18, r20
    14d6:	35 0b       	sbc	r19, r21
    14d8:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <__brkval>
    14dc:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <__brkval+0x1>
    14e0:	e2 17       	cp	r30, r18
    14e2:	f3 07       	cpc	r31, r19
    14e4:	a0 f4       	brcc	.+40     	; 0x150e <malloc+0x120>
    14e6:	2e 1b       	sub	r18, r30
    14e8:	3f 0b       	sbc	r19, r31
    14ea:	28 17       	cp	r18, r24
    14ec:	39 07       	cpc	r19, r25
    14ee:	78 f0       	brcs	.+30     	; 0x150e <malloc+0x120>
    14f0:	ac 01       	movw	r20, r24
    14f2:	4e 5f       	subi	r20, 0xFE	; 254
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255
    14f6:	24 17       	cp	r18, r20
    14f8:	35 07       	cpc	r19, r21
    14fa:	48 f0       	brcs	.+18     	; 0x150e <malloc+0x120>
    14fc:	4e 0f       	add	r20, r30
    14fe:	5f 1f       	adc	r21, r31
    1500:	50 93 70 00 	sts	0x0070, r21	; 0x800070 <__brkval+0x1>
    1504:	40 93 6f 00 	sts	0x006F, r20	; 0x80006f <__brkval>
    1508:	81 93       	st	Z+, r24
    150a:	91 93       	st	Z+, r25
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <malloc+0x124>
    150e:	e0 e0       	ldi	r30, 0x00	; 0
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	cf 01       	movw	r24, r30
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <free>:
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	09 f4       	brne	.+2      	; 0x1528 <free+0xa>
    1526:	81 c0       	rjmp	.+258    	; 0x162a <free+0x10c>
    1528:	fc 01       	movw	r30, r24
    152a:	32 97       	sbiw	r30, 0x02	; 2
    152c:	13 82       	std	Z+3, r1	; 0x03
    152e:	12 82       	std	Z+2, r1	; 0x02
    1530:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <__flp>
    1534:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <__flp+0x1>
    1538:	10 97       	sbiw	r26, 0x00	; 0
    153a:	81 f4       	brne	.+32     	; 0x155c <free+0x3e>
    153c:	20 81       	ld	r18, Z
    153e:	31 81       	ldd	r19, Z+1	; 0x01
    1540:	82 0f       	add	r24, r18
    1542:	93 1f       	adc	r25, r19
    1544:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <__brkval>
    1548:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__brkval+0x1>
    154c:	28 17       	cp	r18, r24
    154e:	39 07       	cpc	r19, r25
    1550:	51 f5       	brne	.+84     	; 0x15a6 <free+0x88>
    1552:	f0 93 70 00 	sts	0x0070, r31	; 0x800070 <__brkval+0x1>
    1556:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <__brkval>
    155a:	67 c0       	rjmp	.+206    	; 0x162a <free+0x10c>
    155c:	ed 01       	movw	r28, r26
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	ce 17       	cp	r28, r30
    1564:	df 07       	cpc	r29, r31
    1566:	40 f4       	brcc	.+16     	; 0x1578 <free+0x5a>
    1568:	4a 81       	ldd	r20, Y+2	; 0x02
    156a:	5b 81       	ldd	r21, Y+3	; 0x03
    156c:	9e 01       	movw	r18, r28
    156e:	41 15       	cp	r20, r1
    1570:	51 05       	cpc	r21, r1
    1572:	f1 f0       	breq	.+60     	; 0x15b0 <free+0x92>
    1574:	ea 01       	movw	r28, r20
    1576:	f5 cf       	rjmp	.-22     	; 0x1562 <free+0x44>
    1578:	d3 83       	std	Z+3, r29	; 0x03
    157a:	c2 83       	std	Z+2, r28	; 0x02
    157c:	40 81       	ld	r20, Z
    157e:	51 81       	ldd	r21, Z+1	; 0x01
    1580:	84 0f       	add	r24, r20
    1582:	95 1f       	adc	r25, r21
    1584:	c8 17       	cp	r28, r24
    1586:	d9 07       	cpc	r29, r25
    1588:	59 f4       	brne	.+22     	; 0x15a0 <free+0x82>
    158a:	88 81       	ld	r24, Y
    158c:	99 81       	ldd	r25, Y+1	; 0x01
    158e:	84 0f       	add	r24, r20
    1590:	95 1f       	adc	r25, r21
    1592:	02 96       	adiw	r24, 0x02	; 2
    1594:	91 83       	std	Z+1, r25	; 0x01
    1596:	80 83       	st	Z, r24
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	9b 81       	ldd	r25, Y+3	; 0x03
    159c:	93 83       	std	Z+3, r25	; 0x03
    159e:	82 83       	std	Z+2, r24	; 0x02
    15a0:	21 15       	cp	r18, r1
    15a2:	31 05       	cpc	r19, r1
    15a4:	29 f4       	brne	.+10     	; 0x15b0 <free+0x92>
    15a6:	f0 93 72 00 	sts	0x0072, r31	; 0x800072 <__flp+0x1>
    15aa:	e0 93 71 00 	sts	0x0071, r30	; 0x800071 <__flp>
    15ae:	3d c0       	rjmp	.+122    	; 0x162a <free+0x10c>
    15b0:	e9 01       	movw	r28, r18
    15b2:	fb 83       	std	Y+3, r31	; 0x03
    15b4:	ea 83       	std	Y+2, r30	; 0x02
    15b6:	49 91       	ld	r20, Y+
    15b8:	59 91       	ld	r21, Y+
    15ba:	c4 0f       	add	r28, r20
    15bc:	d5 1f       	adc	r29, r21
    15be:	ec 17       	cp	r30, r28
    15c0:	fd 07       	cpc	r31, r29
    15c2:	61 f4       	brne	.+24     	; 0x15dc <free+0xbe>
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	84 0f       	add	r24, r20
    15ca:	95 1f       	adc	r25, r21
    15cc:	02 96       	adiw	r24, 0x02	; 2
    15ce:	e9 01       	movw	r28, r18
    15d0:	99 83       	std	Y+1, r25	; 0x01
    15d2:	88 83       	st	Y, r24
    15d4:	82 81       	ldd	r24, Z+2	; 0x02
    15d6:	93 81       	ldd	r25, Z+3	; 0x03
    15d8:	9b 83       	std	Y+3, r25	; 0x03
    15da:	8a 83       	std	Y+2, r24	; 0x02
    15dc:	e0 e0       	ldi	r30, 0x00	; 0
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	12 96       	adiw	r26, 0x02	; 2
    15e2:	8d 91       	ld	r24, X+
    15e4:	9c 91       	ld	r25, X
    15e6:	13 97       	sbiw	r26, 0x03	; 3
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	19 f0       	breq	.+6      	; 0x15f2 <free+0xd4>
    15ec:	fd 01       	movw	r30, r26
    15ee:	dc 01       	movw	r26, r24
    15f0:	f7 cf       	rjmp	.-18     	; 0x15e0 <free+0xc2>
    15f2:	8d 91       	ld	r24, X+
    15f4:	9c 91       	ld	r25, X
    15f6:	11 97       	sbiw	r26, 0x01	; 1
    15f8:	9d 01       	movw	r18, r26
    15fa:	2e 5f       	subi	r18, 0xFE	; 254
    15fc:	3f 4f       	sbci	r19, 0xFF	; 255
    15fe:	82 0f       	add	r24, r18
    1600:	93 1f       	adc	r25, r19
    1602:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <__brkval>
    1606:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <__brkval+0x1>
    160a:	28 17       	cp	r18, r24
    160c:	39 07       	cpc	r19, r25
    160e:	69 f4       	brne	.+26     	; 0x162a <free+0x10c>
    1610:	30 97       	sbiw	r30, 0x00	; 0
    1612:	29 f4       	brne	.+10     	; 0x161e <free+0x100>
    1614:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__flp+0x1>
    1618:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__flp>
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <free+0x104>
    161e:	13 82       	std	Z+3, r1	; 0x03
    1620:	12 82       	std	Z+2, r1	; 0x02
    1622:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <__brkval+0x1>
    1626:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__brkval>
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	08 95       	ret

00001630 <strlcat>:
    1630:	dc 01       	movw	r26, r24
    1632:	fb 01       	movw	r30, r22
    1634:	41 50       	subi	r20, 0x01	; 1
    1636:	50 40       	sbci	r21, 0x00	; 0
    1638:	70 f0       	brcs	.+28     	; 0x1656 <strlcat+0x26>
    163a:	0d 90       	ld	r0, X+
    163c:	00 20       	and	r0, r0
    163e:	d1 f7       	brne	.-12     	; 0x1634 <strlcat+0x4>
    1640:	11 97       	sbiw	r26, 0x01	; 1
    1642:	04 c0       	rjmp	.+8      	; 0x164c <strlcat+0x1c>
    1644:	01 90       	ld	r0, Z+
    1646:	0d 92       	st	X+, r0
    1648:	00 20       	and	r0, r0
    164a:	61 f0       	breq	.+24     	; 0x1664 <strlcat+0x34>
    164c:	41 50       	subi	r20, 0x01	; 1
    164e:	50 40       	sbci	r21, 0x00	; 0
    1650:	c8 f7       	brcc	.-14     	; 0x1644 <strlcat+0x14>
    1652:	1c 92       	st	X, r1
    1654:	bf 01       	movw	r22, r30
    1656:	01 90       	ld	r0, Z+
    1658:	00 20       	and	r0, r0
    165a:	e9 f7       	brne	.-6      	; 0x1656 <strlcat+0x26>
    165c:	e6 1b       	sub	r30, r22
    165e:	f7 0b       	sbc	r31, r23
    1660:	ae 0f       	add	r26, r30
    1662:	bf 1f       	adc	r27, r31
    1664:	08 94       	sec
    1666:	a8 0b       	sbc	r26, r24
    1668:	b9 0b       	sbc	r27, r25
    166a:	cd 01       	movw	r24, r26
    166c:	08 95       	ret

0000166e <strlcpy>:
    166e:	dc 01       	movw	r26, r24
    1670:	fb 01       	movw	r30, r22
    1672:	41 50       	subi	r20, 0x01	; 1
    1674:	50 40       	sbci	r21, 0x00	; 0
    1676:	58 f0       	brcs	.+22     	; 0x168e <strlcpy+0x20>
    1678:	49 f0       	breq	.+18     	; 0x168c <strlcpy+0x1e>
    167a:	01 90       	ld	r0, Z+
    167c:	0d 92       	st	X+, r0
    167e:	00 20       	and	r0, r0
    1680:	c1 f7       	brne	.-16     	; 0x1672 <strlcpy+0x4>
    1682:	e6 1b       	sub	r30, r22
    1684:	f7 0b       	sbc	r31, r23
    1686:	31 97       	sbiw	r30, 0x01	; 1
    1688:	cf 01       	movw	r24, r30
    168a:	08 95       	ret
    168c:	1c 92       	st	X, r1
    168e:	01 90       	ld	r0, Z+
    1690:	00 20       	and	r0, r0
    1692:	e9 f7       	brne	.-6      	; 0x168e <strlcpy+0x20>
    1694:	f6 cf       	rjmp	.-20     	; 0x1682 <strlcpy+0x14>

00001696 <_exit>:
    1696:	f8 94       	cli

00001698 <__stop_program>:
    1698:	ff cf       	rjmp	.-2      	; 0x1698 <__stop_program>
