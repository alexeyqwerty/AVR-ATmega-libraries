
LTC1864_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001e44  00001ed8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  0080007c  0080007c  00001ef4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a65  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001726  00000000  00000000  00006cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c0  00000000  00000000  000083d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  00009c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000114e  00000000  00000000  0000a59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002787  00000000  00000000  0000b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000de71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	78 c0       	rjmp	.+240    	; 0xf4 <__bad_interrupt>
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	76 c0       	rjmp	.+236    	; 0xf4 <__bad_interrupt>
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	74 c0       	rjmp	.+232    	; 0xf4 <__bad_interrupt>
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	72 c0       	rjmp	.+228    	; 0xf4 <__bad_interrupt>
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	3d c5       	rjmp	.+2682   	; 0xa8e <__vector_9>
      14:	6a c5       	rjmp	.+2772   	; 0xaea <__vector_10>
      16:	6e c0       	rjmp	.+220    	; 0xf4 <__bad_interrupt>
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	6c c0       	rjmp	.+216    	; 0xf4 <__bad_interrupt>
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	6a c0       	rjmp	.+212    	; 0xf4 <__bad_interrupt>
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	68 c0       	rjmp	.+208    	; 0xf4 <__bad_interrupt>
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	07 63       	ori	r16, 0x37	; 55
      28:	42 36       	cpi	r20, 0x62	; 98
      2a:	b7 9b       	sbis	0x16, 7	; 22
      2c:	d8 a7       	std	Y+40, r29	; 0x28
      2e:	1a 39       	cpi	r17, 0x9A	; 154
      30:	68 56       	subi	r22, 0x68	; 104
      32:	18 ae       	std	Y+56, r1	; 0x38
      34:	ba ab       	std	Y+50, r27	; 0x32
      36:	55 8c       	ldd	r5, Z+29	; 0x1d
      38:	1d 3c       	cpi	r17, 0xCD	; 205
      3a:	b7 cc       	rjmp	.-1682   	; 0xfffff9aa <__eeprom_end+0xff7ef9aa>
      3c:	57 63       	ori	r21, 0x37	; 55
      3e:	bd 6d       	ori	r27, 0xDD	; 221
      40:	ed fd       	.word	0xfded	; ????
      42:	75 3e       	cpi	r23, 0xE5	; 229
      44:	f6 17       	cp	r31, r22
      46:	72 31       	cpi	r23, 0x12	; 18
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	08 00       	.word	0x0008	; ????
      50:	00 00       	nop
      52:	be 92       	st	-X, r11
      54:	24 49       	sbci	r18, 0x94	; 148
      56:	12 3e       	cpi	r17, 0xE2	; 226
      58:	ab aa       	std	Y+51, r10	; 0x33
      5a:	aa 2a       	or	r10, r26
      5c:	be cd       	rjmp	.-1156   	; 0xfffffbda <__eeprom_end+0xff7efbda>
      5e:	cc cc       	rjmp	.-1640   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      60:	4c 3e       	cpi	r20, 0xEC	; 236
      62:	00 00       	nop
      64:	00 80       	ld	r0, Z
      66:	be ab       	std	Y+54, r27	; 0x36
      68:	aa aa       	std	Y+50, r10	; 0x32
      6a:	aa 3e       	cpi	r26, 0xEA	; 234
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	bf 00       	.word	0x00bf	; ????
      72:	00 00       	nop
      74:	80 3f       	cpi	r24, 0xF0	; 240
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	41 78       	andi	r20, 0x81	; 129
      7e:	d3 bb       	out	0x13, r29	; 19
      80:	43 87       	std	Z+11, r20	; 0x0b
      82:	d1 13       	cpse	r29, r17
      84:	3d 19       	sub	r19, r13
      86:	0e 3c       	cpi	r16, 0xCE	; 206
      88:	c3 bd       	out	0x23, r28	; 35
      8a:	42 82       	std	Z+2, r4	; 0x02
      8c:	ad 2b       	or	r26, r29
      8e:	3e 68       	ori	r19, 0x8E	; 142
      90:	ec 82       	std	Y+4, r14	; 0x04
      92:	76 be       	out	0x36, r7	; 54
      94:	d9 8f       	std	Y+25, r29	; 0x19
      96:	e1 a9       	ldd	r30, Z+49	; 0x31
      98:	3e 4c       	sbci	r19, 0xCE	; 206
      9a:	80 ef       	ldi	r24, 0xF0	; 240
      9c:	ff be       	out	0x3f, r15	; 63
      9e:	01 c4       	rjmp	.+2050   	; 0x8a2 <_Z41__static_initialization_and_destruction_0ii+0xb0>
      a0:	ff 7f       	andi	r31, 0xFF	; 255
      a2:	3f 00       	.word	0x003f	; ????
      a4:	00 00       	nop
	...

000000a8 <__ctors_start>:
      a8:	fa 05       	cpc	r31, r10

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d4 e0       	ldi	r29, 0x04	; 4
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	10 e0       	ldi	r17, 0x00	; 0
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	e4 e4       	ldi	r30, 0x44	; 68
      be:	fe e1       	ldi	r31, 0x1E	; 30
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	ac 37       	cpi	r26, 0x7C	; 124
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	ac e7       	ldi	r26, 0x7C	; 124
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a7 3a       	cpi	r26, 0xA7	; 167
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c5 e5       	ldi	r28, 0x55	; 85
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	03 c0       	rjmp	.+6      	; 0xea <__do_global_ctors+0xe>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	4b dc       	rcall	.-1898   	; 0xfffff980 <__eeprom_end+0xff7ef980>
      ea:	c4 35       	cpi	r28, 0x54	; 84
      ec:	d1 07       	cpc	r29, r17
      ee:	d1 f7       	brne	.-12     	; 0xe4 <__do_global_ctors+0x8>
      f0:	4d d5       	rcall	.+2714   	; 0xb8c <main>
      f2:	a6 ce       	rjmp	.-692    	; 0xfffffe40 <__eeprom_end+0xff7efe40>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <_ZN6BufferC1Eh>:
		free((uint8_t*)this->buffer[i]);
	}
	
	free((uint8_t**)this->buffer);
	free((uint8_t*)this->dataSize);
}
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	8c 01       	movw	r16, r24
     102:	f6 2e       	mov	r15, r22
     104:	fc 01       	movw	r30, r24
     106:	60 83       	st	Z, r22
     108:	15 82       	std	Z+5, r1	; 0x05
     10a:	16 82       	std	Z+6, r1	; 0x06
     10c:	17 82       	std	Z+7, r1	; 0x07
     10e:	cf 2d       	mov	r28, r15
     110:	d0 e0       	ldi	r29, 0x00	; 0
     112:	cc 0f       	add	r28, r28
     114:	dd 1f       	adc	r29, r29
     116:	ce 01       	movw	r24, r28
     118:	39 dc       	rcall	.-1934   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
     11a:	f8 01       	movw	r30, r16
     11c:	92 83       	std	Z+2, r25	; 0x02
     11e:	81 83       	std	Z+1, r24	; 0x01
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	a9 f3       	breq	.-22     	; 0x10e <_ZN6BufferC1Eh+0x18>
     124:	ae 01       	movw	r20, r28
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	19 de       	rcall	.-974    	; 0xfffffd5e <__eeprom_end+0xff7efd5e>
     12c:	f8 01       	movw	r30, r16
     12e:	80 81       	ld	r24, Z
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	2c dc       	rcall	.-1960   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
     134:	f8 01       	movw	r30, r16
     136:	94 83       	std	Z+4, r25	; 0x04
     138:	83 83       	std	Z+3, r24	; 0x03
     13a:	89 2b       	or	r24, r25
     13c:	b9 f3       	breq	.-18     	; 0x12c <_ZN6BufferC1Eh+0x36>
     13e:	df 91       	pop	r29
     140:	cf 91       	pop	r28
     142:	1f 91       	pop	r17
     144:	0f 91       	pop	r16
     146:	ff 90       	pop	r15
     148:	08 95       	ret

0000014a <_ZN6Buffer4ReadEv>:
     14a:	fc 01       	movw	r30, r24
     14c:	21 81       	ldd	r18, Z+1	; 0x01
     14e:	32 81       	ldd	r19, Z+2	; 0x02
     150:	87 81       	ldd	r24, Z+7	; 0x07
     152:	e8 2f       	mov	r30, r24
     154:	f0 e0       	ldi	r31, 0x00	; 0
     156:	ee 0f       	add	r30, r30
     158:	ff 1f       	adc	r31, r31
     15a:	e2 0f       	add	r30, r18
     15c:	f3 1f       	adc	r31, r19
     15e:	80 81       	ld	r24, Z
     160:	91 81       	ldd	r25, Z+1	; 0x01
     162:	08 95       	ret

00000164 <_ZN6Buffer9BlockSizeEv>:
     164:	fc 01       	movw	r30, r24
     166:	85 81       	ldd	r24, Z+5	; 0x05
     168:	88 23       	and	r24, r24
     16a:	39 f0       	breq	.+14     	; 0x17a <_ZN6Buffer9BlockSizeEv+0x16>
     16c:	83 81       	ldd	r24, Z+3	; 0x03
     16e:	94 81       	ldd	r25, Z+4	; 0x04
     170:	27 81       	ldd	r18, Z+7	; 0x07
     172:	fc 01       	movw	r30, r24
     174:	e2 0f       	add	r30, r18
     176:	f1 1d       	adc	r31, r1
     178:	80 81       	ld	r24, Z
     17a:	08 95       	ret

0000017c <_ZN6Buffer10ClearBlockEv>:
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	ec 01       	movw	r28, r24
     182:	29 81       	ldd	r18, Y+1	; 0x01
     184:	3a 81       	ldd	r19, Y+2	; 0x02
     186:	8f 81       	ldd	r24, Y+7	; 0x07
     188:	e8 2f       	mov	r30, r24
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	e2 0f       	add	r30, r18
     192:	f3 1f       	adc	r31, r19
     194:	80 81       	ld	r24, Z
     196:	91 81       	ldd	r25, Z+1	; 0x01
     198:	91 dc       	rcall	.-1758   	; 0xfffffabc <__eeprom_end+0xff7efabc>
     19a:	8f 81       	ldd	r24, Y+7	; 0x07
     19c:	8f 5f       	subi	r24, 0xFF	; 255
     19e:	68 81       	ld	r22, Y
     1a0:	b5 db       	rcall	.-2198   	; 0xfffff90c <__eeprom_end+0xff7ef90c>
     1a2:	9f 83       	std	Y+7, r25	; 0x07
     1a4:	8d 81       	ldd	r24, Y+5	; 0x05
     1a6:	81 50       	subi	r24, 0x01	; 1
     1a8:	8d 83       	std	Y+5, r24	; 0x05
     1aa:	df 91       	pop	r29
     1ac:	cf 91       	pop	r28
     1ae:	08 95       	ret

000001b0 <_ZN6BuffernwEj>:

void* Buffer::operator new(size_t size)
{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     1b6:	ce 01       	movw	r24, r28
     1b8:	e9 db       	rcall	.-2094   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
	}while(ptr == nullptr);
     1ba:	00 97       	sbiw	r24, 0x00	; 0
     1bc:	e1 f3       	breq	.-8      	; 0x1b6 <_ZN6BuffernwEj+0x6>
	
	return ptr;
}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <_ZN7HD44780nwEj>:
	
	for(uint8_t i = 0; i < 7; i++)
	{
		SendByte(symbol[i], LCD_Data);
	}
}
     1c4:	cf 93       	push	r28
     1c6:	df 93       	push	r29
     1c8:	ec 01       	movw	r28, r24
     1ca:	ce 01       	movw	r24, r28
     1cc:	df db       	rcall	.-2114   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
     1ce:	00 97       	sbiw	r24, 0x00	; 0
     1d0:	e1 f3       	breq	.-8      	; 0x1ca <_ZN7HD44780nwEj+0x6>
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <_ZN7HD4478012SelectDeviceEv>:
     1d8:	fc 01       	movw	r30, r24
     1da:	84 81       	ldd	r24, Z+4	; 0x04
     1dc:	95 81       	ldd	r25, Z+5	; 0x05
     1de:	38 d5       	rcall	.+2672   	; 0xc50 <_ZN4Port3SetEv>
     1e0:	08 95       	ret

000001e2 <_ZN7HD447809LatchDataEv>:
     1e2:	fc 01       	movw	r30, r24
     1e4:	84 81       	ldd	r24, Z+4	; 0x04
     1e6:	95 81       	ldd	r25, Z+5	; 0x05
     1e8:	45 d5       	rcall	.+2698   	; 0xc74 <_ZN4Port5ClearEv>
     1ea:	08 95       	ret

000001ec <_ZN7HD447804WaitEv>:
     1ec:	ff 92       	push	r15
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	ec 01       	movw	r28, r24
     1f8:	f1 2c       	mov	r15, r1
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	8f 15       	cp	r24, r15
     1fe:	90 f0       	brcs	.+36     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
     200:	0f 2d       	mov	r16, r15
     202:	10 e0       	ldi	r17, 0x00	; 0
     204:	0d 5f       	subi	r16, 0xFD	; 253
     206:	1f 4f       	sbci	r17, 0xFF	; 255
     208:	00 0f       	add	r16, r16
     20a:	11 1f       	adc	r17, r17
     20c:	0c 0f       	add	r16, r28
     20e:	1d 1f       	adc	r17, r29
     210:	f8 01       	movw	r30, r16
     212:	80 81       	ld	r24, Z
     214:	91 81       	ldd	r25, Z+1	; 0x01
     216:	1c d5       	rcall	.+2616   	; 0xc50 <_ZN4Port3SetEv>
     218:	f8 01       	movw	r30, r16
     21a:	80 81       	ld	r24, Z
     21c:	91 81       	ldd	r25, Z+1	; 0x01
     21e:	f0 d4       	rcall	.+2528   	; 0xc00 <_ZN4Port10SetAsInputEv>
     220:	f3 94       	inc	r15
     222:	eb cf       	rjmp	.-42     	; 0x1fa <_ZN7HD447804WaitEv+0xe>
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	9b 81       	ldd	r25, Y+3	; 0x03
     228:	13 d5       	rcall	.+2598   	; 0xc50 <_ZN4Port3SetEv>
     22a:	88 81       	ld	r24, Y
     22c:	99 81       	ldd	r25, Y+1	; 0x01
     22e:	22 d5       	rcall	.+2628   	; 0xc74 <_ZN4Port5ClearEv>
     230:	ce 01       	movw	r24, r28
     232:	d2 df       	rcall	.-92     	; 0x1d8 <_ZN7HD4478012SelectDeviceEv>
     234:	8c 85       	ldd	r24, Y+12	; 0x0c
     236:	9d 85       	ldd	r25, Y+13	; 0x0d
     238:	43 d5       	rcall	.+2694   	; 0xcc0 <_ZN4Port5IsSetEv>
     23a:	18 2f       	mov	r17, r24
     23c:	ce 01       	movw	r24, r28
     23e:	d1 df       	rcall	.-94     	; 0x1e2 <_ZN7HD447809LatchDataEv>
     240:	ce 01       	movw	r24, r28
     242:	ca df       	rcall	.-108    	; 0x1d8 <_ZN7HD4478012SelectDeviceEv>
     244:	ce 01       	movw	r24, r28
     246:	cd df       	rcall	.-102    	; 0x1e2 <_ZN7HD447809LatchDataEv>
     248:	11 11       	cpse	r17, r1
     24a:	f2 cf       	rjmp	.-28     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
     24c:	f1 2c       	mov	r15, r1
     24e:	f3 e0       	ldi	r31, 0x03	; 3
     250:	ff 15       	cp	r31, r15
     252:	90 f0       	brcs	.+36     	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
     254:	0f 2d       	mov	r16, r15
     256:	10 e0       	ldi	r17, 0x00	; 0
     258:	0d 5f       	subi	r16, 0xFD	; 253
     25a:	1f 4f       	sbci	r17, 0xFF	; 255
     25c:	00 0f       	add	r16, r16
     25e:	11 1f       	adc	r17, r17
     260:	0c 0f       	add	r16, r28
     262:	1d 1f       	adc	r17, r29
     264:	f8 01       	movw	r30, r16
     266:	80 81       	ld	r24, Z
     268:	91 81       	ldd	r25, Z+1	; 0x01
     26a:	df d4       	rcall	.+2494   	; 0xc2a <_ZN4Port11SetAsOutputEv>
     26c:	f8 01       	movw	r30, r16
     26e:	80 81       	ld	r24, Z
     270:	91 81       	ldd	r25, Z+1	; 0x01
     272:	00 d5       	rcall	.+2560   	; 0xc74 <_ZN4Port5ClearEv>
     274:	f3 94       	inc	r15
     276:	eb cf       	rjmp	.-42     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
     278:	8a 81       	ldd	r24, Y+2	; 0x02
     27a:	9b 81       	ldd	r25, Y+3	; 0x03
     27c:	fb d4       	rcall	.+2550   	; 0xc74 <_ZN4Port5ClearEv>
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	ff 90       	pop	r15
     288:	08 95       	ret

0000028a <_ZN7HD447808SendByteEc16HD44780_DataType>:
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
     28e:	0f 93       	push	r16
     290:	1f 93       	push	r17
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	ec 01       	movw	r28, r24
     298:	e6 2e       	mov	r14, r22
     29a:	14 2f       	mov	r17, r20
     29c:	a7 df       	rcall	.-178    	; 0x1ec <_ZN7HD447804WaitEv>
     29e:	11 30       	cpi	r17, 0x01	; 1
     2a0:	21 f4       	brne	.+8      	; 0x2aa <_ZN7HD447808SendByteEc16HD44780_DataType+0x20>
     2a2:	88 81       	ld	r24, Y
     2a4:	99 81       	ldd	r25, Y+1	; 0x01
     2a6:	e6 d4       	rcall	.+2508   	; 0xc74 <_ZN4Port5ClearEv>
     2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <_ZN7HD447808SendByteEc16HD44780_DataType+0x2a>
     2aa:	11 11       	cpse	r17, r1
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <_ZN7HD447808SendByteEc16HD44780_DataType+0x2a>
     2ae:	88 81       	ld	r24, Y
     2b0:	99 81       	ldd	r25, Y+1	; 0x01
     2b2:	ce d4       	rcall	.+2460   	; 0xc50 <_ZN4Port3SetEv>
     2b4:	0e 2d       	mov	r16, r14
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	15 95       	asr	r17
     2ba:	07 95       	ror	r16
     2bc:	15 95       	asr	r17
     2be:	07 95       	ror	r16
     2c0:	15 95       	asr	r17
     2c2:	07 95       	ror	r16
     2c4:	15 95       	asr	r17
     2c6:	07 95       	ror	r16
     2c8:	f1 2c       	mov	r15, r1
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	8f 15       	cp	r24, r15
     2ce:	58 f1       	brcs	.+86     	; 0x326 <_ZN7HD447808SendByteEc16HD44780_DataType+0x9c>
     2d0:	ce 01       	movw	r24, r28
     2d2:	82 df       	rcall	.-252    	; 0x1d8 <_ZN7HD4478012SelectDeviceEv>
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	14 30       	cpi	r17, 0x04	; 4
     2d8:	08 f5       	brcc	.+66     	; 0x31c <_ZN7HD447808SendByteEc16HD44780_DataType+0x92>
     2da:	81 2f       	mov	r24, r17
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	20 2f       	mov	r18, r16
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	01 2e       	mov	r0, r17
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <_ZN7HD447808SendByteEc16HD44780_DataType+0x60>
     2e6:	35 95       	asr	r19
     2e8:	27 95       	ror	r18
     2ea:	0a 94       	dec	r0
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <_ZN7HD447808SendByteEc16HD44780_DataType+0x5c>
     2ee:	20 ff       	sbrs	r18, 0
     2f0:	0a c0       	rjmp	.+20     	; 0x306 <_ZN7HD447808SendByteEc16HD44780_DataType+0x7c>
     2f2:	fc 01       	movw	r30, r24
     2f4:	33 96       	adiw	r30, 0x03	; 3
     2f6:	ee 0f       	add	r30, r30
     2f8:	ff 1f       	adc	r31, r31
     2fa:	ec 0f       	add	r30, r28
     2fc:	fd 1f       	adc	r31, r29
     2fe:	80 81       	ld	r24, Z
     300:	91 81       	ldd	r25, Z+1	; 0x01
     302:	a6 d4       	rcall	.+2380   	; 0xc50 <_ZN4Port3SetEv>
     304:	09 c0       	rjmp	.+18     	; 0x318 <_ZN7HD447808SendByteEc16HD44780_DataType+0x8e>
     306:	fc 01       	movw	r30, r24
     308:	33 96       	adiw	r30, 0x03	; 3
     30a:	ee 0f       	add	r30, r30
     30c:	ff 1f       	adc	r31, r31
     30e:	ec 0f       	add	r30, r28
     310:	fd 1f       	adc	r31, r29
     312:	80 81       	ld	r24, Z
     314:	91 81       	ldd	r25, Z+1	; 0x01
     316:	ae d4       	rcall	.+2396   	; 0xc74 <_ZN4Port5ClearEv>
     318:	1f 5f       	subi	r17, 0xFF	; 255
     31a:	dd cf       	rjmp	.-70     	; 0x2d6 <_ZN7HD447808SendByteEc16HD44780_DataType+0x4c>
     31c:	ce 01       	movw	r24, r28
     31e:	61 df       	rcall	.-318    	; 0x1e2 <_ZN7HD447809LatchDataEv>
     320:	f3 94       	inc	r15
     322:	0e 2d       	mov	r16, r14
     324:	d2 cf       	rjmp	.-92     	; 0x2ca <_ZN7HD447808SendByteEc16HD44780_DataType+0x40>
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	08 95       	ret

00000334 <_ZN7HD447802OnEv>:
     334:	41 e0       	ldi	r20, 0x01	; 1
     336:	6c e0       	ldi	r22, 0x0C	; 12
     338:	a8 df       	rcall	.-176    	; 0x28a <_ZN7HD447808SendByteEc16HD44780_DataType>
     33a:	08 95       	ret

0000033c <_ZN7HD447803OffEv>:
     33c:	41 e0       	ldi	r20, 0x01	; 1
     33e:	68 e0       	ldi	r22, 0x08	; 8
     340:	a4 df       	rcall	.-184    	; 0x28a <_ZN7HD447808SendByteEc16HD44780_DataType>
     342:	08 95       	ret

00000344 <_ZN7HD447805ClearEv>:
     344:	41 e0       	ldi	r20, 0x01	; 1
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	a0 df       	rcall	.-192    	; 0x28a <_ZN7HD447808SendByteEc16HD44780_DataType>
     34a:	08 95       	ret

0000034c <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type>:
     34c:	2f 92       	push	r2
     34e:	3f 92       	push	r3
     350:	4f 92       	push	r4
     352:	5f 92       	push	r5
     354:	6f 92       	push	r6
     356:	7f 92       	push	r7
     358:	8f 92       	push	r8
     35a:	9f 92       	push	r9
     35c:	af 92       	push	r10
     35e:	bf 92       	push	r11
     360:	cf 92       	push	r12
     362:	df 92       	push	r13
     364:	ef 92       	push	r14
     366:	ff 92       	push	r15
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	3c 01       	movw	r6, r24
     376:	fb 01       	movw	r30, r22
     378:	dc 01       	movw	r26, r24
     37a:	15 96       	adiw	r26, 0x05	; 5
     37c:	3c 93       	st	X, r19
     37e:	2e 93       	st	-X, r18
     380:	14 97       	sbiw	r26, 0x04	; 4
     382:	18 01       	movw	r2, r16
     384:	24 01       	movw	r4, r8
     386:	56 94       	lsr	r5
     388:	47 94       	ror	r4
     38a:	56 94       	lsr	r5
     38c:	47 94       	ror	r4
     38e:	92 01       	movw	r18, r4
     390:	ab e7       	ldi	r26, 0x7B	; 123
     392:	b4 e1       	ldi	r27, 0x14	; 20
     394:	e9 da       	rcall	.-2606   	; 0xfffff968 <__eeprom_end+0xff7ef968>
     396:	8c 01       	movw	r16, r24
     398:	16 95       	lsr	r17
     39a:	07 95       	ror	r16
     39c:	d3 01       	movw	r26, r6
     39e:	1e 96       	adiw	r26, 0x0e	; 14
     3a0:	0c 93       	st	X, r16
     3a2:	24 e6       	ldi	r18, 0x64	; 100
     3a4:	20 9f       	mul	r18, r16
     3a6:	c0 01       	movw	r24, r0
     3a8:	21 9f       	mul	r18, r17
     3aa:	90 0d       	add	r25, r0
     3ac:	11 24       	eor	r1, r1
     3ae:	88 1a       	sub	r8, r24
     3b0:	99 0a       	sbc	r9, r25
     3b2:	d3 01       	movw	r26, r6
     3b4:	1f 96       	adiw	r26, 0x0f	; 15
     3b6:	8c 92       	st	X, r8
     3b8:	1f 97       	sbiw	r26, 0x0f	; 15
     3ba:	11 96       	adiw	r26, 0x01	; 1
     3bc:	fc 93       	st	X, r31
     3be:	ee 93       	st	-X, r30
     3c0:	13 96       	adiw	r26, 0x03	; 3
     3c2:	5c 93       	st	X, r21
     3c4:	4e 93       	st	-X, r20
     3c6:	12 97       	sbiw	r26, 0x02	; 2
     3c8:	17 96       	adiw	r26, 0x07	; 7
     3ca:	3c 92       	st	X, r3
     3cc:	2e 92       	st	-X, r2
     3ce:	16 97       	sbiw	r26, 0x06	; 6
     3d0:	19 96       	adiw	r26, 0x09	; 9
     3d2:	fc 92       	st	X, r15
     3d4:	ee 92       	st	-X, r14
     3d6:	18 97       	sbiw	r26, 0x08	; 8
     3d8:	1b 96       	adiw	r26, 0x0b	; 11
     3da:	dc 92       	st	X, r13
     3dc:	ce 92       	st	-X, r12
     3de:	1a 97       	sbiw	r26, 0x0a	; 10
     3e0:	1d 96       	adiw	r26, 0x0d	; 13
     3e2:	bc 92       	st	X, r11
     3e4:	ae 92       	st	-X, r10
     3e6:	1c 97       	sbiw	r26, 0x0c	; 12
     3e8:	cf 01       	movw	r24, r30
     3ea:	1f d4       	rcall	.+2110   	; 0xc2a <_ZN4Port11SetAsOutputEv>
     3ec:	f3 01       	movw	r30, r6
     3ee:	82 81       	ldd	r24, Z+2	; 0x02
     3f0:	93 81       	ldd	r25, Z+3	; 0x03
     3f2:	1b d4       	rcall	.+2102   	; 0xc2a <_ZN4Port11SetAsOutputEv>
     3f4:	d3 01       	movw	r26, r6
     3f6:	14 96       	adiw	r26, 0x04	; 4
     3f8:	8d 91       	ld	r24, X+
     3fa:	9c 91       	ld	r25, X
     3fc:	15 97       	sbiw	r26, 0x05	; 5
     3fe:	15 d4       	rcall	.+2090   	; 0xc2a <_ZN4Port11SetAsOutputEv>
     400:	f3 01       	movw	r30, r6
     402:	82 81       	ldd	r24, Z+2	; 0x02
     404:	93 81       	ldd	r25, Z+3	; 0x03
     406:	36 d4       	rcall	.+2156   	; 0xc74 <_ZN4Port5ClearEv>
     408:	f1 2c       	mov	r15, r1
     40a:	f3 e0       	ldi	r31, 0x03	; 3
     40c:	ff 15       	cp	r31, r15
     40e:	90 f0       	brcs	.+36     	; 0x434 <__DATA_REGION_LENGTH__+0x34>
     410:	0f 2d       	mov	r16, r15
     412:	10 e0       	ldi	r17, 0x00	; 0
     414:	0d 5f       	subi	r16, 0xFD	; 253
     416:	1f 4f       	sbci	r17, 0xFF	; 255
     418:	00 0f       	add	r16, r16
     41a:	11 1f       	adc	r17, r17
     41c:	06 0d       	add	r16, r6
     41e:	17 1d       	adc	r17, r7
     420:	d8 01       	movw	r26, r16
     422:	8d 91       	ld	r24, X+
     424:	9c 91       	ld	r25, X
     426:	01 d4       	rcall	.+2050   	; 0xc2a <_ZN4Port11SetAsOutputEv>
     428:	f8 01       	movw	r30, r16
     42a:	80 81       	ld	r24, Z
     42c:	91 81       	ldd	r25, Z+1	; 0x01
     42e:	22 d4       	rcall	.+2116   	; 0xc74 <_ZN4Port5ClearEv>
     430:	f3 94       	inc	r15
     432:	eb cf       	rjmp	.-42     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
     434:	d3 01       	movw	r26, r6
     436:	16 96       	adiw	r26, 0x06	; 6
     438:	8d 91       	ld	r24, X+
     43a:	9c 91       	ld	r25, X
     43c:	17 97       	sbiw	r26, 0x07	; 7
     43e:	08 d4       	rcall	.+2064   	; 0xc50 <_ZN4Port3SetEv>
     440:	f3 01       	movw	r30, r6
     442:	80 85       	ldd	r24, Z+8	; 0x08
     444:	91 85       	ldd	r25, Z+9	; 0x09
     446:	04 d4       	rcall	.+2056   	; 0xc50 <_ZN4Port3SetEv>
     448:	10 e0       	ldi	r17, 0x00	; 0
     44a:	12 30       	cpi	r17, 0x02	; 2
     44c:	60 f4       	brcc	.+24     	; 0x466 <__stack+0x7>
     44e:	c3 01       	movw	r24, r6
     450:	c3 de       	rcall	.-634    	; 0x1d8 <_ZN7HD4478012SelectDeviceEv>
     452:	c3 01       	movw	r24, r6
     454:	c6 de       	rcall	.-628    	; 0x1e2 <_ZN7HD447809LatchDataEv>
     456:	8f e0       	ldi	r24, 0x0F	; 15
     458:	97 e2       	ldi	r25, 0x27	; 39
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <__stack+0x1>
     460:	00 00       	nop
     462:	1f 5f       	subi	r17, 0xFF	; 255
     464:	f2 cf       	rjmp	.-28     	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
     466:	d3 01       	movw	r26, r6
     468:	16 96       	adiw	r26, 0x06	; 6
     46a:	8d 91       	ld	r24, X+
     46c:	9c 91       	ld	r25, X
     46e:	17 97       	sbiw	r26, 0x07	; 7
     470:	01 d4       	rcall	.+2050   	; 0xc74 <_ZN4Port5ClearEv>
     472:	c3 01       	movw	r24, r6
     474:	b1 de       	rcall	.-670    	; 0x1d8 <_ZN7HD4478012SelectDeviceEv>
     476:	c3 01       	movw	r24, r6
     478:	b4 de       	rcall	.-664    	; 0x1e2 <_ZN7HD447809LatchDataEv>
     47a:	e7 ec       	ldi	r30, 0xC7	; 199
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	31 97       	sbiw	r30, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <__stack+0x1f>
     482:	00 c0       	rjmp	.+0      	; 0x484 <__stack+0x25>
     484:	00 00       	nop
     486:	41 e0       	ldi	r20, 0x01	; 1
     488:	68 e2       	ldi	r22, 0x28	; 40
     48a:	c3 01       	movw	r24, r6
     48c:	fe de       	rcall	.-516    	; 0x28a <_ZN7HD447808SendByteEc16HD44780_DataType>
     48e:	c3 01       	movw	r24, r6
     490:	55 df       	rcall	.-342    	; 0x33c <_ZN7HD447803OffEv>
     492:	c3 01       	movw	r24, r6
     494:	57 df       	rcall	.-338    	; 0x344 <_ZN7HD447805ClearEv>
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	66 e0       	ldi	r22, 0x06	; 6
     49a:	c3 01       	movw	r24, r6
     49c:	f6 de       	rcall	.-532    	; 0x28a <_ZN7HD447808SendByteEc16HD44780_DataType>
     49e:	c3 01       	movw	r24, r6
     4a0:	49 df       	rcall	.-366    	; 0x334 <_ZN7HD447802OnEv>
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	bf 90       	pop	r11
     4b4:	af 90       	pop	r10
     4b6:	9f 90       	pop	r9
     4b8:	8f 90       	pop	r8
     4ba:	7f 90       	pop	r7
     4bc:	6f 90       	pop	r6
     4be:	5f 90       	pop	r5
     4c0:	4f 90       	pop	r4
     4c2:	3f 90       	pop	r3
     4c4:	2f 90       	pop	r2
     4c6:	08 95       	ret

000004c8 <_ZN7HD4478017SetCursorPositionEhh>:
	}
}

void HD44780::SetCursorPosition(uint8_t slot, uint8_t line)
{
	if(line > 1)
     4c8:	42 30       	cpi	r20, 0x02	; 2
     4ca:	20 f0       	brcs	.+8      	; 0x4d4 <_ZN7HD4478017SetCursorPositionEhh+0xc>
	{
		line %= 2;
     4cc:	41 70       	andi	r20, 0x01	; 1
		slot += this->symbols;
     4ce:	fc 01       	movw	r30, r24
     4d0:	26 85       	ldd	r18, Z+14	; 0x0e
     4d2:	62 0f       	add	r22, r18
	}
	
	uint8_t adress = 0x40 * line;
	adress += slot;
     4d4:	f0 e4       	ldi	r31, 0x40	; 64
     4d6:	4f 9f       	mul	r20, r31
     4d8:	60 0d       	add	r22, r0
     4da:	11 24       	eor	r1, r1
	adress |= 0x80;
     4dc:	60 68       	ori	r22, 0x80	; 128
	SendByte(adress, LCD_Command);
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	d4 de       	rcall	.-600    	; 0x28a <_ZN7HD447808SendByteEc16HD44780_DataType>
     4e2:	08 95       	ret

000004e4 <_ZN7HD4478014CursorOversideEhh>:
}

bool HD44780::CursorOverside(uint8_t slot, uint8_t line)
{
	return (slot >= this->symbols) || (line >= this->lines);
     4e4:	fc 01       	movw	r30, r24
     4e6:	26 85       	ldd	r18, Z+14	; 0x0e
     4e8:	62 17       	cp	r22, r18
     4ea:	28 f4       	brcc	.+10     	; 0x4f6 <_ZN7HD4478014CursorOversideEhh+0x12>
     4ec:	87 85       	ldd	r24, Z+15	; 0x0f
     4ee:	48 17       	cp	r20, r24
     4f0:	20 f0       	brcs	.+8      	; 0x4fa <_ZN7HD4478014CursorOversideEhh+0x16>
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	08 95       	ret
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	08 95       	ret
     4fa:	80 e0       	ldi	r24, 0x00	; 0
}
     4fc:	08 95       	ret

000004fe <_ZN7HD4478015NormaliseLengthERhh>:

void HD44780::NormaliseLength(uint8_t &length, uint8_t slot)
{
	uint8_t *_length = (uint8_t *)&length;
	*_length = slot + *_length <= this->symbols ? *_length : this->symbols - slot;
     4fe:	fb 01       	movw	r30, r22
     500:	50 81       	ld	r21, Z
     502:	25 2f       	mov	r18, r21
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	24 0f       	add	r18, r20
     508:	31 1d       	adc	r19, r1
     50a:	fc 01       	movw	r30, r24
     50c:	86 85       	ldd	r24, Z+14	; 0x0e
     50e:	e8 2f       	mov	r30, r24
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	e2 17       	cp	r30, r18
     514:	f3 07       	cpc	r31, r19
     516:	14 f4       	brge	.+4      	; 0x51c <_ZN7HD4478015NormaliseLengthERhh+0x1e>
     518:	58 2f       	mov	r21, r24
     51a:	54 1b       	sub	r21, r20
     51c:	fb 01       	movw	r30, r22
     51e:	50 83       	st	Z, r21
     520:	08 95       	ret

00000522 <_ZN7HD447809ClearAreaEhhh>:
{
	SendByte(0b00000001, LCD_Command);
}

void HD44780::ClearArea(uint8_t length, uint8_t slot, uint8_t line)
{
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	1f 92       	push	r1
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	7c 01       	movw	r14, r24
     536:	69 83       	std	Y+1, r22	; 0x01
     538:	14 2f       	mov	r17, r20
     53a:	02 2f       	mov	r16, r18
	if(CursorOverside(slot, line)) return;
     53c:	42 2f       	mov	r20, r18
     53e:	61 2f       	mov	r22, r17
     540:	d1 df       	rcall	.-94     	; 0x4e4 <_ZN7HD4478014CursorOversideEhh>
     542:	81 11       	cpse	r24, r1
     544:	14 c0       	rjmp	.+40     	; 0x56e <_ZN7HD447809ClearAreaEhhh+0x4c>
	SetCursorPosition(slot, line);	
     546:	40 2f       	mov	r20, r16
     548:	61 2f       	mov	r22, r17
     54a:	c7 01       	movw	r24, r14
     54c:	bd df       	rcall	.-134    	; 0x4c8 <_ZN7HD4478017SetCursorPositionEhh>
	
	NormaliseLength(length, slot);
     54e:	41 2f       	mov	r20, r17
     550:	be 01       	movw	r22, r28
     552:	6f 5f       	subi	r22, 0xFF	; 255
     554:	7f 4f       	sbci	r23, 0xFF	; 255
     556:	c7 01       	movw	r24, r14
     558:	d2 df       	rcall	.-92     	; 0x4fe <_ZN7HD4478015NormaliseLengthERhh>
	for(uint8_t i = 0; i < length; i++) SendByte(' ', LCD_Data);
     55a:	10 e0       	ldi	r17, 0x00	; 0
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	18 17       	cp	r17, r24
     560:	30 f4       	brcc	.+12     	; 0x56e <_ZN7HD447809ClearAreaEhhh+0x4c>
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	60 e2       	ldi	r22, 0x20	; 32
     566:	c7 01       	movw	r24, r14
     568:	90 de       	rcall	.-736    	; 0x28a <_ZN7HD447808SendByteEc16HD44780_DataType>
     56a:	1f 5f       	subi	r17, 0xFF	; 255
     56c:	f7 cf       	rjmp	.-18     	; 0x55c <_ZN7HD447809ClearAreaEhhh+0x3a>
}
     56e:	0f 90       	pop	r0
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	08 95       	ret

0000057e <_ZN7HD447805PrintEPKchh>:
		SendByte(symbol[i], LCD_Data);
	}
}

void HD44780::Print(const char *text, uint8_t slot, uint8_t line)
{
     57e:	af 92       	push	r10
     580:	bf 92       	push	r11
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	1f 92       	push	r1
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	5c 01       	movw	r10, r24
     598:	8b 01       	movw	r16, r22
     59a:	f4 2e       	mov	r15, r20
     59c:	d2 2e       	mov	r13, r18
	if(CursorOverside(slot, line)) return;
     59e:	42 2f       	mov	r20, r18
     5a0:	6f 2d       	mov	r22, r15
     5a2:	a0 df       	rcall	.-192    	; 0x4e4 <_ZN7HD4478014CursorOversideEhh>
     5a4:	81 11       	cpse	r24, r1
     5a6:	22 c0       	rjmp	.+68     	; 0x5ec <_ZN7HD447805PrintEPKchh+0x6e>
	SetCursorPosition(slot, line);
     5a8:	4d 2d       	mov	r20, r13
     5aa:	6f 2d       	mov	r22, r15
     5ac:	c5 01       	movw	r24, r10
     5ae:	8c df       	rcall	.-232    	; 0x4c8 <_ZN7HD4478017SetCursorPositionEhh>
	
	uint8_t length = strlen(text);
     5b0:	f8 01       	movw	r30, r16
     5b2:	01 90       	ld	r0, Z+
     5b4:	00 20       	and	r0, r0
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <_ZN7HD447805PrintEPKchh+0x34>
     5b8:	31 97       	sbiw	r30, 0x01	; 1
     5ba:	e0 1b       	sub	r30, r16
     5bc:	f1 0b       	sbc	r31, r17
     5be:	e9 83       	std	Y+1, r30	; 0x01
	NormaliseLength(length, slot);
     5c0:	4f 2d       	mov	r20, r15
     5c2:	be 01       	movw	r22, r28
     5c4:	6f 5f       	subi	r22, 0xFF	; 255
     5c6:	7f 4f       	sbci	r23, 0xFF	; 255
     5c8:	c5 01       	movw	r24, r10
     5ca:	99 df       	rcall	.-206    	; 0x4fe <_ZN7HD4478015NormaliseLengthERhh>
	for(uint8_t i = 0; i < length; i++)
     5cc:	f1 2c       	mov	r15, r1
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	f8 16       	cp	r15, r24
     5d2:	60 f4       	brcc	.+24     	; 0x5ec <_ZN7HD447805PrintEPKchh+0x6e>
	{
		SendByte(*text++, LCD_Data);
     5d4:	68 01       	movw	r12, r16
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	c8 1a       	sub	r12, r24
     5da:	d8 0a       	sbc	r13, r24
     5dc:	f8 01       	movw	r30, r16
     5de:	60 81       	ld	r22, Z
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	c5 01       	movw	r24, r10
     5e4:	52 de       	rcall	.-860    	; 0x28a <_ZN7HD447808SendByteEc16HD44780_DataType>
	if(CursorOverside(slot, line)) return;
	SetCursorPosition(slot, line);
	
	uint8_t length = strlen(text);
	NormaliseLength(length, slot);
	for(uint8_t i = 0; i < length; i++)
     5e6:	f3 94       	inc	r15
	{
		SendByte(*text++, LCD_Data);
     5e8:	86 01       	movw	r16, r12
	if(CursorOverside(slot, line)) return;
	SetCursorPosition(slot, line);
	
	uint8_t length = strlen(text);
	NormaliseLength(length, slot);
	for(uint8_t i = 0; i < length; i++)
     5ea:	f1 cf       	rjmp	.-30     	; 0x5ce <_ZN7HD447805PrintEPKchh+0x50>
	{
		SendByte(*text++, LCD_Data);
	}
}
     5ec:	0f 90       	pop	r0
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	08 95       	ret

00000602 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment>:

void HD44780::PrintAlignment(const char* text, uint8_t line, HD44780_Alignment alignment)
{
     602:	54 2f       	mov	r21, r20
	uint8_t slot = 0;
	
	switch(alignment)
     604:	21 30       	cpi	r18, 0x01	; 1
     606:	19 f0       	breq	.+6      	; 0x60e <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0xc>
     608:	22 30       	cpi	r18, 0x02	; 2
     60a:	69 f0       	breq	.+26     	; 0x626 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x24>
     60c:	1c c0       	rjmp	.+56     	; 0x646 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x44>
			slot = 0;
		}break;
		
		case RIGHT_SIDE:
		{
			slot = this->symbols - strlen(text);
     60e:	fc 01       	movw	r30, r24
     610:	26 85       	ldd	r18, Z+14	; 0x0e
     612:	fb 01       	movw	r30, r22
     614:	01 90       	ld	r0, Z+
     616:	00 20       	and	r0, r0
     618:	e9 f7       	brne	.-6      	; 0x614 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x12>
     61a:	31 97       	sbiw	r30, 0x01	; 1
     61c:	e6 1b       	sub	r30, r22
     61e:	f7 0b       	sbc	r31, r23
     620:	42 2f       	mov	r20, r18
     622:	4e 1b       	sub	r20, r30
		}break;
     624:	11 c0       	rjmp	.+34     	; 0x648 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x46>
		
		case CENTER_SCREEN:
		{
			slot = (this->symbols - strlen(text)) / 2;
     626:	fc 01       	movw	r30, r24
     628:	26 85       	ldd	r18, Z+14	; 0x0e
     62a:	fb 01       	movw	r30, r22
     62c:	01 90       	ld	r0, Z+
     62e:	00 20       	and	r0, r0
     630:	e9 f7       	brne	.-6      	; 0x62c <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x2a>
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	e6 1b       	sub	r30, r22
     636:	f7 0b       	sbc	r31, r23
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	2e 1b       	sub	r18, r30
     63c:	3f 0b       	sbc	r19, r31
     63e:	36 95       	lsr	r19
     640:	27 95       	ror	r18
     642:	42 2f       	mov	r20, r18
		}break;
     644:	01 c0       	rjmp	.+2      	; 0x648 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x46>
	}
}

void HD44780::PrintAlignment(const char* text, uint8_t line, HD44780_Alignment alignment)
{
	uint8_t slot = 0;
     646:	40 e0       	ldi	r20, 0x00	; 0
		{
			slot = (this->symbols - strlen(text)) / 2;
		}break;
	}
	
	Print(text, slot, line);
     648:	25 2f       	mov	r18, r21
     64a:	99 df       	rcall	.-206    	; 0x57e <_ZN7HD447805PrintEPKchh>
     64c:	08 95       	ret

0000064e <_ZN7LTC18648PolarityEv>:
	return ptr;
}

void LTC1864::operator delete(void* ptr)
{
	free(ptr);
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	08 95       	ret

00000652 <_ZN7LTC18645PhaseEv>:
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	08 95       	ret

00000656 <_ZN7LTC18649DataOrderEv>:
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	08 95       	ret

0000065a <_ZN7LTC18648DataSizeEv>:
     65a:	fc 01       	movw	r30, r24
     65c:	84 81       	ldd	r24, Z+4	; 0x04
     65e:	95 81       	ldd	r25, Z+5	; 0x05
     660:	81 dd       	rcall	.-1278   	; 0x164 <_ZN6Buffer9BlockSizeEv>
     662:	08 95       	ret

00000664 <_ZN7LTC18644DataEv>:
     664:	fc 01       	movw	r30, r24
     666:	84 81       	ldd	r24, Z+4	; 0x04
     668:	95 81       	ldd	r25, Z+5	; 0x05
     66a:	6f dd       	rcall	.-1314   	; 0x14a <_ZN6Buffer4ReadEv>
     66c:	08 95       	ret

0000066e <_ZN7LTC18645StartEv>:
     66e:	fc 01       	movw	r30, r24
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	ff d2       	rcall	.+1534   	; 0xc74 <_ZN4Port5ClearEv>
     676:	08 95       	ret

00000678 <_ZN7LTC18649GetResultEv>:
     678:	fc 01       	movw	r30, r24
     67a:	86 81       	ldd	r24, Z+6	; 0x06
     67c:	97 81       	ldd	r25, Z+7	; 0x07
     67e:	08 95       	ret

00000680 <_ZN7LTC1864nwEj>:
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	ec 01       	movw	r28, r24
     686:	ce 01       	movw	r24, r28
     688:	81 d9       	rcall	.-3326   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
     68a:	00 97       	sbiw	r24, 0x00	; 0
     68c:	e1 f3       	breq	.-8      	; 0x686 <_ZN7LTC1864nwEj+0x6>
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <_ZN6Buffer5WriteIjEEvRT_h>:
	uint8_t writePtr;
	uint8_t readPtr;
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
     694:	bf 92       	push	r11
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	8c 01       	movw	r16, r24
     6a8:	7b 01       	movw	r14, r22
     6aa:	b4 2e       	mov	r11, r20
{	
	do 
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
     6ac:	d8 01       	movw	r26, r16
     6ae:	16 96       	adiw	r26, 0x06	; 6
     6b0:	cc 91       	ld	r28, X
     6b2:	16 97       	sbiw	r26, 0x06	; 6
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
     6b6:	cc 0f       	add	r28, r28
     6b8:	dd 1f       	adc	r29, r29
     6ba:	11 96       	adiw	r26, 0x01	; 1
     6bc:	8d 91       	ld	r24, X+
     6be:	9c 91       	ld	r25, X
     6c0:	12 97       	sbiw	r26, 0x02	; 2
     6c2:	c8 0f       	add	r28, r24
     6c4:	d9 1f       	adc	r29, r25
     6c6:	cb 2c       	mov	r12, r11
     6c8:	d1 2c       	mov	r13, r1
     6ca:	c6 01       	movw	r24, r12
     6cc:	5f d9       	rcall	.-3394   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
     6ce:	99 83       	std	Y+1, r25	; 0x01
     6d0:	88 83       	st	Y, r24
	} while (this->buffer[this->writePtr] == nullptr);
     6d2:	f8 01       	movw	r30, r16
     6d4:	86 81       	ldd	r24, Z+6	; 0x06
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	9c 01       	movw	r18, r24
     6da:	22 0f       	add	r18, r18
     6dc:	33 1f       	adc	r19, r19
     6de:	01 80       	ldd	r0, Z+1	; 0x01
     6e0:	f2 81       	ldd	r31, Z+2	; 0x02
     6e2:	e0 2d       	mov	r30, r0
     6e4:	e2 0f       	add	r30, r18
     6e6:	f3 1f       	adc	r31, r19
     6e8:	20 81       	ld	r18, Z
     6ea:	31 81       	ldd	r19, Z+1	; 0x01
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
{	
	do 
     6ec:	23 2b       	or	r18, r19
     6ee:	f1 f2       	breq	.-68     	; 0x6ac <_ZN6Buffer5WriteIjEEvRT_h+0x18>
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
	} while (this->buffer[this->writePtr] == nullptr);
	
	this->dataSize[this->writePtr] = dataSize;	
     6f0:	d8 01       	movw	r26, r16
     6f2:	13 96       	adiw	r26, 0x03	; 3
     6f4:	2d 91       	ld	r18, X+
     6f6:	3c 91       	ld	r19, X
     6f8:	14 97       	sbiw	r26, 0x04	; 4
     6fa:	f9 01       	movw	r30, r18
     6fc:	e8 0f       	add	r30, r24
     6fe:	f9 1f       	adc	r31, r25
     700:	b0 82       	st	Z, r11
	
	memcpy(this->buffer[this->writePtr], &data, dataSize);
     702:	16 96       	adiw	r26, 0x06	; 6
     704:	ec 91       	ld	r30, X
     706:	16 97       	sbiw	r26, 0x06	; 6
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	11 96       	adiw	r26, 0x01	; 1
     710:	8d 91       	ld	r24, X+
     712:	9c 91       	ld	r25, X
     714:	12 97       	sbiw	r26, 0x02	; 2
     716:	e8 0f       	add	r30, r24
     718:	f9 1f       	adc	r31, r25
     71a:	a6 01       	movw	r20, r12
     71c:	b7 01       	movw	r22, r14
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	14 db       	rcall	.-2520   	; 0xfffffd4c <__eeprom_end+0xff7efd4c>
	
	++this->writePtr %= this->bufferSize;
     724:	f8 01       	movw	r30, r16
     726:	86 81       	ldd	r24, Z+6	; 0x06
     728:	8f 5f       	subi	r24, 0xFF	; 255
     72a:	60 81       	ld	r22, Z
     72c:	ef d8       	rcall	.-3618   	; 0xfffff90c <__eeprom_end+0xff7ef90c>
     72e:	96 83       	std	Z+6, r25	; 0x06
	this->bufferCounter++;
     730:	85 81       	ldd	r24, Z+5	; 0x05
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	85 83       	std	Z+5, r24	; 0x05
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	08 95       	ret

0000074a <_ZN7LTC186417PrepareDataChangeEv>:
		
	PrepareDataChange();
}

void LTC1864::PrepareDataChange()
{
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	00 d0       	rcall	.+0      	; 0x750 <_ZN7LTC186417PrepareDataChangeEv+0x6>
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
	uint16_t data = 0;
     754:	1a 82       	std	Y+2, r1	; 0x02
     756:	19 82       	std	Y+1, r1	; 0x01
	this->buffer->Write(data, sizeof(uint16_t));
     758:	42 e0       	ldi	r20, 0x02	; 2
     75a:	be 01       	movw	r22, r28
     75c:	6f 5f       	subi	r22, 0xFF	; 255
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	fc 01       	movw	r30, r24
     762:	84 81       	ldd	r24, Z+4	; 0x04
     764:	95 81       	ldd	r25, Z+5	; 0x05
     766:	96 df       	rcall	.-212    	; 0x694 <_ZN6Buffer5WriteIjEEvRT_h>
}
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <_ZN7LTC1864C1EP4Port>:
﻿#include "LTC1864.h"

LTC1864::LTC1864(Port* CS)
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	ec 01       	movw	r28, r24
     780:	8b 01       	movw	r16, r22
     782:	8a e6       	ldi	r24, 0x6A	; 106
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	99 83       	std	Y+1, r25	; 0x01
     788:	88 83       	st	Y, r24
{
	this->buffer = new Buffer(1);
     78a:	88 e0       	ldi	r24, 0x08	; 8
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	10 dd       	rcall	.-1504   	; 0x1b0 <_ZN6BuffernwEj>
     790:	7c 01       	movw	r14, r24
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	b0 dc       	rcall	.-1696   	; 0xf6 <_ZN6BufferC1Eh>
     796:	fd 82       	std	Y+5, r15	; 0x05
     798:	ec 82       	std	Y+4, r14	; 0x04
	
	this->CS = CS;
     79a:	1b 83       	std	Y+3, r17	; 0x03
     79c:	0a 83       	std	Y+2, r16	; 0x02

	this->CS->SetAsOutput();
     79e:	c8 01       	movw	r24, r16
     7a0:	44 d2       	rcall	.+1160   	; 0xc2a <_ZN4Port11SetAsOutputEv>
	this->CS->Set();
     7a2:	8a 81       	ldd	r24, Y+2	; 0x02
     7a4:	9b 81       	ldd	r25, Y+3	; 0x03
     7a6:	54 d2       	rcall	.+1192   	; 0xc50 <_ZN4Port3SetEv>
	
	PrepareDataChange();
     7a8:	ce 01       	movw	r24, r28
     7aa:	cf df       	rcall	.-98     	; 0x74a <_ZN7LTC186417PrepareDataChangeEv>
}
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	08 95       	ret

000007ba <_ZN7LTC18646FinishEv>:
{
	this->CS->Clear();
}

void LTC1864::Finish()
{
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	ec 01       	movw	r28, r24
	this->CS->Set();
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	9b 81       	ldd	r25, Y+3	; 0x03
     7c4:	45 d2       	rcall	.+1162   	; 0xc50 <_ZN4Port3SetEv>
		
	uint8_t *ptr = this->buffer->Read();
     7c6:	8c 81       	ldd	r24, Y+4	; 0x04
     7c8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ca:	bf dc       	rcall	.-1666   	; 0x14a <_ZN6Buffer4ReadEv>
	
	this->result = *ptr;
     7cc:	fc 01       	movw	r30, r24
     7ce:	20 81       	ld	r18, Z
     7d0:	30 e0       	ldi	r19, 0x00	; 0
	this->result <<= 8;
     7d2:	32 2f       	mov	r19, r18
     7d4:	22 27       	eor	r18, r18
     7d6:	3f 83       	std	Y+7, r19	; 0x07
     7d8:	2e 83       	std	Y+6, r18	; 0x06
		
	ptr++;
		
	this->result |= *ptr;
     7da:	81 81       	ldd	r24, Z+1	; 0x01
     7dc:	28 2b       	or	r18, r24
     7de:	3f 83       	std	Y+7, r19	; 0x07
     7e0:	2e 83       	std	Y+6, r18	; 0x06
		
	this->buffer->ClearBlock();
     7e2:	8c 81       	ldd	r24, Y+4	; 0x04
     7e4:	9d 81       	ldd	r25, Y+5	; 0x05
     7e6:	ca dc       	rcall	.-1644   	; 0x17c <_ZN6Buffer10ClearBlockEv>
		
	PrepareDataChange();
     7e8:	ce 01       	movw	r24, r28
     7ea:	af df       	rcall	.-162    	; 0x74a <_ZN7LTC186417PrepareDataChangeEv>
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <_Z41__static_initialization_and_destruction_0ii>:
			PrintResult(0, adc_1->GetResult(), displayedValue1);
					
			PrintResult(1, adc_2->GetResult(), displayedValue2);
		}
	}
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	09 f0       	breq	.+2      	; 0x810 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     80e:	32 c1       	rjmp	.+612    	; 0xa74 <_Z41__static_initialization_and_destruction_0ii+0x282>
     810:	6f 3f       	cpi	r22, 0xFF	; 255
     812:	7f 4f       	sbci	r23, 0xFF	; 255
     814:	09 f0       	breq	.+2      	; 0x818 <_Z41__static_initialization_and_destruction_0ii+0x26>
     816:	2e c1       	rjmp	.+604    	; 0xa74 <_Z41__static_initialization_and_destruction_0ii+0x282>
#include "SPI_Master.h"
#include "LTC1864.h"
#include "HD44780.h"
#include "StringHandler.h"

Port *rs = new Port(&PORTD, &DDRD, &PIND, 0);
     818:	87 e0       	ldi	r24, 0x07	; 7
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	63 d2       	rcall	.+1222   	; 0xce4 <_ZN4PortnwEj>
     81e:	ec 01       	movw	r28, r24
     820:	00 e0       	ldi	r16, 0x00	; 0
     822:	20 e3       	ldi	r18, 0x30	; 48
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	41 e3       	ldi	r20, 0x31	; 49
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	62 e3       	ldi	r22, 0x32	; 50
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	36 d2       	rcall	.+1132   	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     830:	d0 93 a2 00 	sts	0x00A2, r29	; 0x8000a2 <rs+0x1>
     834:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <rs>
Port *rw = new Port(&PORTD, &DDRD, &PIND, 1);
     838:	87 e0       	ldi	r24, 0x07	; 7
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	53 d2       	rcall	.+1190   	; 0xce4 <_ZN4PortnwEj>
     83e:	ec 01       	movw	r28, r24
     840:	01 e0       	ldi	r16, 0x01	; 1
     842:	20 e3       	ldi	r18, 0x30	; 48
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	41 e3       	ldi	r20, 0x31	; 49
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	62 e3       	ldi	r22, 0x32	; 50
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	26 d2       	rcall	.+1100   	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     850:	d0 93 a0 00 	sts	0x00A0, r29	; 0x8000a0 <rw+0x1>
     854:	c0 93 9f 00 	sts	0x009F, r28	; 0x80009f <rw>
Port *e = new Port(&PORTD, &DDRD, &PIND, 2);
     858:	87 e0       	ldi	r24, 0x07	; 7
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	43 d2       	rcall	.+1158   	; 0xce4 <_ZN4PortnwEj>
     85e:	ec 01       	movw	r28, r24
     860:	02 e0       	ldi	r16, 0x02	; 2
     862:	20 e3       	ldi	r18, 0x30	; 48
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	41 e3       	ldi	r20, 0x31	; 49
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	62 e3       	ldi	r22, 0x32	; 50
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	16 d2       	rcall	.+1068   	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     870:	d0 93 9e 00 	sts	0x009E, r29	; 0x80009e <e+0x1>
     874:	c0 93 9d 00 	sts	0x009D, r28	; 0x80009d <e>
Port *d4 = new Port(&PORTD, &DDRD, &PIND, 3);
     878:	87 e0       	ldi	r24, 0x07	; 7
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	33 d2       	rcall	.+1126   	; 0xce4 <_ZN4PortnwEj>
     87e:	ec 01       	movw	r28, r24
     880:	03 e0       	ldi	r16, 0x03	; 3
     882:	20 e3       	ldi	r18, 0x30	; 48
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	41 e3       	ldi	r20, 0x31	; 49
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	62 e3       	ldi	r22, 0x32	; 50
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	06 d2       	rcall	.+1036   	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     890:	d0 93 9c 00 	sts	0x009C, r29	; 0x80009c <d4+0x1>
     894:	c0 93 9b 00 	sts	0x009B, r28	; 0x80009b <d4>
Port *d5 = new Port(&PORTD, &DDRD, &PIND, 4);
     898:	87 e0       	ldi	r24, 0x07	; 7
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	23 d2       	rcall	.+1094   	; 0xce4 <_ZN4PortnwEj>
     89e:	ec 01       	movw	r28, r24
     8a0:	04 e0       	ldi	r16, 0x04	; 4
     8a2:	20 e3       	ldi	r18, 0x30	; 48
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	41 e3       	ldi	r20, 0x31	; 49
     8a8:	50 e0       	ldi	r21, 0x00	; 0
     8aa:	62 e3       	ldi	r22, 0x32	; 50
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	f6 d1       	rcall	.+1004   	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     8b0:	d0 93 9a 00 	sts	0x009A, r29	; 0x80009a <d5+0x1>
     8b4:	c0 93 99 00 	sts	0x0099, r28	; 0x800099 <d5>
Port *d6 = new Port(&PORTD, &DDRD, &PIND, 5);
     8b8:	87 e0       	ldi	r24, 0x07	; 7
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	13 d2       	rcall	.+1062   	; 0xce4 <_ZN4PortnwEj>
     8be:	ec 01       	movw	r28, r24
     8c0:	05 e0       	ldi	r16, 0x05	; 5
     8c2:	20 e3       	ldi	r18, 0x30	; 48
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	41 e3       	ldi	r20, 0x31	; 49
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	62 e3       	ldi	r22, 0x32	; 50
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	e6 d1       	rcall	.+972    	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     8d0:	d0 93 98 00 	sts	0x0098, r29	; 0x800098 <d6+0x1>
     8d4:	c0 93 97 00 	sts	0x0097, r28	; 0x800097 <d6>
Port *d7 = new Port(&PORTD, &DDRD, &PIND, 6);
     8d8:	87 e0       	ldi	r24, 0x07	; 7
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	03 d2       	rcall	.+1030   	; 0xce4 <_ZN4PortnwEj>
     8de:	ec 01       	movw	r28, r24
     8e0:	06 e0       	ldi	r16, 0x06	; 6
     8e2:	20 e3       	ldi	r18, 0x30	; 48
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	41 e3       	ldi	r20, 0x31	; 49
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	62 e3       	ldi	r22, 0x32	; 50
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	d6 d1       	rcall	.+940    	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     8f0:	d0 93 96 00 	sts	0x0096, r29	; 0x800096 <d7+0x1>
     8f4:	c0 93 95 00 	sts	0x0095, r28	; 0x800095 <d7>

HD44780 *lcd = new HD44780(rs, rw, e, d4, d5, d6, d7, WH1602);
     8f8:	80 e1       	ldi	r24, 0x10	; 16
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	63 dc       	rcall	.-1850   	; 0x1c4 <_ZN7HD44780nwEj>
     8fe:	ec 01       	movw	r28, r24
     900:	a0 90 95 00 	lds	r10, 0x0095	; 0x800095 <d7>
     904:	b0 90 96 00 	lds	r11, 0x0096	; 0x800096 <d7+0x1>
     908:	c0 90 97 00 	lds	r12, 0x0097	; 0x800097 <d6>
     90c:	d0 90 98 00 	lds	r13, 0x0098	; 0x800098 <d6+0x1>
     910:	e0 90 99 00 	lds	r14, 0x0099	; 0x800099 <d5>
     914:	f0 90 9a 00 	lds	r15, 0x009A	; 0x80009a <d5+0x1>
     918:	00 91 9b 00 	lds	r16, 0x009B	; 0x80009b <d4>
     91c:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <d4+0x1>
     920:	20 91 9d 00 	lds	r18, 0x009D	; 0x80009d <e>
     924:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <e+0x1>
     928:	40 91 9f 00 	lds	r20, 0x009F	; 0x80009f <rw>
     92c:	50 91 a0 00 	lds	r21, 0x00A0	; 0x8000a0 <rw+0x1>
     930:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <rs>
     934:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <rs+0x1>
     938:	0f 2e       	mov	r0, r31
     93a:	f2 e4       	ldi	r31, 0x42	; 66
     93c:	8f 2e       	mov	r8, r31
     93e:	f6 e0       	ldi	r31, 0x06	; 6
     940:	9f 2e       	mov	r9, r31
     942:	f0 2d       	mov	r31, r0
     944:	03 dd       	rcall	.-1530   	; 0x34c <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type>
     946:	d0 93 94 00 	sts	0x0094, r29	; 0x800094 <lcd+0x1>
     94a:	c0 93 93 00 	sts	0x0093, r28	; 0x800093 <lcd>

Port *sck = new Port(&PORTB, &DDRB, &PINB, 5);
     94e:	87 e0       	ldi	r24, 0x07	; 7
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	c8 d1       	rcall	.+912    	; 0xce4 <_ZN4PortnwEj>
     954:	ec 01       	movw	r28, r24
     956:	05 e0       	ldi	r16, 0x05	; 5
     958:	26 e3       	ldi	r18, 0x36	; 54
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	47 e3       	ldi	r20, 0x37	; 55
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	68 e3       	ldi	r22, 0x38	; 56
     962:	70 e0       	ldi	r23, 0x00	; 0
     964:	9b d1       	rcall	.+822    	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     966:	d0 93 92 00 	sts	0x0092, r29	; 0x800092 <sck+0x1>
     96a:	c0 93 91 00 	sts	0x0091, r28	; 0x800091 <sck>
Port *mosi = new Port(&PORTB, &DDRB, &PINB, 3);
     96e:	87 e0       	ldi	r24, 0x07	; 7
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	b8 d1       	rcall	.+880    	; 0xce4 <_ZN4PortnwEj>
     974:	ec 01       	movw	r28, r24
     976:	03 e0       	ldi	r16, 0x03	; 3
     978:	26 e3       	ldi	r18, 0x36	; 54
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	47 e3       	ldi	r20, 0x37	; 55
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	68 e3       	ldi	r22, 0x38	; 56
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	8b d1       	rcall	.+790    	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     986:	d0 93 90 00 	sts	0x0090, r29	; 0x800090 <mosi+0x1>
     98a:	c0 93 8f 00 	sts	0x008F, r28	; 0x80008f <mosi>
Port *miso = new Port(&PORTB, &DDRB, &PINB, 4);
     98e:	87 e0       	ldi	r24, 0x07	; 7
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a8 d1       	rcall	.+848    	; 0xce4 <_ZN4PortnwEj>
     994:	ec 01       	movw	r28, r24
     996:	04 e0       	ldi	r16, 0x04	; 4
     998:	26 e3       	ldi	r18, 0x36	; 54
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	47 e3       	ldi	r20, 0x37	; 55
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	68 e3       	ldi	r22, 0x38	; 56
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	7b d1       	rcall	.+758    	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     9a6:	d0 93 8e 00 	sts	0x008E, r29	; 0x80008e <miso+0x1>
     9aa:	c0 93 8d 00 	sts	0x008D, r28	; 0x80008d <miso>
Port *ss = new Port(&PORTB, &DDRB, &PINB, 2);
     9ae:	87 e0       	ldi	r24, 0x07	; 7
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	98 d1       	rcall	.+816    	; 0xce4 <_ZN4PortnwEj>
     9b4:	ec 01       	movw	r28, r24
     9b6:	02 e0       	ldi	r16, 0x02	; 2
     9b8:	26 e3       	ldi	r18, 0x36	; 54
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	47 e3       	ldi	r20, 0x37	; 55
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	68 e3       	ldi	r22, 0x38	; 56
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	6b d1       	rcall	.+726    	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     9c6:	d0 93 8c 00 	sts	0x008C, r29	; 0x80008c <ss+0x1>
     9ca:	c0 93 8b 00 	sts	0x008B, r28	; 0x80008b <ss>
	
SPI_Master *spi = new SPI_Master(sck, mosi, miso, ss);
     9ce:	87 e0       	ldi	r24, 0x07	; 7
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	92 d1       	rcall	.+804    	; 0xcf8 <_ZN10SPI_MasternwEj>
     9d4:	ec 01       	movw	r28, r24
     9d6:	00 91 8b 00 	lds	r16, 0x008B	; 0x80008b <ss>
     9da:	10 91 8c 00 	lds	r17, 0x008C	; 0x80008c <ss+0x1>
     9de:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <miso>
     9e2:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <miso+0x1>
     9e6:	40 91 8f 00 	lds	r20, 0x008F	; 0x80008f <mosi>
     9ea:	50 91 90 00 	lds	r21, 0x0090	; 0x800090 <mosi+0x1>
     9ee:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <sck>
     9f2:	70 91 92 00 	lds	r23, 0x0092	; 0x800092 <sck+0x1>
     9f6:	98 d1       	rcall	.+816    	; 0xd28 <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>
     9f8:	d0 93 8a 00 	sts	0x008A, r29	; 0x80008a <spi+0x1>
     9fc:	c0 93 89 00 	sts	0x0089, r28	; 0x800089 <spi>

Port *cs_1 = new Port(&PORTB, &DDRB, &PINB, 1);
     a00:	87 e0       	ldi	r24, 0x07	; 7
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	6f d1       	rcall	.+734    	; 0xce4 <_ZN4PortnwEj>
     a06:	ec 01       	movw	r28, r24
     a08:	01 e0       	ldi	r16, 0x01	; 1
     a0a:	26 e3       	ldi	r18, 0x36	; 54
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	47 e3       	ldi	r20, 0x37	; 55
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	68 e3       	ldi	r22, 0x38	; 56
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	42 d1       	rcall	.+644    	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     a18:	d0 93 88 00 	sts	0x0088, r29	; 0x800088 <cs_1+0x1>
     a1c:	c0 93 87 00 	sts	0x0087, r28	; 0x800087 <cs_1>
Port *cs_2 = new Port(&PORTB, &DDRB, &PINB, 2);
     a20:	87 e0       	ldi	r24, 0x07	; 7
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	5f d1       	rcall	.+702    	; 0xce4 <_ZN4PortnwEj>
     a26:	ec 01       	movw	r28, r24
     a28:	02 e0       	ldi	r16, 0x02	; 2
     a2a:	26 e3       	ldi	r18, 0x36	; 54
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	47 e3       	ldi	r20, 0x37	; 55
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	68 e3       	ldi	r22, 0x38	; 56
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	32 d1       	rcall	.+612    	; 0xc9c <_ZN4PortC1EPVhS1_S1_h>
     a38:	d0 93 86 00 	sts	0x0086, r29	; 0x800086 <cs_2+0x1>
     a3c:	c0 93 85 00 	sts	0x0085, r28	; 0x800085 <cs_2>

LTC1864 *adc_1 = new LTC1864(cs_1);
     a40:	88 e0       	ldi	r24, 0x08	; 8
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	1d de       	rcall	.-966    	; 0x680 <_ZN7LTC1864nwEj>
     a46:	ec 01       	movw	r28, r24
     a48:	60 91 87 00 	lds	r22, 0x0087	; 0x800087 <cs_1>
     a4c:	70 91 88 00 	lds	r23, 0x0088	; 0x800088 <cs_1+0x1>
     a50:	90 de       	rcall	.-736    	; 0x772 <_ZN7LTC1864C1EP4Port>
     a52:	d0 93 84 00 	sts	0x0084, r29	; 0x800084 <adc_1+0x1>
     a56:	c0 93 83 00 	sts	0x0083, r28	; 0x800083 <adc_1>
LTC1864 *adc_2 = new LTC1864(cs_2);
     a5a:	88 e0       	ldi	r24, 0x08	; 8
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	10 de       	rcall	.-992    	; 0x680 <_ZN7LTC1864nwEj>
     a60:	ec 01       	movw	r28, r24
     a62:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <cs_2>
     a66:	70 91 86 00 	lds	r23, 0x0086	; 0x800086 <cs_2+0x1>
     a6a:	83 de       	rcall	.-762    	; 0x772 <_ZN7LTC1864C1EP4Port>
     a6c:	d0 93 82 00 	sts	0x0082, r29	; 0x800082 <adc_2+0x1>
     a70:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <adc_2>
			PrintResult(0, adc_1->GetResult(), displayedValue1);
					
			PrintResult(1, adc_2->GetResult(), displayedValue2);
		}
	}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	bf 90       	pop	r11
     a86:	af 90       	pop	r10
     a88:	9f 90       	pop	r9
     a8a:	8f 90       	pop	r8
     a8c:	08 95       	ret

00000a8e <__vector_9>:
bool allowedPrint = false;
uint16_t displayedValue1 = 0;
uint16_t displayedValue2 = 0;

ISR(TIMER0_OVF_vect)
{
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	2f 93       	push	r18
     a9a:	3f 93       	push	r19
     a9c:	4f 93       	push	r20
     a9e:	5f 93       	push	r21
     aa0:	6f 93       	push	r22
     aa2:	7f 93       	push	r23
     aa4:	8f 93       	push	r24
     aa6:	9f 93       	push	r25
     aa8:	af 93       	push	r26
     aaa:	bf 93       	push	r27
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
	spi->CheckDevices();
     ab0:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <spi>
     ab4:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <spi+0x1>
     ab8:	e2 d1       	rcall	.+964    	; 0xe7e <_ZN10SPI_Master12CheckDevicesEv>
	
	if(!allowedPrint) allowedPrint = true;
     aba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <allowedPrint>
     abe:	81 11       	cpse	r24, r1
     ac0:	03 c0       	rjmp	.+6      	; 0xac8 <__vector_9+0x3a>
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <allowedPrint>
}
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	bf 91       	pop	r27
     ace:	af 91       	pop	r26
     ad0:	9f 91       	pop	r25
     ad2:	8f 91       	pop	r24
     ad4:	7f 91       	pop	r23
     ad6:	6f 91       	pop	r22
     ad8:	5f 91       	pop	r21
     ada:	4f 91       	pop	r20
     adc:	3f 91       	pop	r19
     ade:	2f 91       	pop	r18
     ae0:	0f 90       	pop	r0
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	0f 90       	pop	r0
     ae6:	1f 90       	pop	r1
     ae8:	18 95       	reti

00000aea <__vector_10>:

ISR(SPI_STC_vect)
{
     aea:	1f 92       	push	r1
     aec:	0f 92       	push	r0
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	0f 92       	push	r0
     af2:	11 24       	eor	r1, r1
     af4:	2f 93       	push	r18
     af6:	3f 93       	push	r19
     af8:	4f 93       	push	r20
     afa:	5f 93       	push	r21
     afc:	6f 93       	push	r22
     afe:	7f 93       	push	r23
     b00:	8f 93       	push	r24
     b02:	9f 93       	push	r25
     b04:	af 93       	push	r26
     b06:	bf 93       	push	r27
     b08:	ef 93       	push	r30
     b0a:	ff 93       	push	r31
	spi->NextOperation();
     b0c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <spi>
     b10:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <spi+0x1>
     b14:	89 d1       	rcall	.+786    	; 0xe28 <_ZN10SPI_Master13NextOperationEv>
}
     b16:	ff 91       	pop	r31
     b18:	ef 91       	pop	r30
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <_Z11PrintResulthjRj>:

void PrintResult(uint8_t line, uint16_t result, uint16_t &displayedValue)
{
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
	if(displayedValue == result) return;
     b3e:	fa 01       	movw	r30, r20
     b40:	20 81       	ld	r18, Z
     b42:	31 81       	ldd	r19, Z+1	; 0x01
     b44:	26 17       	cp	r18, r22
     b46:	37 07       	cpc	r19, r23
     b48:	e9 f0       	breq	.+58     	; 0xb84 <_Z11PrintResulthjRj+0x4c>
     b4a:	eb 01       	movw	r28, r22
     b4c:	18 2f       	mov	r17, r24
	
	displayedValue = result;
     b4e:	71 83       	std	Z+1, r23	; 0x01
     b50:	60 83       	st	Z, r22
	
	lcd->ClearArea(5, 0, line);
     b52:	28 2f       	mov	r18, r24
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	65 e0       	ldi	r22, 0x05	; 5
     b58:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <lcd>
     b5c:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <lcd+0x1>
     b60:	e0 dc       	rcall	.-1600   	; 0x522 <_ZN7HD447809ClearAreaEhhh>
	
	const char* txt = StringHandler::FloatToString(result, 0);
     b62:	be 01       	movw	r22, r28
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	b4 d3       	rcall	.+1896   	; 0x12d2 <__floatunsisf>
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	03 d2       	rcall	.+1030   	; 0xf74 <_ZN13StringHandler13FloatToStringEfh>
     b6e:	ec 01       	movw	r28, r24
	
	lcd->PrintAlignment(txt, line, LEFT_SIDE);
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	41 2f       	mov	r20, r17
     b74:	bc 01       	movw	r22, r24
     b76:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <lcd>
     b7a:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <lcd+0x1>
     b7e:	41 dd       	rcall	.-1406   	; 0x602 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment>
	
	free((char*)txt);
     b80:	ce 01       	movw	r24, r28
     b82:	9c d7       	rcall	.+3896   	; 0x1abc <free>
	txt = nullptr;
}
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	1f 91       	pop	r17
     b8a:	08 95       	ret

00000b8c <main>:

int main(void)
{	
	//T0
	TCCR0|=(1<<CS02)|(1<<CS00);	//prescaler 1024	
     b8c:	83 b7       	in	r24, 0x33	; 51
     b8e:	85 60       	ori	r24, 0x05	; 5
     b90:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0);	//enable interrupt OVF
     b92:	89 b7       	in	r24, 0x39	; 57
     b94:	81 60       	ori	r24, 0x01	; 1
     b96:	89 bf       	out	0x39, r24	; 57

	spi->AddDevice(adc_1);
     b98:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <adc_1>
     b9c:	70 91 84 00 	lds	r23, 0x0084	; 0x800084 <adc_1+0x1>
     ba0:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <spi>
     ba4:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <spi+0x1>
     ba8:	23 d1       	rcall	.+582    	; 0xdf0 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	spi->AddDevice(adc_2);
     baa:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <adc_2>
     bae:	70 91 82 00 	lds	r23, 0x0082	; 0x800082 <adc_2+0x1>
     bb2:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <spi>
     bb6:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <spi+0x1>
     bba:	1a d1       	rcall	.+564    	; 0xdf0 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	
	sei();	
     bbc:	78 94       	sei
		
	while (1)
	{
		if(allowedPrint)
     bbe:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <allowedPrint>
     bc2:	88 23       	and	r24, r24
     bc4:	e1 f3       	breq	.-8      	; 0xbbe <main+0x32>
		{
			allowedPrint = false;
     bc6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <allowedPrint>
					
			PrintResult(0, adc_1->GetResult(), displayedValue1);
     bca:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <adc_1>
     bce:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <adc_1+0x1>
     bd2:	52 dd       	rcall	.-1372   	; 0x678 <_ZN7LTC18649GetResultEv>
     bd4:	4e e7       	ldi	r20, 0x7E	; 126
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	bc 01       	movw	r22, r24
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	ad df       	rcall	.-166    	; 0xb38 <_Z11PrintResulthjRj>
					
			PrintResult(1, adc_2->GetResult(), displayedValue2);
     bde:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <adc_2>
     be2:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <adc_2+0x1>
     be6:	48 dd       	rcall	.-1392   	; 0x678 <_ZN7LTC18649GetResultEv>
     be8:	4c e7       	ldi	r20, 0x7C	; 124
     bea:	50 e0       	ldi	r21, 0x00	; 0
     bec:	bc 01       	movw	r22, r24
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	a3 df       	rcall	.-186    	; 0xb38 <_Z11PrintResulthjRj>
     bf2:	e5 cf       	rjmp	.-54     	; 0xbbe <main+0x32>

00000bf4 <_GLOBAL__sub_I_rs>:
		}
	}
     bf4:	6f ef       	ldi	r22, 0xFF	; 255
     bf6:	7f ef       	ldi	r23, 0xFF	; 255
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	fa dd       	rcall	.-1036   	; 0x7f2 <_Z41__static_initialization_and_destruction_0ii>
     bfe:	08 95       	ret

00000c00 <_ZN4Port10SetAsInputEv>:
bool Port::IsClear()
{
	return !(*this->PIN & (1<<this->pinNum));
}

Port::~Port(){}
     c00:	dc 01       	movw	r26, r24
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	40 81       	ld	r20, Z
     c0c:	21 e0       	ldi	r18, 0x01	; 1
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	b9 01       	movw	r22, r18
     c12:	16 96       	adiw	r26, 0x06	; 6
     c14:	0c 90       	ld	r0, X
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <_ZN4Port10SetAsInputEv+0x1c>
     c18:	66 0f       	add	r22, r22
     c1a:	77 1f       	adc	r23, r23
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <_ZN4Port10SetAsInputEv+0x18>
     c20:	cb 01       	movw	r24, r22
     c22:	80 95       	com	r24
     c24:	84 23       	and	r24, r20
     c26:	80 83       	st	Z, r24
     c28:	08 95       	ret

00000c2a <_ZN4Port11SetAsOutputEv>:
     c2a:	dc 01       	movw	r26, r24
     c2c:	12 96       	adiw	r26, 0x02	; 2
     c2e:	ed 91       	ld	r30, X+
     c30:	fc 91       	ld	r31, X
     c32:	13 97       	sbiw	r26, 0x03	; 3
     c34:	40 81       	ld	r20, Z
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	c9 01       	movw	r24, r18
     c3c:	16 96       	adiw	r26, 0x06	; 6
     c3e:	0c 90       	ld	r0, X
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <_ZN4Port11SetAsOutputEv+0x1c>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <_ZN4Port11SetAsOutputEv+0x18>
     c4a:	84 2b       	or	r24, r20
     c4c:	80 83       	st	Z, r24
     c4e:	08 95       	ret

00000c50 <_ZN4Port3SetEv>:
     c50:	dc 01       	movw	r26, r24
     c52:	ed 91       	ld	r30, X+
     c54:	fc 91       	ld	r31, X
     c56:	11 97       	sbiw	r26, 0x01	; 1
     c58:	40 81       	ld	r20, Z
     c5a:	21 e0       	ldi	r18, 0x01	; 1
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	c9 01       	movw	r24, r18
     c60:	16 96       	adiw	r26, 0x06	; 6
     c62:	0c 90       	ld	r0, X
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <_ZN4Port3SetEv+0x1a>
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	0a 94       	dec	r0
     c6c:	e2 f7       	brpl	.-8      	; 0xc66 <_ZN4Port3SetEv+0x16>
     c6e:	84 2b       	or	r24, r20
     c70:	80 83       	st	Z, r24
     c72:	08 95       	ret

00000c74 <_ZN4Port5ClearEv>:
     c74:	dc 01       	movw	r26, r24
     c76:	ed 91       	ld	r30, X+
     c78:	fc 91       	ld	r31, X
     c7a:	11 97       	sbiw	r26, 0x01	; 1
     c7c:	40 81       	ld	r20, Z
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	b9 01       	movw	r22, r18
     c84:	16 96       	adiw	r26, 0x06	; 6
     c86:	0c 90       	ld	r0, X
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <_ZN4Port5ClearEv+0x1a>
     c8a:	66 0f       	add	r22, r22
     c8c:	77 1f       	adc	r23, r23
     c8e:	0a 94       	dec	r0
     c90:	e2 f7       	brpl	.-8      	; 0xc8a <_ZN4Port5ClearEv+0x16>
     c92:	cb 01       	movw	r24, r22
     c94:	80 95       	com	r24
     c96:	84 23       	and	r24, r20
     c98:	80 83       	st	Z, r24
     c9a:	08 95       	ret

00000c9c <_ZN4PortC1EPVhS1_S1_h>:
     c9c:	0f 93       	push	r16
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	ec 01       	movw	r28, r24
     ca4:	79 83       	std	Y+1, r23	; 0x01
     ca6:	68 83       	st	Y, r22
     ca8:	5b 83       	std	Y+3, r21	; 0x03
     caa:	4a 83       	std	Y+2, r20	; 0x02
     cac:	3d 83       	std	Y+5, r19	; 0x05
     cae:	2c 83       	std	Y+4, r18	; 0x04
     cb0:	0e 83       	std	Y+6, r16	; 0x06
     cb2:	a6 df       	rcall	.-180    	; 0xc00 <_ZN4Port10SetAsInputEv>
     cb4:	ce 01       	movw	r24, r28
     cb6:	de df       	rcall	.-68     	; 0xc74 <_ZN4Port5ClearEv>
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <_ZN4Port5IsSetEv>:
     cc0:	dc 01       	movw	r26, r24
     cc2:	14 96       	adiw	r26, 0x04	; 4
     cc4:	ed 91       	ld	r30, X+
     cc6:	fc 91       	ld	r31, X
     cc8:	15 97       	sbiw	r26, 0x05	; 5
     cca:	20 81       	ld	r18, Z
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	f9 01       	movw	r30, r18
     cd0:	16 96       	adiw	r26, 0x06	; 6
     cd2:	0c 90       	ld	r0, X
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <_ZN4Port5IsSetEv+0x1a>
     cd6:	f5 95       	asr	r31
     cd8:	e7 95       	ror	r30
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <_ZN4Port5IsSetEv+0x16>
     cde:	cf 01       	movw	r24, r30
     ce0:	81 70       	andi	r24, 0x01	; 1
     ce2:	08 95       	ret

00000ce4 <_ZN4PortnwEj>:

void* Port::operator new(size_t size)
{
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     cea:	ce 01       	movw	r24, r28
     cec:	4f d6       	rcall	.+3230   	; 0x198c <malloc>
	}while(ptr == nullptr);
     cee:	00 97       	sbiw	r24, 0x00	; 0
     cf0:	e1 f3       	breq	.-8      	; 0xcea <_ZN4PortnwEj+0x6>
	
	return ptr;
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <_ZN10SPI_MasternwEj>:
	return ptr;
}

void SPI_Master::operator delete(void* ptr)
{
	free(ptr);
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ec 01       	movw	r28, r24
     cfe:	ce 01       	movw	r24, r28
     d00:	45 d6       	rcall	.+3210   	; 0x198c <malloc>
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	e1 f3       	breq	.-8      	; 0xcfe <_ZN10SPI_MasternwEj+0x6>
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <_ZN7DevicesI4ISPIEnwEj>:
{
	free((T**)this->devicesList);
}

template <typename T>
void* Devices<T>::operator new(size_t size)
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	ec 01       	movw	r28, r24
{
	void* ptr;
	do
	{
		ptr = malloc(size);
     d12:	ce 01       	movw	r24, r28
     d14:	3b d6       	rcall	.+3190   	; 0x198c <malloc>

template <typename T>
void* Devices<T>::operator new(size_t size)
{
	void* ptr;
	do
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	e1 f3       	breq	.-8      	; 0xd12 <_ZN7DevicesI4ISPIEnwEj+0x6>
	{
		ptr = malloc(size);
	}while(ptr == nullptr);
	
	return ptr;
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	08 95       	ret

00000d20 <_ZN7DevicesI4ISPIEC1Ev>:
};

template <typename T>
Devices<T>::Devices()
{
	this->selectedDevice = 0;
     d20:	fc 01       	movw	r30, r24
     d22:	12 82       	std	Z+2, r1	; 0x02
	this->devicesQuantity = 0;
     d24:	13 82       	std	Z+3, r1	; 0x03
     d26:	08 95       	ret

00000d28 <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>:
﻿#include "SPI_Master.h"

SPI_Master :: SPI_Master(Port* SCK, Port* MOSI, Port* MISO, Port* SS)
     d28:	8f 92       	push	r8
     d2a:	9f 92       	push	r9
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	ec 01       	movw	r28, r24
     d42:	6b 01       	movw	r12, r22
     d44:	7a 01       	movw	r14, r20
     d46:	59 01       	movw	r10, r18
     d48:	48 01       	movw	r8, r16
{	
	this->devices = new Devices<ISPI>();
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	de df       	rcall	.-68     	; 0xd0c <_ZN7DevicesI4ISPIEnwEj>
     d50:	8c 01       	movw	r16, r24
     d52:	e6 df       	rcall	.-52     	; 0xd20 <_ZN7DevicesI4ISPIEC1Ev>
     d54:	1a 83       	std	Y+2, r17	; 0x02
     d56:	09 83       	std	Y+1, r16	; 0x01
	
	this->spiBusy = false;
     d58:	18 82       	st	Y, r1
		
	SCK->SetAsOutput();
     d5a:	c6 01       	movw	r24, r12
     d5c:	66 df       	rcall	.-308    	; 0xc2a <_ZN4Port11SetAsOutputEv>
	SCK->Clear();
     d5e:	c6 01       	movw	r24, r12
     d60:	89 df       	rcall	.-238    	; 0xc74 <_ZN4Port5ClearEv>
	
	MOSI->SetAsOutput();
     d62:	c7 01       	movw	r24, r14
     d64:	62 df       	rcall	.-316    	; 0xc2a <_ZN4Port11SetAsOutputEv>
	MOSI->Clear();
     d66:	c7 01       	movw	r24, r14
     d68:	85 df       	rcall	.-246    	; 0xc74 <_ZN4Port5ClearEv>
	
	MISO->SetAsInput();
     d6a:	c5 01       	movw	r24, r10
     d6c:	49 df       	rcall	.-366    	; 0xc00 <_ZN4Port10SetAsInputEv>
	MISO->Set();	
     d6e:	c5 01       	movw	r24, r10
     d70:	6f df       	rcall	.-290    	; 0xc50 <_ZN4Port3SetEv>
	
	SS->SetAsOutput();
     d72:	c4 01       	movw	r24, r8
     d74:	5a df       	rcall	.-332    	; 0xc2a <_ZN4Port11SetAsOutputEv>
	SS->Set();	
     d76:	c4 01       	movw	r24, r8
     d78:	6b df       	rcall	.-298    	; 0xc50 <_ZN4Port3SetEv>
	
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPIE)|(1<<SPR1);
     d7a:	8d b1       	in	r24, 0x0d	; 13
     d7c:	82 6d       	ori	r24, 0xD2	; 210
     d7e:	8d b9       	out	0x0d, r24	; 13
}
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	df 90       	pop	r13
     d8e:	cf 90       	pop	r12
     d90:	bf 90       	pop	r11
     d92:	af 90       	pop	r10
     d94:	9f 90       	pop	r9
     d96:	8f 90       	pop	r8
     d98:	08 95       	ret

00000d9a <_ZN7DevicesI4ISPIE3AddEPS0_>:
}

template <typename T>
void Devices<T>::Add(T *device)
     d9a:	ef 92       	push	r14
     d9c:	ff 92       	push	r15
     d9e:	0f 93       	push	r16
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	8c 01       	movw	r16, r24
     da8:	7b 01       	movw	r14, r22
{
	this->devicesQuantity++;
     daa:	fc 01       	movw	r30, r24
     dac:	c3 81       	ldd	r28, Z+3	; 0x03
     dae:	cf 5f       	subi	r28, 0xFF	; 255
     db0:	c3 83       	std	Z+3, r28	; 0x03
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
     db2:	d0 e0       	ldi	r29, 0x00	; 0
     db4:	cc 0f       	add	r28, r28
     db6:	dd 1f       	adc	r29, r29
	
	T **ptr = nullptr;		
	do 
	{
		ptr = (T**)realloc(this->devicesList, newSize);
     db8:	be 01       	movw	r22, r28
     dba:	f8 01       	movw	r30, r16
     dbc:	80 81       	ld	r24, Z
     dbe:	91 81       	ldd	r25, Z+1	; 0x01
     dc0:	06 d7       	rcall	.+3596   	; 0x1bce <realloc>
	this->devicesQuantity++;
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
	
	T **ptr = nullptr;		
	do 
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	c9 f3       	breq	.-14     	; 0xdb8 <_ZN7DevicesI4ISPIE3AddEPS0_+0x1e>
	{
		ptr = (T**)realloc(this->devicesList, newSize);
	}while (ptr == nullptr);
	
	this->devicesList = ptr;
     dc6:	f8 01       	movw	r30, r16
     dc8:	91 83       	std	Z+1, r25	; 0x01
     dca:	80 83       	st	Z, r24
	
	this->devicesList[this->devicesQuantity - 1] = device;
     dcc:	23 81       	ldd	r18, Z+3	; 0x03
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	30 48       	sbci	r19, 0x80	; 128
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	fc 01       	movw	r30, r24
     dda:	e2 0f       	add	r30, r18
     ddc:	f3 1f       	adc	r31, r19
     dde:	f1 82       	std	Z+1, r15	; 0x01
     de0:	e0 82       	st	Z, r14
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	08 95       	ret

00000df0 <_ZN10SPI_Master9AddDeviceEP4ISPI>:

void SPI_Master::AddDevice(ISPI *device)
{
	this->devices->Add(device);
     df0:	fc 01       	movw	r30, r24
     df2:	81 81       	ldd	r24, Z+1	; 0x01
     df4:	92 81       	ldd	r25, Z+2	; 0x02
     df6:	d1 df       	rcall	.-94     	; 0xd9a <_ZN7DevicesI4ISPIE3AddEPS0_>
     df8:	08 95       	ret

00000dfa <_ZN7DevicesI4ISPIE13CurrentDeviceEv>:
}

template <typename T>
T* Devices<T>::CurrentDevice()
{
	return this->devicesList[this->selectedDevice];
     dfa:	dc 01       	movw	r26, r24
     dfc:	12 96       	adiw	r26, 0x02	; 2
     dfe:	ec 91       	ld	r30, X
     e00:	12 97       	sbiw	r26, 0x02	; 2
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	ee 0f       	add	r30, r30
     e06:	ff 1f       	adc	r31, r31
     e08:	8d 91       	ld	r24, X+
     e0a:	9c 91       	ld	r25, X
     e0c:	e8 0f       	add	r30, r24
     e0e:	f9 1f       	adc	r31, r25
}
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	08 95       	ret

00000e16 <_ZN7DevicesI4ISPIE4NextEv>:
	
	this->devicesList[this->devicesQuantity - 1] = device;
}

template <typename T>
void Devices<T>::Next()
     e16:	fc 01       	movw	r30, r24
{
	if(this->devicesQuantity > 0)
     e18:	63 81       	ldd	r22, Z+3	; 0x03
     e1a:	66 23       	and	r22, r22
     e1c:	21 f0       	breq	.+8      	; 0xe26 <_ZN7DevicesI4ISPIE4NextEv+0x10>
	{
		++this->selectedDevice %= this->devicesQuantity;
     e1e:	82 81       	ldd	r24, Z+2	; 0x02
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	74 d5       	rcall	.+2792   	; 0x190c <__udivmodqi4>
     e24:	92 83       	std	Z+2, r25	; 0x02
     e26:	08 95       	ret

00000e28 <_ZN10SPI_Master13NextOperationEv>:
}

void SPI_Master::NextOperation()
{
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	fc 01       	movw	r30, r24
	this->data[this->dataCounter++] = SPDR;
     e2e:	a3 81       	ldd	r26, Z+3	; 0x03
     e30:	b4 81       	ldd	r27, Z+4	; 0x04
     e32:	86 81       	ldd	r24, Z+6	; 0x06
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	98 0f       	add	r25, r24
     e38:	96 83       	std	Z+6, r25	; 0x06
     e3a:	a8 0f       	add	r26, r24
     e3c:	b1 1d       	adc	r27, r1
     e3e:	8f b1       	in	r24, 0x0f	; 15
     e40:	8c 93       	st	X, r24
	
	if(this->dataCounter < this->dataSize)
     e42:	86 81       	ldd	r24, Z+6	; 0x06
     e44:	95 81       	ldd	r25, Z+5	; 0x05
     e46:	89 17       	cp	r24, r25
     e48:	40 f4       	brcc	.+16     	; 0xe5a <_ZN10SPI_Master13NextOperationEv+0x32>
	{
		SPDR = this->data[this->dataCounter];
     e4a:	03 80       	ldd	r0, Z+3	; 0x03
     e4c:	f4 81       	ldd	r31, Z+4	; 0x04
     e4e:	e0 2d       	mov	r30, r0
     e50:	e8 0f       	add	r30, r24
     e52:	f1 1d       	adc	r31, r1
     e54:	80 81       	ld	r24, Z
     e56:	8f b9       	out	0x0f, r24	; 15
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <_ZN10SPI_Master13NextOperationEv+0x50>
     e5a:	ef 01       	movw	r28, r30
	}
	
	else
	{
		this->devices->CurrentDevice()->Finish();
     e5c:	81 81       	ldd	r24, Z+1	; 0x01
     e5e:	92 81       	ldd	r25, Z+2	; 0x02
     e60:	cc df       	rcall	.-104    	; 0xdfa <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     e62:	dc 01       	movw	r26, r24
     e64:	ed 91       	ld	r30, X+
     e66:	fc 91       	ld	r31, X
     e68:	04 84       	ldd	r0, Z+12	; 0x0c
     e6a:	f5 85       	ldd	r31, Z+13	; 0x0d
     e6c:	e0 2d       	mov	r30, r0
     e6e:	09 95       	icall
		
		this->spiBusy = false;
     e70:	18 82       	st	Y, r1
		
		this->devices->Next();
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	cf df       	rcall	.-98     	; 0xe16 <_ZN7DevicesI4ISPIE4NextEv>
	}
}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	08 95       	ret

00000e7e <_ZN10SPI_Master12CheckDevicesEv>:

void SPI_Master::CheckDevices()
{
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
	if(!this->spiBusy)
     e82:	dc 01       	movw	r26, r24
     e84:	2c 91       	ld	r18, X
     e86:	21 11       	cpse	r18, r1
     e88:	72 c0       	rjmp	.+228    	; 0xf6e <_ZN10SPI_Master12CheckDevicesEv+0xf0>
     e8a:	ec 01       	movw	r28, r24
	{
		this->dataSize = this->devices->CurrentDevice()->DataSize();
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	b4 df       	rcall	.-152    	; 0xdfa <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     e92:	dc 01       	movw	r26, r24
     e94:	ed 91       	ld	r30, X+
     e96:	fc 91       	ld	r31, X
     e98:	06 80       	ldd	r0, Z+6	; 0x06
     e9a:	f7 81       	ldd	r31, Z+7	; 0x07
     e9c:	e0 2d       	mov	r30, r0
     e9e:	09 95       	icall
     ea0:	8d 83       	std	Y+5, r24	; 0x05
		
		if(this->dataSize > 0)
     ea2:	88 23       	and	r24, r24
     ea4:	09 f4       	brne	.+2      	; 0xea8 <_ZN10SPI_Master12CheckDevicesEv+0x2a>
     ea6:	60 c0       	rjmp	.+192    	; 0xf68 <_ZN10SPI_Master12CheckDevicesEv+0xea>
		{			
			this->data = this->devices->CurrentDevice()->Data();
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	a6 df       	rcall	.-180    	; 0xdfa <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     eae:	dc 01       	movw	r26, r24
     eb0:	ed 91       	ld	r30, X+
     eb2:	fc 91       	ld	r31, X
     eb4:	00 84       	ldd	r0, Z+8	; 0x08
     eb6:	f1 85       	ldd	r31, Z+9	; 0x09
     eb8:	e0 2d       	mov	r30, r0
     eba:	09 95       	icall
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03
			this->dataCounter = 0;
     ec0:	1e 82       	std	Y+6, r1	; 0x06
			
			SPI_DataOrder dataOrder = this->devices->CurrentDevice()->DataOrder();
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	99 df       	rcall	.-206    	; 0xdfa <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     ec8:	dc 01       	movw	r26, r24
     eca:	ed 91       	ld	r30, X+
     ecc:	fc 91       	ld	r31, X
     ece:	04 80       	ldd	r0, Z+4	; 0x04
     ed0:	f5 81       	ldd	r31, Z+5	; 0x05
     ed2:	e0 2d       	mov	r30, r0
     ed4:	09 95       	icall
			if(dataOrder == SPI_MBF) SPCR &= ~(1<<DORD);
     ed6:	81 11       	cpse	r24, r1
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <_ZN10SPI_Master12CheckDevicesEv+0x64>
     eda:	8d b1       	in	r24, 0x0d	; 13
     edc:	8f 7d       	andi	r24, 0xDF	; 223
     ede:	8d b9       	out	0x0d, r24	; 13
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <_ZN10SPI_Master12CheckDevicesEv+0x6e>
			else if(dataOrder == SPI_LBF) SPCR |= (1<<DORD);
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	19 f4       	brne	.+6      	; 0xeec <_ZN10SPI_Master12CheckDevicesEv+0x6e>
     ee6:	8d b1       	in	r24, 0x0d	; 13
     ee8:	80 62       	ori	r24, 0x20	; 32
     eea:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Phase phase = this->devices->CurrentDevice()->Phase();
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	84 df       	rcall	.-248    	; 0xdfa <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     ef2:	dc 01       	movw	r26, r24
     ef4:	ed 91       	ld	r30, X+
     ef6:	fc 91       	ld	r31, X
     ef8:	02 80       	ldd	r0, Z+2	; 0x02
     efa:	f3 81       	ldd	r31, Z+3	; 0x03
     efc:	e0 2d       	mov	r30, r0
     efe:	09 95       	icall
			if(phase == SPI_START) SPCR &= ~(1<<CPHA);
     f00:	81 11       	cpse	r24, r1
     f02:	04 c0       	rjmp	.+8      	; 0xf0c <_ZN10SPI_Master12CheckDevicesEv+0x8e>
     f04:	8d b1       	in	r24, 0x0d	; 13
     f06:	8b 7f       	andi	r24, 0xFB	; 251
     f08:	8d b9       	out	0x0d, r24	; 13
     f0a:	05 c0       	rjmp	.+10     	; 0xf16 <_ZN10SPI_Master12CheckDevicesEv+0x98>
			else if(phase == SPI_END) SPCR |= (1<<CPHA);
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	19 f4       	brne	.+6      	; 0xf16 <_ZN10SPI_Master12CheckDevicesEv+0x98>
     f10:	8d b1       	in	r24, 0x0d	; 13
     f12:	84 60       	ori	r24, 0x04	; 4
     f14:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Polarity polarity = this->devices->CurrentDevice()->Polarity();
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	6f df       	rcall	.-290    	; 0xdfa <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     f1c:	dc 01       	movw	r26, r24
     f1e:	ed 91       	ld	r30, X+
     f20:	fc 91       	ld	r31, X
     f22:	01 90       	ld	r0, Z+
     f24:	f0 81       	ld	r31, Z
     f26:	e0 2d       	mov	r30, r0
     f28:	09 95       	icall
			if(polarity == SPI_RISING) SPCR &= ~(1<<CPOL);
     f2a:	81 11       	cpse	r24, r1
     f2c:	04 c0       	rjmp	.+8      	; 0xf36 <_ZN10SPI_Master12CheckDevicesEv+0xb8>
     f2e:	8d b1       	in	r24, 0x0d	; 13
     f30:	87 7f       	andi	r24, 0xF7	; 247
     f32:	8d b9       	out	0x0d, r24	; 13
     f34:	05 c0       	rjmp	.+10     	; 0xf40 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
			else if(polarity == SPI_FALLING) SPCR |= (1<<CPOL);
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	19 f4       	brne	.+6      	; 0xf40 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
     f3a:	8d b1       	in	r24, 0x0d	; 13
     f3c:	88 60       	ori	r24, 0x08	; 8
     f3e:	8d b9       	out	0x0d, r24	; 13
			
			this->devices->CurrentDevice()->Start();
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	5a df       	rcall	.-332    	; 0xdfa <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     f46:	dc 01       	movw	r26, r24
     f48:	ed 91       	ld	r30, X+
     f4a:	fc 91       	ld	r31, X
     f4c:	02 84       	ldd	r0, Z+10	; 0x0a
     f4e:	f3 85       	ldd	r31, Z+11	; 0x0b
     f50:	e0 2d       	mov	r30, r0
     f52:	09 95       	icall
			
			SPDR = this->data[this->dataCounter];
     f54:	eb 81       	ldd	r30, Y+3	; 0x03
     f56:	fc 81       	ldd	r31, Y+4	; 0x04
     f58:	8e 81       	ldd	r24, Y+6	; 0x06
     f5a:	e8 0f       	add	r30, r24
     f5c:	f1 1d       	adc	r31, r1
     f5e:	80 81       	ld	r24, Z
     f60:	8f b9       	out	0x0f, r24	; 15
			
			this->spiBusy = true;
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	88 83       	st	Y, r24
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <_ZN10SPI_Master12CheckDevicesEv+0xf0>
		}
		
		else this->devices->Next();
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	54 df       	rcall	.-344    	; 0xe16 <_ZN7DevicesI4ISPIE4NextEv>
	}
}
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <_ZN13StringHandler13FloatToStringEfh>:
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
     f74:	2f 92       	push	r2
     f76:	3f 92       	push	r3
     f78:	4f 92       	push	r4
     f7a:	5f 92       	push	r5
     f7c:	6f 92       	push	r6
     f7e:	7f 92       	push	r7
     f80:	8f 92       	push	r8
     f82:	9f 92       	push	r9
     f84:	af 92       	push	r10
     f86:	bf 92       	push	r11
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	00 d0       	rcall	.+0      	; 0xf9a <_ZN13StringHandler13FloatToStringEfh+0x26>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <_ZN13StringHandler13FloatToStringEfh+0x28>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <_ZN13StringHandler13FloatToStringEfh+0x2a>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	2b 01       	movw	r4, r22
     fa4:	3c 01       	movw	r6, r24
     fa6:	94 2e       	mov	r9, r20
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
	
	return resultString;
}
     fa8:	2d b6       	in	r2, 0x3d	; 61
     faa:	3e b6       	in	r3, 0x3e	; 62
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
	uint32_t integerPart = fabs(value);
     fac:	9f 77       	andi	r25, 0x7F	; 127
     fae:	6b 83       	std	Y+3, r22	; 0x03
     fb0:	7c 83       	std	Y+4, r23	; 0x04
     fb2:	8d 83       	std	Y+5, r24	; 0x05
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	61 d1       	rcall	.+706    	; 0x127a <__fixunssfsi>
     fb8:	a6 2e       	mov	r10, r22
     fba:	b7 2e       	mov	r11, r23
     fbc:	c8 2e       	mov	r12, r24
     fbe:	d9 2e       	mov	r13, r25
     fc0:	26 2f       	mov	r18, r22
     fc2:	37 2f       	mov	r19, r23
     fc4:	48 2f       	mov	r20, r24
     fc6:	59 2f       	mov	r21, r25
	
	uint8_t stringLength = 0;	
     fc8:	81 2c       	mov	r8, r1
     fca:	01 c0       	rjmp	.+2      	; 0xfce <_ZN13StringHandler13FloatToStringEfh+0x5a>
	do
	{
		integerPart /= 10;
		stringLength++;
     fcc:	8f 2c       	mov	r8, r15
	uint32_t integerPart = fabs(value);
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
     fce:	ca 01       	movw	r24, r20
     fd0:	b9 01       	movw	r22, r18
     fd2:	2a e0       	ldi	r18, 0x0A	; 10
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	50 e0       	ldi	r21, 0x00	; 0
     fda:	a4 d4       	rcall	.+2376   	; 0x1924 <__udivmodsi4>
		stringLength++;
     fdc:	ff 24       	eor	r15, r15
     fde:	f3 94       	inc	r15
     fe0:	f8 0c       	add	r15, r8
	}
	while(integerPart > 0);
     fe2:	21 15       	cp	r18, r1
     fe4:	31 05       	cpc	r19, r1
     fe6:	41 05       	cpc	r20, r1
     fe8:	51 05       	cpc	r21, r1
     fea:	81 f7       	brne	.-32     	; 0xfcc <_ZN13StringHandler13FloatToStringEfh+0x58>
	
	integerPart = fabs(value);
	
	uint8_t integerPartLength = stringLength;
	
	if(digitsAfterDot > 0)
     fec:	99 20       	and	r9, r9
     fee:	21 f0       	breq	.+8      	; 0xff8 <_ZN13StringHandler13FloatToStringEfh+0x84>
	{
		stringLength++;										//for '.'
     ff0:	83 94       	inc	r8
     ff2:	83 94       	inc	r8
		stringLength += digitsAfterDot;						//for .xxxxx
     ff4:	89 0c       	add	r8, r9
     ff6:	01 c0       	rjmp	.+2      	; 0xffa <_ZN13StringHandler13FloatToStringEfh+0x86>
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
		stringLength++;
     ff8:	8f 2c       	mov	r8, r15
	{
		stringLength++;										//for '.'
		stringLength += digitsAfterDot;						//for .xxxxx
	}
	
	if(value < 0) stringLength++;							//for '-'
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	a9 01       	movw	r20, r18
    1000:	c3 01       	movw	r24, r6
    1002:	b2 01       	movw	r22, r4
    1004:	36 d1       	rcall	.+620    	; 0x1272 <__cmpsf2>
    1006:	88 23       	and	r24, r24
    1008:	0c f4       	brge	.+2      	; 0x100c <_ZN13StringHandler13FloatToStringEfh+0x98>
    100a:	83 94       	inc	r8
	
	stringLength++;											//for '\0'	
    100c:	83 94       	inc	r8
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
    100e:	8f 2d       	mov	r24, r15
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	ad b7       	in	r26, 0x3d	; 61
    1016:	be b7       	in	r27, 0x3e	; 62
    1018:	a8 1b       	sub	r26, r24
    101a:	b9 0b       	sbc	r27, r25
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	be bf       	out	0x3e, r27	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	ad bf       	out	0x3d, r26	; 61
    1026:	2d b7       	in	r18, 0x3d	; 61
    1028:	3e b7       	in	r19, 0x3e	; 62
    102a:	2f 5f       	subi	r18, 0xFF	; 255
    102c:	3f 4f       	sbci	r19, 0xFF	; 255
    102e:	3a 83       	std	Y+2, r19	; 0x02
    1030:	29 83       	std	Y+1, r18	; 0x01
    1032:	89 01       	movw	r16, r18
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
    1034:	ee 24       	eor	r14, r14
    1036:	e3 94       	inc	r14
    1038:	fe 14       	cp	r15, r14
    103a:	b8 f0       	brcs	.+46     	; 0x106a <_ZN13StringHandler13FloatToStringEfh+0xf6>
	{
		uint8_t dig = integerPart % 10;
				
		integerPart /= 10;
    103c:	6a 2d       	mov	r22, r10
    103e:	7b 2d       	mov	r23, r11
    1040:	8c 2d       	mov	r24, r12
    1042:	9d 2d       	mov	r25, r13
    1044:	2a e0       	ldi	r18, 0x0A	; 10
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	6b d4       	rcall	.+2262   	; 0x1924 <__udivmodsi4>
    104e:	a2 2e       	mov	r10, r18
    1050:	b3 2e       	mov	r11, r19
    1052:	c4 2e       	mov	r12, r20
    1054:	d5 2e       	mov	r13, r21
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
    1056:	ef 2d       	mov	r30, r15
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	ee 19       	sub	r30, r14
    105c:	f1 09       	sbc	r31, r1
    105e:	e0 0f       	add	r30, r16
    1060:	f1 1f       	adc	r31, r17
    1062:	60 5d       	subi	r22, 0xD0	; 208
    1064:	60 83       	st	Z, r22
	
	stringLength++;											//for '\0'	
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
    1066:	e3 94       	inc	r14
    1068:	e7 cf       	rjmp	.-50     	; 0x1038 <_ZN13StringHandler13FloatToStringEfh+0xc4>
		integerPart /= 10;
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
	}
	
	integerPartDigitsArray[integerPartLength] = '\0';
    106a:	e9 81       	ldd	r30, Y+1	; 0x01
    106c:	fa 81       	ldd	r31, Y+2	; 0x02
    106e:	ef 0d       	add	r30, r15
    1070:	f1 1d       	adc	r31, r1
    1072:	10 82       	st	Z, r1
				
	char* resultString;
	do 
	{
		resultString = (char*)malloc(stringLength);
    1074:	e8 2c       	mov	r14, r8
    1076:	f1 2c       	mov	r15, r1
    1078:	c7 01       	movw	r24, r14
    107a:	88 d4       	rcall	.+2320   	; 0x198c <malloc>
    107c:	8c 01       	movw	r16, r24
	}while(resultString == NULL);
    107e:	89 2b       	or	r24, r25
    1080:	c9 f3       	breq	.-14     	; 0x1074 <_ZN13StringHandler13FloatToStringEfh+0x100>
	 
			
	if(value < 0)
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	a9 01       	movw	r20, r18
    1088:	c3 01       	movw	r24, r6
    108a:	b2 01       	movw	r22, r4
    108c:	f2 d0       	rcall	.+484    	; 0x1272 <__cmpsf2>
    108e:	88 23       	and	r24, r24
    1090:	5c f4       	brge	.+22     	; 0x10a8 <_ZN13StringHandler13FloatToStringEfh+0x134>
	{
		strlcpy(resultString, "-", stringLength);
    1092:	a7 01       	movw	r20, r14
    1094:	68 e7       	ldi	r22, 0x78	; 120
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	c8 01       	movw	r24, r16
    109a:	87 d6       	rcall	.+3342   	; 0x1daa <strlcpy>
		strlcat(resultString, integerPartDigitsArray, stringLength);
    109c:	a7 01       	movw	r20, r14
    109e:	69 81       	ldd	r22, Y+1	; 0x01
    10a0:	7a 81       	ldd	r23, Y+2	; 0x02
    10a2:	c8 01       	movw	r24, r16
    10a4:	63 d6       	rcall	.+3270   	; 0x1d6c <strlcat>
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <_ZN13StringHandler13FloatToStringEfh+0x13e>
	}
	else strlcpy(resultString, integerPartDigitsArray, stringLength);
    10a8:	a7 01       	movw	r20, r14
    10aa:	69 81       	ldd	r22, Y+1	; 0x01
    10ac:	7a 81       	ldd	r23, Y+2	; 0x02
    10ae:	c8 01       	movw	r24, r16
    10b0:	7c d6       	rcall	.+3320   	; 0x1daa <strlcpy>
	
	if(digitsAfterDot == 0)
    10b2:	99 20       	and	r9, r9
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <_ZN13StringHandler13FloatToStringEfh+0x144>
    10b6:	59 c0       	rjmp	.+178    	; 0x116a <_ZN13StringHandler13FloatToStringEfh+0x1f6>
	{		
		return resultString;
	}
		
	strlcat(resultString, ".", stringLength);
    10b8:	a7 01       	movw	r20, r14
    10ba:	6a e7       	ldi	r22, 0x7A	; 122
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	c8 01       	movw	r24, r16
    10c0:	55 d6       	rcall	.+3242   	; 0x1d6c <strlcat>
		
	value = fabs(value) - integerPart;	
    10c2:	6a 2d       	mov	r22, r10
    10c4:	7b 2d       	mov	r23, r11
    10c6:	8c 2d       	mov	r24, r12
    10c8:	9d 2d       	mov	r25, r13
    10ca:	03 d1       	rcall	.+518    	; 0x12d2 <__floatunsisf>
    10cc:	9b 01       	movw	r18, r22
    10ce:	ac 01       	movw	r20, r24
    10d0:	6b 81       	ldd	r22, Y+3	; 0x03
    10d2:	7c 81       	ldd	r23, Y+4	; 0x04
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	67 d0       	rcall	.+206    	; 0x11a8 <__subsf3>
    10da:	2b 01       	movw	r4, r22
    10dc:	3c 01       	movw	r6, r24
			
	uint32_t mult = (uint32_t)round(pow(10, digitsAfterDot));
    10de:	69 2d       	mov	r22, r9
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	f5 d0       	rcall	.+490    	; 0x12d2 <__floatunsisf>
    10e8:	9b 01       	movw	r18, r22
    10ea:	ac 01       	movw	r20, r24
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	91 e4       	ldi	r25, 0x41	; 65
    10f4:	03 d2       	rcall	.+1030   	; 0x14fc <pow>
    10f6:	4e d2       	rcall	.+1180   	; 0x1594 <round>
    10f8:	c0 d0       	rcall	.+384    	; 0x127a <__fixunssfsi>
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
    10fa:	eb d0       	rcall	.+470    	; 0x12d2 <__floatunsisf>
    10fc:	9b 01       	movw	r18, r22
    10fe:	ac 01       	movw	r20, r24
    1100:	c3 01       	movw	r24, r6
    1102:	b2 01       	movw	r22, r4
    1104:	98 d1       	rcall	.+816    	; 0x1436 <__mulsf3>
    1106:	46 d2       	rcall	.+1164   	; 0x1594 <round>
    1108:	b8 d0       	rcall	.+368    	; 0x127a <__fixunssfsi>
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
    110e:	89 2d       	mov	r24, r9
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	6d b7       	in	r22, 0x3d	; 61
    1116:	7e b7       	in	r23, 0x3e	; 62
    1118:	68 1b       	sub	r22, r24
    111a:	79 0b       	sbc	r23, r25
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	7e bf       	out	0x3e, r23	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	6d bf       	out	0x3d, r22	; 61
    1126:	8d b7       	in	r24, 0x3d	; 61
    1128:	9e b7       	in	r25, 0x3e	; 62
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	5c 01       	movw	r10, r24
    112e:	6c 01       	movw	r12, r24
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
    1130:	88 24       	eor	r8, r8
    1132:	83 94       	inc	r8
    1134:	98 14       	cp	r9, r8
    1136:	88 f0       	brcs	.+34     	; 0x115a <_ZN13StringHandler13FloatToStringEfh+0x1e6>
	{
		uint8_t dig = fractionalPart % 10;
				
		fractionalPart /= 10;
    1138:	ca 01       	movw	r24, r20
    113a:	b9 01       	movw	r22, r18
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	ef d3       	rcall	.+2014   	; 0x1924 <__udivmodsi4>
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
    1146:	e9 2d       	mov	r30, r9
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	e8 19       	sub	r30, r8
    114c:	f1 09       	sbc	r31, r1
    114e:	ec 0d       	add	r30, r12
    1150:	fd 1d       	adc	r31, r13
    1152:	60 5d       	subi	r22, 0xD0	; 208
    1154:	60 83       	st	Z, r22
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
    1156:	83 94       	inc	r8
    1158:	ed cf       	rjmp	.-38     	; 0x1134 <_ZN13StringHandler13FloatToStringEfh+0x1c0>
				
		fractionalPart /= 10;
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
	}			
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
    115a:	f5 01       	movw	r30, r10
    115c:	e9 0d       	add	r30, r9
    115e:	f1 1d       	adc	r31, r1
    1160:	10 82       	st	Z, r1
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
    1162:	a7 01       	movw	r20, r14
    1164:	b5 01       	movw	r22, r10
    1166:	c8 01       	movw	r24, r16
    1168:	01 d6       	rcall	.+3074   	; 0x1d6c <strlcat>
	
	return resultString;
}
    116a:	c8 01       	movw	r24, r16
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	f8 94       	cli
    1170:	3e be       	out	0x3e, r3	; 62
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	2d be       	out	0x3d, r2	; 61
    1176:	26 96       	adiw	r28, 0x06	; 6
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	7f 90       	pop	r7
    119c:	6f 90       	pop	r6
    119e:	5f 90       	pop	r5
    11a0:	4f 90       	pop	r4
    11a2:	3f 90       	pop	r3
    11a4:	2f 90       	pop	r2
    11a6:	08 95       	ret

000011a8 <__subsf3>:
    11a8:	50 58       	subi	r21, 0x80	; 128

000011aa <__addsf3>:
    11aa:	bb 27       	eor	r27, r27
    11ac:	aa 27       	eor	r26, r26
    11ae:	0e d0       	rcall	.+28     	; 0x11cc <__addsf3x>
    11b0:	08 c1       	rjmp	.+528    	; 0x13c2 <__fp_round>
    11b2:	f9 d0       	rcall	.+498    	; 0x13a6 <__fp_pscA>
    11b4:	30 f0       	brcs	.+12     	; 0x11c2 <__addsf3+0x18>
    11b6:	fe d0       	rcall	.+508    	; 0x13b4 <__fp_pscB>
    11b8:	20 f0       	brcs	.+8      	; 0x11c2 <__addsf3+0x18>
    11ba:	31 f4       	brne	.+12     	; 0x11c8 <__addsf3+0x1e>
    11bc:	9f 3f       	cpi	r25, 0xFF	; 255
    11be:	11 f4       	brne	.+4      	; 0x11c4 <__addsf3+0x1a>
    11c0:	1e f4       	brtc	.+6      	; 0x11c8 <__addsf3+0x1e>
    11c2:	ee c0       	rjmp	.+476    	; 0x13a0 <__fp_nan>
    11c4:	0e f4       	brtc	.+2      	; 0x11c8 <__addsf3+0x1e>
    11c6:	e0 95       	com	r30
    11c8:	e7 fb       	bst	r30, 7
    11ca:	e4 c0       	rjmp	.+456    	; 0x1394 <__fp_inf>

000011cc <__addsf3x>:
    11cc:	e9 2f       	mov	r30, r25
    11ce:	0a d1       	rcall	.+532    	; 0x13e4 <__fp_split3>
    11d0:	80 f3       	brcs	.-32     	; 0x11b2 <__addsf3+0x8>
    11d2:	ba 17       	cp	r27, r26
    11d4:	62 07       	cpc	r22, r18
    11d6:	73 07       	cpc	r23, r19
    11d8:	84 07       	cpc	r24, r20
    11da:	95 07       	cpc	r25, r21
    11dc:	18 f0       	brcs	.+6      	; 0x11e4 <__addsf3x+0x18>
    11de:	71 f4       	brne	.+28     	; 0x11fc <__addsf3x+0x30>
    11e0:	9e f5       	brtc	.+102    	; 0x1248 <__addsf3x+0x7c>
    11e2:	22 c1       	rjmp	.+580    	; 0x1428 <__fp_zero>
    11e4:	0e f4       	brtc	.+2      	; 0x11e8 <__addsf3x+0x1c>
    11e6:	e0 95       	com	r30
    11e8:	0b 2e       	mov	r0, r27
    11ea:	ba 2f       	mov	r27, r26
    11ec:	a0 2d       	mov	r26, r0
    11ee:	0b 01       	movw	r0, r22
    11f0:	b9 01       	movw	r22, r18
    11f2:	90 01       	movw	r18, r0
    11f4:	0c 01       	movw	r0, r24
    11f6:	ca 01       	movw	r24, r20
    11f8:	a0 01       	movw	r20, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	ff 27       	eor	r31, r31
    11fe:	59 1b       	sub	r21, r25
    1200:	99 f0       	breq	.+38     	; 0x1228 <__addsf3x+0x5c>
    1202:	59 3f       	cpi	r21, 0xF9	; 249
    1204:	50 f4       	brcc	.+20     	; 0x121a <__addsf3x+0x4e>
    1206:	50 3e       	cpi	r21, 0xE0	; 224
    1208:	68 f1       	brcs	.+90     	; 0x1264 <__addsf3x+0x98>
    120a:	1a 16       	cp	r1, r26
    120c:	f0 40       	sbci	r31, 0x00	; 0
    120e:	a2 2f       	mov	r26, r18
    1210:	23 2f       	mov	r18, r19
    1212:	34 2f       	mov	r19, r20
    1214:	44 27       	eor	r20, r20
    1216:	58 5f       	subi	r21, 0xF8	; 248
    1218:	f3 cf       	rjmp	.-26     	; 0x1200 <__addsf3x+0x34>
    121a:	46 95       	lsr	r20
    121c:	37 95       	ror	r19
    121e:	27 95       	ror	r18
    1220:	a7 95       	ror	r26
    1222:	f0 40       	sbci	r31, 0x00	; 0
    1224:	53 95       	inc	r21
    1226:	c9 f7       	brne	.-14     	; 0x121a <__addsf3x+0x4e>
    1228:	7e f4       	brtc	.+30     	; 0x1248 <__addsf3x+0x7c>
    122a:	1f 16       	cp	r1, r31
    122c:	ba 0b       	sbc	r27, r26
    122e:	62 0b       	sbc	r22, r18
    1230:	73 0b       	sbc	r23, r19
    1232:	84 0b       	sbc	r24, r20
    1234:	ba f0       	brmi	.+46     	; 0x1264 <__addsf3x+0x98>
    1236:	91 50       	subi	r25, 0x01	; 1
    1238:	a1 f0       	breq	.+40     	; 0x1262 <__addsf3x+0x96>
    123a:	ff 0f       	add	r31, r31
    123c:	bb 1f       	adc	r27, r27
    123e:	66 1f       	adc	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	c2 f7       	brpl	.-16     	; 0x1236 <__addsf3x+0x6a>
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <__addsf3x+0x98>
    1248:	ba 0f       	add	r27, r26
    124a:	62 1f       	adc	r22, r18
    124c:	73 1f       	adc	r23, r19
    124e:	84 1f       	adc	r24, r20
    1250:	48 f4       	brcc	.+18     	; 0x1264 <__addsf3x+0x98>
    1252:	87 95       	ror	r24
    1254:	77 95       	ror	r23
    1256:	67 95       	ror	r22
    1258:	b7 95       	ror	r27
    125a:	f7 95       	ror	r31
    125c:	9e 3f       	cpi	r25, 0xFE	; 254
    125e:	08 f0       	brcs	.+2      	; 0x1262 <__addsf3x+0x96>
    1260:	b3 cf       	rjmp	.-154    	; 0x11c8 <__addsf3+0x1e>
    1262:	93 95       	inc	r25
    1264:	88 0f       	add	r24, r24
    1266:	08 f0       	brcs	.+2      	; 0x126a <__addsf3x+0x9e>
    1268:	99 27       	eor	r25, r25
    126a:	ee 0f       	add	r30, r30
    126c:	97 95       	ror	r25
    126e:	87 95       	ror	r24
    1270:	08 95       	ret

00001272 <__cmpsf2>:
    1272:	6c d0       	rcall	.+216    	; 0x134c <__fp_cmp>
    1274:	08 f4       	brcc	.+2      	; 0x1278 <__cmpsf2+0x6>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	08 95       	ret

0000127a <__fixunssfsi>:
    127a:	bc d0       	rcall	.+376    	; 0x13f4 <__fp_splitA>
    127c:	88 f0       	brcs	.+34     	; 0x12a0 <__fixunssfsi+0x26>
    127e:	9f 57       	subi	r25, 0x7F	; 127
    1280:	90 f0       	brcs	.+36     	; 0x12a6 <__fixunssfsi+0x2c>
    1282:	b9 2f       	mov	r27, r25
    1284:	99 27       	eor	r25, r25
    1286:	b7 51       	subi	r27, 0x17	; 23
    1288:	a0 f0       	brcs	.+40     	; 0x12b2 <__fixunssfsi+0x38>
    128a:	d1 f0       	breq	.+52     	; 0x12c0 <__fixunssfsi+0x46>
    128c:	66 0f       	add	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	88 1f       	adc	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	1a f0       	brmi	.+6      	; 0x129c <__fixunssfsi+0x22>
    1296:	ba 95       	dec	r27
    1298:	c9 f7       	brne	.-14     	; 0x128c <__fixunssfsi+0x12>
    129a:	12 c0       	rjmp	.+36     	; 0x12c0 <__fixunssfsi+0x46>
    129c:	b1 30       	cpi	r27, 0x01	; 1
    129e:	81 f0       	breq	.+32     	; 0x12c0 <__fixunssfsi+0x46>
    12a0:	c3 d0       	rcall	.+390    	; 0x1428 <__fp_zero>
    12a2:	b1 e0       	ldi	r27, 0x01	; 1
    12a4:	08 95       	ret
    12a6:	c0 c0       	rjmp	.+384    	; 0x1428 <__fp_zero>
    12a8:	67 2f       	mov	r22, r23
    12aa:	78 2f       	mov	r23, r24
    12ac:	88 27       	eor	r24, r24
    12ae:	b8 5f       	subi	r27, 0xF8	; 248
    12b0:	39 f0       	breq	.+14     	; 0x12c0 <__fixunssfsi+0x46>
    12b2:	b9 3f       	cpi	r27, 0xF9	; 249
    12b4:	cc f3       	brlt	.-14     	; 0x12a8 <__fixunssfsi+0x2e>
    12b6:	86 95       	lsr	r24
    12b8:	77 95       	ror	r23
    12ba:	67 95       	ror	r22
    12bc:	b3 95       	inc	r27
    12be:	d9 f7       	brne	.-10     	; 0x12b6 <__fixunssfsi+0x3c>
    12c0:	3e f4       	brtc	.+14     	; 0x12d0 <__fixunssfsi+0x56>
    12c2:	90 95       	com	r25
    12c4:	80 95       	com	r24
    12c6:	70 95       	com	r23
    12c8:	61 95       	neg	r22
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__floatunsisf>:
    12d2:	e8 94       	clt
    12d4:	09 c0       	rjmp	.+18     	; 0x12e8 <__floatsisf+0x12>

000012d6 <__floatsisf>:
    12d6:	97 fb       	bst	r25, 7
    12d8:	3e f4       	brtc	.+14     	; 0x12e8 <__floatsisf+0x12>
    12da:	90 95       	com	r25
    12dc:	80 95       	com	r24
    12de:	70 95       	com	r23
    12e0:	61 95       	neg	r22
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	8f 4f       	sbci	r24, 0xFF	; 255
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	99 23       	and	r25, r25
    12ea:	a9 f0       	breq	.+42     	; 0x1316 <__floatsisf+0x40>
    12ec:	f9 2f       	mov	r31, r25
    12ee:	96 e9       	ldi	r25, 0x96	; 150
    12f0:	bb 27       	eor	r27, r27
    12f2:	93 95       	inc	r25
    12f4:	f6 95       	lsr	r31
    12f6:	87 95       	ror	r24
    12f8:	77 95       	ror	r23
    12fa:	67 95       	ror	r22
    12fc:	b7 95       	ror	r27
    12fe:	f1 11       	cpse	r31, r1
    1300:	f8 cf       	rjmp	.-16     	; 0x12f2 <__floatsisf+0x1c>
    1302:	fa f4       	brpl	.+62     	; 0x1342 <__floatsisf+0x6c>
    1304:	bb 0f       	add	r27, r27
    1306:	11 f4       	brne	.+4      	; 0x130c <__floatsisf+0x36>
    1308:	60 ff       	sbrs	r22, 0
    130a:	1b c0       	rjmp	.+54     	; 0x1342 <__floatsisf+0x6c>
    130c:	6f 5f       	subi	r22, 0xFF	; 255
    130e:	7f 4f       	sbci	r23, 0xFF	; 255
    1310:	8f 4f       	sbci	r24, 0xFF	; 255
    1312:	9f 4f       	sbci	r25, 0xFF	; 255
    1314:	16 c0       	rjmp	.+44     	; 0x1342 <__floatsisf+0x6c>
    1316:	88 23       	and	r24, r24
    1318:	11 f0       	breq	.+4      	; 0x131e <__floatsisf+0x48>
    131a:	96 e9       	ldi	r25, 0x96	; 150
    131c:	11 c0       	rjmp	.+34     	; 0x1340 <__floatsisf+0x6a>
    131e:	77 23       	and	r23, r23
    1320:	21 f0       	breq	.+8      	; 0x132a <__floatsisf+0x54>
    1322:	9e e8       	ldi	r25, 0x8E	; 142
    1324:	87 2f       	mov	r24, r23
    1326:	76 2f       	mov	r23, r22
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <__floatsisf+0x5e>
    132a:	66 23       	and	r22, r22
    132c:	71 f0       	breq	.+28     	; 0x134a <__floatsisf+0x74>
    132e:	96 e8       	ldi	r25, 0x86	; 134
    1330:	86 2f       	mov	r24, r22
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	2a f0       	brmi	.+10     	; 0x1342 <__floatsisf+0x6c>
    1338:	9a 95       	dec	r25
    133a:	66 0f       	add	r22, r22
    133c:	77 1f       	adc	r23, r23
    133e:	88 1f       	adc	r24, r24
    1340:	da f7       	brpl	.-10     	; 0x1338 <__floatsisf+0x62>
    1342:	88 0f       	add	r24, r24
    1344:	96 95       	lsr	r25
    1346:	87 95       	ror	r24
    1348:	97 f9       	bld	r25, 7
    134a:	08 95       	ret

0000134c <__fp_cmp>:
    134c:	99 0f       	add	r25, r25
    134e:	00 08       	sbc	r0, r0
    1350:	55 0f       	add	r21, r21
    1352:	aa 0b       	sbc	r26, r26
    1354:	e0 e8       	ldi	r30, 0x80	; 128
    1356:	fe ef       	ldi	r31, 0xFE	; 254
    1358:	16 16       	cp	r1, r22
    135a:	17 06       	cpc	r1, r23
    135c:	e8 07       	cpc	r30, r24
    135e:	f9 07       	cpc	r31, r25
    1360:	c0 f0       	brcs	.+48     	; 0x1392 <__fp_cmp+0x46>
    1362:	12 16       	cp	r1, r18
    1364:	13 06       	cpc	r1, r19
    1366:	e4 07       	cpc	r30, r20
    1368:	f5 07       	cpc	r31, r21
    136a:	98 f0       	brcs	.+38     	; 0x1392 <__fp_cmp+0x46>
    136c:	62 1b       	sub	r22, r18
    136e:	73 0b       	sbc	r23, r19
    1370:	84 0b       	sbc	r24, r20
    1372:	95 0b       	sbc	r25, r21
    1374:	39 f4       	brne	.+14     	; 0x1384 <__fp_cmp+0x38>
    1376:	0a 26       	eor	r0, r26
    1378:	61 f0       	breq	.+24     	; 0x1392 <__fp_cmp+0x46>
    137a:	23 2b       	or	r18, r19
    137c:	24 2b       	or	r18, r20
    137e:	25 2b       	or	r18, r21
    1380:	21 f4       	brne	.+8      	; 0x138a <__fp_cmp+0x3e>
    1382:	08 95       	ret
    1384:	0a 26       	eor	r0, r26
    1386:	09 f4       	brne	.+2      	; 0x138a <__fp_cmp+0x3e>
    1388:	a1 40       	sbci	r26, 0x01	; 1
    138a:	a6 95       	lsr	r26
    138c:	8f ef       	ldi	r24, 0xFF	; 255
    138e:	81 1d       	adc	r24, r1
    1390:	81 1d       	adc	r24, r1
    1392:	08 95       	ret

00001394 <__fp_inf>:
    1394:	97 f9       	bld	r25, 7
    1396:	9f 67       	ori	r25, 0x7F	; 127
    1398:	80 e8       	ldi	r24, 0x80	; 128
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	08 95       	ret

000013a0 <__fp_nan>:
    13a0:	9f ef       	ldi	r25, 0xFF	; 255
    13a2:	80 ec       	ldi	r24, 0xC0	; 192
    13a4:	08 95       	ret

000013a6 <__fp_pscA>:
    13a6:	00 24       	eor	r0, r0
    13a8:	0a 94       	dec	r0
    13aa:	16 16       	cp	r1, r22
    13ac:	17 06       	cpc	r1, r23
    13ae:	18 06       	cpc	r1, r24
    13b0:	09 06       	cpc	r0, r25
    13b2:	08 95       	ret

000013b4 <__fp_pscB>:
    13b4:	00 24       	eor	r0, r0
    13b6:	0a 94       	dec	r0
    13b8:	12 16       	cp	r1, r18
    13ba:	13 06       	cpc	r1, r19
    13bc:	14 06       	cpc	r1, r20
    13be:	05 06       	cpc	r0, r21
    13c0:	08 95       	ret

000013c2 <__fp_round>:
    13c2:	09 2e       	mov	r0, r25
    13c4:	03 94       	inc	r0
    13c6:	00 0c       	add	r0, r0
    13c8:	11 f4       	brne	.+4      	; 0x13ce <__fp_round+0xc>
    13ca:	88 23       	and	r24, r24
    13cc:	52 f0       	brmi	.+20     	; 0x13e2 <__fp_round+0x20>
    13ce:	bb 0f       	add	r27, r27
    13d0:	40 f4       	brcc	.+16     	; 0x13e2 <__fp_round+0x20>
    13d2:	bf 2b       	or	r27, r31
    13d4:	11 f4       	brne	.+4      	; 0x13da <__fp_round+0x18>
    13d6:	60 ff       	sbrs	r22, 0
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <__fp_round+0x20>
    13da:	6f 5f       	subi	r22, 0xFF	; 255
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	8f 4f       	sbci	r24, 0xFF	; 255
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	08 95       	ret

000013e4 <__fp_split3>:
    13e4:	57 fd       	sbrc	r21, 7
    13e6:	90 58       	subi	r25, 0x80	; 128
    13e8:	44 0f       	add	r20, r20
    13ea:	55 1f       	adc	r21, r21
    13ec:	59 f0       	breq	.+22     	; 0x1404 <__fp_splitA+0x10>
    13ee:	5f 3f       	cpi	r21, 0xFF	; 255
    13f0:	71 f0       	breq	.+28     	; 0x140e <__fp_splitA+0x1a>
    13f2:	47 95       	ror	r20

000013f4 <__fp_splitA>:
    13f4:	88 0f       	add	r24, r24
    13f6:	97 fb       	bst	r25, 7
    13f8:	99 1f       	adc	r25, r25
    13fa:	61 f0       	breq	.+24     	; 0x1414 <__fp_splitA+0x20>
    13fc:	9f 3f       	cpi	r25, 0xFF	; 255
    13fe:	79 f0       	breq	.+30     	; 0x141e <__fp_splitA+0x2a>
    1400:	87 95       	ror	r24
    1402:	08 95       	ret
    1404:	12 16       	cp	r1, r18
    1406:	13 06       	cpc	r1, r19
    1408:	14 06       	cpc	r1, r20
    140a:	55 1f       	adc	r21, r21
    140c:	f2 cf       	rjmp	.-28     	; 0x13f2 <__fp_split3+0xe>
    140e:	46 95       	lsr	r20
    1410:	f1 df       	rcall	.-30     	; 0x13f4 <__fp_splitA>
    1412:	08 c0       	rjmp	.+16     	; 0x1424 <__fp_splitA+0x30>
    1414:	16 16       	cp	r1, r22
    1416:	17 06       	cpc	r1, r23
    1418:	18 06       	cpc	r1, r24
    141a:	99 1f       	adc	r25, r25
    141c:	f1 cf       	rjmp	.-30     	; 0x1400 <__fp_splitA+0xc>
    141e:	86 95       	lsr	r24
    1420:	71 05       	cpc	r23, r1
    1422:	61 05       	cpc	r22, r1
    1424:	08 94       	sec
    1426:	08 95       	ret

00001428 <__fp_zero>:
    1428:	e8 94       	clt

0000142a <__fp_szero>:
    142a:	bb 27       	eor	r27, r27
    142c:	66 27       	eor	r22, r22
    142e:	77 27       	eor	r23, r23
    1430:	cb 01       	movw	r24, r22
    1432:	97 f9       	bld	r25, 7
    1434:	08 95       	ret

00001436 <__mulsf3>:
    1436:	0b d0       	rcall	.+22     	; 0x144e <__mulsf3x>
    1438:	c4 cf       	rjmp	.-120    	; 0x13c2 <__fp_round>
    143a:	b5 df       	rcall	.-150    	; 0x13a6 <__fp_pscA>
    143c:	28 f0       	brcs	.+10     	; 0x1448 <__mulsf3+0x12>
    143e:	ba df       	rcall	.-140    	; 0x13b4 <__fp_pscB>
    1440:	18 f0       	brcs	.+6      	; 0x1448 <__mulsf3+0x12>
    1442:	95 23       	and	r25, r21
    1444:	09 f0       	breq	.+2      	; 0x1448 <__mulsf3+0x12>
    1446:	a6 cf       	rjmp	.-180    	; 0x1394 <__fp_inf>
    1448:	ab cf       	rjmp	.-170    	; 0x13a0 <__fp_nan>
    144a:	11 24       	eor	r1, r1
    144c:	ee cf       	rjmp	.-36     	; 0x142a <__fp_szero>

0000144e <__mulsf3x>:
    144e:	ca df       	rcall	.-108    	; 0x13e4 <__fp_split3>
    1450:	a0 f3       	brcs	.-24     	; 0x143a <__mulsf3+0x4>

00001452 <__mulsf3_pse>:
    1452:	95 9f       	mul	r25, r21
    1454:	d1 f3       	breq	.-12     	; 0x144a <__mulsf3+0x14>
    1456:	95 0f       	add	r25, r21
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	55 1f       	adc	r21, r21
    145c:	62 9f       	mul	r22, r18
    145e:	f0 01       	movw	r30, r0
    1460:	72 9f       	mul	r23, r18
    1462:	bb 27       	eor	r27, r27
    1464:	f0 0d       	add	r31, r0
    1466:	b1 1d       	adc	r27, r1
    1468:	63 9f       	mul	r22, r19
    146a:	aa 27       	eor	r26, r26
    146c:	f0 0d       	add	r31, r0
    146e:	b1 1d       	adc	r27, r1
    1470:	aa 1f       	adc	r26, r26
    1472:	64 9f       	mul	r22, r20
    1474:	66 27       	eor	r22, r22
    1476:	b0 0d       	add	r27, r0
    1478:	a1 1d       	adc	r26, r1
    147a:	66 1f       	adc	r22, r22
    147c:	82 9f       	mul	r24, r18
    147e:	22 27       	eor	r18, r18
    1480:	b0 0d       	add	r27, r0
    1482:	a1 1d       	adc	r26, r1
    1484:	62 1f       	adc	r22, r18
    1486:	73 9f       	mul	r23, r19
    1488:	b0 0d       	add	r27, r0
    148a:	a1 1d       	adc	r26, r1
    148c:	62 1f       	adc	r22, r18
    148e:	83 9f       	mul	r24, r19
    1490:	a0 0d       	add	r26, r0
    1492:	61 1d       	adc	r22, r1
    1494:	22 1f       	adc	r18, r18
    1496:	74 9f       	mul	r23, r20
    1498:	33 27       	eor	r19, r19
    149a:	a0 0d       	add	r26, r0
    149c:	61 1d       	adc	r22, r1
    149e:	23 1f       	adc	r18, r19
    14a0:	84 9f       	mul	r24, r20
    14a2:	60 0d       	add	r22, r0
    14a4:	21 1d       	adc	r18, r1
    14a6:	82 2f       	mov	r24, r18
    14a8:	76 2f       	mov	r23, r22
    14aa:	6a 2f       	mov	r22, r26
    14ac:	11 24       	eor	r1, r1
    14ae:	9f 57       	subi	r25, 0x7F	; 127
    14b0:	50 40       	sbci	r21, 0x00	; 0
    14b2:	8a f0       	brmi	.+34     	; 0x14d6 <__mulsf3_pse+0x84>
    14b4:	e1 f0       	breq	.+56     	; 0x14ee <__mulsf3_pse+0x9c>
    14b6:	88 23       	and	r24, r24
    14b8:	4a f0       	brmi	.+18     	; 0x14cc <__mulsf3_pse+0x7a>
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	bb 1f       	adc	r27, r27
    14c0:	66 1f       	adc	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	91 50       	subi	r25, 0x01	; 1
    14c8:	50 40       	sbci	r21, 0x00	; 0
    14ca:	a9 f7       	brne	.-22     	; 0x14b6 <__mulsf3_pse+0x64>
    14cc:	9e 3f       	cpi	r25, 0xFE	; 254
    14ce:	51 05       	cpc	r21, r1
    14d0:	70 f0       	brcs	.+28     	; 0x14ee <__mulsf3_pse+0x9c>
    14d2:	60 cf       	rjmp	.-320    	; 0x1394 <__fp_inf>
    14d4:	aa cf       	rjmp	.-172    	; 0x142a <__fp_szero>
    14d6:	5f 3f       	cpi	r21, 0xFF	; 255
    14d8:	ec f3       	brlt	.-6      	; 0x14d4 <__mulsf3_pse+0x82>
    14da:	98 3e       	cpi	r25, 0xE8	; 232
    14dc:	dc f3       	brlt	.-10     	; 0x14d4 <__mulsf3_pse+0x82>
    14de:	86 95       	lsr	r24
    14e0:	77 95       	ror	r23
    14e2:	67 95       	ror	r22
    14e4:	b7 95       	ror	r27
    14e6:	f7 95       	ror	r31
    14e8:	e7 95       	ror	r30
    14ea:	9f 5f       	subi	r25, 0xFF	; 255
    14ec:	c1 f7       	brne	.-16     	; 0x14de <__mulsf3_pse+0x8c>
    14ee:	fe 2b       	or	r31, r30
    14f0:	88 0f       	add	r24, r24
    14f2:	91 1d       	adc	r25, r1
    14f4:	96 95       	lsr	r25
    14f6:	87 95       	ror	r24
    14f8:	97 f9       	bld	r25, 7
    14fa:	08 95       	ret

000014fc <pow>:
    14fc:	fa 01       	movw	r30, r20
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	30 96       	adiw	r30, 0x00	; 0
    1504:	21 05       	cpc	r18, r1
    1506:	31 05       	cpc	r19, r1
    1508:	99 f1       	breq	.+102    	; 0x1570 <pow+0x74>
    150a:	61 15       	cp	r22, r1
    150c:	71 05       	cpc	r23, r1
    150e:	61 f4       	brne	.+24     	; 0x1528 <pow+0x2c>
    1510:	80 38       	cpi	r24, 0x80	; 128
    1512:	bf e3       	ldi	r27, 0x3F	; 63
    1514:	9b 07       	cpc	r25, r27
    1516:	49 f1       	breq	.+82     	; 0x156a <pow+0x6e>
    1518:	68 94       	set
    151a:	90 38       	cpi	r25, 0x80	; 128
    151c:	81 05       	cpc	r24, r1
    151e:	61 f0       	breq	.+24     	; 0x1538 <pow+0x3c>
    1520:	80 38       	cpi	r24, 0x80	; 128
    1522:	bf ef       	ldi	r27, 0xFF	; 255
    1524:	9b 07       	cpc	r25, r27
    1526:	41 f0       	breq	.+16     	; 0x1538 <pow+0x3c>
    1528:	99 23       	and	r25, r25
    152a:	42 f5       	brpl	.+80     	; 0x157c <pow+0x80>
    152c:	ff 3f       	cpi	r31, 0xFF	; 255
    152e:	e1 05       	cpc	r30, r1
    1530:	31 05       	cpc	r19, r1
    1532:	21 05       	cpc	r18, r1
    1534:	11 f1       	breq	.+68     	; 0x157a <pow+0x7e>
    1536:	e8 94       	clt
    1538:	08 94       	sec
    153a:	e7 95       	ror	r30
    153c:	d9 01       	movw	r26, r18
    153e:	aa 23       	and	r26, r26
    1540:	29 f4       	brne	.+10     	; 0x154c <pow+0x50>
    1542:	ab 2f       	mov	r26, r27
    1544:	be 2f       	mov	r27, r30
    1546:	f8 5f       	subi	r31, 0xF8	; 248
    1548:	d0 f3       	brcs	.-12     	; 0x153e <pow+0x42>
    154a:	10 c0       	rjmp	.+32     	; 0x156c <pow+0x70>
    154c:	ff 5f       	subi	r31, 0xFF	; 255
    154e:	70 f4       	brcc	.+28     	; 0x156c <pow+0x70>
    1550:	a6 95       	lsr	r26
    1552:	e0 f7       	brcc	.-8      	; 0x154c <pow+0x50>
    1554:	f7 39       	cpi	r31, 0x97	; 151
    1556:	50 f0       	brcs	.+20     	; 0x156c <pow+0x70>
    1558:	19 f0       	breq	.+6      	; 0x1560 <pow+0x64>
    155a:	ff 3a       	cpi	r31, 0xAF	; 175
    155c:	38 f4       	brcc	.+14     	; 0x156c <pow+0x70>
    155e:	9f 77       	andi	r25, 0x7F	; 127
    1560:	9f 93       	push	r25
    1562:	0c d0       	rcall	.+24     	; 0x157c <pow+0x80>
    1564:	0f 90       	pop	r0
    1566:	07 fc       	sbrc	r0, 7
    1568:	90 58       	subi	r25, 0x80	; 128
    156a:	08 95       	ret
    156c:	3e f0       	brts	.+14     	; 0x157c <pow+0x80>
    156e:	18 cf       	rjmp	.-464    	; 0x13a0 <__fp_nan>
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	80 e8       	ldi	r24, 0x80	; 128
    1576:	9f e3       	ldi	r25, 0x3F	; 63
    1578:	08 95       	ret
    157a:	4f e7       	ldi	r20, 0x7F	; 127
    157c:	9f 77       	andi	r25, 0x7F	; 127
    157e:	5f 93       	push	r21
    1580:	4f 93       	push	r20
    1582:	3f 93       	push	r19
    1584:	2f 93       	push	r18
    1586:	e7 d0       	rcall	.+462    	; 0x1756 <log>
    1588:	2f 91       	pop	r18
    158a:	3f 91       	pop	r19
    158c:	4f 91       	pop	r20
    158e:	5f 91       	pop	r21
    1590:	52 df       	rcall	.-348    	; 0x1436 <__mulsf3>
    1592:	25 c0       	rjmp	.+74     	; 0x15de <exp>

00001594 <round>:
    1594:	2f df       	rcall	.-418    	; 0x13f4 <__fp_splitA>
    1596:	e0 f0       	brcs	.+56     	; 0x15d0 <round+0x3c>
    1598:	9e 37       	cpi	r25, 0x7E	; 126
    159a:	d8 f0       	brcs	.+54     	; 0x15d2 <round+0x3e>
    159c:	96 39       	cpi	r25, 0x96	; 150
    159e:	b8 f4       	brcc	.+46     	; 0x15ce <round+0x3a>
    15a0:	9e 38       	cpi	r25, 0x8E	; 142
    15a2:	48 f4       	brcc	.+18     	; 0x15b6 <round+0x22>
    15a4:	67 2f       	mov	r22, r23
    15a6:	78 2f       	mov	r23, r24
    15a8:	88 27       	eor	r24, r24
    15aa:	98 5f       	subi	r25, 0xF8	; 248
    15ac:	f9 cf       	rjmp	.-14     	; 0x15a0 <round+0xc>
    15ae:	86 95       	lsr	r24
    15b0:	77 95       	ror	r23
    15b2:	67 95       	ror	r22
    15b4:	93 95       	inc	r25
    15b6:	95 39       	cpi	r25, 0x95	; 149
    15b8:	d0 f3       	brcs	.-12     	; 0x15ae <round+0x1a>
    15ba:	b6 2f       	mov	r27, r22
    15bc:	b1 70       	andi	r27, 0x01	; 1
    15be:	6b 0f       	add	r22, r27
    15c0:	71 1d       	adc	r23, r1
    15c2:	81 1d       	adc	r24, r1
    15c4:	20 f4       	brcc	.+8      	; 0x15ce <round+0x3a>
    15c6:	87 95       	ror	r24
    15c8:	77 95       	ror	r23
    15ca:	67 95       	ror	r22
    15cc:	93 95       	inc	r25
    15ce:	33 c0       	rjmp	.+102    	; 0x1636 <__fp_mintl>
    15d0:	4d c0       	rjmp	.+154    	; 0x166c <__fp_mpack>
    15d2:	2b cf       	rjmp	.-426    	; 0x142a <__fp_szero>
    15d4:	19 f4       	brne	.+6      	; 0x15dc <round+0x48>
    15d6:	0e f0       	brts	.+2      	; 0x15da <round+0x46>
    15d8:	dd ce       	rjmp	.-582    	; 0x1394 <__fp_inf>
    15da:	26 cf       	rjmp	.-436    	; 0x1428 <__fp_zero>
    15dc:	e1 ce       	rjmp	.-574    	; 0x13a0 <__fp_nan>

000015de <exp>:
    15de:	0a df       	rcall	.-492    	; 0x13f4 <__fp_splitA>
    15e0:	c8 f3       	brcs	.-14     	; 0x15d4 <round+0x40>
    15e2:	96 38       	cpi	r25, 0x86	; 134
    15e4:	c0 f7       	brcc	.-16     	; 0x15d6 <round+0x42>
    15e6:	07 f8       	bld	r0, 7
    15e8:	0f 92       	push	r0
    15ea:	e8 94       	clt
    15ec:	2b e3       	ldi	r18, 0x3B	; 59
    15ee:	3a ea       	ldi	r19, 0xAA	; 170
    15f0:	48 eb       	ldi	r20, 0xB8	; 184
    15f2:	5f e7       	ldi	r21, 0x7F	; 127
    15f4:	2e df       	rcall	.-420    	; 0x1452 <__mulsf3_pse>
    15f6:	0f 92       	push	r0
    15f8:	0f 92       	push	r0
    15fa:	0f 92       	push	r0
    15fc:	4d b7       	in	r20, 0x3d	; 61
    15fe:	5e b7       	in	r21, 0x3e	; 62
    1600:	0f 92       	push	r0
    1602:	e9 d0       	rcall	.+466    	; 0x17d6 <modf>
    1604:	e6 e2       	ldi	r30, 0x26	; 38
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	3f d0       	rcall	.+126    	; 0x1688 <__fp_powser>
    160a:	4f 91       	pop	r20
    160c:	5f 91       	pop	r21
    160e:	ef 91       	pop	r30
    1610:	ff 91       	pop	r31
    1612:	e5 95       	asr	r30
    1614:	ee 1f       	adc	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	49 f0       	breq	.+18     	; 0x162c <exp+0x4e>
    161a:	fe 57       	subi	r31, 0x7E	; 126
    161c:	e0 68       	ori	r30, 0x80	; 128
    161e:	44 27       	eor	r20, r20
    1620:	ee 0f       	add	r30, r30
    1622:	44 1f       	adc	r20, r20
    1624:	fa 95       	dec	r31
    1626:	e1 f7       	brne	.-8      	; 0x1620 <exp+0x42>
    1628:	41 95       	neg	r20
    162a:	55 0b       	sbc	r21, r21
    162c:	5b d0       	rcall	.+182    	; 0x16e4 <ldexp>
    162e:	0f 90       	pop	r0
    1630:	07 fe       	sbrs	r0, 7
    1632:	4f c0       	rjmp	.+158    	; 0x16d2 <inverse>
    1634:	08 95       	ret

00001636 <__fp_mintl>:
    1636:	88 23       	and	r24, r24
    1638:	71 f4       	brne	.+28     	; 0x1656 <__fp_mintl+0x20>
    163a:	77 23       	and	r23, r23
    163c:	21 f0       	breq	.+8      	; 0x1646 <__fp_mintl+0x10>
    163e:	98 50       	subi	r25, 0x08	; 8
    1640:	87 2b       	or	r24, r23
    1642:	76 2f       	mov	r23, r22
    1644:	07 c0       	rjmp	.+14     	; 0x1654 <__fp_mintl+0x1e>
    1646:	66 23       	and	r22, r22
    1648:	11 f4       	brne	.+4      	; 0x164e <__fp_mintl+0x18>
    164a:	99 27       	eor	r25, r25
    164c:	0d c0       	rjmp	.+26     	; 0x1668 <__fp_mintl+0x32>
    164e:	90 51       	subi	r25, 0x10	; 16
    1650:	86 2b       	or	r24, r22
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	2a f0       	brmi	.+10     	; 0x1662 <__fp_mintl+0x2c>
    1658:	9a 95       	dec	r25
    165a:	66 0f       	add	r22, r22
    165c:	77 1f       	adc	r23, r23
    165e:	88 1f       	adc	r24, r24
    1660:	da f7       	brpl	.-10     	; 0x1658 <__fp_mintl+0x22>
    1662:	88 0f       	add	r24, r24
    1664:	96 95       	lsr	r25
    1666:	87 95       	ror	r24
    1668:	97 f9       	bld	r25, 7
    166a:	08 95       	ret

0000166c <__fp_mpack>:
    166c:	9f 3f       	cpi	r25, 0xFF	; 255
    166e:	31 f0       	breq	.+12     	; 0x167c <__fp_mpack_finite+0xc>

00001670 <__fp_mpack_finite>:
    1670:	91 50       	subi	r25, 0x01	; 1
    1672:	20 f4       	brcc	.+8      	; 0x167c <__fp_mpack_finite+0xc>
    1674:	87 95       	ror	r24
    1676:	77 95       	ror	r23
    1678:	67 95       	ror	r22
    167a:	b7 95       	ror	r27
    167c:	88 0f       	add	r24, r24
    167e:	91 1d       	adc	r25, r1
    1680:	96 95       	lsr	r25
    1682:	87 95       	ror	r24
    1684:	97 f9       	bld	r25, 7
    1686:	08 95       	ret

00001688 <__fp_powser>:
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	1f 93       	push	r17
    168e:	0f 93       	push	r16
    1690:	ff 92       	push	r15
    1692:	ef 92       	push	r14
    1694:	df 92       	push	r13
    1696:	7b 01       	movw	r14, r22
    1698:	8c 01       	movw	r16, r24
    169a:	68 94       	set
    169c:	05 c0       	rjmp	.+10     	; 0x16a8 <__fp_powser+0x20>
    169e:	da 2e       	mov	r13, r26
    16a0:	ef 01       	movw	r28, r30
    16a2:	d5 de       	rcall	.-598    	; 0x144e <__mulsf3x>
    16a4:	fe 01       	movw	r30, r28
    16a6:	e8 94       	clt
    16a8:	a5 91       	lpm	r26, Z+
    16aa:	25 91       	lpm	r18, Z+
    16ac:	35 91       	lpm	r19, Z+
    16ae:	45 91       	lpm	r20, Z+
    16b0:	55 91       	lpm	r21, Z+
    16b2:	ae f3       	brts	.-22     	; 0x169e <__fp_powser+0x16>
    16b4:	ef 01       	movw	r28, r30
    16b6:	8a dd       	rcall	.-1260   	; 0x11cc <__addsf3x>
    16b8:	fe 01       	movw	r30, r28
    16ba:	97 01       	movw	r18, r14
    16bc:	a8 01       	movw	r20, r16
    16be:	da 94       	dec	r13
    16c0:	79 f7       	brne	.-34     	; 0x16a0 <__fp_powser+0x18>
    16c2:	df 90       	pop	r13
    16c4:	ef 90       	pop	r14
    16c6:	ff 90       	pop	r15
    16c8:	0f 91       	pop	r16
    16ca:	1f 91       	pop	r17
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <inverse>:
    16d2:	9b 01       	movw	r18, r22
    16d4:	ac 01       	movw	r20, r24
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	80 e8       	ldi	r24, 0x80	; 128
    16dc:	9f e3       	ldi	r25, 0x3F	; 63
    16de:	ae c0       	rjmp	.+348    	; 0x183c <__divsf3>
    16e0:	59 ce       	rjmp	.-846    	; 0x1394 <__fp_inf>
    16e2:	c4 cf       	rjmp	.-120    	; 0x166c <__fp_mpack>

000016e4 <ldexp>:
    16e4:	87 de       	rcall	.-754    	; 0x13f4 <__fp_splitA>
    16e6:	e8 f3       	brcs	.-6      	; 0x16e2 <inverse+0x10>
    16e8:	99 23       	and	r25, r25
    16ea:	d9 f3       	breq	.-10     	; 0x16e2 <inverse+0x10>
    16ec:	94 0f       	add	r25, r20
    16ee:	51 1d       	adc	r21, r1
    16f0:	bb f3       	brvs	.-18     	; 0x16e0 <inverse+0xe>
    16f2:	91 50       	subi	r25, 0x01	; 1
    16f4:	50 40       	sbci	r21, 0x00	; 0
    16f6:	94 f0       	brlt	.+36     	; 0x171c <ldexp+0x38>
    16f8:	59 f0       	breq	.+22     	; 0x1710 <ldexp+0x2c>
    16fa:	88 23       	and	r24, r24
    16fc:	32 f0       	brmi	.+12     	; 0x170a <ldexp+0x26>
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	91 50       	subi	r25, 0x01	; 1
    1706:	50 40       	sbci	r21, 0x00	; 0
    1708:	c1 f7       	brne	.-16     	; 0x16fa <ldexp+0x16>
    170a:	9e 3f       	cpi	r25, 0xFE	; 254
    170c:	51 05       	cpc	r21, r1
    170e:	44 f7       	brge	.-48     	; 0x16e0 <inverse+0xe>
    1710:	88 0f       	add	r24, r24
    1712:	91 1d       	adc	r25, r1
    1714:	96 95       	lsr	r25
    1716:	87 95       	ror	r24
    1718:	97 f9       	bld	r25, 7
    171a:	08 95       	ret
    171c:	5f 3f       	cpi	r21, 0xFF	; 255
    171e:	ac f0       	brlt	.+42     	; 0x174a <ldexp+0x66>
    1720:	98 3e       	cpi	r25, 0xE8	; 232
    1722:	9c f0       	brlt	.+38     	; 0x174a <ldexp+0x66>
    1724:	bb 27       	eor	r27, r27
    1726:	86 95       	lsr	r24
    1728:	77 95       	ror	r23
    172a:	67 95       	ror	r22
    172c:	b7 95       	ror	r27
    172e:	08 f4       	brcc	.+2      	; 0x1732 <ldexp+0x4e>
    1730:	b1 60       	ori	r27, 0x01	; 1
    1732:	93 95       	inc	r25
    1734:	c1 f7       	brne	.-16     	; 0x1726 <ldexp+0x42>
    1736:	bb 0f       	add	r27, r27
    1738:	58 f7       	brcc	.-42     	; 0x1710 <ldexp+0x2c>
    173a:	11 f4       	brne	.+4      	; 0x1740 <ldexp+0x5c>
    173c:	60 ff       	sbrs	r22, 0
    173e:	e8 cf       	rjmp	.-48     	; 0x1710 <ldexp+0x2c>
    1740:	6f 5f       	subi	r22, 0xFF	; 255
    1742:	7f 4f       	sbci	r23, 0xFF	; 255
    1744:	8f 4f       	sbci	r24, 0xFF	; 255
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	e3 cf       	rjmp	.-58     	; 0x1710 <ldexp+0x2c>
    174a:	6f ce       	rjmp	.-802    	; 0x142a <__fp_szero>
    174c:	0e f0       	brts	.+2      	; 0x1750 <ldexp+0x6c>
    174e:	8e cf       	rjmp	.-228    	; 0x166c <__fp_mpack>
    1750:	27 ce       	rjmp	.-946    	; 0x13a0 <__fp_nan>
    1752:	68 94       	set
    1754:	1f ce       	rjmp	.-962    	; 0x1394 <__fp_inf>

00001756 <log>:
    1756:	4e de       	rcall	.-868    	; 0x13f4 <__fp_splitA>
    1758:	c8 f3       	brcs	.-14     	; 0x174c <ldexp+0x68>
    175a:	99 23       	and	r25, r25
    175c:	d1 f3       	breq	.-12     	; 0x1752 <ldexp+0x6e>
    175e:	c6 f3       	brts	.-16     	; 0x1750 <ldexp+0x6c>
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	1f 93       	push	r17
    1766:	0f 93       	push	r16
    1768:	ff 92       	push	r15
    176a:	c9 2f       	mov	r28, r25
    176c:	dd 27       	eor	r29, r29
    176e:	88 23       	and	r24, r24
    1770:	2a f0       	brmi	.+10     	; 0x177c <log+0x26>
    1772:	21 97       	sbiw	r28, 0x01	; 1
    1774:	66 0f       	add	r22, r22
    1776:	77 1f       	adc	r23, r23
    1778:	88 1f       	adc	r24, r24
    177a:	da f7       	brpl	.-10     	; 0x1772 <log+0x1c>
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e8       	ldi	r20, 0x80	; 128
    1782:	5f eb       	ldi	r21, 0xBF	; 191
    1784:	9f e3       	ldi	r25, 0x3F	; 63
    1786:	88 39       	cpi	r24, 0x98	; 152
    1788:	20 f0       	brcs	.+8      	; 0x1792 <log+0x3c>
    178a:	80 3e       	cpi	r24, 0xE0	; 224
    178c:	30 f0       	brcs	.+12     	; 0x179a <log+0x44>
    178e:	21 96       	adiw	r28, 0x01	; 1
    1790:	8f 77       	andi	r24, 0x7F	; 127
    1792:	0b dd       	rcall	.-1514   	; 0x11aa <__addsf3>
    1794:	ee e4       	ldi	r30, 0x4E	; 78
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <log+0x4a>
    179a:	07 dd       	rcall	.-1522   	; 0x11aa <__addsf3>
    179c:	eb e7       	ldi	r30, 0x7B	; 123
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	73 df       	rcall	.-282    	; 0x1688 <__fp_powser>
    17a2:	8b 01       	movw	r16, r22
    17a4:	be 01       	movw	r22, r28
    17a6:	ec 01       	movw	r28, r24
    17a8:	fb 2e       	mov	r15, r27
    17aa:	6f 57       	subi	r22, 0x7F	; 127
    17ac:	71 09       	sbc	r23, r1
    17ae:	75 95       	asr	r23
    17b0:	77 1f       	adc	r23, r23
    17b2:	88 0b       	sbc	r24, r24
    17b4:	99 0b       	sbc	r25, r25
    17b6:	8f dd       	rcall	.-1250   	; 0x12d6 <__floatsisf>
    17b8:	28 e1       	ldi	r18, 0x18	; 24
    17ba:	32 e7       	ldi	r19, 0x72	; 114
    17bc:	41 e3       	ldi	r20, 0x31	; 49
    17be:	5f e3       	ldi	r21, 0x3F	; 63
    17c0:	46 de       	rcall	.-884    	; 0x144e <__mulsf3x>
    17c2:	af 2d       	mov	r26, r15
    17c4:	98 01       	movw	r18, r16
    17c6:	ae 01       	movw	r20, r28
    17c8:	ff 90       	pop	r15
    17ca:	0f 91       	pop	r16
    17cc:	1f 91       	pop	r17
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	fc dc       	rcall	.-1544   	; 0x11cc <__addsf3x>
    17d4:	f6 cd       	rjmp	.-1044   	; 0x13c2 <__fp_round>

000017d6 <modf>:
    17d6:	fa 01       	movw	r30, r20
    17d8:	dc 01       	movw	r26, r24
    17da:	aa 0f       	add	r26, r26
    17dc:	bb 1f       	adc	r27, r27
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	bf 57       	subi	r27, 0x7F	; 127
    17e4:	28 f4       	brcc	.+10     	; 0x17f0 <modf+0x1a>
    17e6:	22 27       	eor	r18, r18
    17e8:	33 27       	eor	r19, r19
    17ea:	44 27       	eor	r20, r20
    17ec:	50 78       	andi	r21, 0x80	; 128
    17ee:	1f c0       	rjmp	.+62     	; 0x182e <modf+0x58>
    17f0:	b7 51       	subi	r27, 0x17	; 23
    17f2:	88 f4       	brcc	.+34     	; 0x1816 <modf+0x40>
    17f4:	ab 2f       	mov	r26, r27
    17f6:	00 24       	eor	r0, r0
    17f8:	46 95       	lsr	r20
    17fa:	37 95       	ror	r19
    17fc:	27 95       	ror	r18
    17fe:	01 1c       	adc	r0, r1
    1800:	a3 95       	inc	r26
    1802:	d2 f3       	brmi	.-12     	; 0x17f8 <modf+0x22>
    1804:	00 20       	and	r0, r0
    1806:	69 f0       	breq	.+26     	; 0x1822 <modf+0x4c>
    1808:	22 0f       	add	r18, r18
    180a:	33 1f       	adc	r19, r19
    180c:	44 1f       	adc	r20, r20
    180e:	b3 95       	inc	r27
    1810:	da f3       	brmi	.-10     	; 0x1808 <modf+0x32>
    1812:	0d d0       	rcall	.+26     	; 0x182e <modf+0x58>
    1814:	c9 cc       	rjmp	.-1646   	; 0x11a8 <__subsf3>
    1816:	61 30       	cpi	r22, 0x01	; 1
    1818:	71 05       	cpc	r23, r1
    181a:	a0 e8       	ldi	r26, 0x80	; 128
    181c:	8a 07       	cpc	r24, r26
    181e:	b9 46       	sbci	r27, 0x69	; 105
    1820:	30 f4       	brcc	.+12     	; 0x182e <modf+0x58>
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	66 27       	eor	r22, r22
    1828:	77 27       	eor	r23, r23
    182a:	88 27       	eor	r24, r24
    182c:	90 78       	andi	r25, 0x80	; 128
    182e:	30 96       	adiw	r30, 0x00	; 0
    1830:	21 f0       	breq	.+8      	; 0x183a <modf+0x64>
    1832:	20 83       	st	Z, r18
    1834:	31 83       	std	Z+1, r19	; 0x01
    1836:	42 83       	std	Z+2, r20	; 0x02
    1838:	53 83       	std	Z+3, r21	; 0x03
    183a:	08 95       	ret

0000183c <__divsf3>:
    183c:	0c d0       	rcall	.+24     	; 0x1856 <__divsf3x>
    183e:	c1 cd       	rjmp	.-1150   	; 0x13c2 <__fp_round>
    1840:	b9 dd       	rcall	.-1166   	; 0x13b4 <__fp_pscB>
    1842:	40 f0       	brcs	.+16     	; 0x1854 <__divsf3+0x18>
    1844:	b0 dd       	rcall	.-1184   	; 0x13a6 <__fp_pscA>
    1846:	30 f0       	brcs	.+12     	; 0x1854 <__divsf3+0x18>
    1848:	21 f4       	brne	.+8      	; 0x1852 <__divsf3+0x16>
    184a:	5f 3f       	cpi	r21, 0xFF	; 255
    184c:	19 f0       	breq	.+6      	; 0x1854 <__divsf3+0x18>
    184e:	a2 cd       	rjmp	.-1212   	; 0x1394 <__fp_inf>
    1850:	51 11       	cpse	r21, r1
    1852:	eb cd       	rjmp	.-1066   	; 0x142a <__fp_szero>
    1854:	a5 cd       	rjmp	.-1206   	; 0x13a0 <__fp_nan>

00001856 <__divsf3x>:
    1856:	c6 dd       	rcall	.-1140   	; 0x13e4 <__fp_split3>
    1858:	98 f3       	brcs	.-26     	; 0x1840 <__divsf3+0x4>

0000185a <__divsf3_pse>:
    185a:	99 23       	and	r25, r25
    185c:	c9 f3       	breq	.-14     	; 0x1850 <__divsf3+0x14>
    185e:	55 23       	and	r21, r21
    1860:	b1 f3       	breq	.-20     	; 0x184e <__divsf3+0x12>
    1862:	95 1b       	sub	r25, r21
    1864:	55 0b       	sbc	r21, r21
    1866:	bb 27       	eor	r27, r27
    1868:	aa 27       	eor	r26, r26
    186a:	62 17       	cp	r22, r18
    186c:	73 07       	cpc	r23, r19
    186e:	84 07       	cpc	r24, r20
    1870:	38 f0       	brcs	.+14     	; 0x1880 <__divsf3_pse+0x26>
    1872:	9f 5f       	subi	r25, 0xFF	; 255
    1874:	5f 4f       	sbci	r21, 0xFF	; 255
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	44 1f       	adc	r20, r20
    187c:	aa 1f       	adc	r26, r26
    187e:	a9 f3       	breq	.-22     	; 0x186a <__divsf3_pse+0x10>
    1880:	33 d0       	rcall	.+102    	; 0x18e8 <__divsf3_pse+0x8e>
    1882:	0e 2e       	mov	r0, r30
    1884:	3a f0       	brmi	.+14     	; 0x1894 <__divsf3_pse+0x3a>
    1886:	e0 e8       	ldi	r30, 0x80	; 128
    1888:	30 d0       	rcall	.+96     	; 0x18ea <__divsf3_pse+0x90>
    188a:	91 50       	subi	r25, 0x01	; 1
    188c:	50 40       	sbci	r21, 0x00	; 0
    188e:	e6 95       	lsr	r30
    1890:	00 1c       	adc	r0, r0
    1892:	ca f7       	brpl	.-14     	; 0x1886 <__divsf3_pse+0x2c>
    1894:	29 d0       	rcall	.+82     	; 0x18e8 <__divsf3_pse+0x8e>
    1896:	fe 2f       	mov	r31, r30
    1898:	27 d0       	rcall	.+78     	; 0x18e8 <__divsf3_pse+0x8e>
    189a:	66 0f       	add	r22, r22
    189c:	77 1f       	adc	r23, r23
    189e:	88 1f       	adc	r24, r24
    18a0:	bb 1f       	adc	r27, r27
    18a2:	26 17       	cp	r18, r22
    18a4:	37 07       	cpc	r19, r23
    18a6:	48 07       	cpc	r20, r24
    18a8:	ab 07       	cpc	r26, r27
    18aa:	b0 e8       	ldi	r27, 0x80	; 128
    18ac:	09 f0       	breq	.+2      	; 0x18b0 <__divsf3_pse+0x56>
    18ae:	bb 0b       	sbc	r27, r27
    18b0:	80 2d       	mov	r24, r0
    18b2:	bf 01       	movw	r22, r30
    18b4:	ff 27       	eor	r31, r31
    18b6:	93 58       	subi	r25, 0x83	; 131
    18b8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ba:	2a f0       	brmi	.+10     	; 0x18c6 <__divsf3_pse+0x6c>
    18bc:	9e 3f       	cpi	r25, 0xFE	; 254
    18be:	51 05       	cpc	r21, r1
    18c0:	68 f0       	brcs	.+26     	; 0x18dc <__divsf3_pse+0x82>
    18c2:	68 cd       	rjmp	.-1328   	; 0x1394 <__fp_inf>
    18c4:	b2 cd       	rjmp	.-1180   	; 0x142a <__fp_szero>
    18c6:	5f 3f       	cpi	r21, 0xFF	; 255
    18c8:	ec f3       	brlt	.-6      	; 0x18c4 <__divsf3_pse+0x6a>
    18ca:	98 3e       	cpi	r25, 0xE8	; 232
    18cc:	dc f3       	brlt	.-10     	; 0x18c4 <__divsf3_pse+0x6a>
    18ce:	86 95       	lsr	r24
    18d0:	77 95       	ror	r23
    18d2:	67 95       	ror	r22
    18d4:	b7 95       	ror	r27
    18d6:	f7 95       	ror	r31
    18d8:	9f 5f       	subi	r25, 0xFF	; 255
    18da:	c9 f7       	brne	.-14     	; 0x18ce <__divsf3_pse+0x74>
    18dc:	88 0f       	add	r24, r24
    18de:	91 1d       	adc	r25, r1
    18e0:	96 95       	lsr	r25
    18e2:	87 95       	ror	r24
    18e4:	97 f9       	bld	r25, 7
    18e6:	08 95       	ret
    18e8:	e1 e0       	ldi	r30, 0x01	; 1
    18ea:	66 0f       	add	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	bb 1f       	adc	r27, r27
    18f2:	62 17       	cp	r22, r18
    18f4:	73 07       	cpc	r23, r19
    18f6:	84 07       	cpc	r24, r20
    18f8:	ba 07       	cpc	r27, r26
    18fa:	20 f0       	brcs	.+8      	; 0x1904 <__divsf3_pse+0xaa>
    18fc:	62 1b       	sub	r22, r18
    18fe:	73 0b       	sbc	r23, r19
    1900:	84 0b       	sbc	r24, r20
    1902:	ba 0b       	sbc	r27, r26
    1904:	ee 1f       	adc	r30, r30
    1906:	88 f7       	brcc	.-30     	; 0x18ea <__divsf3_pse+0x90>
    1908:	e0 95       	com	r30
    190a:	08 95       	ret

0000190c <__udivmodqi4>:
    190c:	99 1b       	sub	r25, r25
    190e:	79 e0       	ldi	r23, 0x09	; 9
    1910:	04 c0       	rjmp	.+8      	; 0x191a <__udivmodqi4_ep>

00001912 <__udivmodqi4_loop>:
    1912:	99 1f       	adc	r25, r25
    1914:	96 17       	cp	r25, r22
    1916:	08 f0       	brcs	.+2      	; 0x191a <__udivmodqi4_ep>
    1918:	96 1b       	sub	r25, r22

0000191a <__udivmodqi4_ep>:
    191a:	88 1f       	adc	r24, r24
    191c:	7a 95       	dec	r23
    191e:	c9 f7       	brne	.-14     	; 0x1912 <__udivmodqi4_loop>
    1920:	80 95       	com	r24
    1922:	08 95       	ret

00001924 <__udivmodsi4>:
    1924:	a1 e2       	ldi	r26, 0x21	; 33
    1926:	1a 2e       	mov	r1, r26
    1928:	aa 1b       	sub	r26, r26
    192a:	bb 1b       	sub	r27, r27
    192c:	fd 01       	movw	r30, r26
    192e:	0d c0       	rjmp	.+26     	; 0x194a <__udivmodsi4_ep>

00001930 <__udivmodsi4_loop>:
    1930:	aa 1f       	adc	r26, r26
    1932:	bb 1f       	adc	r27, r27
    1934:	ee 1f       	adc	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	a2 17       	cp	r26, r18
    193a:	b3 07       	cpc	r27, r19
    193c:	e4 07       	cpc	r30, r20
    193e:	f5 07       	cpc	r31, r21
    1940:	20 f0       	brcs	.+8      	; 0x194a <__udivmodsi4_ep>
    1942:	a2 1b       	sub	r26, r18
    1944:	b3 0b       	sbc	r27, r19
    1946:	e4 0b       	sbc	r30, r20
    1948:	f5 0b       	sbc	r31, r21

0000194a <__udivmodsi4_ep>:
    194a:	66 1f       	adc	r22, r22
    194c:	77 1f       	adc	r23, r23
    194e:	88 1f       	adc	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	1a 94       	dec	r1
    1954:	69 f7       	brne	.-38     	; 0x1930 <__udivmodsi4_loop>
    1956:	60 95       	com	r22
    1958:	70 95       	com	r23
    195a:	80 95       	com	r24
    195c:	90 95       	com	r25
    195e:	9b 01       	movw	r18, r22
    1960:	ac 01       	movw	r20, r24
    1962:	bd 01       	movw	r22, r26
    1964:	cf 01       	movw	r24, r30
    1966:	08 95       	ret

00001968 <__umulhisi3>:
    1968:	a2 9f       	mul	r26, r18
    196a:	b0 01       	movw	r22, r0
    196c:	b3 9f       	mul	r27, r19
    196e:	c0 01       	movw	r24, r0
    1970:	a3 9f       	mul	r26, r19
    1972:	01 d0       	rcall	.+2      	; 0x1976 <__umulhisi3+0xe>
    1974:	b2 9f       	mul	r27, r18
    1976:	70 0d       	add	r23, r0
    1978:	81 1d       	adc	r24, r1
    197a:	11 24       	eor	r1, r1
    197c:	91 1d       	adc	r25, r1
    197e:	08 95       	ret

00001980 <__tablejump2__>:
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	05 90       	lpm	r0, Z+
    1986:	f4 91       	lpm	r31, Z
    1988:	e0 2d       	mov	r30, r0
    198a:	09 94       	ijmp

0000198c <malloc>:
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	91 05       	cpc	r25, r1
    1998:	10 f4       	brcc	.+4      	; 0x199e <malloc+0x12>
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <__flp>
    19a2:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <__flp+0x1>
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	30 97       	sbiw	r30, 0x00	; 0
    19b0:	19 f1       	breq	.+70     	; 0x19f8 <malloc+0x6c>
    19b2:	40 81       	ld	r20, Z
    19b4:	51 81       	ldd	r21, Z+1	; 0x01
    19b6:	02 81       	ldd	r16, Z+2	; 0x02
    19b8:	13 81       	ldd	r17, Z+3	; 0x03
    19ba:	48 17       	cp	r20, r24
    19bc:	59 07       	cpc	r21, r25
    19be:	c8 f0       	brcs	.+50     	; 0x19f2 <malloc+0x66>
    19c0:	84 17       	cp	r24, r20
    19c2:	95 07       	cpc	r25, r21
    19c4:	69 f4       	brne	.+26     	; 0x19e0 <malloc+0x54>
    19c6:	10 97       	sbiw	r26, 0x00	; 0
    19c8:	31 f0       	breq	.+12     	; 0x19d6 <malloc+0x4a>
    19ca:	12 96       	adiw	r26, 0x02	; 2
    19cc:	0c 93       	st	X, r16
    19ce:	12 97       	sbiw	r26, 0x02	; 2
    19d0:	13 96       	adiw	r26, 0x03	; 3
    19d2:	1c 93       	st	X, r17
    19d4:	27 c0       	rjmp	.+78     	; 0x1a24 <malloc+0x98>
    19d6:	00 93 a5 00 	sts	0x00A5, r16	; 0x8000a5 <__flp>
    19da:	10 93 a6 00 	sts	0x00A6, r17	; 0x8000a6 <__flp+0x1>
    19de:	22 c0       	rjmp	.+68     	; 0x1a24 <malloc+0x98>
    19e0:	21 15       	cp	r18, r1
    19e2:	31 05       	cpc	r19, r1
    19e4:	19 f0       	breq	.+6      	; 0x19ec <malloc+0x60>
    19e6:	42 17       	cp	r20, r18
    19e8:	53 07       	cpc	r21, r19
    19ea:	18 f4       	brcc	.+6      	; 0x19f2 <malloc+0x66>
    19ec:	9a 01       	movw	r18, r20
    19ee:	bd 01       	movw	r22, r26
    19f0:	ef 01       	movw	r28, r30
    19f2:	df 01       	movw	r26, r30
    19f4:	f8 01       	movw	r30, r16
    19f6:	db cf       	rjmp	.-74     	; 0x19ae <malloc+0x22>
    19f8:	21 15       	cp	r18, r1
    19fa:	31 05       	cpc	r19, r1
    19fc:	f9 f0       	breq	.+62     	; 0x1a3c <malloc+0xb0>
    19fe:	28 1b       	sub	r18, r24
    1a00:	39 0b       	sbc	r19, r25
    1a02:	24 30       	cpi	r18, 0x04	; 4
    1a04:	31 05       	cpc	r19, r1
    1a06:	80 f4       	brcc	.+32     	; 0x1a28 <malloc+0x9c>
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0c:	61 15       	cp	r22, r1
    1a0e:	71 05       	cpc	r23, r1
    1a10:	21 f0       	breq	.+8      	; 0x1a1a <malloc+0x8e>
    1a12:	fb 01       	movw	r30, r22
    1a14:	93 83       	std	Z+3, r25	; 0x03
    1a16:	82 83       	std	Z+2, r24	; 0x02
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <malloc+0x96>
    1a1a:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__flp+0x1>
    1a1e:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <__flp>
    1a22:	fe 01       	movw	r30, r28
    1a24:	32 96       	adiw	r30, 0x02	; 2
    1a26:	44 c0       	rjmp	.+136    	; 0x1ab0 <malloc+0x124>
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e2 0f       	add	r30, r18
    1a2c:	f3 1f       	adc	r31, r19
    1a2e:	81 93       	st	Z+, r24
    1a30:	91 93       	st	Z+, r25
    1a32:	22 50       	subi	r18, 0x02	; 2
    1a34:	31 09       	sbc	r19, r1
    1a36:	39 83       	std	Y+1, r19	; 0x01
    1a38:	28 83       	st	Y, r18
    1a3a:	3a c0       	rjmp	.+116    	; 0x1ab0 <malloc+0x124>
    1a3c:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <__brkval>
    1a40:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1a44:	23 2b       	or	r18, r19
    1a46:	41 f4       	brne	.+16     	; 0x1a58 <malloc+0xcc>
    1a48:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1a4c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1a50:	30 93 a4 00 	sts	0x00A4, r19	; 0x8000a4 <__brkval+0x1>
    1a54:	20 93 a3 00 	sts	0x00A3, r18	; 0x8000a3 <__brkval>
    1a58:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1a5c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1a60:	21 15       	cp	r18, r1
    1a62:	31 05       	cpc	r19, r1
    1a64:	41 f4       	brne	.+16     	; 0x1a76 <malloc+0xea>
    1a66:	2d b7       	in	r18, 0x3d	; 61
    1a68:	3e b7       	in	r19, 0x3e	; 62
    1a6a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1a6e:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1a72:	24 1b       	sub	r18, r20
    1a74:	35 0b       	sbc	r19, r21
    1a76:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <__brkval>
    1a7a:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1a7e:	e2 17       	cp	r30, r18
    1a80:	f3 07       	cpc	r31, r19
    1a82:	a0 f4       	brcc	.+40     	; 0x1aac <malloc+0x120>
    1a84:	2e 1b       	sub	r18, r30
    1a86:	3f 0b       	sbc	r19, r31
    1a88:	28 17       	cp	r18, r24
    1a8a:	39 07       	cpc	r19, r25
    1a8c:	78 f0       	brcs	.+30     	; 0x1aac <malloc+0x120>
    1a8e:	ac 01       	movw	r20, r24
    1a90:	4e 5f       	subi	r20, 0xFE	; 254
    1a92:	5f 4f       	sbci	r21, 0xFF	; 255
    1a94:	24 17       	cp	r18, r20
    1a96:	35 07       	cpc	r19, r21
    1a98:	48 f0       	brcs	.+18     	; 0x1aac <malloc+0x120>
    1a9a:	4e 0f       	add	r20, r30
    1a9c:	5f 1f       	adc	r21, r31
    1a9e:	50 93 a4 00 	sts	0x00A4, r21	; 0x8000a4 <__brkval+0x1>
    1aa2:	40 93 a3 00 	sts	0x00A3, r20	; 0x8000a3 <__brkval>
    1aa6:	81 93       	st	Z+, r24
    1aa8:	91 93       	st	Z+, r25
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <malloc+0x124>
    1aac:	e0 e0       	ldi	r30, 0x00	; 0
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	cf 01       	movw	r24, r30
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	08 95       	ret

00001abc <free>:
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <free+0xa>
    1ac4:	81 c0       	rjmp	.+258    	; 0x1bc8 <free+0x10c>
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	32 97       	sbiw	r30, 0x02	; 2
    1aca:	13 82       	std	Z+3, r1	; 0x03
    1acc:	12 82       	std	Z+2, r1	; 0x02
    1ace:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <__flp>
    1ad2:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <__flp+0x1>
    1ad6:	10 97       	sbiw	r26, 0x00	; 0
    1ad8:	81 f4       	brne	.+32     	; 0x1afa <free+0x3e>
    1ada:	20 81       	ld	r18, Z
    1adc:	31 81       	ldd	r19, Z+1	; 0x01
    1ade:	82 0f       	add	r24, r18
    1ae0:	93 1f       	adc	r25, r19
    1ae2:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <__brkval>
    1ae6:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1aea:	28 17       	cp	r18, r24
    1aec:	39 07       	cpc	r19, r25
    1aee:	51 f5       	brne	.+84     	; 0x1b44 <free+0x88>
    1af0:	f0 93 a4 00 	sts	0x00A4, r31	; 0x8000a4 <__brkval+0x1>
    1af4:	e0 93 a3 00 	sts	0x00A3, r30	; 0x8000a3 <__brkval>
    1af8:	67 c0       	rjmp	.+206    	; 0x1bc8 <free+0x10c>
    1afa:	ed 01       	movw	r28, r26
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	ce 17       	cp	r28, r30
    1b02:	df 07       	cpc	r29, r31
    1b04:	40 f4       	brcc	.+16     	; 0x1b16 <free+0x5a>
    1b06:	4a 81       	ldd	r20, Y+2	; 0x02
    1b08:	5b 81       	ldd	r21, Y+3	; 0x03
    1b0a:	9e 01       	movw	r18, r28
    1b0c:	41 15       	cp	r20, r1
    1b0e:	51 05       	cpc	r21, r1
    1b10:	f1 f0       	breq	.+60     	; 0x1b4e <free+0x92>
    1b12:	ea 01       	movw	r28, r20
    1b14:	f5 cf       	rjmp	.-22     	; 0x1b00 <free+0x44>
    1b16:	d3 83       	std	Z+3, r29	; 0x03
    1b18:	c2 83       	std	Z+2, r28	; 0x02
    1b1a:	40 81       	ld	r20, Z
    1b1c:	51 81       	ldd	r21, Z+1	; 0x01
    1b1e:	84 0f       	add	r24, r20
    1b20:	95 1f       	adc	r25, r21
    1b22:	c8 17       	cp	r28, r24
    1b24:	d9 07       	cpc	r29, r25
    1b26:	59 f4       	brne	.+22     	; 0x1b3e <free+0x82>
    1b28:	88 81       	ld	r24, Y
    1b2a:	99 81       	ldd	r25, Y+1	; 0x01
    1b2c:	84 0f       	add	r24, r20
    1b2e:	95 1f       	adc	r25, r21
    1b30:	02 96       	adiw	r24, 0x02	; 2
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3a:	93 83       	std	Z+3, r25	; 0x03
    1b3c:	82 83       	std	Z+2, r24	; 0x02
    1b3e:	21 15       	cp	r18, r1
    1b40:	31 05       	cpc	r19, r1
    1b42:	29 f4       	brne	.+10     	; 0x1b4e <free+0x92>
    1b44:	f0 93 a6 00 	sts	0x00A6, r31	; 0x8000a6 <__flp+0x1>
    1b48:	e0 93 a5 00 	sts	0x00A5, r30	; 0x8000a5 <__flp>
    1b4c:	3d c0       	rjmp	.+122    	; 0x1bc8 <free+0x10c>
    1b4e:	e9 01       	movw	r28, r18
    1b50:	fb 83       	std	Y+3, r31	; 0x03
    1b52:	ea 83       	std	Y+2, r30	; 0x02
    1b54:	49 91       	ld	r20, Y+
    1b56:	59 91       	ld	r21, Y+
    1b58:	c4 0f       	add	r28, r20
    1b5a:	d5 1f       	adc	r29, r21
    1b5c:	ec 17       	cp	r30, r28
    1b5e:	fd 07       	cpc	r31, r29
    1b60:	61 f4       	brne	.+24     	; 0x1b7a <free+0xbe>
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	84 0f       	add	r24, r20
    1b68:	95 1f       	adc	r25, r21
    1b6a:	02 96       	adiw	r24, 0x02	; 2
    1b6c:	e9 01       	movw	r28, r18
    1b6e:	99 83       	std	Y+1, r25	; 0x01
    1b70:	88 83       	st	Y, r24
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	9b 83       	std	Y+3, r25	; 0x03
    1b78:	8a 83       	std	Y+2, r24	; 0x02
    1b7a:	e0 e0       	ldi	r30, 0x00	; 0
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	12 96       	adiw	r26, 0x02	; 2
    1b80:	8d 91       	ld	r24, X+
    1b82:	9c 91       	ld	r25, X
    1b84:	13 97       	sbiw	r26, 0x03	; 3
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	19 f0       	breq	.+6      	; 0x1b90 <free+0xd4>
    1b8a:	fd 01       	movw	r30, r26
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	f7 cf       	rjmp	.-18     	; 0x1b7e <free+0xc2>
    1b90:	8d 91       	ld	r24, X+
    1b92:	9c 91       	ld	r25, X
    1b94:	11 97       	sbiw	r26, 0x01	; 1
    1b96:	9d 01       	movw	r18, r26
    1b98:	2e 5f       	subi	r18, 0xFE	; 254
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	82 0f       	add	r24, r18
    1b9e:	93 1f       	adc	r25, r19
    1ba0:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <__brkval>
    1ba4:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1ba8:	28 17       	cp	r18, r24
    1baa:	39 07       	cpc	r19, r25
    1bac:	69 f4       	brne	.+26     	; 0x1bc8 <free+0x10c>
    1bae:	30 97       	sbiw	r30, 0x00	; 0
    1bb0:	29 f4       	brne	.+10     	; 0x1bbc <free+0x100>
    1bb2:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__flp+0x1>
    1bb6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__flp>
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <free+0x104>
    1bbc:	13 82       	std	Z+3, r1	; 0x03
    1bbe:	12 82       	std	Z+2, r1	; 0x02
    1bc0:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <__brkval+0x1>
    1bc4:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <__brkval>
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <realloc>:
    1bce:	a0 e0       	ldi	r26, 0x00	; 0
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	ec ee       	ldi	r30, 0xEC	; 236
    1bd4:	fd e0       	ldi	r31, 0x0D	; 13
    1bd6:	01 c1       	rjmp	.+514    	; 0x1dda <__prologue_saves__+0x8>
    1bd8:	ec 01       	movw	r28, r24
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	19 f4       	brne	.+6      	; 0x1be4 <realloc+0x16>
    1bde:	cb 01       	movw	r24, r22
    1be0:	d5 de       	rcall	.-598    	; 0x198c <malloc>
    1be2:	b0 c0       	rjmp	.+352    	; 0x1d44 <realloc+0x176>
    1be4:	fc 01       	movw	r30, r24
    1be6:	e6 0f       	add	r30, r22
    1be8:	f7 1f       	adc	r31, r23
    1bea:	9c 01       	movw	r18, r24
    1bec:	22 50       	subi	r18, 0x02	; 2
    1bee:	31 09       	sbc	r19, r1
    1bf0:	e2 17       	cp	r30, r18
    1bf2:	f3 07       	cpc	r31, r19
    1bf4:	08 f4       	brcc	.+2      	; 0x1bf8 <realloc+0x2a>
    1bf6:	a4 c0       	rjmp	.+328    	; 0x1d40 <realloc+0x172>
    1bf8:	d9 01       	movw	r26, r18
    1bfa:	0d 91       	ld	r16, X+
    1bfc:	1c 91       	ld	r17, X
    1bfe:	11 97       	sbiw	r26, 0x01	; 1
    1c00:	06 17       	cp	r16, r22
    1c02:	17 07       	cpc	r17, r23
    1c04:	a8 f0       	brcs	.+42     	; 0x1c30 <realloc+0x62>
    1c06:	05 30       	cpi	r16, 0x05	; 5
    1c08:	11 05       	cpc	r17, r1
    1c0a:	08 f4       	brcc	.+2      	; 0x1c0e <realloc+0x40>
    1c0c:	97 c0       	rjmp	.+302    	; 0x1d3c <realloc+0x16e>
    1c0e:	c8 01       	movw	r24, r16
    1c10:	04 97       	sbiw	r24, 0x04	; 4
    1c12:	86 17       	cp	r24, r22
    1c14:	97 07       	cpc	r25, r23
    1c16:	08 f4       	brcc	.+2      	; 0x1c1a <realloc+0x4c>
    1c18:	91 c0       	rjmp	.+290    	; 0x1d3c <realloc+0x16e>
    1c1a:	02 50       	subi	r16, 0x02	; 2
    1c1c:	11 09       	sbc	r17, r1
    1c1e:	06 1b       	sub	r16, r22
    1c20:	17 0b       	sbc	r17, r23
    1c22:	01 93       	st	Z+, r16
    1c24:	11 93       	st	Z+, r17
    1c26:	6d 93       	st	X+, r22
    1c28:	7c 93       	st	X, r23
    1c2a:	cf 01       	movw	r24, r30
    1c2c:	47 df       	rcall	.-370    	; 0x1abc <free>
    1c2e:	86 c0       	rjmp	.+268    	; 0x1d3c <realloc+0x16e>
    1c30:	5b 01       	movw	r10, r22
    1c32:	a0 1a       	sub	r10, r16
    1c34:	b1 0a       	sbc	r11, r17
    1c36:	4c 01       	movw	r8, r24
    1c38:	80 0e       	add	r8, r16
    1c3a:	91 1e       	adc	r9, r17
    1c3c:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <__flp>
    1c40:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <__flp+0x1>
    1c44:	61 2c       	mov	r6, r1
    1c46:	71 2c       	mov	r7, r1
    1c48:	e1 2c       	mov	r14, r1
    1c4a:	f1 2c       	mov	r15, r1
    1c4c:	10 97       	sbiw	r26, 0x00	; 0
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <realloc+0x84>
    1c50:	46 c0       	rjmp	.+140    	; 0x1cde <realloc+0x110>
    1c52:	8d 91       	ld	r24, X+
    1c54:	9c 91       	ld	r25, X
    1c56:	11 97       	sbiw	r26, 0x01	; 1
    1c58:	a8 15       	cp	r26, r8
    1c5a:	b9 05       	cpc	r27, r9
    1c5c:	b1 f5       	brne	.+108    	; 0x1cca <realloc+0xfc>
    1c5e:	6c 01       	movw	r12, r24
    1c60:	42 e0       	ldi	r20, 0x02	; 2
    1c62:	c4 0e       	add	r12, r20
    1c64:	d1 1c       	adc	r13, r1
    1c66:	ca 14       	cp	r12, r10
    1c68:	db 04       	cpc	r13, r11
    1c6a:	78 f1       	brcs	.+94     	; 0x1cca <realloc+0xfc>
    1c6c:	4c 01       	movw	r8, r24
    1c6e:	8a 18       	sub	r8, r10
    1c70:	9b 08       	sbc	r9, r11
    1c72:	64 01       	movw	r12, r8
    1c74:	42 e0       	ldi	r20, 0x02	; 2
    1c76:	c4 0e       	add	r12, r20
    1c78:	d1 1c       	adc	r13, r1
    1c7a:	12 96       	adiw	r26, 0x02	; 2
    1c7c:	bc 90       	ld	r11, X
    1c7e:	12 97       	sbiw	r26, 0x02	; 2
    1c80:	13 96       	adiw	r26, 0x03	; 3
    1c82:	ac 91       	ld	r26, X
    1c84:	b5 e0       	ldi	r27, 0x05	; 5
    1c86:	cb 16       	cp	r12, r27
    1c88:	d1 04       	cpc	r13, r1
    1c8a:	40 f0       	brcs	.+16     	; 0x1c9c <realloc+0xce>
    1c8c:	b2 82       	std	Z+2, r11	; 0x02
    1c8e:	a3 83       	std	Z+3, r26	; 0x03
    1c90:	91 82       	std	Z+1, r9	; 0x01
    1c92:	80 82       	st	Z, r8
    1c94:	d9 01       	movw	r26, r18
    1c96:	6d 93       	st	X+, r22
    1c98:	7c 93       	st	X, r23
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <realloc+0xe0>
    1c9c:	0e 5f       	subi	r16, 0xFE	; 254
    1c9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca0:	80 0f       	add	r24, r16
    1ca2:	91 1f       	adc	r25, r17
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	80 83       	st	Z, r24
    1caa:	eb 2d       	mov	r30, r11
    1cac:	fa 2f       	mov	r31, r26
    1cae:	e1 14       	cp	r14, r1
    1cb0:	f1 04       	cpc	r15, r1
    1cb2:	31 f0       	breq	.+12     	; 0x1cc0 <realloc+0xf2>
    1cb4:	d7 01       	movw	r26, r14
    1cb6:	13 96       	adiw	r26, 0x03	; 3
    1cb8:	fc 93       	st	X, r31
    1cba:	ee 93       	st	-X, r30
    1cbc:	12 97       	sbiw	r26, 0x02	; 2
    1cbe:	3e c0       	rjmp	.+124    	; 0x1d3c <realloc+0x16e>
    1cc0:	f0 93 a6 00 	sts	0x00A6, r31	; 0x8000a6 <__flp+0x1>
    1cc4:	e0 93 a5 00 	sts	0x00A5, r30	; 0x8000a5 <__flp>
    1cc8:	39 c0       	rjmp	.+114    	; 0x1d3c <realloc+0x16e>
    1cca:	68 16       	cp	r6, r24
    1ccc:	79 06       	cpc	r7, r25
    1cce:	08 f4       	brcc	.+2      	; 0x1cd2 <realloc+0x104>
    1cd0:	3c 01       	movw	r6, r24
    1cd2:	7d 01       	movw	r14, r26
    1cd4:	12 96       	adiw	r26, 0x02	; 2
    1cd6:	0d 90       	ld	r0, X+
    1cd8:	bc 91       	ld	r27, X
    1cda:	a0 2d       	mov	r26, r0
    1cdc:	b7 cf       	rjmp	.-146    	; 0x1c4c <realloc+0x7e>
    1cde:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__brkval>
    1ce2:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1ce6:	88 16       	cp	r8, r24
    1ce8:	99 06       	cpc	r9, r25
    1cea:	e1 f4       	brne	.+56     	; 0x1d24 <realloc+0x156>
    1cec:	66 16       	cp	r6, r22
    1cee:	77 06       	cpc	r7, r23
    1cf0:	c8 f4       	brcc	.+50     	; 0x1d24 <realloc+0x156>
    1cf2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1cf6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	41 f4       	brne	.+16     	; 0x1d0e <realloc+0x140>
    1cfe:	8d b7       	in	r24, 0x3d	; 61
    1d00:	9e b7       	in	r25, 0x3e	; 62
    1d02:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1d06:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1d0a:	84 1b       	sub	r24, r20
    1d0c:	95 0b       	sbc	r25, r21
    1d0e:	e8 17       	cp	r30, r24
    1d10:	f9 07       	cpc	r31, r25
    1d12:	b0 f4       	brcc	.+44     	; 0x1d40 <realloc+0x172>
    1d14:	f0 93 a4 00 	sts	0x00A4, r31	; 0x8000a4 <__brkval+0x1>
    1d18:	e0 93 a3 00 	sts	0x00A3, r30	; 0x8000a3 <__brkval>
    1d1c:	f9 01       	movw	r30, r18
    1d1e:	71 83       	std	Z+1, r23	; 0x01
    1d20:	60 83       	st	Z, r22
    1d22:	0c c0       	rjmp	.+24     	; 0x1d3c <realloc+0x16e>
    1d24:	cb 01       	movw	r24, r22
    1d26:	32 de       	rcall	.-924    	; 0x198c <malloc>
    1d28:	7c 01       	movw	r14, r24
    1d2a:	00 97       	sbiw	r24, 0x00	; 0
    1d2c:	49 f0       	breq	.+18     	; 0x1d40 <realloc+0x172>
    1d2e:	a8 01       	movw	r20, r16
    1d30:	be 01       	movw	r22, r28
    1d32:	0c d0       	rcall	.+24     	; 0x1d4c <memcpy>
    1d34:	ce 01       	movw	r24, r28
    1d36:	c2 de       	rcall	.-636    	; 0x1abc <free>
    1d38:	c7 01       	movw	r24, r14
    1d3a:	04 c0       	rjmp	.+8      	; 0x1d44 <realloc+0x176>
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <realloc+0x176>
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	ee e0       	ldi	r30, 0x0E	; 14
    1d4a:	63 c0       	rjmp	.+198    	; 0x1e12 <__epilogue_restores__+0x8>

00001d4c <memcpy>:
    1d4c:	fb 01       	movw	r30, r22
    1d4e:	dc 01       	movw	r26, r24
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <memcpy+0xa>
    1d52:	01 90       	ld	r0, Z+
    1d54:	0d 92       	st	X+, r0
    1d56:	41 50       	subi	r20, 0x01	; 1
    1d58:	50 40       	sbci	r21, 0x00	; 0
    1d5a:	d8 f7       	brcc	.-10     	; 0x1d52 <memcpy+0x6>
    1d5c:	08 95       	ret

00001d5e <memset>:
    1d5e:	dc 01       	movw	r26, r24
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <memset+0x6>
    1d62:	6d 93       	st	X+, r22
    1d64:	41 50       	subi	r20, 0x01	; 1
    1d66:	50 40       	sbci	r21, 0x00	; 0
    1d68:	e0 f7       	brcc	.-8      	; 0x1d62 <memset+0x4>
    1d6a:	08 95       	ret

00001d6c <strlcat>:
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	fb 01       	movw	r30, r22
    1d70:	41 50       	subi	r20, 0x01	; 1
    1d72:	50 40       	sbci	r21, 0x00	; 0
    1d74:	70 f0       	brcs	.+28     	; 0x1d92 <strlcat+0x26>
    1d76:	0d 90       	ld	r0, X+
    1d78:	00 20       	and	r0, r0
    1d7a:	d1 f7       	brne	.-12     	; 0x1d70 <strlcat+0x4>
    1d7c:	11 97       	sbiw	r26, 0x01	; 1
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <strlcat+0x1c>
    1d80:	01 90       	ld	r0, Z+
    1d82:	0d 92       	st	X+, r0
    1d84:	00 20       	and	r0, r0
    1d86:	61 f0       	breq	.+24     	; 0x1da0 <strlcat+0x34>
    1d88:	41 50       	subi	r20, 0x01	; 1
    1d8a:	50 40       	sbci	r21, 0x00	; 0
    1d8c:	c8 f7       	brcc	.-14     	; 0x1d80 <strlcat+0x14>
    1d8e:	1c 92       	st	X, r1
    1d90:	bf 01       	movw	r22, r30
    1d92:	01 90       	ld	r0, Z+
    1d94:	00 20       	and	r0, r0
    1d96:	e9 f7       	brne	.-6      	; 0x1d92 <strlcat+0x26>
    1d98:	e6 1b       	sub	r30, r22
    1d9a:	f7 0b       	sbc	r31, r23
    1d9c:	ae 0f       	add	r26, r30
    1d9e:	bf 1f       	adc	r27, r31
    1da0:	08 94       	sec
    1da2:	a8 0b       	sbc	r26, r24
    1da4:	b9 0b       	sbc	r27, r25
    1da6:	cd 01       	movw	r24, r26
    1da8:	08 95       	ret

00001daa <strlcpy>:
    1daa:	dc 01       	movw	r26, r24
    1dac:	fb 01       	movw	r30, r22
    1dae:	41 50       	subi	r20, 0x01	; 1
    1db0:	50 40       	sbci	r21, 0x00	; 0
    1db2:	58 f0       	brcs	.+22     	; 0x1dca <strlcpy+0x20>
    1db4:	49 f0       	breq	.+18     	; 0x1dc8 <strlcpy+0x1e>
    1db6:	01 90       	ld	r0, Z+
    1db8:	0d 92       	st	X+, r0
    1dba:	00 20       	and	r0, r0
    1dbc:	c1 f7       	brne	.-16     	; 0x1dae <strlcpy+0x4>
    1dbe:	e6 1b       	sub	r30, r22
    1dc0:	f7 0b       	sbc	r31, r23
    1dc2:	31 97       	sbiw	r30, 0x01	; 1
    1dc4:	cf 01       	movw	r24, r30
    1dc6:	08 95       	ret
    1dc8:	1c 92       	st	X, r1
    1dca:	01 90       	ld	r0, Z+
    1dcc:	00 20       	and	r0, r0
    1dce:	e9 f7       	brne	.-6      	; 0x1dca <strlcpy+0x20>
    1dd0:	f6 cf       	rjmp	.-20     	; 0x1dbe <strlcpy+0x14>

00001dd2 <__prologue_saves__>:
    1dd2:	2f 92       	push	r2
    1dd4:	3f 92       	push	r3
    1dd6:	4f 92       	push	r4
    1dd8:	5f 92       	push	r5
    1dda:	6f 92       	push	r6
    1ddc:	7f 92       	push	r7
    1dde:	8f 92       	push	r8
    1de0:	9f 92       	push	r9
    1de2:	af 92       	push	r10
    1de4:	bf 92       	push	r11
    1de6:	cf 92       	push	r12
    1de8:	df 92       	push	r13
    1dea:	ef 92       	push	r14
    1dec:	ff 92       	push	r15
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	ca 1b       	sub	r28, r26
    1dfc:	db 0b       	sbc	r29, r27
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	09 94       	ijmp

00001e0a <__epilogue_restores__>:
    1e0a:	2a 88       	ldd	r2, Y+18	; 0x12
    1e0c:	39 88       	ldd	r3, Y+17	; 0x11
    1e0e:	48 88       	ldd	r4, Y+16	; 0x10
    1e10:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e12:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e14:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e16:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e18:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e1c:	b9 84       	ldd	r11, Y+9	; 0x09
    1e1e:	c8 84       	ldd	r12, Y+8	; 0x08
    1e20:	df 80       	ldd	r13, Y+7	; 0x07
    1e22:	ee 80       	ldd	r14, Y+6	; 0x06
    1e24:	fd 80       	ldd	r15, Y+5	; 0x05
    1e26:	0c 81       	ldd	r16, Y+4	; 0x04
    1e28:	1b 81       	ldd	r17, Y+3	; 0x03
    1e2a:	aa 81       	ldd	r26, Y+2	; 0x02
    1e2c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e2e:	ce 0f       	add	r28, r30
    1e30:	d1 1d       	adc	r29, r1
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	ed 01       	movw	r28, r26
    1e3e:	08 95       	ret

00001e40 <_exit>:
    1e40:	f8 94       	cli

00001e42 <__stop_program>:
    1e42:	ff cf       	rjmp	.-2      	; 0x1e42 <__stop_program>
