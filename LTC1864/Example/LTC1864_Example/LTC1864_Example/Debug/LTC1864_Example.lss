
LTC1864_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001e46  00001eda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  0080007c  0080007c  00001ef6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ef6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00001f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a83  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001726  00000000  00000000  00006ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c6  00000000  00000000  000083f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000908  00000000  00000000  00009cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000114e  00000000  00000000  0000a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002787  00000000  00000000  0000b712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000de99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	78 c0       	rjmp	.+240    	; 0xf4 <__bad_interrupt>
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	76 c0       	rjmp	.+236    	; 0xf4 <__bad_interrupt>
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	74 c0       	rjmp	.+232    	; 0xf4 <__bad_interrupt>
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	72 c0       	rjmp	.+228    	; 0xf4 <__bad_interrupt>
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	3e c5       	rjmp	.+2684   	; 0xa90 <__vector_9>
      14:	6b c5       	rjmp	.+2774   	; 0xaec <__vector_10>
      16:	6e c0       	rjmp	.+220    	; 0xf4 <__bad_interrupt>
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	6c c0       	rjmp	.+216    	; 0xf4 <__bad_interrupt>
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	6a c0       	rjmp	.+212    	; 0xf4 <__bad_interrupt>
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	68 c0       	rjmp	.+208    	; 0xf4 <__bad_interrupt>
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	07 63       	ori	r16, 0x37	; 55
      28:	42 36       	cpi	r20, 0x62	; 98
      2a:	b7 9b       	sbis	0x16, 7	; 22
      2c:	d8 a7       	std	Y+40, r29	; 0x28
      2e:	1a 39       	cpi	r17, 0x9A	; 154
      30:	68 56       	subi	r22, 0x68	; 104
      32:	18 ae       	std	Y+56, r1	; 0x38
      34:	ba ab       	std	Y+50, r27	; 0x32
      36:	55 8c       	ldd	r5, Z+29	; 0x1d
      38:	1d 3c       	cpi	r17, 0xCD	; 205
      3a:	b7 cc       	rjmp	.-1682   	; 0xfffff9aa <__eeprom_end+0xff7ef9aa>
      3c:	57 63       	ori	r21, 0x37	; 55
      3e:	bd 6d       	ori	r27, 0xDD	; 221
      40:	ed fd       	.word	0xfded	; ????
      42:	75 3e       	cpi	r23, 0xE5	; 229
      44:	f6 17       	cp	r31, r22
      46:	72 31       	cpi	r23, 0x12	; 18
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	08 00       	.word	0x0008	; ????
      50:	00 00       	nop
      52:	be 92       	st	-X, r11
      54:	24 49       	sbci	r18, 0x94	; 148
      56:	12 3e       	cpi	r17, 0xE2	; 226
      58:	ab aa       	std	Y+51, r10	; 0x33
      5a:	aa 2a       	or	r10, r26
      5c:	be cd       	rjmp	.-1156   	; 0xfffffbda <__eeprom_end+0xff7efbda>
      5e:	cc cc       	rjmp	.-1640   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      60:	4c 3e       	cpi	r20, 0xEC	; 236
      62:	00 00       	nop
      64:	00 80       	ld	r0, Z
      66:	be ab       	std	Y+54, r27	; 0x36
      68:	aa aa       	std	Y+50, r10	; 0x32
      6a:	aa 3e       	cpi	r26, 0xEA	; 234
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	bf 00       	.word	0x00bf	; ????
      72:	00 00       	nop
      74:	80 3f       	cpi	r24, 0xF0	; 240
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	41 78       	andi	r20, 0x81	; 129
      7e:	d3 bb       	out	0x13, r29	; 19
      80:	43 87       	std	Z+11, r20	; 0x0b
      82:	d1 13       	cpse	r29, r17
      84:	3d 19       	sub	r19, r13
      86:	0e 3c       	cpi	r16, 0xCE	; 206
      88:	c3 bd       	out	0x23, r28	; 35
      8a:	42 82       	std	Z+2, r4	; 0x02
      8c:	ad 2b       	or	r26, r29
      8e:	3e 68       	ori	r19, 0x8E	; 142
      90:	ec 82       	std	Y+4, r14	; 0x04
      92:	76 be       	out	0x36, r7	; 54
      94:	d9 8f       	std	Y+25, r29	; 0x19
      96:	e1 a9       	ldd	r30, Z+49	; 0x31
      98:	3e 4c       	sbci	r19, 0xCE	; 206
      9a:	80 ef       	ldi	r24, 0xF0	; 240
      9c:	ff be       	out	0x3f, r15	; 63
      9e:	01 c4       	rjmp	.+2050   	; 0x8a2 <_Z41__static_initialization_and_destruction_0ii+0xae>
      a0:	ff 7f       	andi	r31, 0xFF	; 255
      a2:	3f 00       	.word	0x003f	; ????
      a4:	00 00       	nop
	...

000000a8 <__ctors_start>:
      a8:	fb 05       	cpc	r31, r11

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d4 e0       	ldi	r29, 0x04	; 4
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	10 e0       	ldi	r17, 0x00	; 0
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	e6 e4       	ldi	r30, 0x46	; 70
      be:	fe e1       	ldi	r31, 0x1E	; 30
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	ac 37       	cpi	r26, 0x7C	; 124
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	ac e7       	ldi	r26, 0x7C	; 124
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	a7 3a       	cpi	r26, 0xA7	; 167
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c5 e5       	ldi	r28, 0x55	; 85
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	03 c0       	rjmp	.+6      	; 0xea <__do_global_ctors+0xe>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	4c dc       	rcall	.-1896   	; 0xfffff982 <__eeprom_end+0xff7ef982>
      ea:	c4 35       	cpi	r28, 0x54	; 84
      ec:	d1 07       	cpc	r29, r17
      ee:	d1 f7       	brne	.-12     	; 0xe4 <__do_global_ctors+0x8>
      f0:	4e d5       	rcall	.+2716   	; 0xb8e <main>
      f2:	a7 ce       	rjmp	.-690    	; 0xfffffe42 <__eeprom_end+0xff7efe42>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <_ZN6BufferC1Eh>:
		free((uint8_t*)this->buffer[i]);
	}
	
	free((uint8_t**)this->buffer);
	free((uint8_t*)this->dataSize);
}
      f6:	ff 92       	push	r15
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
     100:	8c 01       	movw	r16, r24
     102:	f6 2e       	mov	r15, r22
     104:	fc 01       	movw	r30, r24
     106:	60 83       	st	Z, r22
     108:	16 82       	std	Z+6, r1	; 0x06
     10a:	15 82       	std	Z+5, r1	; 0x05
     10c:	17 82       	std	Z+7, r1	; 0x07
     10e:	10 86       	std	Z+8, r1	; 0x08
     110:	cf 2d       	mov	r28, r15
     112:	d0 e0       	ldi	r29, 0x00	; 0
     114:	cc 0f       	add	r28, r28
     116:	dd 1f       	adc	r29, r29
     118:	ce 01       	movw	r24, r28
     11a:	39 dc       	rcall	.-1934   	; 0xfffff98e <__eeprom_end+0xff7ef98e>
     11c:	f8 01       	movw	r30, r16
     11e:	92 83       	std	Z+2, r25	; 0x02
     120:	81 83       	std	Z+1, r24	; 0x01
     122:	00 97       	sbiw	r24, 0x00	; 0
     124:	a9 f3       	breq	.-22     	; 0x110 <_ZN6BufferC1Eh+0x1a>
     126:	ae 01       	movw	r20, r28
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	70 e0       	ldi	r23, 0x00	; 0
     12c:	19 de       	rcall	.-974    	; 0xfffffd60 <__eeprom_end+0xff7efd60>
     12e:	f8 01       	movw	r30, r16
     130:	80 81       	ld	r24, Z
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	2c dc       	rcall	.-1960   	; 0xfffff98e <__eeprom_end+0xff7ef98e>
     136:	f8 01       	movw	r30, r16
     138:	94 83       	std	Z+4, r25	; 0x04
     13a:	83 83       	std	Z+3, r24	; 0x03
     13c:	89 2b       	or	r24, r25
     13e:	b9 f3       	breq	.-18     	; 0x12e <_ZN6BufferC1Eh+0x38>
     140:	df 91       	pop	r29
     142:	cf 91       	pop	r28
     144:	1f 91       	pop	r17
     146:	0f 91       	pop	r16
     148:	ff 90       	pop	r15
     14a:	08 95       	ret

0000014c <_ZN6Buffer4ReadEv>:
     14c:	fc 01       	movw	r30, r24
     14e:	21 81       	ldd	r18, Z+1	; 0x01
     150:	32 81       	ldd	r19, Z+2	; 0x02
     152:	80 85       	ldd	r24, Z+8	; 0x08
     154:	e8 2f       	mov	r30, r24
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	ee 0f       	add	r30, r30
     15a:	ff 1f       	adc	r31, r31
     15c:	e2 0f       	add	r30, r18
     15e:	f3 1f       	adc	r31, r19
     160:	80 81       	ld	r24, Z
     162:	91 81       	ldd	r25, Z+1	; 0x01
     164:	08 95       	ret

00000166 <_ZN6Buffer9BlockSizeEv>:
     166:	fc 01       	movw	r30, r24
     168:	86 81       	ldd	r24, Z+6	; 0x06
     16a:	88 23       	and	r24, r24
     16c:	39 f0       	breq	.+14     	; 0x17c <_ZN6Buffer9BlockSizeEv+0x16>
     16e:	83 81       	ldd	r24, Z+3	; 0x03
     170:	94 81       	ldd	r25, Z+4	; 0x04
     172:	20 85       	ldd	r18, Z+8	; 0x08
     174:	fc 01       	movw	r30, r24
     176:	e2 0f       	add	r30, r18
     178:	f1 1d       	adc	r31, r1
     17a:	80 81       	ld	r24, Z
     17c:	08 95       	ret

0000017e <_ZN6Buffer10ClearBlockEv>:
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	ec 01       	movw	r28, r24
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	3a 81       	ldd	r19, Y+2	; 0x02
     188:	88 85       	ldd	r24, Y+8	; 0x08
     18a:	e8 2f       	mov	r30, r24
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	ee 0f       	add	r30, r30
     190:	ff 1f       	adc	r31, r31
     192:	e2 0f       	add	r30, r18
     194:	f3 1f       	adc	r31, r19
     196:	80 81       	ld	r24, Z
     198:	91 81       	ldd	r25, Z+1	; 0x01
     19a:	91 dc       	rcall	.-1758   	; 0xfffffabe <__eeprom_end+0xff7efabe>
     19c:	88 85       	ldd	r24, Y+8	; 0x08
     19e:	8f 5f       	subi	r24, 0xFF	; 255
     1a0:	68 81       	ld	r22, Y
     1a2:	b5 db       	rcall	.-2198   	; 0xfffff90e <__eeprom_end+0xff7ef90e>
     1a4:	98 87       	std	Y+8, r25	; 0x08
     1a6:	8e 81       	ldd	r24, Y+6	; 0x06
     1a8:	81 50       	subi	r24, 0x01	; 1
     1aa:	8e 83       	std	Y+6, r24	; 0x06
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <_ZN6BuffernwEj>:

void* Buffer::operator new(size_t size)
{
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     1b8:	ce 01       	movw	r24, r28
     1ba:	e9 db       	rcall	.-2094   	; 0xfffff98e <__eeprom_end+0xff7ef98e>
	}while(ptr == nullptr);
     1bc:	00 97       	sbiw	r24, 0x00	; 0
     1be:	e1 f3       	breq	.-8      	; 0x1b8 <_ZN6BuffernwEj+0x6>
	
	return ptr;
}
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	08 95       	ret

000001c6 <_ZN7HD44780nwEj>:
	
	for(uint8_t i = 0; i < 7; i++)
	{
		SendByte(symbol[i], LCD_Data);
	}
}
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	ec 01       	movw	r28, r24
     1cc:	ce 01       	movw	r24, r28
     1ce:	df db       	rcall	.-2114   	; 0xfffff98e <__eeprom_end+0xff7ef98e>
     1d0:	00 97       	sbiw	r24, 0x00	; 0
     1d2:	e1 f3       	breq	.-8      	; 0x1cc <_ZN7HD44780nwEj+0x6>
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	08 95       	ret

000001da <_ZN7HD4478012SelectDeviceEv>:
     1da:	fc 01       	movw	r30, r24
     1dc:	84 81       	ldd	r24, Z+4	; 0x04
     1de:	95 81       	ldd	r25, Z+5	; 0x05
     1e0:	38 d5       	rcall	.+2672   	; 0xc52 <_ZN4Port3SetEv>
     1e2:	08 95       	ret

000001e4 <_ZN7HD447809LatchDataEv>:
     1e4:	fc 01       	movw	r30, r24
     1e6:	84 81       	ldd	r24, Z+4	; 0x04
     1e8:	95 81       	ldd	r25, Z+5	; 0x05
     1ea:	45 d5       	rcall	.+2698   	; 0xc76 <_ZN4Port5ClearEv>
     1ec:	08 95       	ret

000001ee <_ZN7HD447804WaitEv>:
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	ec 01       	movw	r28, r24
     1fa:	f1 2c       	mov	r15, r1
     1fc:	83 e0       	ldi	r24, 0x03	; 3
     1fe:	8f 15       	cp	r24, r15
     200:	90 f0       	brcs	.+36     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
     202:	0f 2d       	mov	r16, r15
     204:	10 e0       	ldi	r17, 0x00	; 0
     206:	0d 5f       	subi	r16, 0xFD	; 253
     208:	1f 4f       	sbci	r17, 0xFF	; 255
     20a:	00 0f       	add	r16, r16
     20c:	11 1f       	adc	r17, r17
     20e:	0c 0f       	add	r16, r28
     210:	1d 1f       	adc	r17, r29
     212:	f8 01       	movw	r30, r16
     214:	80 81       	ld	r24, Z
     216:	91 81       	ldd	r25, Z+1	; 0x01
     218:	1c d5       	rcall	.+2616   	; 0xc52 <_ZN4Port3SetEv>
     21a:	f8 01       	movw	r30, r16
     21c:	80 81       	ld	r24, Z
     21e:	91 81       	ldd	r25, Z+1	; 0x01
     220:	f0 d4       	rcall	.+2528   	; 0xc02 <_ZN4Port10SetAsInputEv>
     222:	f3 94       	inc	r15
     224:	eb cf       	rjmp	.-42     	; 0x1fc <_ZN7HD447804WaitEv+0xe>
     226:	8a 81       	ldd	r24, Y+2	; 0x02
     228:	9b 81       	ldd	r25, Y+3	; 0x03
     22a:	13 d5       	rcall	.+2598   	; 0xc52 <_ZN4Port3SetEv>
     22c:	88 81       	ld	r24, Y
     22e:	99 81       	ldd	r25, Y+1	; 0x01
     230:	22 d5       	rcall	.+2628   	; 0xc76 <_ZN4Port5ClearEv>
     232:	ce 01       	movw	r24, r28
     234:	d2 df       	rcall	.-92     	; 0x1da <_ZN7HD4478012SelectDeviceEv>
     236:	8c 85       	ldd	r24, Y+12	; 0x0c
     238:	9d 85       	ldd	r25, Y+13	; 0x0d
     23a:	43 d5       	rcall	.+2694   	; 0xcc2 <_ZN4Port5IsSetEv>
     23c:	18 2f       	mov	r17, r24
     23e:	ce 01       	movw	r24, r28
     240:	d1 df       	rcall	.-94     	; 0x1e4 <_ZN7HD447809LatchDataEv>
     242:	ce 01       	movw	r24, r28
     244:	ca df       	rcall	.-108    	; 0x1da <_ZN7HD4478012SelectDeviceEv>
     246:	ce 01       	movw	r24, r28
     248:	cd df       	rcall	.-102    	; 0x1e4 <_ZN7HD447809LatchDataEv>
     24a:	11 11       	cpse	r17, r1
     24c:	f2 cf       	rjmp	.-28     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
     24e:	f1 2c       	mov	r15, r1
     250:	f3 e0       	ldi	r31, 0x03	; 3
     252:	ff 15       	cp	r31, r15
     254:	90 f0       	brcs	.+36     	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
     256:	0f 2d       	mov	r16, r15
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	0d 5f       	subi	r16, 0xFD	; 253
     25c:	1f 4f       	sbci	r17, 0xFF	; 255
     25e:	00 0f       	add	r16, r16
     260:	11 1f       	adc	r17, r17
     262:	0c 0f       	add	r16, r28
     264:	1d 1f       	adc	r17, r29
     266:	f8 01       	movw	r30, r16
     268:	80 81       	ld	r24, Z
     26a:	91 81       	ldd	r25, Z+1	; 0x01
     26c:	df d4       	rcall	.+2494   	; 0xc2c <_ZN4Port11SetAsOutputEv>
     26e:	f8 01       	movw	r30, r16
     270:	80 81       	ld	r24, Z
     272:	91 81       	ldd	r25, Z+1	; 0x01
     274:	00 d5       	rcall	.+2560   	; 0xc76 <_ZN4Port5ClearEv>
     276:	f3 94       	inc	r15
     278:	eb cf       	rjmp	.-42     	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
     27a:	8a 81       	ldd	r24, Y+2	; 0x02
     27c:	9b 81       	ldd	r25, Y+3	; 0x03
     27e:	fb d4       	rcall	.+2550   	; 0xc76 <_ZN4Port5ClearEv>
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	08 95       	ret

0000028c <_ZN7HD447808SendByteEc16HD44780_DataType>:
     28c:	ef 92       	push	r14
     28e:	ff 92       	push	r15
     290:	0f 93       	push	r16
     292:	1f 93       	push	r17
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	ec 01       	movw	r28, r24
     29a:	e6 2e       	mov	r14, r22
     29c:	14 2f       	mov	r17, r20
     29e:	a7 df       	rcall	.-178    	; 0x1ee <_ZN7HD447804WaitEv>
     2a0:	11 30       	cpi	r17, 0x01	; 1
     2a2:	21 f4       	brne	.+8      	; 0x2ac <_ZN7HD447808SendByteEc16HD44780_DataType+0x20>
     2a4:	88 81       	ld	r24, Y
     2a6:	99 81       	ldd	r25, Y+1	; 0x01
     2a8:	e6 d4       	rcall	.+2508   	; 0xc76 <_ZN4Port5ClearEv>
     2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <_ZN7HD447808SendByteEc16HD44780_DataType+0x2a>
     2ac:	11 11       	cpse	r17, r1
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <_ZN7HD447808SendByteEc16HD44780_DataType+0x2a>
     2b0:	88 81       	ld	r24, Y
     2b2:	99 81       	ldd	r25, Y+1	; 0x01
     2b4:	ce d4       	rcall	.+2460   	; 0xc52 <_ZN4Port3SetEv>
     2b6:	0e 2d       	mov	r16, r14
     2b8:	10 e0       	ldi	r17, 0x00	; 0
     2ba:	15 95       	asr	r17
     2bc:	07 95       	ror	r16
     2be:	15 95       	asr	r17
     2c0:	07 95       	ror	r16
     2c2:	15 95       	asr	r17
     2c4:	07 95       	ror	r16
     2c6:	15 95       	asr	r17
     2c8:	07 95       	ror	r16
     2ca:	f1 2c       	mov	r15, r1
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	8f 15       	cp	r24, r15
     2d0:	58 f1       	brcs	.+86     	; 0x328 <_ZN7HD447808SendByteEc16HD44780_DataType+0x9c>
     2d2:	ce 01       	movw	r24, r28
     2d4:	82 df       	rcall	.-252    	; 0x1da <_ZN7HD4478012SelectDeviceEv>
     2d6:	10 e0       	ldi	r17, 0x00	; 0
     2d8:	14 30       	cpi	r17, 0x04	; 4
     2da:	08 f5       	brcc	.+66     	; 0x31e <_ZN7HD447808SendByteEc16HD44780_DataType+0x92>
     2dc:	81 2f       	mov	r24, r17
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	20 2f       	mov	r18, r16
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	01 2e       	mov	r0, r17
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <_ZN7HD447808SendByteEc16HD44780_DataType+0x60>
     2e8:	35 95       	asr	r19
     2ea:	27 95       	ror	r18
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <_ZN7HD447808SendByteEc16HD44780_DataType+0x5c>
     2f0:	20 ff       	sbrs	r18, 0
     2f2:	0a c0       	rjmp	.+20     	; 0x308 <_ZN7HD447808SendByteEc16HD44780_DataType+0x7c>
     2f4:	fc 01       	movw	r30, r24
     2f6:	33 96       	adiw	r30, 0x03	; 3
     2f8:	ee 0f       	add	r30, r30
     2fa:	ff 1f       	adc	r31, r31
     2fc:	ec 0f       	add	r30, r28
     2fe:	fd 1f       	adc	r31, r29
     300:	80 81       	ld	r24, Z
     302:	91 81       	ldd	r25, Z+1	; 0x01
     304:	a6 d4       	rcall	.+2380   	; 0xc52 <_ZN4Port3SetEv>
     306:	09 c0       	rjmp	.+18     	; 0x31a <_ZN7HD447808SendByteEc16HD44780_DataType+0x8e>
     308:	fc 01       	movw	r30, r24
     30a:	33 96       	adiw	r30, 0x03	; 3
     30c:	ee 0f       	add	r30, r30
     30e:	ff 1f       	adc	r31, r31
     310:	ec 0f       	add	r30, r28
     312:	fd 1f       	adc	r31, r29
     314:	80 81       	ld	r24, Z
     316:	91 81       	ldd	r25, Z+1	; 0x01
     318:	ae d4       	rcall	.+2396   	; 0xc76 <_ZN4Port5ClearEv>
     31a:	1f 5f       	subi	r17, 0xFF	; 255
     31c:	dd cf       	rjmp	.-70     	; 0x2d8 <_ZN7HD447808SendByteEc16HD44780_DataType+0x4c>
     31e:	ce 01       	movw	r24, r28
     320:	61 df       	rcall	.-318    	; 0x1e4 <_ZN7HD447809LatchDataEv>
     322:	f3 94       	inc	r15
     324:	0e 2d       	mov	r16, r14
     326:	d2 cf       	rjmp	.-92     	; 0x2cc <_ZN7HD447808SendByteEc16HD44780_DataType+0x40>
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	08 95       	ret

00000336 <_ZN7HD447802OnEv>:
     336:	41 e0       	ldi	r20, 0x01	; 1
     338:	6c e0       	ldi	r22, 0x0C	; 12
     33a:	a8 df       	rcall	.-176    	; 0x28c <_ZN7HD447808SendByteEc16HD44780_DataType>
     33c:	08 95       	ret

0000033e <_ZN7HD447803OffEv>:
     33e:	41 e0       	ldi	r20, 0x01	; 1
     340:	68 e0       	ldi	r22, 0x08	; 8
     342:	a4 df       	rcall	.-184    	; 0x28c <_ZN7HD447808SendByteEc16HD44780_DataType>
     344:	08 95       	ret

00000346 <_ZN7HD447805ClearEv>:
     346:	41 e0       	ldi	r20, 0x01	; 1
     348:	61 e0       	ldi	r22, 0x01	; 1
     34a:	a0 df       	rcall	.-192    	; 0x28c <_ZN7HD447808SendByteEc16HD44780_DataType>
     34c:	08 95       	ret

0000034e <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type>:
     34e:	2f 92       	push	r2
     350:	3f 92       	push	r3
     352:	4f 92       	push	r4
     354:	5f 92       	push	r5
     356:	6f 92       	push	r6
     358:	7f 92       	push	r7
     35a:	8f 92       	push	r8
     35c:	9f 92       	push	r9
     35e:	af 92       	push	r10
     360:	bf 92       	push	r11
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	3c 01       	movw	r6, r24
     378:	fb 01       	movw	r30, r22
     37a:	dc 01       	movw	r26, r24
     37c:	15 96       	adiw	r26, 0x05	; 5
     37e:	3c 93       	st	X, r19
     380:	2e 93       	st	-X, r18
     382:	14 97       	sbiw	r26, 0x04	; 4
     384:	18 01       	movw	r2, r16
     386:	24 01       	movw	r4, r8
     388:	56 94       	lsr	r5
     38a:	47 94       	ror	r4
     38c:	56 94       	lsr	r5
     38e:	47 94       	ror	r4
     390:	92 01       	movw	r18, r4
     392:	ab e7       	ldi	r26, 0x7B	; 123
     394:	b4 e1       	ldi	r27, 0x14	; 20
     396:	e9 da       	rcall	.-2606   	; 0xfffff96a <__eeprom_end+0xff7ef96a>
     398:	8c 01       	movw	r16, r24
     39a:	16 95       	lsr	r17
     39c:	07 95       	ror	r16
     39e:	d3 01       	movw	r26, r6
     3a0:	1e 96       	adiw	r26, 0x0e	; 14
     3a2:	0c 93       	st	X, r16
     3a4:	24 e6       	ldi	r18, 0x64	; 100
     3a6:	20 9f       	mul	r18, r16
     3a8:	c0 01       	movw	r24, r0
     3aa:	21 9f       	mul	r18, r17
     3ac:	90 0d       	add	r25, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	88 1a       	sub	r8, r24
     3b2:	99 0a       	sbc	r9, r25
     3b4:	d3 01       	movw	r26, r6
     3b6:	1f 96       	adiw	r26, 0x0f	; 15
     3b8:	8c 92       	st	X, r8
     3ba:	1f 97       	sbiw	r26, 0x0f	; 15
     3bc:	11 96       	adiw	r26, 0x01	; 1
     3be:	fc 93       	st	X, r31
     3c0:	ee 93       	st	-X, r30
     3c2:	13 96       	adiw	r26, 0x03	; 3
     3c4:	5c 93       	st	X, r21
     3c6:	4e 93       	st	-X, r20
     3c8:	12 97       	sbiw	r26, 0x02	; 2
     3ca:	17 96       	adiw	r26, 0x07	; 7
     3cc:	3c 92       	st	X, r3
     3ce:	2e 92       	st	-X, r2
     3d0:	16 97       	sbiw	r26, 0x06	; 6
     3d2:	19 96       	adiw	r26, 0x09	; 9
     3d4:	fc 92       	st	X, r15
     3d6:	ee 92       	st	-X, r14
     3d8:	18 97       	sbiw	r26, 0x08	; 8
     3da:	1b 96       	adiw	r26, 0x0b	; 11
     3dc:	dc 92       	st	X, r13
     3de:	ce 92       	st	-X, r12
     3e0:	1a 97       	sbiw	r26, 0x0a	; 10
     3e2:	1d 96       	adiw	r26, 0x0d	; 13
     3e4:	bc 92       	st	X, r11
     3e6:	ae 92       	st	-X, r10
     3e8:	1c 97       	sbiw	r26, 0x0c	; 12
     3ea:	cf 01       	movw	r24, r30
     3ec:	1f d4       	rcall	.+2110   	; 0xc2c <_ZN4Port11SetAsOutputEv>
     3ee:	f3 01       	movw	r30, r6
     3f0:	82 81       	ldd	r24, Z+2	; 0x02
     3f2:	93 81       	ldd	r25, Z+3	; 0x03
     3f4:	1b d4       	rcall	.+2102   	; 0xc2c <_ZN4Port11SetAsOutputEv>
     3f6:	d3 01       	movw	r26, r6
     3f8:	14 96       	adiw	r26, 0x04	; 4
     3fa:	8d 91       	ld	r24, X+
     3fc:	9c 91       	ld	r25, X
     3fe:	15 97       	sbiw	r26, 0x05	; 5
     400:	15 d4       	rcall	.+2090   	; 0xc2c <_ZN4Port11SetAsOutputEv>
     402:	f3 01       	movw	r30, r6
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	36 d4       	rcall	.+2156   	; 0xc76 <_ZN4Port5ClearEv>
     40a:	f1 2c       	mov	r15, r1
     40c:	f3 e0       	ldi	r31, 0x03	; 3
     40e:	ff 15       	cp	r31, r15
     410:	90 f0       	brcs	.+36     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
     412:	0f 2d       	mov	r16, r15
     414:	10 e0       	ldi	r17, 0x00	; 0
     416:	0d 5f       	subi	r16, 0xFD	; 253
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	00 0f       	add	r16, r16
     41c:	11 1f       	adc	r17, r17
     41e:	06 0d       	add	r16, r6
     420:	17 1d       	adc	r17, r7
     422:	d8 01       	movw	r26, r16
     424:	8d 91       	ld	r24, X+
     426:	9c 91       	ld	r25, X
     428:	01 d4       	rcall	.+2050   	; 0xc2c <_ZN4Port11SetAsOutputEv>
     42a:	f8 01       	movw	r30, r16
     42c:	80 81       	ld	r24, Z
     42e:	91 81       	ldd	r25, Z+1	; 0x01
     430:	22 d4       	rcall	.+2116   	; 0xc76 <_ZN4Port5ClearEv>
     432:	f3 94       	inc	r15
     434:	eb cf       	rjmp	.-42     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
     436:	d3 01       	movw	r26, r6
     438:	16 96       	adiw	r26, 0x06	; 6
     43a:	8d 91       	ld	r24, X+
     43c:	9c 91       	ld	r25, X
     43e:	17 97       	sbiw	r26, 0x07	; 7
     440:	08 d4       	rcall	.+2064   	; 0xc52 <_ZN4Port3SetEv>
     442:	f3 01       	movw	r30, r6
     444:	80 85       	ldd	r24, Z+8	; 0x08
     446:	91 85       	ldd	r25, Z+9	; 0x09
     448:	04 d4       	rcall	.+2056   	; 0xc52 <_ZN4Port3SetEv>
     44a:	10 e0       	ldi	r17, 0x00	; 0
     44c:	12 30       	cpi	r17, 0x02	; 2
     44e:	60 f4       	brcc	.+24     	; 0x468 <__stack+0x9>
     450:	c3 01       	movw	r24, r6
     452:	c3 de       	rcall	.-634    	; 0x1da <_ZN7HD4478012SelectDeviceEv>
     454:	c3 01       	movw	r24, r6
     456:	c6 de       	rcall	.-628    	; 0x1e4 <_ZN7HD447809LatchDataEv>
     458:	8f e0       	ldi	r24, 0x0F	; 15
     45a:	97 e2       	ldi	r25, 0x27	; 39
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	f1 f7       	brne	.-4      	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__stack+0x3>
     462:	00 00       	nop
     464:	1f 5f       	subi	r17, 0xFF	; 255
     466:	f2 cf       	rjmp	.-28     	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
     468:	d3 01       	movw	r26, r6
     46a:	16 96       	adiw	r26, 0x06	; 6
     46c:	8d 91       	ld	r24, X+
     46e:	9c 91       	ld	r25, X
     470:	17 97       	sbiw	r26, 0x07	; 7
     472:	01 d4       	rcall	.+2050   	; 0xc76 <_ZN4Port5ClearEv>
     474:	c3 01       	movw	r24, r6
     476:	b1 de       	rcall	.-670    	; 0x1da <_ZN7HD4478012SelectDeviceEv>
     478:	c3 01       	movw	r24, r6
     47a:	b4 de       	rcall	.-664    	; 0x1e4 <_ZN7HD447809LatchDataEv>
     47c:	e7 ec       	ldi	r30, 0xC7	; 199
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	31 97       	sbiw	r30, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <__stack+0x21>
     484:	00 c0       	rjmp	.+0      	; 0x486 <__stack+0x27>
     486:	00 00       	nop
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	68 e2       	ldi	r22, 0x28	; 40
     48c:	c3 01       	movw	r24, r6
     48e:	fe de       	rcall	.-516    	; 0x28c <_ZN7HD447808SendByteEc16HD44780_DataType>
     490:	c3 01       	movw	r24, r6
     492:	55 df       	rcall	.-342    	; 0x33e <_ZN7HD447803OffEv>
     494:	c3 01       	movw	r24, r6
     496:	57 df       	rcall	.-338    	; 0x346 <_ZN7HD447805ClearEv>
     498:	41 e0       	ldi	r20, 0x01	; 1
     49a:	66 e0       	ldi	r22, 0x06	; 6
     49c:	c3 01       	movw	r24, r6
     49e:	f6 de       	rcall	.-532    	; 0x28c <_ZN7HD447808SendByteEc16HD44780_DataType>
     4a0:	c3 01       	movw	r24, r6
     4a2:	49 df       	rcall	.-366    	; 0x336 <_ZN7HD447802OnEv>
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	ff 90       	pop	r15
     4ae:	ef 90       	pop	r14
     4b0:	df 90       	pop	r13
     4b2:	cf 90       	pop	r12
     4b4:	bf 90       	pop	r11
     4b6:	af 90       	pop	r10
     4b8:	9f 90       	pop	r9
     4ba:	8f 90       	pop	r8
     4bc:	7f 90       	pop	r7
     4be:	6f 90       	pop	r6
     4c0:	5f 90       	pop	r5
     4c2:	4f 90       	pop	r4
     4c4:	3f 90       	pop	r3
     4c6:	2f 90       	pop	r2
     4c8:	08 95       	ret

000004ca <_ZN7HD4478017SetCursorPositionEhh>:
	}
}

void HD44780::SetCursorPosition(uint8_t slot, uint8_t line)
{
	if(line > 1)
     4ca:	42 30       	cpi	r20, 0x02	; 2
     4cc:	20 f0       	brcs	.+8      	; 0x4d6 <_ZN7HD4478017SetCursorPositionEhh+0xc>
	{
		line %= 2;
     4ce:	41 70       	andi	r20, 0x01	; 1
		slot += this->symbols;
     4d0:	fc 01       	movw	r30, r24
     4d2:	26 85       	ldd	r18, Z+14	; 0x0e
     4d4:	62 0f       	add	r22, r18
	}
	
	uint8_t adress = 0x40 * line;
	adress += slot;
     4d6:	f0 e4       	ldi	r31, 0x40	; 64
     4d8:	4f 9f       	mul	r20, r31
     4da:	60 0d       	add	r22, r0
     4dc:	11 24       	eor	r1, r1
	adress |= 0x80;
     4de:	60 68       	ori	r22, 0x80	; 128
	SendByte(adress, LCD_Command);
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	d4 de       	rcall	.-600    	; 0x28c <_ZN7HD447808SendByteEc16HD44780_DataType>
     4e4:	08 95       	ret

000004e6 <_ZN7HD4478014CursorOversideEhh>:
}

bool HD44780::CursorOverside(uint8_t slot, uint8_t line)
{
	return (slot >= this->symbols) || (line >= this->lines);
     4e6:	fc 01       	movw	r30, r24
     4e8:	26 85       	ldd	r18, Z+14	; 0x0e
     4ea:	62 17       	cp	r22, r18
     4ec:	28 f4       	brcc	.+10     	; 0x4f8 <_ZN7HD4478014CursorOversideEhh+0x12>
     4ee:	87 85       	ldd	r24, Z+15	; 0x0f
     4f0:	48 17       	cp	r20, r24
     4f2:	20 f0       	brcs	.+8      	; 0x4fc <_ZN7HD4478014CursorOversideEhh+0x16>
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	08 95       	ret
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	08 95       	ret
     4fc:	80 e0       	ldi	r24, 0x00	; 0
}
     4fe:	08 95       	ret

00000500 <_ZN7HD4478015NormaliseLengthERhh>:

void HD44780::NormaliseLength(uint8_t &length, uint8_t slot)
{
	uint8_t *_length = (uint8_t *)&length;
	*_length = slot + *_length <= this->symbols ? *_length : this->symbols - slot;
     500:	fb 01       	movw	r30, r22
     502:	50 81       	ld	r21, Z
     504:	25 2f       	mov	r18, r21
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	24 0f       	add	r18, r20
     50a:	31 1d       	adc	r19, r1
     50c:	fc 01       	movw	r30, r24
     50e:	86 85       	ldd	r24, Z+14	; 0x0e
     510:	e8 2f       	mov	r30, r24
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	e2 17       	cp	r30, r18
     516:	f3 07       	cpc	r31, r19
     518:	14 f4       	brge	.+4      	; 0x51e <_ZN7HD4478015NormaliseLengthERhh+0x1e>
     51a:	58 2f       	mov	r21, r24
     51c:	54 1b       	sub	r21, r20
     51e:	fb 01       	movw	r30, r22
     520:	50 83       	st	Z, r21
     522:	08 95       	ret

00000524 <_ZN7HD447809ClearAreaEhhh>:
{
	SendByte(0b00000001, LCD_Command);
}

void HD44780::ClearArea(uint8_t length, uint8_t slot, uint8_t line)
{
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	1f 92       	push	r1
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	7c 01       	movw	r14, r24
     538:	69 83       	std	Y+1, r22	; 0x01
     53a:	14 2f       	mov	r17, r20
     53c:	02 2f       	mov	r16, r18
	if(CursorOverside(slot, line)) return;
     53e:	42 2f       	mov	r20, r18
     540:	61 2f       	mov	r22, r17
     542:	d1 df       	rcall	.-94     	; 0x4e6 <_ZN7HD4478014CursorOversideEhh>
     544:	81 11       	cpse	r24, r1
     546:	14 c0       	rjmp	.+40     	; 0x570 <_ZN7HD447809ClearAreaEhhh+0x4c>
	SetCursorPosition(slot, line);	
     548:	40 2f       	mov	r20, r16
     54a:	61 2f       	mov	r22, r17
     54c:	c7 01       	movw	r24, r14
     54e:	bd df       	rcall	.-134    	; 0x4ca <_ZN7HD4478017SetCursorPositionEhh>
	
	NormaliseLength(length, slot);
     550:	41 2f       	mov	r20, r17
     552:	be 01       	movw	r22, r28
     554:	6f 5f       	subi	r22, 0xFF	; 255
     556:	7f 4f       	sbci	r23, 0xFF	; 255
     558:	c7 01       	movw	r24, r14
     55a:	d2 df       	rcall	.-92     	; 0x500 <_ZN7HD4478015NormaliseLengthERhh>
	for(uint8_t i = 0; i < length; i++) SendByte(' ', LCD_Data);
     55c:	10 e0       	ldi	r17, 0x00	; 0
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	18 17       	cp	r17, r24
     562:	30 f4       	brcc	.+12     	; 0x570 <_ZN7HD447809ClearAreaEhhh+0x4c>
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	60 e2       	ldi	r22, 0x20	; 32
     568:	c7 01       	movw	r24, r14
     56a:	90 de       	rcall	.-736    	; 0x28c <_ZN7HD447808SendByteEc16HD44780_DataType>
     56c:	1f 5f       	subi	r17, 0xFF	; 255
     56e:	f7 cf       	rjmp	.-18     	; 0x55e <_ZN7HD447809ClearAreaEhhh+0x3a>
}
     570:	0f 90       	pop	r0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	08 95       	ret

00000580 <_ZN7HD447805PrintEPKchh>:
		SendByte(symbol[i], LCD_Data);
	}
}

void HD44780::Print(const char *text, uint8_t slot, uint8_t line)
{
     580:	af 92       	push	r10
     582:	bf 92       	push	r11
     584:	cf 92       	push	r12
     586:	df 92       	push	r13
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	1f 92       	push	r1
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	5c 01       	movw	r10, r24
     59a:	8b 01       	movw	r16, r22
     59c:	f4 2e       	mov	r15, r20
     59e:	d2 2e       	mov	r13, r18
	if(CursorOverside(slot, line)) return;
     5a0:	42 2f       	mov	r20, r18
     5a2:	6f 2d       	mov	r22, r15
     5a4:	a0 df       	rcall	.-192    	; 0x4e6 <_ZN7HD4478014CursorOversideEhh>
     5a6:	81 11       	cpse	r24, r1
     5a8:	22 c0       	rjmp	.+68     	; 0x5ee <_ZN7HD447805PrintEPKchh+0x6e>
	SetCursorPosition(slot, line);
     5aa:	4d 2d       	mov	r20, r13
     5ac:	6f 2d       	mov	r22, r15
     5ae:	c5 01       	movw	r24, r10
     5b0:	8c df       	rcall	.-232    	; 0x4ca <_ZN7HD4478017SetCursorPositionEhh>
	
	uint8_t length = strlen(text);
     5b2:	f8 01       	movw	r30, r16
     5b4:	01 90       	ld	r0, Z+
     5b6:	00 20       	and	r0, r0
     5b8:	e9 f7       	brne	.-6      	; 0x5b4 <_ZN7HD447805PrintEPKchh+0x34>
     5ba:	31 97       	sbiw	r30, 0x01	; 1
     5bc:	e0 1b       	sub	r30, r16
     5be:	f1 0b       	sbc	r31, r17
     5c0:	e9 83       	std	Y+1, r30	; 0x01
	NormaliseLength(length, slot);
     5c2:	4f 2d       	mov	r20, r15
     5c4:	be 01       	movw	r22, r28
     5c6:	6f 5f       	subi	r22, 0xFF	; 255
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	c5 01       	movw	r24, r10
     5cc:	99 df       	rcall	.-206    	; 0x500 <_ZN7HD4478015NormaliseLengthERhh>
	for(uint8_t i = 0; i < length; i++)
     5ce:	f1 2c       	mov	r15, r1
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	f8 16       	cp	r15, r24
     5d4:	60 f4       	brcc	.+24     	; 0x5ee <_ZN7HD447805PrintEPKchh+0x6e>
	{
		SendByte(*text++, LCD_Data);
     5d6:	68 01       	movw	r12, r16
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	c8 1a       	sub	r12, r24
     5dc:	d8 0a       	sbc	r13, r24
     5de:	f8 01       	movw	r30, r16
     5e0:	60 81       	ld	r22, Z
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	c5 01       	movw	r24, r10
     5e6:	52 de       	rcall	.-860    	; 0x28c <_ZN7HD447808SendByteEc16HD44780_DataType>
	if(CursorOverside(slot, line)) return;
	SetCursorPosition(slot, line);
	
	uint8_t length = strlen(text);
	NormaliseLength(length, slot);
	for(uint8_t i = 0; i < length; i++)
     5e8:	f3 94       	inc	r15
	{
		SendByte(*text++, LCD_Data);
     5ea:	86 01       	movw	r16, r12
	if(CursorOverside(slot, line)) return;
	SetCursorPosition(slot, line);
	
	uint8_t length = strlen(text);
	NormaliseLength(length, slot);
	for(uint8_t i = 0; i < length; i++)
     5ec:	f1 cf       	rjmp	.-30     	; 0x5d0 <_ZN7HD447805PrintEPKchh+0x50>
	{
		SendByte(*text++, LCD_Data);
	}
}
     5ee:	0f 90       	pop	r0
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	08 95       	ret

00000604 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment>:

void HD44780::PrintAlignment(const char* text, uint8_t line, HD44780_Alignment alignment)
{
     604:	54 2f       	mov	r21, r20
	uint8_t slot = 0;
	
	switch(alignment)
     606:	21 30       	cpi	r18, 0x01	; 1
     608:	19 f0       	breq	.+6      	; 0x610 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0xc>
     60a:	22 30       	cpi	r18, 0x02	; 2
     60c:	69 f0       	breq	.+26     	; 0x628 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x24>
     60e:	1c c0       	rjmp	.+56     	; 0x648 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x44>
			slot = 0;
		}break;
		
		case RIGHT_SIDE:
		{
			slot = this->symbols - strlen(text);
     610:	fc 01       	movw	r30, r24
     612:	26 85       	ldd	r18, Z+14	; 0x0e
     614:	fb 01       	movw	r30, r22
     616:	01 90       	ld	r0, Z+
     618:	00 20       	and	r0, r0
     61a:	e9 f7       	brne	.-6      	; 0x616 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x12>
     61c:	31 97       	sbiw	r30, 0x01	; 1
     61e:	e6 1b       	sub	r30, r22
     620:	f7 0b       	sbc	r31, r23
     622:	42 2f       	mov	r20, r18
     624:	4e 1b       	sub	r20, r30
		}break;
     626:	11 c0       	rjmp	.+34     	; 0x64a <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x46>
		
		case CENTER_SCREEN:
		{
			slot = (this->symbols - strlen(text)) / 2;
     628:	fc 01       	movw	r30, r24
     62a:	26 85       	ldd	r18, Z+14	; 0x0e
     62c:	fb 01       	movw	r30, r22
     62e:	01 90       	ld	r0, Z+
     630:	00 20       	and	r0, r0
     632:	e9 f7       	brne	.-6      	; 0x62e <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x2a>
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	e6 1b       	sub	r30, r22
     638:	f7 0b       	sbc	r31, r23
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	2e 1b       	sub	r18, r30
     63e:	3f 0b       	sbc	r19, r31
     640:	36 95       	lsr	r19
     642:	27 95       	ror	r18
     644:	42 2f       	mov	r20, r18
		}break;
     646:	01 c0       	rjmp	.+2      	; 0x64a <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment+0x46>
	}
}

void HD44780::PrintAlignment(const char* text, uint8_t line, HD44780_Alignment alignment)
{
	uint8_t slot = 0;
     648:	40 e0       	ldi	r20, 0x00	; 0
		{
			slot = (this->symbols - strlen(text)) / 2;
		}break;
	}
	
	Print(text, slot, line);
     64a:	25 2f       	mov	r18, r21
     64c:	99 df       	rcall	.-206    	; 0x580 <_ZN7HD447805PrintEPKchh>
     64e:	08 95       	ret

00000650 <_ZN7LTC18648PolarityEv>:
	return ptr;
}

void LTC1864::operator delete(void* ptr)
{
	free(ptr);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	08 95       	ret

00000654 <_ZN7LTC18645PhaseEv>:
     654:	81 e0       	ldi	r24, 0x01	; 1
     656:	08 95       	ret

00000658 <_ZN7LTC18649DataOrderEv>:
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	08 95       	ret

0000065c <_ZN7LTC18648DataSizeEv>:
     65c:	fc 01       	movw	r30, r24
     65e:	84 81       	ldd	r24, Z+4	; 0x04
     660:	95 81       	ldd	r25, Z+5	; 0x05
     662:	81 dd       	rcall	.-1278   	; 0x166 <_ZN6Buffer9BlockSizeEv>
     664:	08 95       	ret

00000666 <_ZN7LTC18644DataEv>:
     666:	fc 01       	movw	r30, r24
     668:	84 81       	ldd	r24, Z+4	; 0x04
     66a:	95 81       	ldd	r25, Z+5	; 0x05
     66c:	6f dd       	rcall	.-1314   	; 0x14c <_ZN6Buffer4ReadEv>
     66e:	08 95       	ret

00000670 <_ZN7LTC18645StartEv>:
     670:	fc 01       	movw	r30, r24
     672:	82 81       	ldd	r24, Z+2	; 0x02
     674:	93 81       	ldd	r25, Z+3	; 0x03
     676:	ff d2       	rcall	.+1534   	; 0xc76 <_ZN4Port5ClearEv>
     678:	08 95       	ret

0000067a <_ZN7LTC18649GetResultEv>:
     67a:	fc 01       	movw	r30, r24
     67c:	86 81       	ldd	r24, Z+6	; 0x06
     67e:	97 81       	ldd	r25, Z+7	; 0x07
     680:	08 95       	ret

00000682 <_ZN7LTC1864nwEj>:
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	ec 01       	movw	r28, r24
     688:	ce 01       	movw	r24, r28
     68a:	81 d9       	rcall	.-3326   	; 0xfffff98e <__eeprom_end+0xff7ef98e>
     68c:	00 97       	sbiw	r24, 0x00	; 0
     68e:	e1 f3       	breq	.-8      	; 0x688 <_ZN7LTC1864nwEj+0x6>
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <_ZN6Buffer5WriteIjEEvRT_h>:
	uint8_t writePtr;
	uint8_t readPtr;
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
     696:	bf 92       	push	r11
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	8c 01       	movw	r16, r24
     6aa:	7b 01       	movw	r14, r22
     6ac:	b4 2e       	mov	r11, r20
{	
	do 
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
     6ae:	d8 01       	movw	r26, r16
     6b0:	17 96       	adiw	r26, 0x07	; 7
     6b2:	cc 91       	ld	r28, X
     6b4:	17 97       	sbiw	r26, 0x07	; 7
     6b6:	d0 e0       	ldi	r29, 0x00	; 0
     6b8:	cc 0f       	add	r28, r28
     6ba:	dd 1f       	adc	r29, r29
     6bc:	11 96       	adiw	r26, 0x01	; 1
     6be:	8d 91       	ld	r24, X+
     6c0:	9c 91       	ld	r25, X
     6c2:	12 97       	sbiw	r26, 0x02	; 2
     6c4:	c8 0f       	add	r28, r24
     6c6:	d9 1f       	adc	r29, r25
     6c8:	cb 2c       	mov	r12, r11
     6ca:	d1 2c       	mov	r13, r1
     6cc:	c6 01       	movw	r24, r12
     6ce:	5f d9       	rcall	.-3394   	; 0xfffff98e <__eeprom_end+0xff7ef98e>
     6d0:	99 83       	std	Y+1, r25	; 0x01
     6d2:	88 83       	st	Y, r24
	} while (this->buffer[this->writePtr] == nullptr);
     6d4:	f8 01       	movw	r30, r16
     6d6:	87 81       	ldd	r24, Z+7	; 0x07
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	9c 01       	movw	r18, r24
     6dc:	22 0f       	add	r18, r18
     6de:	33 1f       	adc	r19, r19
     6e0:	01 80       	ldd	r0, Z+1	; 0x01
     6e2:	f2 81       	ldd	r31, Z+2	; 0x02
     6e4:	e0 2d       	mov	r30, r0
     6e6:	e2 0f       	add	r30, r18
     6e8:	f3 1f       	adc	r31, r19
     6ea:	20 81       	ld	r18, Z
     6ec:	31 81       	ldd	r19, Z+1	; 0x01
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
{	
	do 
     6ee:	23 2b       	or	r18, r19
     6f0:	f1 f2       	breq	.-68     	; 0x6ae <_ZN6Buffer5WriteIjEEvRT_h+0x18>
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
	} while (this->buffer[this->writePtr] == nullptr);
	
	this->dataSize[this->writePtr] = dataSize;	
     6f2:	d8 01       	movw	r26, r16
     6f4:	13 96       	adiw	r26, 0x03	; 3
     6f6:	2d 91       	ld	r18, X+
     6f8:	3c 91       	ld	r19, X
     6fa:	14 97       	sbiw	r26, 0x04	; 4
     6fc:	f9 01       	movw	r30, r18
     6fe:	e8 0f       	add	r30, r24
     700:	f9 1f       	adc	r31, r25
     702:	b0 82       	st	Z, r11
	
	memcpy(this->buffer[this->writePtr], &data, dataSize);
     704:	17 96       	adiw	r26, 0x07	; 7
     706:	ec 91       	ld	r30, X
     708:	17 97       	sbiw	r26, 0x07	; 7
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	ee 0f       	add	r30, r30
     70e:	ff 1f       	adc	r31, r31
     710:	11 96       	adiw	r26, 0x01	; 1
     712:	8d 91       	ld	r24, X+
     714:	9c 91       	ld	r25, X
     716:	12 97       	sbiw	r26, 0x02	; 2
     718:	e8 0f       	add	r30, r24
     71a:	f9 1f       	adc	r31, r25
     71c:	a6 01       	movw	r20, r12
     71e:	b7 01       	movw	r22, r14
     720:	80 81       	ld	r24, Z
     722:	91 81       	ldd	r25, Z+1	; 0x01
     724:	14 db       	rcall	.-2520   	; 0xfffffd4e <__eeprom_end+0xff7efd4e>
	
	++this->writePtr %= this->bufferSize;
     726:	f8 01       	movw	r30, r16
     728:	87 81       	ldd	r24, Z+7	; 0x07
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	60 81       	ld	r22, Z
     72e:	ef d8       	rcall	.-3618   	; 0xfffff90e <__eeprom_end+0xff7ef90e>
     730:	97 83       	std	Z+7, r25	; 0x07
	this->bufferCounter++;
     732:	86 81       	ldd	r24, Z+6	; 0x06
     734:	8f 5f       	subi	r24, 0xFF	; 255
     736:	86 83       	std	Z+6, r24	; 0x06
}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	08 95       	ret

0000074c <_ZN7LTC186417PrepareDataChangeEv>:
		
	PrepareDataChange();
}

void LTC1864::PrepareDataChange()
{
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	00 d0       	rcall	.+0      	; 0x752 <_ZN7LTC186417PrepareDataChangeEv+0x6>
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
	uint16_t data = 0;
     756:	1a 82       	std	Y+2, r1	; 0x02
     758:	19 82       	std	Y+1, r1	; 0x01
	this->buffer->Write(data, sizeof(uint16_t));
     75a:	42 e0       	ldi	r20, 0x02	; 2
     75c:	be 01       	movw	r22, r28
     75e:	6f 5f       	subi	r22, 0xFF	; 255
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	fc 01       	movw	r30, r24
     764:	84 81       	ldd	r24, Z+4	; 0x04
     766:	95 81       	ldd	r25, Z+5	; 0x05
     768:	96 df       	rcall	.-212    	; 0x696 <_ZN6Buffer5WriteIjEEvRT_h>
}
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <_ZN7LTC1864C1EP4Port>:
﻿#include "LTC1864.h"

LTC1864::LTC1864(Port* CS)
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
     782:	8b 01       	movw	r16, r22
     784:	8a e6       	ldi	r24, 0x6A	; 106
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	99 83       	std	Y+1, r25	; 0x01
     78a:	88 83       	st	Y, r24
{
	this->buffer = new Buffer(1);
     78c:	89 e0       	ldi	r24, 0x09	; 9
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	10 dd       	rcall	.-1504   	; 0x1b2 <_ZN6BuffernwEj>
     792:	7c 01       	movw	r14, r24
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	af dc       	rcall	.-1698   	; 0xf6 <_ZN6BufferC1Eh>
     798:	fd 82       	std	Y+5, r15	; 0x05
     79a:	ec 82       	std	Y+4, r14	; 0x04
	
	this->CS = CS;
     79c:	1b 83       	std	Y+3, r17	; 0x03
     79e:	0a 83       	std	Y+2, r16	; 0x02

	this->CS->SetAsOutput();
     7a0:	c8 01       	movw	r24, r16
     7a2:	44 d2       	rcall	.+1160   	; 0xc2c <_ZN4Port11SetAsOutputEv>
	this->CS->Set();
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	9b 81       	ldd	r25, Y+3	; 0x03
     7a8:	54 d2       	rcall	.+1192   	; 0xc52 <_ZN4Port3SetEv>
	
	PrepareDataChange();
     7aa:	ce 01       	movw	r24, r28
     7ac:	cf df       	rcall	.-98     	; 0x74c <_ZN7LTC186417PrepareDataChangeEv>
}
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	08 95       	ret

000007bc <_ZN7LTC18646FinishEv>:
{
	this->CS->Clear();
}

void LTC1864::Finish()
{
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ec 01       	movw	r28, r24
	this->CS->Set();
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	9b 81       	ldd	r25, Y+3	; 0x03
     7c6:	45 d2       	rcall	.+1162   	; 0xc52 <_ZN4Port3SetEv>
		
	uint8_t *ptr = this->buffer->Read();
     7c8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ca:	9d 81       	ldd	r25, Y+5	; 0x05
     7cc:	bf dc       	rcall	.-1666   	; 0x14c <_ZN6Buffer4ReadEv>
	
	this->result = *ptr;
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 81       	ld	r18, Z
     7d2:	30 e0       	ldi	r19, 0x00	; 0
	this->result <<= 8;
     7d4:	32 2f       	mov	r19, r18
     7d6:	22 27       	eor	r18, r18
     7d8:	3f 83       	std	Y+7, r19	; 0x07
     7da:	2e 83       	std	Y+6, r18	; 0x06
		
	ptr++;
		
	this->result |= *ptr;
     7dc:	81 81       	ldd	r24, Z+1	; 0x01
     7de:	28 2b       	or	r18, r24
     7e0:	3f 83       	std	Y+7, r19	; 0x07
     7e2:	2e 83       	std	Y+6, r18	; 0x06
		
	this->buffer->ClearBlock();
     7e4:	8c 81       	ldd	r24, Y+4	; 0x04
     7e6:	9d 81       	ldd	r25, Y+5	; 0x05
     7e8:	ca dc       	rcall	.-1644   	; 0x17e <_ZN6Buffer10ClearBlockEv>
		
	PrepareDataChange();
     7ea:	ce 01       	movw	r24, r28
     7ec:	af df       	rcall	.-162    	; 0x74c <_ZN7LTC186417PrepareDataChangeEv>
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <_Z41__static_initialization_and_destruction_0ii>:
			PrintResult(0, adc_1->GetResult(), displayedValue1);
					
			PrintResult(1, adc_2->GetResult(), displayedValue2);
		}
	}
     7f4:	8f 92       	push	r8
     7f6:	9f 92       	push	r9
     7f8:	af 92       	push	r10
     7fa:	bf 92       	push	r11
     7fc:	cf 92       	push	r12
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	09 f0       	breq	.+2      	; 0x812 <_Z41__static_initialization_and_destruction_0ii+0x1e>
     810:	32 c1       	rjmp	.+612    	; 0xa76 <_Z41__static_initialization_and_destruction_0ii+0x282>
     812:	6f 3f       	cpi	r22, 0xFF	; 255
     814:	7f 4f       	sbci	r23, 0xFF	; 255
     816:	09 f0       	breq	.+2      	; 0x81a <_Z41__static_initialization_and_destruction_0ii+0x26>
     818:	2e c1       	rjmp	.+604    	; 0xa76 <_Z41__static_initialization_and_destruction_0ii+0x282>
#include "SPI_Master.h"
#include "LTC1864.h"
#include "HD44780.h"
#include "StringHandler.h"

Port *rs = new Port(&PORTD, &DDRD, &PIND, 0);
     81a:	87 e0       	ldi	r24, 0x07	; 7
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	63 d2       	rcall	.+1222   	; 0xce6 <_ZN4PortnwEj>
     820:	ec 01       	movw	r28, r24
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	20 e3       	ldi	r18, 0x30	; 48
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	41 e3       	ldi	r20, 0x31	; 49
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	62 e3       	ldi	r22, 0x32	; 50
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	36 d2       	rcall	.+1132   	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     832:	d0 93 a2 00 	sts	0x00A2, r29	; 0x8000a2 <rs+0x1>
     836:	c0 93 a1 00 	sts	0x00A1, r28	; 0x8000a1 <rs>
Port *rw = new Port(&PORTD, &DDRD, &PIND, 1);
     83a:	87 e0       	ldi	r24, 0x07	; 7
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	53 d2       	rcall	.+1190   	; 0xce6 <_ZN4PortnwEj>
     840:	ec 01       	movw	r28, r24
     842:	01 e0       	ldi	r16, 0x01	; 1
     844:	20 e3       	ldi	r18, 0x30	; 48
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	41 e3       	ldi	r20, 0x31	; 49
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	62 e3       	ldi	r22, 0x32	; 50
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	26 d2       	rcall	.+1100   	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     852:	d0 93 a0 00 	sts	0x00A0, r29	; 0x8000a0 <rw+0x1>
     856:	c0 93 9f 00 	sts	0x009F, r28	; 0x80009f <rw>
Port *e = new Port(&PORTD, &DDRD, &PIND, 2);
     85a:	87 e0       	ldi	r24, 0x07	; 7
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	43 d2       	rcall	.+1158   	; 0xce6 <_ZN4PortnwEj>
     860:	ec 01       	movw	r28, r24
     862:	02 e0       	ldi	r16, 0x02	; 2
     864:	20 e3       	ldi	r18, 0x30	; 48
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	41 e3       	ldi	r20, 0x31	; 49
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	62 e3       	ldi	r22, 0x32	; 50
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	16 d2       	rcall	.+1068   	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     872:	d0 93 9e 00 	sts	0x009E, r29	; 0x80009e <e+0x1>
     876:	c0 93 9d 00 	sts	0x009D, r28	; 0x80009d <e>
Port *d4 = new Port(&PORTD, &DDRD, &PIND, 3);
     87a:	87 e0       	ldi	r24, 0x07	; 7
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	33 d2       	rcall	.+1126   	; 0xce6 <_ZN4PortnwEj>
     880:	ec 01       	movw	r28, r24
     882:	03 e0       	ldi	r16, 0x03	; 3
     884:	20 e3       	ldi	r18, 0x30	; 48
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	41 e3       	ldi	r20, 0x31	; 49
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	62 e3       	ldi	r22, 0x32	; 50
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	06 d2       	rcall	.+1036   	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     892:	d0 93 9c 00 	sts	0x009C, r29	; 0x80009c <d4+0x1>
     896:	c0 93 9b 00 	sts	0x009B, r28	; 0x80009b <d4>
Port *d5 = new Port(&PORTD, &DDRD, &PIND, 4);
     89a:	87 e0       	ldi	r24, 0x07	; 7
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	23 d2       	rcall	.+1094   	; 0xce6 <_ZN4PortnwEj>
     8a0:	ec 01       	movw	r28, r24
     8a2:	04 e0       	ldi	r16, 0x04	; 4
     8a4:	20 e3       	ldi	r18, 0x30	; 48
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	41 e3       	ldi	r20, 0x31	; 49
     8aa:	50 e0       	ldi	r21, 0x00	; 0
     8ac:	62 e3       	ldi	r22, 0x32	; 50
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	f6 d1       	rcall	.+1004   	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     8b2:	d0 93 9a 00 	sts	0x009A, r29	; 0x80009a <d5+0x1>
     8b6:	c0 93 99 00 	sts	0x0099, r28	; 0x800099 <d5>
Port *d6 = new Port(&PORTD, &DDRD, &PIND, 5);
     8ba:	87 e0       	ldi	r24, 0x07	; 7
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	13 d2       	rcall	.+1062   	; 0xce6 <_ZN4PortnwEj>
     8c0:	ec 01       	movw	r28, r24
     8c2:	05 e0       	ldi	r16, 0x05	; 5
     8c4:	20 e3       	ldi	r18, 0x30	; 48
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	41 e3       	ldi	r20, 0x31	; 49
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	62 e3       	ldi	r22, 0x32	; 50
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	e6 d1       	rcall	.+972    	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     8d2:	d0 93 98 00 	sts	0x0098, r29	; 0x800098 <d6+0x1>
     8d6:	c0 93 97 00 	sts	0x0097, r28	; 0x800097 <d6>
Port *d7 = new Port(&PORTD, &DDRD, &PIND, 6);
     8da:	87 e0       	ldi	r24, 0x07	; 7
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	03 d2       	rcall	.+1030   	; 0xce6 <_ZN4PortnwEj>
     8e0:	ec 01       	movw	r28, r24
     8e2:	06 e0       	ldi	r16, 0x06	; 6
     8e4:	20 e3       	ldi	r18, 0x30	; 48
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	41 e3       	ldi	r20, 0x31	; 49
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	62 e3       	ldi	r22, 0x32	; 50
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	d6 d1       	rcall	.+940    	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     8f2:	d0 93 96 00 	sts	0x0096, r29	; 0x800096 <d7+0x1>
     8f6:	c0 93 95 00 	sts	0x0095, r28	; 0x800095 <d7>

HD44780 *lcd = new HD44780(rs, rw, e, d4, d5, d6, d7, WH1602);
     8fa:	80 e1       	ldi	r24, 0x10	; 16
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	63 dc       	rcall	.-1850   	; 0x1c6 <_ZN7HD44780nwEj>
     900:	ec 01       	movw	r28, r24
     902:	a0 90 95 00 	lds	r10, 0x0095	; 0x800095 <d7>
     906:	b0 90 96 00 	lds	r11, 0x0096	; 0x800096 <d7+0x1>
     90a:	c0 90 97 00 	lds	r12, 0x0097	; 0x800097 <d6>
     90e:	d0 90 98 00 	lds	r13, 0x0098	; 0x800098 <d6+0x1>
     912:	e0 90 99 00 	lds	r14, 0x0099	; 0x800099 <d5>
     916:	f0 90 9a 00 	lds	r15, 0x009A	; 0x80009a <d5+0x1>
     91a:	00 91 9b 00 	lds	r16, 0x009B	; 0x80009b <d4>
     91e:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <d4+0x1>
     922:	20 91 9d 00 	lds	r18, 0x009D	; 0x80009d <e>
     926:	30 91 9e 00 	lds	r19, 0x009E	; 0x80009e <e+0x1>
     92a:	40 91 9f 00 	lds	r20, 0x009F	; 0x80009f <rw>
     92e:	50 91 a0 00 	lds	r21, 0x00A0	; 0x8000a0 <rw+0x1>
     932:	60 91 a1 00 	lds	r22, 0x00A1	; 0x8000a1 <rs>
     936:	70 91 a2 00 	lds	r23, 0x00A2	; 0x8000a2 <rs+0x1>
     93a:	0f 2e       	mov	r0, r31
     93c:	f2 e4       	ldi	r31, 0x42	; 66
     93e:	8f 2e       	mov	r8, r31
     940:	f6 e0       	ldi	r31, 0x06	; 6
     942:	9f 2e       	mov	r9, r31
     944:	f0 2d       	mov	r31, r0
     946:	03 dd       	rcall	.-1530   	; 0x34e <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_12HD44780_Type>
     948:	d0 93 94 00 	sts	0x0094, r29	; 0x800094 <lcd+0x1>
     94c:	c0 93 93 00 	sts	0x0093, r28	; 0x800093 <lcd>

Port *sck = new Port(&PORTB, &DDRB, &PINB, 5);
     950:	87 e0       	ldi	r24, 0x07	; 7
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	c8 d1       	rcall	.+912    	; 0xce6 <_ZN4PortnwEj>
     956:	ec 01       	movw	r28, r24
     958:	05 e0       	ldi	r16, 0x05	; 5
     95a:	26 e3       	ldi	r18, 0x36	; 54
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	47 e3       	ldi	r20, 0x37	; 55
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	68 e3       	ldi	r22, 0x38	; 56
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	9b d1       	rcall	.+822    	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     968:	d0 93 92 00 	sts	0x0092, r29	; 0x800092 <sck+0x1>
     96c:	c0 93 91 00 	sts	0x0091, r28	; 0x800091 <sck>
Port *mosi = new Port(&PORTB, &DDRB, &PINB, 3);
     970:	87 e0       	ldi	r24, 0x07	; 7
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	b8 d1       	rcall	.+880    	; 0xce6 <_ZN4PortnwEj>
     976:	ec 01       	movw	r28, r24
     978:	03 e0       	ldi	r16, 0x03	; 3
     97a:	26 e3       	ldi	r18, 0x36	; 54
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	47 e3       	ldi	r20, 0x37	; 55
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	68 e3       	ldi	r22, 0x38	; 56
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	8b d1       	rcall	.+790    	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     988:	d0 93 90 00 	sts	0x0090, r29	; 0x800090 <mosi+0x1>
     98c:	c0 93 8f 00 	sts	0x008F, r28	; 0x80008f <mosi>
Port *miso = new Port(&PORTB, &DDRB, &PINB, 4);
     990:	87 e0       	ldi	r24, 0x07	; 7
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	a8 d1       	rcall	.+848    	; 0xce6 <_ZN4PortnwEj>
     996:	ec 01       	movw	r28, r24
     998:	04 e0       	ldi	r16, 0x04	; 4
     99a:	26 e3       	ldi	r18, 0x36	; 54
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	47 e3       	ldi	r20, 0x37	; 55
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	68 e3       	ldi	r22, 0x38	; 56
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	7b d1       	rcall	.+758    	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     9a8:	d0 93 8e 00 	sts	0x008E, r29	; 0x80008e <miso+0x1>
     9ac:	c0 93 8d 00 	sts	0x008D, r28	; 0x80008d <miso>
Port *ss = new Port(&PORTB, &DDRB, &PINB, 2);
     9b0:	87 e0       	ldi	r24, 0x07	; 7
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	98 d1       	rcall	.+816    	; 0xce6 <_ZN4PortnwEj>
     9b6:	ec 01       	movw	r28, r24
     9b8:	02 e0       	ldi	r16, 0x02	; 2
     9ba:	26 e3       	ldi	r18, 0x36	; 54
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	47 e3       	ldi	r20, 0x37	; 55
     9c0:	50 e0       	ldi	r21, 0x00	; 0
     9c2:	68 e3       	ldi	r22, 0x38	; 56
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	6b d1       	rcall	.+726    	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     9c8:	d0 93 8c 00 	sts	0x008C, r29	; 0x80008c <ss+0x1>
     9cc:	c0 93 8b 00 	sts	0x008B, r28	; 0x80008b <ss>
	
SPI_Master *spi = new SPI_Master(sck, mosi, miso, ss);
     9d0:	87 e0       	ldi	r24, 0x07	; 7
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	92 d1       	rcall	.+804    	; 0xcfa <_ZN10SPI_MasternwEj>
     9d6:	ec 01       	movw	r28, r24
     9d8:	00 91 8b 00 	lds	r16, 0x008B	; 0x80008b <ss>
     9dc:	10 91 8c 00 	lds	r17, 0x008C	; 0x80008c <ss+0x1>
     9e0:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <miso>
     9e4:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <miso+0x1>
     9e8:	40 91 8f 00 	lds	r20, 0x008F	; 0x80008f <mosi>
     9ec:	50 91 90 00 	lds	r21, 0x0090	; 0x800090 <mosi+0x1>
     9f0:	60 91 91 00 	lds	r22, 0x0091	; 0x800091 <sck>
     9f4:	70 91 92 00 	lds	r23, 0x0092	; 0x800092 <sck+0x1>
     9f8:	98 d1       	rcall	.+816    	; 0xd2a <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>
     9fa:	d0 93 8a 00 	sts	0x008A, r29	; 0x80008a <spi+0x1>
     9fe:	c0 93 89 00 	sts	0x0089, r28	; 0x800089 <spi>

Port *cs_1 = new Port(&PORTB, &DDRB, &PINB, 1);
     a02:	87 e0       	ldi	r24, 0x07	; 7
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	6f d1       	rcall	.+734    	; 0xce6 <_ZN4PortnwEj>
     a08:	ec 01       	movw	r28, r24
     a0a:	01 e0       	ldi	r16, 0x01	; 1
     a0c:	26 e3       	ldi	r18, 0x36	; 54
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	47 e3       	ldi	r20, 0x37	; 55
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	68 e3       	ldi	r22, 0x38	; 56
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	42 d1       	rcall	.+644    	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     a1a:	d0 93 88 00 	sts	0x0088, r29	; 0x800088 <cs_1+0x1>
     a1e:	c0 93 87 00 	sts	0x0087, r28	; 0x800087 <cs_1>
Port *cs_2 = new Port(&PORTB, &DDRB, &PINB, 2);
     a22:	87 e0       	ldi	r24, 0x07	; 7
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	5f d1       	rcall	.+702    	; 0xce6 <_ZN4PortnwEj>
     a28:	ec 01       	movw	r28, r24
     a2a:	02 e0       	ldi	r16, 0x02	; 2
     a2c:	26 e3       	ldi	r18, 0x36	; 54
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	47 e3       	ldi	r20, 0x37	; 55
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	68 e3       	ldi	r22, 0x38	; 56
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	32 d1       	rcall	.+612    	; 0xc9e <_ZN4PortC1EPVhS1_S1_h>
     a3a:	d0 93 86 00 	sts	0x0086, r29	; 0x800086 <cs_2+0x1>
     a3e:	c0 93 85 00 	sts	0x0085, r28	; 0x800085 <cs_2>

LTC1864 *adc_1 = new LTC1864(cs_1);
     a42:	88 e0       	ldi	r24, 0x08	; 8
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	1d de       	rcall	.-966    	; 0x682 <_ZN7LTC1864nwEj>
     a48:	ec 01       	movw	r28, r24
     a4a:	60 91 87 00 	lds	r22, 0x0087	; 0x800087 <cs_1>
     a4e:	70 91 88 00 	lds	r23, 0x0088	; 0x800088 <cs_1+0x1>
     a52:	90 de       	rcall	.-736    	; 0x774 <_ZN7LTC1864C1EP4Port>
     a54:	d0 93 84 00 	sts	0x0084, r29	; 0x800084 <adc_1+0x1>
     a58:	c0 93 83 00 	sts	0x0083, r28	; 0x800083 <adc_1>
LTC1864 *adc_2 = new LTC1864(cs_2);
     a5c:	88 e0       	ldi	r24, 0x08	; 8
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	10 de       	rcall	.-992    	; 0x682 <_ZN7LTC1864nwEj>
     a62:	ec 01       	movw	r28, r24
     a64:	60 91 85 00 	lds	r22, 0x0085	; 0x800085 <cs_2>
     a68:	70 91 86 00 	lds	r23, 0x0086	; 0x800086 <cs_2+0x1>
     a6c:	83 de       	rcall	.-762    	; 0x774 <_ZN7LTC1864C1EP4Port>
     a6e:	d0 93 82 00 	sts	0x0082, r29	; 0x800082 <adc_2+0x1>
     a72:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <adc_2>
			PrintResult(0, adc_1->GetResult(), displayedValue1);
					
			PrintResult(1, adc_2->GetResult(), displayedValue2);
		}
	}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	08 95       	ret

00000a90 <__vector_9>:
bool allowedPrint = false;
uint16_t displayedValue1 = 0;
uint16_t displayedValue2 = 0;

ISR(TIMER0_OVF_vect)
{
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
	spi->CheckDevices();
     ab2:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <spi>
     ab6:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <spi+0x1>
     aba:	e2 d1       	rcall	.+964    	; 0xe80 <_ZN10SPI_Master12CheckDevicesEv>
	
	if(!allowedPrint) allowedPrint = true;
     abc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <allowedPrint>
     ac0:	81 11       	cpse	r24, r1
     ac2:	03 c0       	rjmp	.+6      	; 0xaca <__vector_9+0x3a>
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <allowedPrint>
}
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	bf 91       	pop	r27
     ad0:	af 91       	pop	r26
     ad2:	9f 91       	pop	r25
     ad4:	8f 91       	pop	r24
     ad6:	7f 91       	pop	r23
     ad8:	6f 91       	pop	r22
     ada:	5f 91       	pop	r21
     adc:	4f 91       	pop	r20
     ade:	3f 91       	pop	r19
     ae0:	2f 91       	pop	r18
     ae2:	0f 90       	pop	r0
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	0f 90       	pop	r0
     ae8:	1f 90       	pop	r1
     aea:	18 95       	reti

00000aec <__vector_10>:

ISR(SPI_STC_vect)
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
	spi->NextOperation();
     b0e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <spi>
     b12:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <spi+0x1>
     b16:	89 d1       	rcall	.+786    	; 0xe2a <_ZN10SPI_Master13NextOperationEv>
}
     b18:	ff 91       	pop	r31
     b1a:	ef 91       	pop	r30
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <_Z11PrintResulthjRj>:

void PrintResult(uint8_t line, uint16_t result, uint16_t &displayedValue)
{
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
	if(displayedValue == result) return;
     b40:	fa 01       	movw	r30, r20
     b42:	20 81       	ld	r18, Z
     b44:	31 81       	ldd	r19, Z+1	; 0x01
     b46:	26 17       	cp	r18, r22
     b48:	37 07       	cpc	r19, r23
     b4a:	e9 f0       	breq	.+58     	; 0xb86 <_Z11PrintResulthjRj+0x4c>
     b4c:	eb 01       	movw	r28, r22
     b4e:	18 2f       	mov	r17, r24
	
	displayedValue = result;
     b50:	71 83       	std	Z+1, r23	; 0x01
     b52:	60 83       	st	Z, r22
	
	lcd->ClearArea(5, 0, line);
     b54:	28 2f       	mov	r18, r24
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	65 e0       	ldi	r22, 0x05	; 5
     b5a:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <lcd>
     b5e:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <lcd+0x1>
     b62:	e0 dc       	rcall	.-1600   	; 0x524 <_ZN7HD447809ClearAreaEhhh>
	
	const char* txt = StringHandler::FloatToString(result, 0);
     b64:	be 01       	movw	r22, r28
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	b4 d3       	rcall	.+1896   	; 0x12d4 <__floatunsisf>
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	03 d2       	rcall	.+1030   	; 0xf76 <_ZN13StringHandler13FloatToStringEfh>
     b70:	ec 01       	movw	r28, r24
	
	lcd->PrintAlignment(txt, line, LEFT_SIDE);
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	41 2f       	mov	r20, r17
     b76:	bc 01       	movw	r22, r24
     b78:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <lcd>
     b7c:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <lcd+0x1>
     b80:	41 dd       	rcall	.-1406   	; 0x604 <_ZN7HD4478014PrintAlignmentEPKch17HD44780_Alignment>
	
	free((char*)txt);
     b82:	ce 01       	movw	r24, r28
     b84:	9c d7       	rcall	.+3896   	; 0x1abe <free>
	txt = nullptr;
}
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	08 95       	ret

00000b8e <main>:

int main(void)
{	
	//T0
	TCCR0|=(1<<CS02)|(1<<CS00);	//prescaler 1024	
     b8e:	83 b7       	in	r24, 0x33	; 51
     b90:	85 60       	ori	r24, 0x05	; 5
     b92:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0);	//enable interrupt OVF
     b94:	89 b7       	in	r24, 0x39	; 57
     b96:	81 60       	ori	r24, 0x01	; 1
     b98:	89 bf       	out	0x39, r24	; 57

	spi->AddDevice(adc_1);
     b9a:	60 91 83 00 	lds	r22, 0x0083	; 0x800083 <adc_1>
     b9e:	70 91 84 00 	lds	r23, 0x0084	; 0x800084 <adc_1+0x1>
     ba2:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <spi>
     ba6:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <spi+0x1>
     baa:	23 d1       	rcall	.+582    	; 0xdf2 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	spi->AddDevice(adc_2);
     bac:	60 91 81 00 	lds	r22, 0x0081	; 0x800081 <adc_2>
     bb0:	70 91 82 00 	lds	r23, 0x0082	; 0x800082 <adc_2+0x1>
     bb4:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <spi>
     bb8:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <spi+0x1>
     bbc:	1a d1       	rcall	.+564    	; 0xdf2 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	
	sei();	
     bbe:	78 94       	sei
		
	while (1)
	{
		if(allowedPrint)
     bc0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <allowedPrint>
     bc4:	88 23       	and	r24, r24
     bc6:	e1 f3       	breq	.-8      	; 0xbc0 <main+0x32>
		{
			allowedPrint = false;
     bc8:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <allowedPrint>
					
			PrintResult(0, adc_1->GetResult(), displayedValue1);
     bcc:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <adc_1>
     bd0:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <adc_1+0x1>
     bd4:	52 dd       	rcall	.-1372   	; 0x67a <_ZN7LTC18649GetResultEv>
     bd6:	4e e7       	ldi	r20, 0x7E	; 126
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	bc 01       	movw	r22, r24
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	ad df       	rcall	.-166    	; 0xb3a <_Z11PrintResulthjRj>
					
			PrintResult(1, adc_2->GetResult(), displayedValue2);
     be0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <adc_2>
     be4:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <adc_2+0x1>
     be8:	48 dd       	rcall	.-1392   	; 0x67a <_ZN7LTC18649GetResultEv>
     bea:	4c e7       	ldi	r20, 0x7C	; 124
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	bc 01       	movw	r22, r24
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	a3 df       	rcall	.-186    	; 0xb3a <_Z11PrintResulthjRj>
     bf4:	e5 cf       	rjmp	.-54     	; 0xbc0 <main+0x32>

00000bf6 <_GLOBAL__sub_I_rs>:
		}
	}
     bf6:	6f ef       	ldi	r22, 0xFF	; 255
     bf8:	7f ef       	ldi	r23, 0xFF	; 255
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	fa dd       	rcall	.-1036   	; 0x7f4 <_Z41__static_initialization_and_destruction_0ii>
     c00:	08 95       	ret

00000c02 <_ZN4Port10SetAsInputEv>:
bool Port::IsClear()
{
	return !(*this->PIN & (1<<this->pinNum));
}

Port::~Port(){}
     c02:	dc 01       	movw	r26, r24
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	ed 91       	ld	r30, X+
     c08:	fc 91       	ld	r31, X
     c0a:	13 97       	sbiw	r26, 0x03	; 3
     c0c:	40 81       	ld	r20, Z
     c0e:	21 e0       	ldi	r18, 0x01	; 1
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	b9 01       	movw	r22, r18
     c14:	16 96       	adiw	r26, 0x06	; 6
     c16:	0c 90       	ld	r0, X
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <_ZN4Port10SetAsInputEv+0x1c>
     c1a:	66 0f       	add	r22, r22
     c1c:	77 1f       	adc	r23, r23
     c1e:	0a 94       	dec	r0
     c20:	e2 f7       	brpl	.-8      	; 0xc1a <_ZN4Port10SetAsInputEv+0x18>
     c22:	cb 01       	movw	r24, r22
     c24:	80 95       	com	r24
     c26:	84 23       	and	r24, r20
     c28:	80 83       	st	Z, r24
     c2a:	08 95       	ret

00000c2c <_ZN4Port11SetAsOutputEv>:
     c2c:	dc 01       	movw	r26, r24
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	ed 91       	ld	r30, X+
     c32:	fc 91       	ld	r31, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	40 81       	ld	r20, Z
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	c9 01       	movw	r24, r18
     c3e:	16 96       	adiw	r26, 0x06	; 6
     c40:	0c 90       	ld	r0, X
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <_ZN4Port11SetAsOutputEv+0x1c>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	0a 94       	dec	r0
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <_ZN4Port11SetAsOutputEv+0x18>
     c4c:	84 2b       	or	r24, r20
     c4e:	80 83       	st	Z, r24
     c50:	08 95       	ret

00000c52 <_ZN4Port3SetEv>:
     c52:	dc 01       	movw	r26, r24
     c54:	ed 91       	ld	r30, X+
     c56:	fc 91       	ld	r31, X
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	40 81       	ld	r20, Z
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	c9 01       	movw	r24, r18
     c62:	16 96       	adiw	r26, 0x06	; 6
     c64:	0c 90       	ld	r0, X
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <_ZN4Port3SetEv+0x1a>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	0a 94       	dec	r0
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <_ZN4Port3SetEv+0x16>
     c70:	84 2b       	or	r24, r20
     c72:	80 83       	st	Z, r24
     c74:	08 95       	ret

00000c76 <_ZN4Port5ClearEv>:
     c76:	dc 01       	movw	r26, r24
     c78:	ed 91       	ld	r30, X+
     c7a:	fc 91       	ld	r31, X
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	40 81       	ld	r20, Z
     c80:	21 e0       	ldi	r18, 0x01	; 1
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	b9 01       	movw	r22, r18
     c86:	16 96       	adiw	r26, 0x06	; 6
     c88:	0c 90       	ld	r0, X
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <_ZN4Port5ClearEv+0x1a>
     c8c:	66 0f       	add	r22, r22
     c8e:	77 1f       	adc	r23, r23
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <_ZN4Port5ClearEv+0x16>
     c94:	cb 01       	movw	r24, r22
     c96:	80 95       	com	r24
     c98:	84 23       	and	r24, r20
     c9a:	80 83       	st	Z, r24
     c9c:	08 95       	ret

00000c9e <_ZN4PortC1EPVhS1_S1_h>:
     c9e:	0f 93       	push	r16
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	ec 01       	movw	r28, r24
     ca6:	79 83       	std	Y+1, r23	; 0x01
     ca8:	68 83       	st	Y, r22
     caa:	5b 83       	std	Y+3, r21	; 0x03
     cac:	4a 83       	std	Y+2, r20	; 0x02
     cae:	3d 83       	std	Y+5, r19	; 0x05
     cb0:	2c 83       	std	Y+4, r18	; 0x04
     cb2:	0e 83       	std	Y+6, r16	; 0x06
     cb4:	a6 df       	rcall	.-180    	; 0xc02 <_ZN4Port10SetAsInputEv>
     cb6:	ce 01       	movw	r24, r28
     cb8:	de df       	rcall	.-68     	; 0xc76 <_ZN4Port5ClearEv>
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	0f 91       	pop	r16
     cc0:	08 95       	ret

00000cc2 <_ZN4Port5IsSetEv>:
     cc2:	dc 01       	movw	r26, r24
     cc4:	14 96       	adiw	r26, 0x04	; 4
     cc6:	ed 91       	ld	r30, X+
     cc8:	fc 91       	ld	r31, X
     cca:	15 97       	sbiw	r26, 0x05	; 5
     ccc:	20 81       	ld	r18, Z
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	f9 01       	movw	r30, r18
     cd2:	16 96       	adiw	r26, 0x06	; 6
     cd4:	0c 90       	ld	r0, X
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <_ZN4Port5IsSetEv+0x1a>
     cd8:	f5 95       	asr	r31
     cda:	e7 95       	ror	r30
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <_ZN4Port5IsSetEv+0x16>
     ce0:	cf 01       	movw	r24, r30
     ce2:	81 70       	andi	r24, 0x01	; 1
     ce4:	08 95       	ret

00000ce6 <_ZN4PortnwEj>:

void* Port::operator new(size_t size)
{
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     cec:	ce 01       	movw	r24, r28
     cee:	4f d6       	rcall	.+3230   	; 0x198e <malloc>
	}while(ptr == nullptr);
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	e1 f3       	breq	.-8      	; 0xcec <_ZN4PortnwEj+0x6>
	
	return ptr;
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <_ZN10SPI_MasternwEj>:
	return ptr;
}

void SPI_Master::operator delete(void* ptr)
{
	free(ptr);
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
     d00:	ce 01       	movw	r24, r28
     d02:	45 d6       	rcall	.+3210   	; 0x198e <malloc>
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	e1 f3       	breq	.-8      	; 0xd00 <_ZN10SPI_MasternwEj+0x6>
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <_ZN7DevicesI4ISPIEnwEj>:
{
	free((T**)this->devicesList);
}

template <typename T>
void* Devices<T>::operator new(size_t size)
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
{
	void* ptr;
	do
	{
		ptr = malloc(size);
     d14:	ce 01       	movw	r24, r28
     d16:	3b d6       	rcall	.+3190   	; 0x198e <malloc>

template <typename T>
void* Devices<T>::operator new(size_t size)
{
	void* ptr;
	do
     d18:	00 97       	sbiw	r24, 0x00	; 0
     d1a:	e1 f3       	breq	.-8      	; 0xd14 <_ZN7DevicesI4ISPIEnwEj+0x6>
	{
		ptr = malloc(size);
	}while(ptr == nullptr);
	
	return ptr;
}
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	08 95       	ret

00000d22 <_ZN7DevicesI4ISPIEC1Ev>:
};

template <typename T>
Devices<T>::Devices()
{
	this->selectedDevice = 0;
     d22:	fc 01       	movw	r30, r24
     d24:	12 82       	std	Z+2, r1	; 0x02
	this->devicesQuantity = 0;
     d26:	13 82       	std	Z+3, r1	; 0x03
     d28:	08 95       	ret

00000d2a <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>:
﻿#include "SPI_Master.h"

SPI_Master :: SPI_Master(Port* SCK, Port* MOSI, Port* MISO, Port* SS)
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	ec 01       	movw	r28, r24
     d44:	6b 01       	movw	r12, r22
     d46:	7a 01       	movw	r14, r20
     d48:	59 01       	movw	r10, r18
     d4a:	48 01       	movw	r8, r16
{	
	this->devices = new Devices<ISPI>();
     d4c:	84 e0       	ldi	r24, 0x04	; 4
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	de df       	rcall	.-68     	; 0xd0e <_ZN7DevicesI4ISPIEnwEj>
     d52:	8c 01       	movw	r16, r24
     d54:	e6 df       	rcall	.-52     	; 0xd22 <_ZN7DevicesI4ISPIEC1Ev>
     d56:	1a 83       	std	Y+2, r17	; 0x02
     d58:	09 83       	std	Y+1, r16	; 0x01
	
	this->spiBusy = false;
     d5a:	18 82       	st	Y, r1
		
	SCK->SetAsOutput();
     d5c:	c6 01       	movw	r24, r12
     d5e:	66 df       	rcall	.-308    	; 0xc2c <_ZN4Port11SetAsOutputEv>
	SCK->Clear();
     d60:	c6 01       	movw	r24, r12
     d62:	89 df       	rcall	.-238    	; 0xc76 <_ZN4Port5ClearEv>
	
	MOSI->SetAsOutput();
     d64:	c7 01       	movw	r24, r14
     d66:	62 df       	rcall	.-316    	; 0xc2c <_ZN4Port11SetAsOutputEv>
	MOSI->Clear();
     d68:	c7 01       	movw	r24, r14
     d6a:	85 df       	rcall	.-246    	; 0xc76 <_ZN4Port5ClearEv>
	
	MISO->SetAsInput();
     d6c:	c5 01       	movw	r24, r10
     d6e:	49 df       	rcall	.-366    	; 0xc02 <_ZN4Port10SetAsInputEv>
	MISO->Set();	
     d70:	c5 01       	movw	r24, r10
     d72:	6f df       	rcall	.-290    	; 0xc52 <_ZN4Port3SetEv>
	
	SS->SetAsOutput();
     d74:	c4 01       	movw	r24, r8
     d76:	5a df       	rcall	.-332    	; 0xc2c <_ZN4Port11SetAsOutputEv>
	SS->Set();	
     d78:	c4 01       	movw	r24, r8
     d7a:	6b df       	rcall	.-298    	; 0xc52 <_ZN4Port3SetEv>
	
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPIE)|(1<<SPR1);
     d7c:	8d b1       	in	r24, 0x0d	; 13
     d7e:	82 6d       	ori	r24, 0xD2	; 210
     d80:	8d b9       	out	0x0d, r24	; 13
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	cf 90       	pop	r12
     d92:	bf 90       	pop	r11
     d94:	af 90       	pop	r10
     d96:	9f 90       	pop	r9
     d98:	8f 90       	pop	r8
     d9a:	08 95       	ret

00000d9c <_ZN7DevicesI4ISPIE3AddEPS0_>:
}

template <typename T>
void Devices<T>::Add(T *device)
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	8c 01       	movw	r16, r24
     daa:	7b 01       	movw	r14, r22
{
	this->devicesQuantity++;
     dac:	fc 01       	movw	r30, r24
     dae:	c3 81       	ldd	r28, Z+3	; 0x03
     db0:	cf 5f       	subi	r28, 0xFF	; 255
     db2:	c3 83       	std	Z+3, r28	; 0x03
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
     db4:	d0 e0       	ldi	r29, 0x00	; 0
     db6:	cc 0f       	add	r28, r28
     db8:	dd 1f       	adc	r29, r29
	
	T **ptr = nullptr;		
	do 
	{
		ptr = (T**)realloc(this->devicesList, newSize);
     dba:	be 01       	movw	r22, r28
     dbc:	f8 01       	movw	r30, r16
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	06 d7       	rcall	.+3596   	; 0x1bd0 <realloc>
	this->devicesQuantity++;
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
	
	T **ptr = nullptr;		
	do 
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	c9 f3       	breq	.-14     	; 0xdba <_ZN7DevicesI4ISPIE3AddEPS0_+0x1e>
	{
		ptr = (T**)realloc(this->devicesList, newSize);
	}while (ptr == nullptr);
	
	this->devicesList = ptr;
     dc8:	f8 01       	movw	r30, r16
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	80 83       	st	Z, r24
	
	this->devicesList[this->devicesQuantity - 1] = device;
     dce:	23 81       	ldd	r18, Z+3	; 0x03
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	21 50       	subi	r18, 0x01	; 1
     dd4:	30 48       	sbci	r19, 0x80	; 128
     dd6:	22 0f       	add	r18, r18
     dd8:	33 1f       	adc	r19, r19
     dda:	fc 01       	movw	r30, r24
     ddc:	e2 0f       	add	r30, r18
     dde:	f3 1f       	adc	r31, r19
     de0:	f1 82       	std	Z+1, r15	; 0x01
     de2:	e0 82       	st	Z, r14
}
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	08 95       	ret

00000df2 <_ZN10SPI_Master9AddDeviceEP4ISPI>:

void SPI_Master::AddDevice(ISPI *device)
{
	this->devices->Add(device);
     df2:	fc 01       	movw	r30, r24
     df4:	81 81       	ldd	r24, Z+1	; 0x01
     df6:	92 81       	ldd	r25, Z+2	; 0x02
     df8:	d1 df       	rcall	.-94     	; 0xd9c <_ZN7DevicesI4ISPIE3AddEPS0_>
     dfa:	08 95       	ret

00000dfc <_ZN7DevicesI4ISPIE13CurrentDeviceEv>:
}

template <typename T>
T* Devices<T>::CurrentDevice()
{
	return this->devicesList[this->selectedDevice];
     dfc:	dc 01       	movw	r26, r24
     dfe:	12 96       	adiw	r26, 0x02	; 2
     e00:	ec 91       	ld	r30, X
     e02:	12 97       	sbiw	r26, 0x02	; 2
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	ee 0f       	add	r30, r30
     e08:	ff 1f       	adc	r31, r31
     e0a:	8d 91       	ld	r24, X+
     e0c:	9c 91       	ld	r25, X
     e0e:	e8 0f       	add	r30, r24
     e10:	f9 1f       	adc	r31, r25
}
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	08 95       	ret

00000e18 <_ZN7DevicesI4ISPIE4NextEv>:
	
	this->devicesList[this->devicesQuantity - 1] = device;
}

template <typename T>
void Devices<T>::Next()
     e18:	fc 01       	movw	r30, r24
{
	if(this->devicesQuantity > 0)
     e1a:	63 81       	ldd	r22, Z+3	; 0x03
     e1c:	66 23       	and	r22, r22
     e1e:	21 f0       	breq	.+8      	; 0xe28 <_ZN7DevicesI4ISPIE4NextEv+0x10>
	{
		++this->selectedDevice %= this->devicesQuantity;
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	74 d5       	rcall	.+2792   	; 0x190e <__udivmodqi4>
     e26:	92 83       	std	Z+2, r25	; 0x02
     e28:	08 95       	ret

00000e2a <_ZN10SPI_Master13NextOperationEv>:
}

void SPI_Master::NextOperation()
{
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	fc 01       	movw	r30, r24
	this->data[this->dataCounter++] = SPDR;
     e30:	a3 81       	ldd	r26, Z+3	; 0x03
     e32:	b4 81       	ldd	r27, Z+4	; 0x04
     e34:	86 81       	ldd	r24, Z+6	; 0x06
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	98 0f       	add	r25, r24
     e3a:	96 83       	std	Z+6, r25	; 0x06
     e3c:	a8 0f       	add	r26, r24
     e3e:	b1 1d       	adc	r27, r1
     e40:	8f b1       	in	r24, 0x0f	; 15
     e42:	8c 93       	st	X, r24
	
	if(this->dataCounter < this->dataSize)
     e44:	86 81       	ldd	r24, Z+6	; 0x06
     e46:	95 81       	ldd	r25, Z+5	; 0x05
     e48:	89 17       	cp	r24, r25
     e4a:	40 f4       	brcc	.+16     	; 0xe5c <_ZN10SPI_Master13NextOperationEv+0x32>
	{
		SPDR = this->data[this->dataCounter];
     e4c:	03 80       	ldd	r0, Z+3	; 0x03
     e4e:	f4 81       	ldd	r31, Z+4	; 0x04
     e50:	e0 2d       	mov	r30, r0
     e52:	e8 0f       	add	r30, r24
     e54:	f1 1d       	adc	r31, r1
     e56:	80 81       	ld	r24, Z
     e58:	8f b9       	out	0x0f, r24	; 15
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <_ZN10SPI_Master13NextOperationEv+0x50>
     e5c:	ef 01       	movw	r28, r30
	}
	
	else
	{
		this->devices->CurrentDevice()->Finish();
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	92 81       	ldd	r25, Z+2	; 0x02
     e62:	cc df       	rcall	.-104    	; 0xdfc <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     e64:	dc 01       	movw	r26, r24
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	04 84       	ldd	r0, Z+12	; 0x0c
     e6c:	f5 85       	ldd	r31, Z+13	; 0x0d
     e6e:	e0 2d       	mov	r30, r0
     e70:	09 95       	icall
		
		this->spiBusy = false;
     e72:	18 82       	st	Y, r1
		
		this->devices->Next();
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	9a 81       	ldd	r25, Y+2	; 0x02
     e78:	cf df       	rcall	.-98     	; 0xe18 <_ZN7DevicesI4ISPIE4NextEv>
	}
}
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <_ZN10SPI_Master12CheckDevicesEv>:

void SPI_Master::CheckDevices()
{
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
	if(!this->spiBusy)
     e84:	dc 01       	movw	r26, r24
     e86:	2c 91       	ld	r18, X
     e88:	21 11       	cpse	r18, r1
     e8a:	72 c0       	rjmp	.+228    	; 0xf70 <_ZN10SPI_Master12CheckDevicesEv+0xf0>
     e8c:	ec 01       	movw	r28, r24
	{
		this->dataSize = this->devices->CurrentDevice()->DataSize();
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	b4 df       	rcall	.-152    	; 0xdfc <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     e94:	dc 01       	movw	r26, r24
     e96:	ed 91       	ld	r30, X+
     e98:	fc 91       	ld	r31, X
     e9a:	06 80       	ldd	r0, Z+6	; 0x06
     e9c:	f7 81       	ldd	r31, Z+7	; 0x07
     e9e:	e0 2d       	mov	r30, r0
     ea0:	09 95       	icall
     ea2:	8d 83       	std	Y+5, r24	; 0x05
		
		if(this->dataSize > 0)
     ea4:	88 23       	and	r24, r24
     ea6:	09 f4       	brne	.+2      	; 0xeaa <_ZN10SPI_Master12CheckDevicesEv+0x2a>
     ea8:	60 c0       	rjmp	.+192    	; 0xf6a <_ZN10SPI_Master12CheckDevicesEv+0xea>
		{			
			this->data = this->devices->CurrentDevice()->Data();
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	a6 df       	rcall	.-180    	; 0xdfc <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     eb0:	dc 01       	movw	r26, r24
     eb2:	ed 91       	ld	r30, X+
     eb4:	fc 91       	ld	r31, X
     eb6:	00 84       	ldd	r0, Z+8	; 0x08
     eb8:	f1 85       	ldd	r31, Z+9	; 0x09
     eba:	e0 2d       	mov	r30, r0
     ebc:	09 95       	icall
     ebe:	9c 83       	std	Y+4, r25	; 0x04
     ec0:	8b 83       	std	Y+3, r24	; 0x03
			this->dataCounter = 0;
     ec2:	1e 82       	std	Y+6, r1	; 0x06
			
			SPI_DataOrder dataOrder = this->devices->CurrentDevice()->DataOrder();
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	99 df       	rcall	.-206    	; 0xdfc <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     eca:	dc 01       	movw	r26, r24
     ecc:	ed 91       	ld	r30, X+
     ece:	fc 91       	ld	r31, X
     ed0:	04 80       	ldd	r0, Z+4	; 0x04
     ed2:	f5 81       	ldd	r31, Z+5	; 0x05
     ed4:	e0 2d       	mov	r30, r0
     ed6:	09 95       	icall
			if(dataOrder == SPI_MBF) SPCR &= ~(1<<DORD);
     ed8:	81 11       	cpse	r24, r1
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <_ZN10SPI_Master12CheckDevicesEv+0x64>
     edc:	8d b1       	in	r24, 0x0d	; 13
     ede:	8f 7d       	andi	r24, 0xDF	; 223
     ee0:	8d b9       	out	0x0d, r24	; 13
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <_ZN10SPI_Master12CheckDevicesEv+0x6e>
			else if(dataOrder == SPI_LBF) SPCR |= (1<<DORD);
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	19 f4       	brne	.+6      	; 0xeee <_ZN10SPI_Master12CheckDevicesEv+0x6e>
     ee8:	8d b1       	in	r24, 0x0d	; 13
     eea:	80 62       	ori	r24, 0x20	; 32
     eec:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Phase phase = this->devices->CurrentDevice()->Phase();
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	84 df       	rcall	.-248    	; 0xdfc <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     ef4:	dc 01       	movw	r26, r24
     ef6:	ed 91       	ld	r30, X+
     ef8:	fc 91       	ld	r31, X
     efa:	02 80       	ldd	r0, Z+2	; 0x02
     efc:	f3 81       	ldd	r31, Z+3	; 0x03
     efe:	e0 2d       	mov	r30, r0
     f00:	09 95       	icall
			if(phase == SPI_START) SPCR &= ~(1<<CPHA);
     f02:	81 11       	cpse	r24, r1
     f04:	04 c0       	rjmp	.+8      	; 0xf0e <_ZN10SPI_Master12CheckDevicesEv+0x8e>
     f06:	8d b1       	in	r24, 0x0d	; 13
     f08:	8b 7f       	andi	r24, 0xFB	; 251
     f0a:	8d b9       	out	0x0d, r24	; 13
     f0c:	05 c0       	rjmp	.+10     	; 0xf18 <_ZN10SPI_Master12CheckDevicesEv+0x98>
			else if(phase == SPI_END) SPCR |= (1<<CPHA);
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	19 f4       	brne	.+6      	; 0xf18 <_ZN10SPI_Master12CheckDevicesEv+0x98>
     f12:	8d b1       	in	r24, 0x0d	; 13
     f14:	84 60       	ori	r24, 0x04	; 4
     f16:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Polarity polarity = this->devices->CurrentDevice()->Polarity();
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	9a 81       	ldd	r25, Y+2	; 0x02
     f1c:	6f df       	rcall	.-290    	; 0xdfc <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     f1e:	dc 01       	movw	r26, r24
     f20:	ed 91       	ld	r30, X+
     f22:	fc 91       	ld	r31, X
     f24:	01 90       	ld	r0, Z+
     f26:	f0 81       	ld	r31, Z
     f28:	e0 2d       	mov	r30, r0
     f2a:	09 95       	icall
			if(polarity == SPI_RISING) SPCR &= ~(1<<CPOL);
     f2c:	81 11       	cpse	r24, r1
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <_ZN10SPI_Master12CheckDevicesEv+0xb8>
     f30:	8d b1       	in	r24, 0x0d	; 13
     f32:	87 7f       	andi	r24, 0xF7	; 247
     f34:	8d b9       	out	0x0d, r24	; 13
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
			else if(polarity == SPI_FALLING) SPCR |= (1<<CPOL);
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	19 f4       	brne	.+6      	; 0xf42 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
     f3c:	8d b1       	in	r24, 0x0d	; 13
     f3e:	88 60       	ori	r24, 0x08	; 8
     f40:	8d b9       	out	0x0d, r24	; 13
			
			this->devices->CurrentDevice()->Start();
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	5a df       	rcall	.-332    	; 0xdfc <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
     f48:	dc 01       	movw	r26, r24
     f4a:	ed 91       	ld	r30, X+
     f4c:	fc 91       	ld	r31, X
     f4e:	02 84       	ldd	r0, Z+10	; 0x0a
     f50:	f3 85       	ldd	r31, Z+11	; 0x0b
     f52:	e0 2d       	mov	r30, r0
     f54:	09 95       	icall
			
			SPDR = this->data[this->dataCounter];
     f56:	eb 81       	ldd	r30, Y+3	; 0x03
     f58:	fc 81       	ldd	r31, Y+4	; 0x04
     f5a:	8e 81       	ldd	r24, Y+6	; 0x06
     f5c:	e8 0f       	add	r30, r24
     f5e:	f1 1d       	adc	r31, r1
     f60:	80 81       	ld	r24, Z
     f62:	8f b9       	out	0x0f, r24	; 15
			
			this->spiBusy = true;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	88 83       	st	Y, r24
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <_ZN10SPI_Master12CheckDevicesEv+0xf0>
		}
		
		else this->devices->Next();
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	9a 81       	ldd	r25, Y+2	; 0x02
     f6e:	54 df       	rcall	.-344    	; 0xe18 <_ZN7DevicesI4ISPIE4NextEv>
	}
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <_ZN13StringHandler13FloatToStringEfh>:
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
     f76:	2f 92       	push	r2
     f78:	3f 92       	push	r3
     f7a:	4f 92       	push	r4
     f7c:	5f 92       	push	r5
     f7e:	6f 92       	push	r6
     f80:	7f 92       	push	r7
     f82:	8f 92       	push	r8
     f84:	9f 92       	push	r9
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	cf 92       	push	r12
     f8c:	df 92       	push	r13
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <_ZN13StringHandler13FloatToStringEfh+0x26>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <_ZN13StringHandler13FloatToStringEfh+0x28>
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <_ZN13StringHandler13FloatToStringEfh+0x2a>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	2b 01       	movw	r4, r22
     fa6:	3c 01       	movw	r6, r24
     fa8:	94 2e       	mov	r9, r20
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
	
	return resultString;
}
     faa:	2d b6       	in	r2, 0x3d	; 61
     fac:	3e b6       	in	r3, 0x3e	; 62
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
	uint32_t integerPart = fabs(value);
     fae:	9f 77       	andi	r25, 0x7F	; 127
     fb0:	6b 83       	std	Y+3, r22	; 0x03
     fb2:	7c 83       	std	Y+4, r23	; 0x04
     fb4:	8d 83       	std	Y+5, r24	; 0x05
     fb6:	9e 83       	std	Y+6, r25	; 0x06
     fb8:	61 d1       	rcall	.+706    	; 0x127c <__fixunssfsi>
     fba:	a6 2e       	mov	r10, r22
     fbc:	b7 2e       	mov	r11, r23
     fbe:	c8 2e       	mov	r12, r24
     fc0:	d9 2e       	mov	r13, r25
     fc2:	26 2f       	mov	r18, r22
     fc4:	37 2f       	mov	r19, r23
     fc6:	48 2f       	mov	r20, r24
     fc8:	59 2f       	mov	r21, r25
	
	uint8_t stringLength = 0;	
     fca:	81 2c       	mov	r8, r1
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <_ZN13StringHandler13FloatToStringEfh+0x5a>
	do
	{
		integerPart /= 10;
		stringLength++;
     fce:	8f 2c       	mov	r8, r15
	uint32_t integerPart = fabs(value);
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
     fd0:	ca 01       	movw	r24, r20
     fd2:	b9 01       	movw	r22, r18
     fd4:	2a e0       	ldi	r18, 0x0A	; 10
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	a4 d4       	rcall	.+2376   	; 0x1926 <__udivmodsi4>
		stringLength++;
     fde:	ff 24       	eor	r15, r15
     fe0:	f3 94       	inc	r15
     fe2:	f8 0c       	add	r15, r8
	}
	while(integerPart > 0);
     fe4:	21 15       	cp	r18, r1
     fe6:	31 05       	cpc	r19, r1
     fe8:	41 05       	cpc	r20, r1
     fea:	51 05       	cpc	r21, r1
     fec:	81 f7       	brne	.-32     	; 0xfce <_ZN13StringHandler13FloatToStringEfh+0x58>
	
	integerPart = fabs(value);
	
	uint8_t integerPartLength = stringLength;
	
	if(digitsAfterDot > 0)
     fee:	99 20       	and	r9, r9
     ff0:	21 f0       	breq	.+8      	; 0xffa <_ZN13StringHandler13FloatToStringEfh+0x84>
	{
		stringLength++;										//for '.'
     ff2:	83 94       	inc	r8
     ff4:	83 94       	inc	r8
		stringLength += digitsAfterDot;						//for .xxxxx
     ff6:	89 0c       	add	r8, r9
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <_ZN13StringHandler13FloatToStringEfh+0x86>
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
		stringLength++;
     ffa:	8f 2c       	mov	r8, r15
	{
		stringLength++;										//for '.'
		stringLength += digitsAfterDot;						//for .xxxxx
	}
	
	if(value < 0) stringLength++;							//for '-'
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	a9 01       	movw	r20, r18
    1002:	c3 01       	movw	r24, r6
    1004:	b2 01       	movw	r22, r4
    1006:	36 d1       	rcall	.+620    	; 0x1274 <__cmpsf2>
    1008:	88 23       	and	r24, r24
    100a:	0c f4       	brge	.+2      	; 0x100e <_ZN13StringHandler13FloatToStringEfh+0x98>
    100c:	83 94       	inc	r8
	
	stringLength++;											//for '\0'	
    100e:	83 94       	inc	r8
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
    1010:	8f 2d       	mov	r24, r15
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	ad b7       	in	r26, 0x3d	; 61
    1018:	be b7       	in	r27, 0x3e	; 62
    101a:	a8 1b       	sub	r26, r24
    101c:	b9 0b       	sbc	r27, r25
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	be bf       	out	0x3e, r27	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	ad bf       	out	0x3d, r26	; 61
    1028:	2d b7       	in	r18, 0x3d	; 61
    102a:	3e b7       	in	r19, 0x3e	; 62
    102c:	2f 5f       	subi	r18, 0xFF	; 255
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	3a 83       	std	Y+2, r19	; 0x02
    1032:	29 83       	std	Y+1, r18	; 0x01
    1034:	89 01       	movw	r16, r18
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
    1036:	ee 24       	eor	r14, r14
    1038:	e3 94       	inc	r14
    103a:	fe 14       	cp	r15, r14
    103c:	b8 f0       	brcs	.+46     	; 0x106c <_ZN13StringHandler13FloatToStringEfh+0xf6>
	{
		uint8_t dig = integerPart % 10;
				
		integerPart /= 10;
    103e:	6a 2d       	mov	r22, r10
    1040:	7b 2d       	mov	r23, r11
    1042:	8c 2d       	mov	r24, r12
    1044:	9d 2d       	mov	r25, r13
    1046:	2a e0       	ldi	r18, 0x0A	; 10
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	6b d4       	rcall	.+2262   	; 0x1926 <__udivmodsi4>
    1050:	a2 2e       	mov	r10, r18
    1052:	b3 2e       	mov	r11, r19
    1054:	c4 2e       	mov	r12, r20
    1056:	d5 2e       	mov	r13, r21
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
    1058:	ef 2d       	mov	r30, r15
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	ee 19       	sub	r30, r14
    105e:	f1 09       	sbc	r31, r1
    1060:	e0 0f       	add	r30, r16
    1062:	f1 1f       	adc	r31, r17
    1064:	60 5d       	subi	r22, 0xD0	; 208
    1066:	60 83       	st	Z, r22
	
	stringLength++;											//for '\0'	
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
    1068:	e3 94       	inc	r14
    106a:	e7 cf       	rjmp	.-50     	; 0x103a <_ZN13StringHandler13FloatToStringEfh+0xc4>
		integerPart /= 10;
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
	}
	
	integerPartDigitsArray[integerPartLength] = '\0';
    106c:	e9 81       	ldd	r30, Y+1	; 0x01
    106e:	fa 81       	ldd	r31, Y+2	; 0x02
    1070:	ef 0d       	add	r30, r15
    1072:	f1 1d       	adc	r31, r1
    1074:	10 82       	st	Z, r1
				
	char* resultString;
	do 
	{
		resultString = (char*)malloc(stringLength);
    1076:	e8 2c       	mov	r14, r8
    1078:	f1 2c       	mov	r15, r1
    107a:	c7 01       	movw	r24, r14
    107c:	88 d4       	rcall	.+2320   	; 0x198e <malloc>
    107e:	8c 01       	movw	r16, r24
	}while(resultString == NULL);
    1080:	89 2b       	or	r24, r25
    1082:	c9 f3       	breq	.-14     	; 0x1076 <_ZN13StringHandler13FloatToStringEfh+0x100>
	 
			
	if(value < 0)
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	a9 01       	movw	r20, r18
    108a:	c3 01       	movw	r24, r6
    108c:	b2 01       	movw	r22, r4
    108e:	f2 d0       	rcall	.+484    	; 0x1274 <__cmpsf2>
    1090:	88 23       	and	r24, r24
    1092:	5c f4       	brge	.+22     	; 0x10aa <_ZN13StringHandler13FloatToStringEfh+0x134>
	{
		strlcpy(resultString, "-", stringLength);
    1094:	a7 01       	movw	r20, r14
    1096:	68 e7       	ldi	r22, 0x78	; 120
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	c8 01       	movw	r24, r16
    109c:	87 d6       	rcall	.+3342   	; 0x1dac <strlcpy>
		strlcat(resultString, integerPartDigitsArray, stringLength);
    109e:	a7 01       	movw	r20, r14
    10a0:	69 81       	ldd	r22, Y+1	; 0x01
    10a2:	7a 81       	ldd	r23, Y+2	; 0x02
    10a4:	c8 01       	movw	r24, r16
    10a6:	63 d6       	rcall	.+3270   	; 0x1d6e <strlcat>
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <_ZN13StringHandler13FloatToStringEfh+0x13e>
	}
	else strlcpy(resultString, integerPartDigitsArray, stringLength);
    10aa:	a7 01       	movw	r20, r14
    10ac:	69 81       	ldd	r22, Y+1	; 0x01
    10ae:	7a 81       	ldd	r23, Y+2	; 0x02
    10b0:	c8 01       	movw	r24, r16
    10b2:	7c d6       	rcall	.+3320   	; 0x1dac <strlcpy>
	
	if(digitsAfterDot == 0)
    10b4:	99 20       	and	r9, r9
    10b6:	09 f4       	brne	.+2      	; 0x10ba <_ZN13StringHandler13FloatToStringEfh+0x144>
    10b8:	59 c0       	rjmp	.+178    	; 0x116c <_ZN13StringHandler13FloatToStringEfh+0x1f6>
	{		
		return resultString;
	}
		
	strlcat(resultString, ".", stringLength);
    10ba:	a7 01       	movw	r20, r14
    10bc:	6a e7       	ldi	r22, 0x7A	; 122
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	c8 01       	movw	r24, r16
    10c2:	55 d6       	rcall	.+3242   	; 0x1d6e <strlcat>
		
	value = fabs(value) - integerPart;	
    10c4:	6a 2d       	mov	r22, r10
    10c6:	7b 2d       	mov	r23, r11
    10c8:	8c 2d       	mov	r24, r12
    10ca:	9d 2d       	mov	r25, r13
    10cc:	03 d1       	rcall	.+518    	; 0x12d4 <__floatunsisf>
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	6b 81       	ldd	r22, Y+3	; 0x03
    10d4:	7c 81       	ldd	r23, Y+4	; 0x04
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	67 d0       	rcall	.+206    	; 0x11aa <__subsf3>
    10dc:	2b 01       	movw	r4, r22
    10de:	3c 01       	movw	r6, r24
			
	uint32_t mult = (uint32_t)round(pow(10, digitsAfterDot));
    10e0:	69 2d       	mov	r22, r9
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	f5 d0       	rcall	.+490    	; 0x12d4 <__floatunsisf>
    10ea:	9b 01       	movw	r18, r22
    10ec:	ac 01       	movw	r20, r24
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	91 e4       	ldi	r25, 0x41	; 65
    10f6:	03 d2       	rcall	.+1030   	; 0x14fe <pow>
    10f8:	4e d2       	rcall	.+1180   	; 0x1596 <round>
    10fa:	c0 d0       	rcall	.+384    	; 0x127c <__fixunssfsi>
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
    10fc:	eb d0       	rcall	.+470    	; 0x12d4 <__floatunsisf>
    10fe:	9b 01       	movw	r18, r22
    1100:	ac 01       	movw	r20, r24
    1102:	c3 01       	movw	r24, r6
    1104:	b2 01       	movw	r22, r4
    1106:	98 d1       	rcall	.+816    	; 0x1438 <__mulsf3>
    1108:	46 d2       	rcall	.+1164   	; 0x1596 <round>
    110a:	b8 d0       	rcall	.+368    	; 0x127c <__fixunssfsi>
    110c:	9b 01       	movw	r18, r22
    110e:	ac 01       	movw	r20, r24
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
    1110:	89 2d       	mov	r24, r9
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	01 96       	adiw	r24, 0x01	; 1
    1116:	6d b7       	in	r22, 0x3d	; 61
    1118:	7e b7       	in	r23, 0x3e	; 62
    111a:	68 1b       	sub	r22, r24
    111c:	79 0b       	sbc	r23, r25
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	f8 94       	cli
    1122:	7e bf       	out	0x3e, r23	; 62
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	6d bf       	out	0x3d, r22	; 61
    1128:	8d b7       	in	r24, 0x3d	; 61
    112a:	9e b7       	in	r25, 0x3e	; 62
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	5c 01       	movw	r10, r24
    1130:	6c 01       	movw	r12, r24
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
    1132:	88 24       	eor	r8, r8
    1134:	83 94       	inc	r8
    1136:	98 14       	cp	r9, r8
    1138:	88 f0       	brcs	.+34     	; 0x115c <_ZN13StringHandler13FloatToStringEfh+0x1e6>
	{
		uint8_t dig = fractionalPart % 10;
				
		fractionalPart /= 10;
    113a:	ca 01       	movw	r24, r20
    113c:	b9 01       	movw	r22, r18
    113e:	2a e0       	ldi	r18, 0x0A	; 10
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	ef d3       	rcall	.+2014   	; 0x1926 <__udivmodsi4>
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
    1148:	e9 2d       	mov	r30, r9
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	e8 19       	sub	r30, r8
    114e:	f1 09       	sbc	r31, r1
    1150:	ec 0d       	add	r30, r12
    1152:	fd 1d       	adc	r31, r13
    1154:	60 5d       	subi	r22, 0xD0	; 208
    1156:	60 83       	st	Z, r22
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
    1158:	83 94       	inc	r8
    115a:	ed cf       	rjmp	.-38     	; 0x1136 <_ZN13StringHandler13FloatToStringEfh+0x1c0>
				
		fractionalPart /= 10;
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
	}			
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
    115c:	f5 01       	movw	r30, r10
    115e:	e9 0d       	add	r30, r9
    1160:	f1 1d       	adc	r31, r1
    1162:	10 82       	st	Z, r1
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
    1164:	a7 01       	movw	r20, r14
    1166:	b5 01       	movw	r22, r10
    1168:	c8 01       	movw	r24, r16
    116a:	01 d6       	rcall	.+3074   	; 0x1d6e <strlcat>
	
	return resultString;
}
    116c:	c8 01       	movw	r24, r16
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	3e be       	out	0x3e, r3	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	2d be       	out	0x3d, r2	; 61
    1178:	26 96       	adiw	r28, 0x06	; 6
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	8f 90       	pop	r8
    119c:	7f 90       	pop	r7
    119e:	6f 90       	pop	r6
    11a0:	5f 90       	pop	r5
    11a2:	4f 90       	pop	r4
    11a4:	3f 90       	pop	r3
    11a6:	2f 90       	pop	r2
    11a8:	08 95       	ret

000011aa <__subsf3>:
    11aa:	50 58       	subi	r21, 0x80	; 128

000011ac <__addsf3>:
    11ac:	bb 27       	eor	r27, r27
    11ae:	aa 27       	eor	r26, r26
    11b0:	0e d0       	rcall	.+28     	; 0x11ce <__addsf3x>
    11b2:	08 c1       	rjmp	.+528    	; 0x13c4 <__fp_round>
    11b4:	f9 d0       	rcall	.+498    	; 0x13a8 <__fp_pscA>
    11b6:	30 f0       	brcs	.+12     	; 0x11c4 <__addsf3+0x18>
    11b8:	fe d0       	rcall	.+508    	; 0x13b6 <__fp_pscB>
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__addsf3+0x18>
    11bc:	31 f4       	brne	.+12     	; 0x11ca <__addsf3+0x1e>
    11be:	9f 3f       	cpi	r25, 0xFF	; 255
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <__addsf3+0x1a>
    11c2:	1e f4       	brtc	.+6      	; 0x11ca <__addsf3+0x1e>
    11c4:	ee c0       	rjmp	.+476    	; 0x13a2 <__fp_nan>
    11c6:	0e f4       	brtc	.+2      	; 0x11ca <__addsf3+0x1e>
    11c8:	e0 95       	com	r30
    11ca:	e7 fb       	bst	r30, 7
    11cc:	e4 c0       	rjmp	.+456    	; 0x1396 <__fp_inf>

000011ce <__addsf3x>:
    11ce:	e9 2f       	mov	r30, r25
    11d0:	0a d1       	rcall	.+532    	; 0x13e6 <__fp_split3>
    11d2:	80 f3       	brcs	.-32     	; 0x11b4 <__addsf3+0x8>
    11d4:	ba 17       	cp	r27, r26
    11d6:	62 07       	cpc	r22, r18
    11d8:	73 07       	cpc	r23, r19
    11da:	84 07       	cpc	r24, r20
    11dc:	95 07       	cpc	r25, r21
    11de:	18 f0       	brcs	.+6      	; 0x11e6 <__addsf3x+0x18>
    11e0:	71 f4       	brne	.+28     	; 0x11fe <__addsf3x+0x30>
    11e2:	9e f5       	brtc	.+102    	; 0x124a <__addsf3x+0x7c>
    11e4:	22 c1       	rjmp	.+580    	; 0x142a <__fp_zero>
    11e6:	0e f4       	brtc	.+2      	; 0x11ea <__addsf3x+0x1c>
    11e8:	e0 95       	com	r30
    11ea:	0b 2e       	mov	r0, r27
    11ec:	ba 2f       	mov	r27, r26
    11ee:	a0 2d       	mov	r26, r0
    11f0:	0b 01       	movw	r0, r22
    11f2:	b9 01       	movw	r22, r18
    11f4:	90 01       	movw	r18, r0
    11f6:	0c 01       	movw	r0, r24
    11f8:	ca 01       	movw	r24, r20
    11fa:	a0 01       	movw	r20, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	ff 27       	eor	r31, r31
    1200:	59 1b       	sub	r21, r25
    1202:	99 f0       	breq	.+38     	; 0x122a <__addsf3x+0x5c>
    1204:	59 3f       	cpi	r21, 0xF9	; 249
    1206:	50 f4       	brcc	.+20     	; 0x121c <__addsf3x+0x4e>
    1208:	50 3e       	cpi	r21, 0xE0	; 224
    120a:	68 f1       	brcs	.+90     	; 0x1266 <__addsf3x+0x98>
    120c:	1a 16       	cp	r1, r26
    120e:	f0 40       	sbci	r31, 0x00	; 0
    1210:	a2 2f       	mov	r26, r18
    1212:	23 2f       	mov	r18, r19
    1214:	34 2f       	mov	r19, r20
    1216:	44 27       	eor	r20, r20
    1218:	58 5f       	subi	r21, 0xF8	; 248
    121a:	f3 cf       	rjmp	.-26     	; 0x1202 <__addsf3x+0x34>
    121c:	46 95       	lsr	r20
    121e:	37 95       	ror	r19
    1220:	27 95       	ror	r18
    1222:	a7 95       	ror	r26
    1224:	f0 40       	sbci	r31, 0x00	; 0
    1226:	53 95       	inc	r21
    1228:	c9 f7       	brne	.-14     	; 0x121c <__addsf3x+0x4e>
    122a:	7e f4       	brtc	.+30     	; 0x124a <__addsf3x+0x7c>
    122c:	1f 16       	cp	r1, r31
    122e:	ba 0b       	sbc	r27, r26
    1230:	62 0b       	sbc	r22, r18
    1232:	73 0b       	sbc	r23, r19
    1234:	84 0b       	sbc	r24, r20
    1236:	ba f0       	brmi	.+46     	; 0x1266 <__addsf3x+0x98>
    1238:	91 50       	subi	r25, 0x01	; 1
    123a:	a1 f0       	breq	.+40     	; 0x1264 <__addsf3x+0x96>
    123c:	ff 0f       	add	r31, r31
    123e:	bb 1f       	adc	r27, r27
    1240:	66 1f       	adc	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	88 1f       	adc	r24, r24
    1246:	c2 f7       	brpl	.-16     	; 0x1238 <__addsf3x+0x6a>
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <__addsf3x+0x98>
    124a:	ba 0f       	add	r27, r26
    124c:	62 1f       	adc	r22, r18
    124e:	73 1f       	adc	r23, r19
    1250:	84 1f       	adc	r24, r20
    1252:	48 f4       	brcc	.+18     	; 0x1266 <__addsf3x+0x98>
    1254:	87 95       	ror	r24
    1256:	77 95       	ror	r23
    1258:	67 95       	ror	r22
    125a:	b7 95       	ror	r27
    125c:	f7 95       	ror	r31
    125e:	9e 3f       	cpi	r25, 0xFE	; 254
    1260:	08 f0       	brcs	.+2      	; 0x1264 <__addsf3x+0x96>
    1262:	b3 cf       	rjmp	.-154    	; 0x11ca <__addsf3+0x1e>
    1264:	93 95       	inc	r25
    1266:	88 0f       	add	r24, r24
    1268:	08 f0       	brcs	.+2      	; 0x126c <__addsf3x+0x9e>
    126a:	99 27       	eor	r25, r25
    126c:	ee 0f       	add	r30, r30
    126e:	97 95       	ror	r25
    1270:	87 95       	ror	r24
    1272:	08 95       	ret

00001274 <__cmpsf2>:
    1274:	6c d0       	rcall	.+216    	; 0x134e <__fp_cmp>
    1276:	08 f4       	brcc	.+2      	; 0x127a <__cmpsf2+0x6>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	08 95       	ret

0000127c <__fixunssfsi>:
    127c:	bc d0       	rcall	.+376    	; 0x13f6 <__fp_splitA>
    127e:	88 f0       	brcs	.+34     	; 0x12a2 <__fixunssfsi+0x26>
    1280:	9f 57       	subi	r25, 0x7F	; 127
    1282:	90 f0       	brcs	.+36     	; 0x12a8 <__fixunssfsi+0x2c>
    1284:	b9 2f       	mov	r27, r25
    1286:	99 27       	eor	r25, r25
    1288:	b7 51       	subi	r27, 0x17	; 23
    128a:	a0 f0       	brcs	.+40     	; 0x12b4 <__fixunssfsi+0x38>
    128c:	d1 f0       	breq	.+52     	; 0x12c2 <__fixunssfsi+0x46>
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	1a f0       	brmi	.+6      	; 0x129e <__fixunssfsi+0x22>
    1298:	ba 95       	dec	r27
    129a:	c9 f7       	brne	.-14     	; 0x128e <__fixunssfsi+0x12>
    129c:	12 c0       	rjmp	.+36     	; 0x12c2 <__fixunssfsi+0x46>
    129e:	b1 30       	cpi	r27, 0x01	; 1
    12a0:	81 f0       	breq	.+32     	; 0x12c2 <__fixunssfsi+0x46>
    12a2:	c3 d0       	rcall	.+390    	; 0x142a <__fp_zero>
    12a4:	b1 e0       	ldi	r27, 0x01	; 1
    12a6:	08 95       	ret
    12a8:	c0 c0       	rjmp	.+384    	; 0x142a <__fp_zero>
    12aa:	67 2f       	mov	r22, r23
    12ac:	78 2f       	mov	r23, r24
    12ae:	88 27       	eor	r24, r24
    12b0:	b8 5f       	subi	r27, 0xF8	; 248
    12b2:	39 f0       	breq	.+14     	; 0x12c2 <__fixunssfsi+0x46>
    12b4:	b9 3f       	cpi	r27, 0xF9	; 249
    12b6:	cc f3       	brlt	.-14     	; 0x12aa <__fixunssfsi+0x2e>
    12b8:	86 95       	lsr	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	b3 95       	inc	r27
    12c0:	d9 f7       	brne	.-10     	; 0x12b8 <__fixunssfsi+0x3c>
    12c2:	3e f4       	brtc	.+14     	; 0x12d2 <__fixunssfsi+0x56>
    12c4:	90 95       	com	r25
    12c6:	80 95       	com	r24
    12c8:	70 95       	com	r23
    12ca:	61 95       	neg	r22
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	8f 4f       	sbci	r24, 0xFF	; 255
    12d0:	9f 4f       	sbci	r25, 0xFF	; 255
    12d2:	08 95       	ret

000012d4 <__floatunsisf>:
    12d4:	e8 94       	clt
    12d6:	09 c0       	rjmp	.+18     	; 0x12ea <__floatsisf+0x12>

000012d8 <__floatsisf>:
    12d8:	97 fb       	bst	r25, 7
    12da:	3e f4       	brtc	.+14     	; 0x12ea <__floatsisf+0x12>
    12dc:	90 95       	com	r25
    12de:	80 95       	com	r24
    12e0:	70 95       	com	r23
    12e2:	61 95       	neg	r22
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	8f 4f       	sbci	r24, 0xFF	; 255
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	99 23       	and	r25, r25
    12ec:	a9 f0       	breq	.+42     	; 0x1318 <__floatsisf+0x40>
    12ee:	f9 2f       	mov	r31, r25
    12f0:	96 e9       	ldi	r25, 0x96	; 150
    12f2:	bb 27       	eor	r27, r27
    12f4:	93 95       	inc	r25
    12f6:	f6 95       	lsr	r31
    12f8:	87 95       	ror	r24
    12fa:	77 95       	ror	r23
    12fc:	67 95       	ror	r22
    12fe:	b7 95       	ror	r27
    1300:	f1 11       	cpse	r31, r1
    1302:	f8 cf       	rjmp	.-16     	; 0x12f4 <__floatsisf+0x1c>
    1304:	fa f4       	brpl	.+62     	; 0x1344 <__floatsisf+0x6c>
    1306:	bb 0f       	add	r27, r27
    1308:	11 f4       	brne	.+4      	; 0x130e <__floatsisf+0x36>
    130a:	60 ff       	sbrs	r22, 0
    130c:	1b c0       	rjmp	.+54     	; 0x1344 <__floatsisf+0x6c>
    130e:	6f 5f       	subi	r22, 0xFF	; 255
    1310:	7f 4f       	sbci	r23, 0xFF	; 255
    1312:	8f 4f       	sbci	r24, 0xFF	; 255
    1314:	9f 4f       	sbci	r25, 0xFF	; 255
    1316:	16 c0       	rjmp	.+44     	; 0x1344 <__floatsisf+0x6c>
    1318:	88 23       	and	r24, r24
    131a:	11 f0       	breq	.+4      	; 0x1320 <__floatsisf+0x48>
    131c:	96 e9       	ldi	r25, 0x96	; 150
    131e:	11 c0       	rjmp	.+34     	; 0x1342 <__floatsisf+0x6a>
    1320:	77 23       	and	r23, r23
    1322:	21 f0       	breq	.+8      	; 0x132c <__floatsisf+0x54>
    1324:	9e e8       	ldi	r25, 0x8E	; 142
    1326:	87 2f       	mov	r24, r23
    1328:	76 2f       	mov	r23, r22
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <__floatsisf+0x5e>
    132c:	66 23       	and	r22, r22
    132e:	71 f0       	breq	.+28     	; 0x134c <__floatsisf+0x74>
    1330:	96 e8       	ldi	r25, 0x86	; 134
    1332:	86 2f       	mov	r24, r22
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	2a f0       	brmi	.+10     	; 0x1344 <__floatsisf+0x6c>
    133a:	9a 95       	dec	r25
    133c:	66 0f       	add	r22, r22
    133e:	77 1f       	adc	r23, r23
    1340:	88 1f       	adc	r24, r24
    1342:	da f7       	brpl	.-10     	; 0x133a <__floatsisf+0x62>
    1344:	88 0f       	add	r24, r24
    1346:	96 95       	lsr	r25
    1348:	87 95       	ror	r24
    134a:	97 f9       	bld	r25, 7
    134c:	08 95       	ret

0000134e <__fp_cmp>:
    134e:	99 0f       	add	r25, r25
    1350:	00 08       	sbc	r0, r0
    1352:	55 0f       	add	r21, r21
    1354:	aa 0b       	sbc	r26, r26
    1356:	e0 e8       	ldi	r30, 0x80	; 128
    1358:	fe ef       	ldi	r31, 0xFE	; 254
    135a:	16 16       	cp	r1, r22
    135c:	17 06       	cpc	r1, r23
    135e:	e8 07       	cpc	r30, r24
    1360:	f9 07       	cpc	r31, r25
    1362:	c0 f0       	brcs	.+48     	; 0x1394 <__fp_cmp+0x46>
    1364:	12 16       	cp	r1, r18
    1366:	13 06       	cpc	r1, r19
    1368:	e4 07       	cpc	r30, r20
    136a:	f5 07       	cpc	r31, r21
    136c:	98 f0       	brcs	.+38     	; 0x1394 <__fp_cmp+0x46>
    136e:	62 1b       	sub	r22, r18
    1370:	73 0b       	sbc	r23, r19
    1372:	84 0b       	sbc	r24, r20
    1374:	95 0b       	sbc	r25, r21
    1376:	39 f4       	brne	.+14     	; 0x1386 <__fp_cmp+0x38>
    1378:	0a 26       	eor	r0, r26
    137a:	61 f0       	breq	.+24     	; 0x1394 <__fp_cmp+0x46>
    137c:	23 2b       	or	r18, r19
    137e:	24 2b       	or	r18, r20
    1380:	25 2b       	or	r18, r21
    1382:	21 f4       	brne	.+8      	; 0x138c <__fp_cmp+0x3e>
    1384:	08 95       	ret
    1386:	0a 26       	eor	r0, r26
    1388:	09 f4       	brne	.+2      	; 0x138c <__fp_cmp+0x3e>
    138a:	a1 40       	sbci	r26, 0x01	; 1
    138c:	a6 95       	lsr	r26
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	81 1d       	adc	r24, r1
    1392:	81 1d       	adc	r24, r1
    1394:	08 95       	ret

00001396 <__fp_inf>:
    1396:	97 f9       	bld	r25, 7
    1398:	9f 67       	ori	r25, 0x7F	; 127
    139a:	80 e8       	ldi	r24, 0x80	; 128
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	08 95       	ret

000013a2 <__fp_nan>:
    13a2:	9f ef       	ldi	r25, 0xFF	; 255
    13a4:	80 ec       	ldi	r24, 0xC0	; 192
    13a6:	08 95       	ret

000013a8 <__fp_pscA>:
    13a8:	00 24       	eor	r0, r0
    13aa:	0a 94       	dec	r0
    13ac:	16 16       	cp	r1, r22
    13ae:	17 06       	cpc	r1, r23
    13b0:	18 06       	cpc	r1, r24
    13b2:	09 06       	cpc	r0, r25
    13b4:	08 95       	ret

000013b6 <__fp_pscB>:
    13b6:	00 24       	eor	r0, r0
    13b8:	0a 94       	dec	r0
    13ba:	12 16       	cp	r1, r18
    13bc:	13 06       	cpc	r1, r19
    13be:	14 06       	cpc	r1, r20
    13c0:	05 06       	cpc	r0, r21
    13c2:	08 95       	ret

000013c4 <__fp_round>:
    13c4:	09 2e       	mov	r0, r25
    13c6:	03 94       	inc	r0
    13c8:	00 0c       	add	r0, r0
    13ca:	11 f4       	brne	.+4      	; 0x13d0 <__fp_round+0xc>
    13cc:	88 23       	and	r24, r24
    13ce:	52 f0       	brmi	.+20     	; 0x13e4 <__fp_round+0x20>
    13d0:	bb 0f       	add	r27, r27
    13d2:	40 f4       	brcc	.+16     	; 0x13e4 <__fp_round+0x20>
    13d4:	bf 2b       	or	r27, r31
    13d6:	11 f4       	brne	.+4      	; 0x13dc <__fp_round+0x18>
    13d8:	60 ff       	sbrs	r22, 0
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <__fp_round+0x20>
    13dc:	6f 5f       	subi	r22, 0xFF	; 255
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	8f 4f       	sbci	r24, 0xFF	; 255
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	08 95       	ret

000013e6 <__fp_split3>:
    13e6:	57 fd       	sbrc	r21, 7
    13e8:	90 58       	subi	r25, 0x80	; 128
    13ea:	44 0f       	add	r20, r20
    13ec:	55 1f       	adc	r21, r21
    13ee:	59 f0       	breq	.+22     	; 0x1406 <__fp_splitA+0x10>
    13f0:	5f 3f       	cpi	r21, 0xFF	; 255
    13f2:	71 f0       	breq	.+28     	; 0x1410 <__fp_splitA+0x1a>
    13f4:	47 95       	ror	r20

000013f6 <__fp_splitA>:
    13f6:	88 0f       	add	r24, r24
    13f8:	97 fb       	bst	r25, 7
    13fa:	99 1f       	adc	r25, r25
    13fc:	61 f0       	breq	.+24     	; 0x1416 <__fp_splitA+0x20>
    13fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1400:	79 f0       	breq	.+30     	; 0x1420 <__fp_splitA+0x2a>
    1402:	87 95       	ror	r24
    1404:	08 95       	ret
    1406:	12 16       	cp	r1, r18
    1408:	13 06       	cpc	r1, r19
    140a:	14 06       	cpc	r1, r20
    140c:	55 1f       	adc	r21, r21
    140e:	f2 cf       	rjmp	.-28     	; 0x13f4 <__fp_split3+0xe>
    1410:	46 95       	lsr	r20
    1412:	f1 df       	rcall	.-30     	; 0x13f6 <__fp_splitA>
    1414:	08 c0       	rjmp	.+16     	; 0x1426 <__fp_splitA+0x30>
    1416:	16 16       	cp	r1, r22
    1418:	17 06       	cpc	r1, r23
    141a:	18 06       	cpc	r1, r24
    141c:	99 1f       	adc	r25, r25
    141e:	f1 cf       	rjmp	.-30     	; 0x1402 <__fp_splitA+0xc>
    1420:	86 95       	lsr	r24
    1422:	71 05       	cpc	r23, r1
    1424:	61 05       	cpc	r22, r1
    1426:	08 94       	sec
    1428:	08 95       	ret

0000142a <__fp_zero>:
    142a:	e8 94       	clt

0000142c <__fp_szero>:
    142c:	bb 27       	eor	r27, r27
    142e:	66 27       	eor	r22, r22
    1430:	77 27       	eor	r23, r23
    1432:	cb 01       	movw	r24, r22
    1434:	97 f9       	bld	r25, 7
    1436:	08 95       	ret

00001438 <__mulsf3>:
    1438:	0b d0       	rcall	.+22     	; 0x1450 <__mulsf3x>
    143a:	c4 cf       	rjmp	.-120    	; 0x13c4 <__fp_round>
    143c:	b5 df       	rcall	.-150    	; 0x13a8 <__fp_pscA>
    143e:	28 f0       	brcs	.+10     	; 0x144a <__mulsf3+0x12>
    1440:	ba df       	rcall	.-140    	; 0x13b6 <__fp_pscB>
    1442:	18 f0       	brcs	.+6      	; 0x144a <__mulsf3+0x12>
    1444:	95 23       	and	r25, r21
    1446:	09 f0       	breq	.+2      	; 0x144a <__mulsf3+0x12>
    1448:	a6 cf       	rjmp	.-180    	; 0x1396 <__fp_inf>
    144a:	ab cf       	rjmp	.-170    	; 0x13a2 <__fp_nan>
    144c:	11 24       	eor	r1, r1
    144e:	ee cf       	rjmp	.-36     	; 0x142c <__fp_szero>

00001450 <__mulsf3x>:
    1450:	ca df       	rcall	.-108    	; 0x13e6 <__fp_split3>
    1452:	a0 f3       	brcs	.-24     	; 0x143c <__mulsf3+0x4>

00001454 <__mulsf3_pse>:
    1454:	95 9f       	mul	r25, r21
    1456:	d1 f3       	breq	.-12     	; 0x144c <__mulsf3+0x14>
    1458:	95 0f       	add	r25, r21
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	55 1f       	adc	r21, r21
    145e:	62 9f       	mul	r22, r18
    1460:	f0 01       	movw	r30, r0
    1462:	72 9f       	mul	r23, r18
    1464:	bb 27       	eor	r27, r27
    1466:	f0 0d       	add	r31, r0
    1468:	b1 1d       	adc	r27, r1
    146a:	63 9f       	mul	r22, r19
    146c:	aa 27       	eor	r26, r26
    146e:	f0 0d       	add	r31, r0
    1470:	b1 1d       	adc	r27, r1
    1472:	aa 1f       	adc	r26, r26
    1474:	64 9f       	mul	r22, r20
    1476:	66 27       	eor	r22, r22
    1478:	b0 0d       	add	r27, r0
    147a:	a1 1d       	adc	r26, r1
    147c:	66 1f       	adc	r22, r22
    147e:	82 9f       	mul	r24, r18
    1480:	22 27       	eor	r18, r18
    1482:	b0 0d       	add	r27, r0
    1484:	a1 1d       	adc	r26, r1
    1486:	62 1f       	adc	r22, r18
    1488:	73 9f       	mul	r23, r19
    148a:	b0 0d       	add	r27, r0
    148c:	a1 1d       	adc	r26, r1
    148e:	62 1f       	adc	r22, r18
    1490:	83 9f       	mul	r24, r19
    1492:	a0 0d       	add	r26, r0
    1494:	61 1d       	adc	r22, r1
    1496:	22 1f       	adc	r18, r18
    1498:	74 9f       	mul	r23, r20
    149a:	33 27       	eor	r19, r19
    149c:	a0 0d       	add	r26, r0
    149e:	61 1d       	adc	r22, r1
    14a0:	23 1f       	adc	r18, r19
    14a2:	84 9f       	mul	r24, r20
    14a4:	60 0d       	add	r22, r0
    14a6:	21 1d       	adc	r18, r1
    14a8:	82 2f       	mov	r24, r18
    14aa:	76 2f       	mov	r23, r22
    14ac:	6a 2f       	mov	r22, r26
    14ae:	11 24       	eor	r1, r1
    14b0:	9f 57       	subi	r25, 0x7F	; 127
    14b2:	50 40       	sbci	r21, 0x00	; 0
    14b4:	8a f0       	brmi	.+34     	; 0x14d8 <__mulsf3_pse+0x84>
    14b6:	e1 f0       	breq	.+56     	; 0x14f0 <__mulsf3_pse+0x9c>
    14b8:	88 23       	and	r24, r24
    14ba:	4a f0       	brmi	.+18     	; 0x14ce <__mulsf3_pse+0x7a>
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	bb 1f       	adc	r27, r27
    14c2:	66 1f       	adc	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	91 50       	subi	r25, 0x01	; 1
    14ca:	50 40       	sbci	r21, 0x00	; 0
    14cc:	a9 f7       	brne	.-22     	; 0x14b8 <__mulsf3_pse+0x64>
    14ce:	9e 3f       	cpi	r25, 0xFE	; 254
    14d0:	51 05       	cpc	r21, r1
    14d2:	70 f0       	brcs	.+28     	; 0x14f0 <__mulsf3_pse+0x9c>
    14d4:	60 cf       	rjmp	.-320    	; 0x1396 <__fp_inf>
    14d6:	aa cf       	rjmp	.-172    	; 0x142c <__fp_szero>
    14d8:	5f 3f       	cpi	r21, 0xFF	; 255
    14da:	ec f3       	brlt	.-6      	; 0x14d6 <__mulsf3_pse+0x82>
    14dc:	98 3e       	cpi	r25, 0xE8	; 232
    14de:	dc f3       	brlt	.-10     	; 0x14d6 <__mulsf3_pse+0x82>
    14e0:	86 95       	lsr	r24
    14e2:	77 95       	ror	r23
    14e4:	67 95       	ror	r22
    14e6:	b7 95       	ror	r27
    14e8:	f7 95       	ror	r31
    14ea:	e7 95       	ror	r30
    14ec:	9f 5f       	subi	r25, 0xFF	; 255
    14ee:	c1 f7       	brne	.-16     	; 0x14e0 <__mulsf3_pse+0x8c>
    14f0:	fe 2b       	or	r31, r30
    14f2:	88 0f       	add	r24, r24
    14f4:	91 1d       	adc	r25, r1
    14f6:	96 95       	lsr	r25
    14f8:	87 95       	ror	r24
    14fa:	97 f9       	bld	r25, 7
    14fc:	08 95       	ret

000014fe <pow>:
    14fe:	fa 01       	movw	r30, r20
    1500:	ee 0f       	add	r30, r30
    1502:	ff 1f       	adc	r31, r31
    1504:	30 96       	adiw	r30, 0x00	; 0
    1506:	21 05       	cpc	r18, r1
    1508:	31 05       	cpc	r19, r1
    150a:	99 f1       	breq	.+102    	; 0x1572 <pow+0x74>
    150c:	61 15       	cp	r22, r1
    150e:	71 05       	cpc	r23, r1
    1510:	61 f4       	brne	.+24     	; 0x152a <pow+0x2c>
    1512:	80 38       	cpi	r24, 0x80	; 128
    1514:	bf e3       	ldi	r27, 0x3F	; 63
    1516:	9b 07       	cpc	r25, r27
    1518:	49 f1       	breq	.+82     	; 0x156c <pow+0x6e>
    151a:	68 94       	set
    151c:	90 38       	cpi	r25, 0x80	; 128
    151e:	81 05       	cpc	r24, r1
    1520:	61 f0       	breq	.+24     	; 0x153a <pow+0x3c>
    1522:	80 38       	cpi	r24, 0x80	; 128
    1524:	bf ef       	ldi	r27, 0xFF	; 255
    1526:	9b 07       	cpc	r25, r27
    1528:	41 f0       	breq	.+16     	; 0x153a <pow+0x3c>
    152a:	99 23       	and	r25, r25
    152c:	42 f5       	brpl	.+80     	; 0x157e <pow+0x80>
    152e:	ff 3f       	cpi	r31, 0xFF	; 255
    1530:	e1 05       	cpc	r30, r1
    1532:	31 05       	cpc	r19, r1
    1534:	21 05       	cpc	r18, r1
    1536:	11 f1       	breq	.+68     	; 0x157c <pow+0x7e>
    1538:	e8 94       	clt
    153a:	08 94       	sec
    153c:	e7 95       	ror	r30
    153e:	d9 01       	movw	r26, r18
    1540:	aa 23       	and	r26, r26
    1542:	29 f4       	brne	.+10     	; 0x154e <pow+0x50>
    1544:	ab 2f       	mov	r26, r27
    1546:	be 2f       	mov	r27, r30
    1548:	f8 5f       	subi	r31, 0xF8	; 248
    154a:	d0 f3       	brcs	.-12     	; 0x1540 <pow+0x42>
    154c:	10 c0       	rjmp	.+32     	; 0x156e <pow+0x70>
    154e:	ff 5f       	subi	r31, 0xFF	; 255
    1550:	70 f4       	brcc	.+28     	; 0x156e <pow+0x70>
    1552:	a6 95       	lsr	r26
    1554:	e0 f7       	brcc	.-8      	; 0x154e <pow+0x50>
    1556:	f7 39       	cpi	r31, 0x97	; 151
    1558:	50 f0       	brcs	.+20     	; 0x156e <pow+0x70>
    155a:	19 f0       	breq	.+6      	; 0x1562 <pow+0x64>
    155c:	ff 3a       	cpi	r31, 0xAF	; 175
    155e:	38 f4       	brcc	.+14     	; 0x156e <pow+0x70>
    1560:	9f 77       	andi	r25, 0x7F	; 127
    1562:	9f 93       	push	r25
    1564:	0c d0       	rcall	.+24     	; 0x157e <pow+0x80>
    1566:	0f 90       	pop	r0
    1568:	07 fc       	sbrc	r0, 7
    156a:	90 58       	subi	r25, 0x80	; 128
    156c:	08 95       	ret
    156e:	3e f0       	brts	.+14     	; 0x157e <pow+0x80>
    1570:	18 cf       	rjmp	.-464    	; 0x13a2 <__fp_nan>
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	80 e8       	ldi	r24, 0x80	; 128
    1578:	9f e3       	ldi	r25, 0x3F	; 63
    157a:	08 95       	ret
    157c:	4f e7       	ldi	r20, 0x7F	; 127
    157e:	9f 77       	andi	r25, 0x7F	; 127
    1580:	5f 93       	push	r21
    1582:	4f 93       	push	r20
    1584:	3f 93       	push	r19
    1586:	2f 93       	push	r18
    1588:	e7 d0       	rcall	.+462    	; 0x1758 <log>
    158a:	2f 91       	pop	r18
    158c:	3f 91       	pop	r19
    158e:	4f 91       	pop	r20
    1590:	5f 91       	pop	r21
    1592:	52 df       	rcall	.-348    	; 0x1438 <__mulsf3>
    1594:	25 c0       	rjmp	.+74     	; 0x15e0 <exp>

00001596 <round>:
    1596:	2f df       	rcall	.-418    	; 0x13f6 <__fp_splitA>
    1598:	e0 f0       	brcs	.+56     	; 0x15d2 <round+0x3c>
    159a:	9e 37       	cpi	r25, 0x7E	; 126
    159c:	d8 f0       	brcs	.+54     	; 0x15d4 <round+0x3e>
    159e:	96 39       	cpi	r25, 0x96	; 150
    15a0:	b8 f4       	brcc	.+46     	; 0x15d0 <round+0x3a>
    15a2:	9e 38       	cpi	r25, 0x8E	; 142
    15a4:	48 f4       	brcc	.+18     	; 0x15b8 <round+0x22>
    15a6:	67 2f       	mov	r22, r23
    15a8:	78 2f       	mov	r23, r24
    15aa:	88 27       	eor	r24, r24
    15ac:	98 5f       	subi	r25, 0xF8	; 248
    15ae:	f9 cf       	rjmp	.-14     	; 0x15a2 <round+0xc>
    15b0:	86 95       	lsr	r24
    15b2:	77 95       	ror	r23
    15b4:	67 95       	ror	r22
    15b6:	93 95       	inc	r25
    15b8:	95 39       	cpi	r25, 0x95	; 149
    15ba:	d0 f3       	brcs	.-12     	; 0x15b0 <round+0x1a>
    15bc:	b6 2f       	mov	r27, r22
    15be:	b1 70       	andi	r27, 0x01	; 1
    15c0:	6b 0f       	add	r22, r27
    15c2:	71 1d       	adc	r23, r1
    15c4:	81 1d       	adc	r24, r1
    15c6:	20 f4       	brcc	.+8      	; 0x15d0 <round+0x3a>
    15c8:	87 95       	ror	r24
    15ca:	77 95       	ror	r23
    15cc:	67 95       	ror	r22
    15ce:	93 95       	inc	r25
    15d0:	33 c0       	rjmp	.+102    	; 0x1638 <__fp_mintl>
    15d2:	4d c0       	rjmp	.+154    	; 0x166e <__fp_mpack>
    15d4:	2b cf       	rjmp	.-426    	; 0x142c <__fp_szero>
    15d6:	19 f4       	brne	.+6      	; 0x15de <round+0x48>
    15d8:	0e f0       	brts	.+2      	; 0x15dc <round+0x46>
    15da:	dd ce       	rjmp	.-582    	; 0x1396 <__fp_inf>
    15dc:	26 cf       	rjmp	.-436    	; 0x142a <__fp_zero>
    15de:	e1 ce       	rjmp	.-574    	; 0x13a2 <__fp_nan>

000015e0 <exp>:
    15e0:	0a df       	rcall	.-492    	; 0x13f6 <__fp_splitA>
    15e2:	c8 f3       	brcs	.-14     	; 0x15d6 <round+0x40>
    15e4:	96 38       	cpi	r25, 0x86	; 134
    15e6:	c0 f7       	brcc	.-16     	; 0x15d8 <round+0x42>
    15e8:	07 f8       	bld	r0, 7
    15ea:	0f 92       	push	r0
    15ec:	e8 94       	clt
    15ee:	2b e3       	ldi	r18, 0x3B	; 59
    15f0:	3a ea       	ldi	r19, 0xAA	; 170
    15f2:	48 eb       	ldi	r20, 0xB8	; 184
    15f4:	5f e7       	ldi	r21, 0x7F	; 127
    15f6:	2e df       	rcall	.-420    	; 0x1454 <__mulsf3_pse>
    15f8:	0f 92       	push	r0
    15fa:	0f 92       	push	r0
    15fc:	0f 92       	push	r0
    15fe:	4d b7       	in	r20, 0x3d	; 61
    1600:	5e b7       	in	r21, 0x3e	; 62
    1602:	0f 92       	push	r0
    1604:	e9 d0       	rcall	.+466    	; 0x17d8 <modf>
    1606:	e6 e2       	ldi	r30, 0x26	; 38
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	3f d0       	rcall	.+126    	; 0x168a <__fp_powser>
    160c:	4f 91       	pop	r20
    160e:	5f 91       	pop	r21
    1610:	ef 91       	pop	r30
    1612:	ff 91       	pop	r31
    1614:	e5 95       	asr	r30
    1616:	ee 1f       	adc	r30, r30
    1618:	ff 1f       	adc	r31, r31
    161a:	49 f0       	breq	.+18     	; 0x162e <exp+0x4e>
    161c:	fe 57       	subi	r31, 0x7E	; 126
    161e:	e0 68       	ori	r30, 0x80	; 128
    1620:	44 27       	eor	r20, r20
    1622:	ee 0f       	add	r30, r30
    1624:	44 1f       	adc	r20, r20
    1626:	fa 95       	dec	r31
    1628:	e1 f7       	brne	.-8      	; 0x1622 <exp+0x42>
    162a:	41 95       	neg	r20
    162c:	55 0b       	sbc	r21, r21
    162e:	5b d0       	rcall	.+182    	; 0x16e6 <ldexp>
    1630:	0f 90       	pop	r0
    1632:	07 fe       	sbrs	r0, 7
    1634:	4f c0       	rjmp	.+158    	; 0x16d4 <inverse>
    1636:	08 95       	ret

00001638 <__fp_mintl>:
    1638:	88 23       	and	r24, r24
    163a:	71 f4       	brne	.+28     	; 0x1658 <__fp_mintl+0x20>
    163c:	77 23       	and	r23, r23
    163e:	21 f0       	breq	.+8      	; 0x1648 <__fp_mintl+0x10>
    1640:	98 50       	subi	r25, 0x08	; 8
    1642:	87 2b       	or	r24, r23
    1644:	76 2f       	mov	r23, r22
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <__fp_mintl+0x1e>
    1648:	66 23       	and	r22, r22
    164a:	11 f4       	brne	.+4      	; 0x1650 <__fp_mintl+0x18>
    164c:	99 27       	eor	r25, r25
    164e:	0d c0       	rjmp	.+26     	; 0x166a <__fp_mintl+0x32>
    1650:	90 51       	subi	r25, 0x10	; 16
    1652:	86 2b       	or	r24, r22
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	2a f0       	brmi	.+10     	; 0x1664 <__fp_mintl+0x2c>
    165a:	9a 95       	dec	r25
    165c:	66 0f       	add	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	da f7       	brpl	.-10     	; 0x165a <__fp_mintl+0x22>
    1664:	88 0f       	add	r24, r24
    1666:	96 95       	lsr	r25
    1668:	87 95       	ror	r24
    166a:	97 f9       	bld	r25, 7
    166c:	08 95       	ret

0000166e <__fp_mpack>:
    166e:	9f 3f       	cpi	r25, 0xFF	; 255
    1670:	31 f0       	breq	.+12     	; 0x167e <__fp_mpack_finite+0xc>

00001672 <__fp_mpack_finite>:
    1672:	91 50       	subi	r25, 0x01	; 1
    1674:	20 f4       	brcc	.+8      	; 0x167e <__fp_mpack_finite+0xc>
    1676:	87 95       	ror	r24
    1678:	77 95       	ror	r23
    167a:	67 95       	ror	r22
    167c:	b7 95       	ror	r27
    167e:	88 0f       	add	r24, r24
    1680:	91 1d       	adc	r25, r1
    1682:	96 95       	lsr	r25
    1684:	87 95       	ror	r24
    1686:	97 f9       	bld	r25, 7
    1688:	08 95       	ret

0000168a <__fp_powser>:
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	1f 93       	push	r17
    1690:	0f 93       	push	r16
    1692:	ff 92       	push	r15
    1694:	ef 92       	push	r14
    1696:	df 92       	push	r13
    1698:	7b 01       	movw	r14, r22
    169a:	8c 01       	movw	r16, r24
    169c:	68 94       	set
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <__fp_powser+0x20>
    16a0:	da 2e       	mov	r13, r26
    16a2:	ef 01       	movw	r28, r30
    16a4:	d5 de       	rcall	.-598    	; 0x1450 <__mulsf3x>
    16a6:	fe 01       	movw	r30, r28
    16a8:	e8 94       	clt
    16aa:	a5 91       	lpm	r26, Z+
    16ac:	25 91       	lpm	r18, Z+
    16ae:	35 91       	lpm	r19, Z+
    16b0:	45 91       	lpm	r20, Z+
    16b2:	55 91       	lpm	r21, Z+
    16b4:	ae f3       	brts	.-22     	; 0x16a0 <__fp_powser+0x16>
    16b6:	ef 01       	movw	r28, r30
    16b8:	8a dd       	rcall	.-1260   	; 0x11ce <__addsf3x>
    16ba:	fe 01       	movw	r30, r28
    16bc:	97 01       	movw	r18, r14
    16be:	a8 01       	movw	r20, r16
    16c0:	da 94       	dec	r13
    16c2:	79 f7       	brne	.-34     	; 0x16a2 <__fp_powser+0x18>
    16c4:	df 90       	pop	r13
    16c6:	ef 90       	pop	r14
    16c8:	ff 90       	pop	r15
    16ca:	0f 91       	pop	r16
    16cc:	1f 91       	pop	r17
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <inverse>:
    16d4:	9b 01       	movw	r18, r22
    16d6:	ac 01       	movw	r20, r24
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	80 e8       	ldi	r24, 0x80	; 128
    16de:	9f e3       	ldi	r25, 0x3F	; 63
    16e0:	ae c0       	rjmp	.+348    	; 0x183e <__divsf3>
    16e2:	59 ce       	rjmp	.-846    	; 0x1396 <__fp_inf>
    16e4:	c4 cf       	rjmp	.-120    	; 0x166e <__fp_mpack>

000016e6 <ldexp>:
    16e6:	87 de       	rcall	.-754    	; 0x13f6 <__fp_splitA>
    16e8:	e8 f3       	brcs	.-6      	; 0x16e4 <inverse+0x10>
    16ea:	99 23       	and	r25, r25
    16ec:	d9 f3       	breq	.-10     	; 0x16e4 <inverse+0x10>
    16ee:	94 0f       	add	r25, r20
    16f0:	51 1d       	adc	r21, r1
    16f2:	bb f3       	brvs	.-18     	; 0x16e2 <inverse+0xe>
    16f4:	91 50       	subi	r25, 0x01	; 1
    16f6:	50 40       	sbci	r21, 0x00	; 0
    16f8:	94 f0       	brlt	.+36     	; 0x171e <ldexp+0x38>
    16fa:	59 f0       	breq	.+22     	; 0x1712 <ldexp+0x2c>
    16fc:	88 23       	and	r24, r24
    16fe:	32 f0       	brmi	.+12     	; 0x170c <ldexp+0x26>
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	91 50       	subi	r25, 0x01	; 1
    1708:	50 40       	sbci	r21, 0x00	; 0
    170a:	c1 f7       	brne	.-16     	; 0x16fc <ldexp+0x16>
    170c:	9e 3f       	cpi	r25, 0xFE	; 254
    170e:	51 05       	cpc	r21, r1
    1710:	44 f7       	brge	.-48     	; 0x16e2 <inverse+0xe>
    1712:	88 0f       	add	r24, r24
    1714:	91 1d       	adc	r25, r1
    1716:	96 95       	lsr	r25
    1718:	87 95       	ror	r24
    171a:	97 f9       	bld	r25, 7
    171c:	08 95       	ret
    171e:	5f 3f       	cpi	r21, 0xFF	; 255
    1720:	ac f0       	brlt	.+42     	; 0x174c <ldexp+0x66>
    1722:	98 3e       	cpi	r25, 0xE8	; 232
    1724:	9c f0       	brlt	.+38     	; 0x174c <ldexp+0x66>
    1726:	bb 27       	eor	r27, r27
    1728:	86 95       	lsr	r24
    172a:	77 95       	ror	r23
    172c:	67 95       	ror	r22
    172e:	b7 95       	ror	r27
    1730:	08 f4       	brcc	.+2      	; 0x1734 <ldexp+0x4e>
    1732:	b1 60       	ori	r27, 0x01	; 1
    1734:	93 95       	inc	r25
    1736:	c1 f7       	brne	.-16     	; 0x1728 <ldexp+0x42>
    1738:	bb 0f       	add	r27, r27
    173a:	58 f7       	brcc	.-42     	; 0x1712 <ldexp+0x2c>
    173c:	11 f4       	brne	.+4      	; 0x1742 <ldexp+0x5c>
    173e:	60 ff       	sbrs	r22, 0
    1740:	e8 cf       	rjmp	.-48     	; 0x1712 <ldexp+0x2c>
    1742:	6f 5f       	subi	r22, 0xFF	; 255
    1744:	7f 4f       	sbci	r23, 0xFF	; 255
    1746:	8f 4f       	sbci	r24, 0xFF	; 255
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	e3 cf       	rjmp	.-58     	; 0x1712 <ldexp+0x2c>
    174c:	6f ce       	rjmp	.-802    	; 0x142c <__fp_szero>
    174e:	0e f0       	brts	.+2      	; 0x1752 <ldexp+0x6c>
    1750:	8e cf       	rjmp	.-228    	; 0x166e <__fp_mpack>
    1752:	27 ce       	rjmp	.-946    	; 0x13a2 <__fp_nan>
    1754:	68 94       	set
    1756:	1f ce       	rjmp	.-962    	; 0x1396 <__fp_inf>

00001758 <log>:
    1758:	4e de       	rcall	.-868    	; 0x13f6 <__fp_splitA>
    175a:	c8 f3       	brcs	.-14     	; 0x174e <ldexp+0x68>
    175c:	99 23       	and	r25, r25
    175e:	d1 f3       	breq	.-12     	; 0x1754 <ldexp+0x6e>
    1760:	c6 f3       	brts	.-16     	; 0x1752 <ldexp+0x6c>
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	1f 93       	push	r17
    1768:	0f 93       	push	r16
    176a:	ff 92       	push	r15
    176c:	c9 2f       	mov	r28, r25
    176e:	dd 27       	eor	r29, r29
    1770:	88 23       	and	r24, r24
    1772:	2a f0       	brmi	.+10     	; 0x177e <log+0x26>
    1774:	21 97       	sbiw	r28, 0x01	; 1
    1776:	66 0f       	add	r22, r22
    1778:	77 1f       	adc	r23, r23
    177a:	88 1f       	adc	r24, r24
    177c:	da f7       	brpl	.-10     	; 0x1774 <log+0x1c>
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f eb       	ldi	r21, 0xBF	; 191
    1786:	9f e3       	ldi	r25, 0x3F	; 63
    1788:	88 39       	cpi	r24, 0x98	; 152
    178a:	20 f0       	brcs	.+8      	; 0x1794 <log+0x3c>
    178c:	80 3e       	cpi	r24, 0xE0	; 224
    178e:	30 f0       	brcs	.+12     	; 0x179c <log+0x44>
    1790:	21 96       	adiw	r28, 0x01	; 1
    1792:	8f 77       	andi	r24, 0x7F	; 127
    1794:	0b dd       	rcall	.-1514   	; 0x11ac <__addsf3>
    1796:	ee e4       	ldi	r30, 0x4E	; 78
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <log+0x4a>
    179c:	07 dd       	rcall	.-1522   	; 0x11ac <__addsf3>
    179e:	eb e7       	ldi	r30, 0x7B	; 123
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	73 df       	rcall	.-282    	; 0x168a <__fp_powser>
    17a4:	8b 01       	movw	r16, r22
    17a6:	be 01       	movw	r22, r28
    17a8:	ec 01       	movw	r28, r24
    17aa:	fb 2e       	mov	r15, r27
    17ac:	6f 57       	subi	r22, 0x7F	; 127
    17ae:	71 09       	sbc	r23, r1
    17b0:	75 95       	asr	r23
    17b2:	77 1f       	adc	r23, r23
    17b4:	88 0b       	sbc	r24, r24
    17b6:	99 0b       	sbc	r25, r25
    17b8:	8f dd       	rcall	.-1250   	; 0x12d8 <__floatsisf>
    17ba:	28 e1       	ldi	r18, 0x18	; 24
    17bc:	32 e7       	ldi	r19, 0x72	; 114
    17be:	41 e3       	ldi	r20, 0x31	; 49
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	46 de       	rcall	.-884    	; 0x1450 <__mulsf3x>
    17c4:	af 2d       	mov	r26, r15
    17c6:	98 01       	movw	r18, r16
    17c8:	ae 01       	movw	r20, r28
    17ca:	ff 90       	pop	r15
    17cc:	0f 91       	pop	r16
    17ce:	1f 91       	pop	r17
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	fc dc       	rcall	.-1544   	; 0x11ce <__addsf3x>
    17d6:	f6 cd       	rjmp	.-1044   	; 0x13c4 <__fp_round>

000017d8 <modf>:
    17d8:	fa 01       	movw	r30, r20
    17da:	dc 01       	movw	r26, r24
    17dc:	aa 0f       	add	r26, r26
    17de:	bb 1f       	adc	r27, r27
    17e0:	9b 01       	movw	r18, r22
    17e2:	ac 01       	movw	r20, r24
    17e4:	bf 57       	subi	r27, 0x7F	; 127
    17e6:	28 f4       	brcc	.+10     	; 0x17f2 <modf+0x1a>
    17e8:	22 27       	eor	r18, r18
    17ea:	33 27       	eor	r19, r19
    17ec:	44 27       	eor	r20, r20
    17ee:	50 78       	andi	r21, 0x80	; 128
    17f0:	1f c0       	rjmp	.+62     	; 0x1830 <modf+0x58>
    17f2:	b7 51       	subi	r27, 0x17	; 23
    17f4:	88 f4       	brcc	.+34     	; 0x1818 <modf+0x40>
    17f6:	ab 2f       	mov	r26, r27
    17f8:	00 24       	eor	r0, r0
    17fa:	46 95       	lsr	r20
    17fc:	37 95       	ror	r19
    17fe:	27 95       	ror	r18
    1800:	01 1c       	adc	r0, r1
    1802:	a3 95       	inc	r26
    1804:	d2 f3       	brmi	.-12     	; 0x17fa <modf+0x22>
    1806:	00 20       	and	r0, r0
    1808:	69 f0       	breq	.+26     	; 0x1824 <modf+0x4c>
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	44 1f       	adc	r20, r20
    1810:	b3 95       	inc	r27
    1812:	da f3       	brmi	.-10     	; 0x180a <modf+0x32>
    1814:	0d d0       	rcall	.+26     	; 0x1830 <modf+0x58>
    1816:	c9 cc       	rjmp	.-1646   	; 0x11aa <__subsf3>
    1818:	61 30       	cpi	r22, 0x01	; 1
    181a:	71 05       	cpc	r23, r1
    181c:	a0 e8       	ldi	r26, 0x80	; 128
    181e:	8a 07       	cpc	r24, r26
    1820:	b9 46       	sbci	r27, 0x69	; 105
    1822:	30 f4       	brcc	.+12     	; 0x1830 <modf+0x58>
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
    1828:	66 27       	eor	r22, r22
    182a:	77 27       	eor	r23, r23
    182c:	88 27       	eor	r24, r24
    182e:	90 78       	andi	r25, 0x80	; 128
    1830:	30 96       	adiw	r30, 0x00	; 0
    1832:	21 f0       	breq	.+8      	; 0x183c <modf+0x64>
    1834:	20 83       	st	Z, r18
    1836:	31 83       	std	Z+1, r19	; 0x01
    1838:	42 83       	std	Z+2, r20	; 0x02
    183a:	53 83       	std	Z+3, r21	; 0x03
    183c:	08 95       	ret

0000183e <__divsf3>:
    183e:	0c d0       	rcall	.+24     	; 0x1858 <__divsf3x>
    1840:	c1 cd       	rjmp	.-1150   	; 0x13c4 <__fp_round>
    1842:	b9 dd       	rcall	.-1166   	; 0x13b6 <__fp_pscB>
    1844:	40 f0       	brcs	.+16     	; 0x1856 <__divsf3+0x18>
    1846:	b0 dd       	rcall	.-1184   	; 0x13a8 <__fp_pscA>
    1848:	30 f0       	brcs	.+12     	; 0x1856 <__divsf3+0x18>
    184a:	21 f4       	brne	.+8      	; 0x1854 <__divsf3+0x16>
    184c:	5f 3f       	cpi	r21, 0xFF	; 255
    184e:	19 f0       	breq	.+6      	; 0x1856 <__divsf3+0x18>
    1850:	a2 cd       	rjmp	.-1212   	; 0x1396 <__fp_inf>
    1852:	51 11       	cpse	r21, r1
    1854:	eb cd       	rjmp	.-1066   	; 0x142c <__fp_szero>
    1856:	a5 cd       	rjmp	.-1206   	; 0x13a2 <__fp_nan>

00001858 <__divsf3x>:
    1858:	c6 dd       	rcall	.-1140   	; 0x13e6 <__fp_split3>
    185a:	98 f3       	brcs	.-26     	; 0x1842 <__divsf3+0x4>

0000185c <__divsf3_pse>:
    185c:	99 23       	and	r25, r25
    185e:	c9 f3       	breq	.-14     	; 0x1852 <__divsf3+0x14>
    1860:	55 23       	and	r21, r21
    1862:	b1 f3       	breq	.-20     	; 0x1850 <__divsf3+0x12>
    1864:	95 1b       	sub	r25, r21
    1866:	55 0b       	sbc	r21, r21
    1868:	bb 27       	eor	r27, r27
    186a:	aa 27       	eor	r26, r26
    186c:	62 17       	cp	r22, r18
    186e:	73 07       	cpc	r23, r19
    1870:	84 07       	cpc	r24, r20
    1872:	38 f0       	brcs	.+14     	; 0x1882 <__divsf3_pse+0x26>
    1874:	9f 5f       	subi	r25, 0xFF	; 255
    1876:	5f 4f       	sbci	r21, 0xFF	; 255
    1878:	22 0f       	add	r18, r18
    187a:	33 1f       	adc	r19, r19
    187c:	44 1f       	adc	r20, r20
    187e:	aa 1f       	adc	r26, r26
    1880:	a9 f3       	breq	.-22     	; 0x186c <__divsf3_pse+0x10>
    1882:	33 d0       	rcall	.+102    	; 0x18ea <__divsf3_pse+0x8e>
    1884:	0e 2e       	mov	r0, r30
    1886:	3a f0       	brmi	.+14     	; 0x1896 <__divsf3_pse+0x3a>
    1888:	e0 e8       	ldi	r30, 0x80	; 128
    188a:	30 d0       	rcall	.+96     	; 0x18ec <__divsf3_pse+0x90>
    188c:	91 50       	subi	r25, 0x01	; 1
    188e:	50 40       	sbci	r21, 0x00	; 0
    1890:	e6 95       	lsr	r30
    1892:	00 1c       	adc	r0, r0
    1894:	ca f7       	brpl	.-14     	; 0x1888 <__divsf3_pse+0x2c>
    1896:	29 d0       	rcall	.+82     	; 0x18ea <__divsf3_pse+0x8e>
    1898:	fe 2f       	mov	r31, r30
    189a:	27 d0       	rcall	.+78     	; 0x18ea <__divsf3_pse+0x8e>
    189c:	66 0f       	add	r22, r22
    189e:	77 1f       	adc	r23, r23
    18a0:	88 1f       	adc	r24, r24
    18a2:	bb 1f       	adc	r27, r27
    18a4:	26 17       	cp	r18, r22
    18a6:	37 07       	cpc	r19, r23
    18a8:	48 07       	cpc	r20, r24
    18aa:	ab 07       	cpc	r26, r27
    18ac:	b0 e8       	ldi	r27, 0x80	; 128
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <__divsf3_pse+0x56>
    18b0:	bb 0b       	sbc	r27, r27
    18b2:	80 2d       	mov	r24, r0
    18b4:	bf 01       	movw	r22, r30
    18b6:	ff 27       	eor	r31, r31
    18b8:	93 58       	subi	r25, 0x83	; 131
    18ba:	5f 4f       	sbci	r21, 0xFF	; 255
    18bc:	2a f0       	brmi	.+10     	; 0x18c8 <__divsf3_pse+0x6c>
    18be:	9e 3f       	cpi	r25, 0xFE	; 254
    18c0:	51 05       	cpc	r21, r1
    18c2:	68 f0       	brcs	.+26     	; 0x18de <__divsf3_pse+0x82>
    18c4:	68 cd       	rjmp	.-1328   	; 0x1396 <__fp_inf>
    18c6:	b2 cd       	rjmp	.-1180   	; 0x142c <__fp_szero>
    18c8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ca:	ec f3       	brlt	.-6      	; 0x18c6 <__divsf3_pse+0x6a>
    18cc:	98 3e       	cpi	r25, 0xE8	; 232
    18ce:	dc f3       	brlt	.-10     	; 0x18c6 <__divsf3_pse+0x6a>
    18d0:	86 95       	lsr	r24
    18d2:	77 95       	ror	r23
    18d4:	67 95       	ror	r22
    18d6:	b7 95       	ror	r27
    18d8:	f7 95       	ror	r31
    18da:	9f 5f       	subi	r25, 0xFF	; 255
    18dc:	c9 f7       	brne	.-14     	; 0x18d0 <__divsf3_pse+0x74>
    18de:	88 0f       	add	r24, r24
    18e0:	91 1d       	adc	r25, r1
    18e2:	96 95       	lsr	r25
    18e4:	87 95       	ror	r24
    18e6:	97 f9       	bld	r25, 7
    18e8:	08 95       	ret
    18ea:	e1 e0       	ldi	r30, 0x01	; 1
    18ec:	66 0f       	add	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	88 1f       	adc	r24, r24
    18f2:	bb 1f       	adc	r27, r27
    18f4:	62 17       	cp	r22, r18
    18f6:	73 07       	cpc	r23, r19
    18f8:	84 07       	cpc	r24, r20
    18fa:	ba 07       	cpc	r27, r26
    18fc:	20 f0       	brcs	.+8      	; 0x1906 <__divsf3_pse+0xaa>
    18fe:	62 1b       	sub	r22, r18
    1900:	73 0b       	sbc	r23, r19
    1902:	84 0b       	sbc	r24, r20
    1904:	ba 0b       	sbc	r27, r26
    1906:	ee 1f       	adc	r30, r30
    1908:	88 f7       	brcc	.-30     	; 0x18ec <__divsf3_pse+0x90>
    190a:	e0 95       	com	r30
    190c:	08 95       	ret

0000190e <__udivmodqi4>:
    190e:	99 1b       	sub	r25, r25
    1910:	79 e0       	ldi	r23, 0x09	; 9
    1912:	04 c0       	rjmp	.+8      	; 0x191c <__udivmodqi4_ep>

00001914 <__udivmodqi4_loop>:
    1914:	99 1f       	adc	r25, r25
    1916:	96 17       	cp	r25, r22
    1918:	08 f0       	brcs	.+2      	; 0x191c <__udivmodqi4_ep>
    191a:	96 1b       	sub	r25, r22

0000191c <__udivmodqi4_ep>:
    191c:	88 1f       	adc	r24, r24
    191e:	7a 95       	dec	r23
    1920:	c9 f7       	brne	.-14     	; 0x1914 <__udivmodqi4_loop>
    1922:	80 95       	com	r24
    1924:	08 95       	ret

00001926 <__udivmodsi4>:
    1926:	a1 e2       	ldi	r26, 0x21	; 33
    1928:	1a 2e       	mov	r1, r26
    192a:	aa 1b       	sub	r26, r26
    192c:	bb 1b       	sub	r27, r27
    192e:	fd 01       	movw	r30, r26
    1930:	0d c0       	rjmp	.+26     	; 0x194c <__udivmodsi4_ep>

00001932 <__udivmodsi4_loop>:
    1932:	aa 1f       	adc	r26, r26
    1934:	bb 1f       	adc	r27, r27
    1936:	ee 1f       	adc	r30, r30
    1938:	ff 1f       	adc	r31, r31
    193a:	a2 17       	cp	r26, r18
    193c:	b3 07       	cpc	r27, r19
    193e:	e4 07       	cpc	r30, r20
    1940:	f5 07       	cpc	r31, r21
    1942:	20 f0       	brcs	.+8      	; 0x194c <__udivmodsi4_ep>
    1944:	a2 1b       	sub	r26, r18
    1946:	b3 0b       	sbc	r27, r19
    1948:	e4 0b       	sbc	r30, r20
    194a:	f5 0b       	sbc	r31, r21

0000194c <__udivmodsi4_ep>:
    194c:	66 1f       	adc	r22, r22
    194e:	77 1f       	adc	r23, r23
    1950:	88 1f       	adc	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	1a 94       	dec	r1
    1956:	69 f7       	brne	.-38     	; 0x1932 <__udivmodsi4_loop>
    1958:	60 95       	com	r22
    195a:	70 95       	com	r23
    195c:	80 95       	com	r24
    195e:	90 95       	com	r25
    1960:	9b 01       	movw	r18, r22
    1962:	ac 01       	movw	r20, r24
    1964:	bd 01       	movw	r22, r26
    1966:	cf 01       	movw	r24, r30
    1968:	08 95       	ret

0000196a <__umulhisi3>:
    196a:	a2 9f       	mul	r26, r18
    196c:	b0 01       	movw	r22, r0
    196e:	b3 9f       	mul	r27, r19
    1970:	c0 01       	movw	r24, r0
    1972:	a3 9f       	mul	r26, r19
    1974:	01 d0       	rcall	.+2      	; 0x1978 <__umulhisi3+0xe>
    1976:	b2 9f       	mul	r27, r18
    1978:	70 0d       	add	r23, r0
    197a:	81 1d       	adc	r24, r1
    197c:	11 24       	eor	r1, r1
    197e:	91 1d       	adc	r25, r1
    1980:	08 95       	ret

00001982 <__tablejump2__>:
    1982:	ee 0f       	add	r30, r30
    1984:	ff 1f       	adc	r31, r31
    1986:	05 90       	lpm	r0, Z+
    1988:	f4 91       	lpm	r31, Z
    198a:	e0 2d       	mov	r30, r0
    198c:	09 94       	ijmp

0000198e <malloc>:
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	82 30       	cpi	r24, 0x02	; 2
    1998:	91 05       	cpc	r25, r1
    199a:	10 f4       	brcc	.+4      	; 0x19a0 <malloc+0x12>
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <__flp>
    19a4:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <__flp+0x1>
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	a0 e0       	ldi	r26, 0x00	; 0
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	30 97       	sbiw	r30, 0x00	; 0
    19b2:	19 f1       	breq	.+70     	; 0x19fa <malloc+0x6c>
    19b4:	40 81       	ld	r20, Z
    19b6:	51 81       	ldd	r21, Z+1	; 0x01
    19b8:	02 81       	ldd	r16, Z+2	; 0x02
    19ba:	13 81       	ldd	r17, Z+3	; 0x03
    19bc:	48 17       	cp	r20, r24
    19be:	59 07       	cpc	r21, r25
    19c0:	c8 f0       	brcs	.+50     	; 0x19f4 <malloc+0x66>
    19c2:	84 17       	cp	r24, r20
    19c4:	95 07       	cpc	r25, r21
    19c6:	69 f4       	brne	.+26     	; 0x19e2 <malloc+0x54>
    19c8:	10 97       	sbiw	r26, 0x00	; 0
    19ca:	31 f0       	breq	.+12     	; 0x19d8 <malloc+0x4a>
    19cc:	12 96       	adiw	r26, 0x02	; 2
    19ce:	0c 93       	st	X, r16
    19d0:	12 97       	sbiw	r26, 0x02	; 2
    19d2:	13 96       	adiw	r26, 0x03	; 3
    19d4:	1c 93       	st	X, r17
    19d6:	27 c0       	rjmp	.+78     	; 0x1a26 <malloc+0x98>
    19d8:	00 93 a5 00 	sts	0x00A5, r16	; 0x8000a5 <__flp>
    19dc:	10 93 a6 00 	sts	0x00A6, r17	; 0x8000a6 <__flp+0x1>
    19e0:	22 c0       	rjmp	.+68     	; 0x1a26 <malloc+0x98>
    19e2:	21 15       	cp	r18, r1
    19e4:	31 05       	cpc	r19, r1
    19e6:	19 f0       	breq	.+6      	; 0x19ee <malloc+0x60>
    19e8:	42 17       	cp	r20, r18
    19ea:	53 07       	cpc	r21, r19
    19ec:	18 f4       	brcc	.+6      	; 0x19f4 <malloc+0x66>
    19ee:	9a 01       	movw	r18, r20
    19f0:	bd 01       	movw	r22, r26
    19f2:	ef 01       	movw	r28, r30
    19f4:	df 01       	movw	r26, r30
    19f6:	f8 01       	movw	r30, r16
    19f8:	db cf       	rjmp	.-74     	; 0x19b0 <malloc+0x22>
    19fa:	21 15       	cp	r18, r1
    19fc:	31 05       	cpc	r19, r1
    19fe:	f9 f0       	breq	.+62     	; 0x1a3e <malloc+0xb0>
    1a00:	28 1b       	sub	r18, r24
    1a02:	39 0b       	sbc	r19, r25
    1a04:	24 30       	cpi	r18, 0x04	; 4
    1a06:	31 05       	cpc	r19, r1
    1a08:	80 f4       	brcc	.+32     	; 0x1a2a <malloc+0x9c>
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0e:	61 15       	cp	r22, r1
    1a10:	71 05       	cpc	r23, r1
    1a12:	21 f0       	breq	.+8      	; 0x1a1c <malloc+0x8e>
    1a14:	fb 01       	movw	r30, r22
    1a16:	93 83       	std	Z+3, r25	; 0x03
    1a18:	82 83       	std	Z+2, r24	; 0x02
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <malloc+0x96>
    1a1c:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <__flp+0x1>
    1a20:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <__flp>
    1a24:	fe 01       	movw	r30, r28
    1a26:	32 96       	adiw	r30, 0x02	; 2
    1a28:	44 c0       	rjmp	.+136    	; 0x1ab2 <malloc+0x124>
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e2 0f       	add	r30, r18
    1a2e:	f3 1f       	adc	r31, r19
    1a30:	81 93       	st	Z+, r24
    1a32:	91 93       	st	Z+, r25
    1a34:	22 50       	subi	r18, 0x02	; 2
    1a36:	31 09       	sbc	r19, r1
    1a38:	39 83       	std	Y+1, r19	; 0x01
    1a3a:	28 83       	st	Y, r18
    1a3c:	3a c0       	rjmp	.+116    	; 0x1ab2 <malloc+0x124>
    1a3e:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <__brkval>
    1a42:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1a46:	23 2b       	or	r18, r19
    1a48:	41 f4       	brne	.+16     	; 0x1a5a <malloc+0xcc>
    1a4a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1a4e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1a52:	30 93 a4 00 	sts	0x00A4, r19	; 0x8000a4 <__brkval+0x1>
    1a56:	20 93 a3 00 	sts	0x00A3, r18	; 0x8000a3 <__brkval>
    1a5a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1a5e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1a62:	21 15       	cp	r18, r1
    1a64:	31 05       	cpc	r19, r1
    1a66:	41 f4       	brne	.+16     	; 0x1a78 <malloc+0xea>
    1a68:	2d b7       	in	r18, 0x3d	; 61
    1a6a:	3e b7       	in	r19, 0x3e	; 62
    1a6c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1a70:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1a74:	24 1b       	sub	r18, r20
    1a76:	35 0b       	sbc	r19, r21
    1a78:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <__brkval>
    1a7c:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1a80:	e2 17       	cp	r30, r18
    1a82:	f3 07       	cpc	r31, r19
    1a84:	a0 f4       	brcc	.+40     	; 0x1aae <malloc+0x120>
    1a86:	2e 1b       	sub	r18, r30
    1a88:	3f 0b       	sbc	r19, r31
    1a8a:	28 17       	cp	r18, r24
    1a8c:	39 07       	cpc	r19, r25
    1a8e:	78 f0       	brcs	.+30     	; 0x1aae <malloc+0x120>
    1a90:	ac 01       	movw	r20, r24
    1a92:	4e 5f       	subi	r20, 0xFE	; 254
    1a94:	5f 4f       	sbci	r21, 0xFF	; 255
    1a96:	24 17       	cp	r18, r20
    1a98:	35 07       	cpc	r19, r21
    1a9a:	48 f0       	brcs	.+18     	; 0x1aae <malloc+0x120>
    1a9c:	4e 0f       	add	r20, r30
    1a9e:	5f 1f       	adc	r21, r31
    1aa0:	50 93 a4 00 	sts	0x00A4, r21	; 0x8000a4 <__brkval+0x1>
    1aa4:	40 93 a3 00 	sts	0x00A3, r20	; 0x8000a3 <__brkval>
    1aa8:	81 93       	st	Z+, r24
    1aaa:	91 93       	st	Z+, r25
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <malloc+0x124>
    1aae:	e0 e0       	ldi	r30, 0x00	; 0
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	cf 01       	movw	r24, r30
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <free>:
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <free+0xa>
    1ac6:	81 c0       	rjmp	.+258    	; 0x1bca <free+0x10c>
    1ac8:	fc 01       	movw	r30, r24
    1aca:	32 97       	sbiw	r30, 0x02	; 2
    1acc:	13 82       	std	Z+3, r1	; 0x03
    1ace:	12 82       	std	Z+2, r1	; 0x02
    1ad0:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <__flp>
    1ad4:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <__flp+0x1>
    1ad8:	10 97       	sbiw	r26, 0x00	; 0
    1ada:	81 f4       	brne	.+32     	; 0x1afc <free+0x3e>
    1adc:	20 81       	ld	r18, Z
    1ade:	31 81       	ldd	r19, Z+1	; 0x01
    1ae0:	82 0f       	add	r24, r18
    1ae2:	93 1f       	adc	r25, r19
    1ae4:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <__brkval>
    1ae8:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1aec:	28 17       	cp	r18, r24
    1aee:	39 07       	cpc	r19, r25
    1af0:	51 f5       	brne	.+84     	; 0x1b46 <free+0x88>
    1af2:	f0 93 a4 00 	sts	0x00A4, r31	; 0x8000a4 <__brkval+0x1>
    1af6:	e0 93 a3 00 	sts	0x00A3, r30	; 0x8000a3 <__brkval>
    1afa:	67 c0       	rjmp	.+206    	; 0x1bca <free+0x10c>
    1afc:	ed 01       	movw	r28, r26
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	ce 17       	cp	r28, r30
    1b04:	df 07       	cpc	r29, r31
    1b06:	40 f4       	brcc	.+16     	; 0x1b18 <free+0x5a>
    1b08:	4a 81       	ldd	r20, Y+2	; 0x02
    1b0a:	5b 81       	ldd	r21, Y+3	; 0x03
    1b0c:	9e 01       	movw	r18, r28
    1b0e:	41 15       	cp	r20, r1
    1b10:	51 05       	cpc	r21, r1
    1b12:	f1 f0       	breq	.+60     	; 0x1b50 <free+0x92>
    1b14:	ea 01       	movw	r28, r20
    1b16:	f5 cf       	rjmp	.-22     	; 0x1b02 <free+0x44>
    1b18:	d3 83       	std	Z+3, r29	; 0x03
    1b1a:	c2 83       	std	Z+2, r28	; 0x02
    1b1c:	40 81       	ld	r20, Z
    1b1e:	51 81       	ldd	r21, Z+1	; 0x01
    1b20:	84 0f       	add	r24, r20
    1b22:	95 1f       	adc	r25, r21
    1b24:	c8 17       	cp	r28, r24
    1b26:	d9 07       	cpc	r29, r25
    1b28:	59 f4       	brne	.+22     	; 0x1b40 <free+0x82>
    1b2a:	88 81       	ld	r24, Y
    1b2c:	99 81       	ldd	r25, Y+1	; 0x01
    1b2e:	84 0f       	add	r24, r20
    1b30:	95 1f       	adc	r25, r21
    1b32:	02 96       	adiw	r24, 0x02	; 2
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3c:	93 83       	std	Z+3, r25	; 0x03
    1b3e:	82 83       	std	Z+2, r24	; 0x02
    1b40:	21 15       	cp	r18, r1
    1b42:	31 05       	cpc	r19, r1
    1b44:	29 f4       	brne	.+10     	; 0x1b50 <free+0x92>
    1b46:	f0 93 a6 00 	sts	0x00A6, r31	; 0x8000a6 <__flp+0x1>
    1b4a:	e0 93 a5 00 	sts	0x00A5, r30	; 0x8000a5 <__flp>
    1b4e:	3d c0       	rjmp	.+122    	; 0x1bca <free+0x10c>
    1b50:	e9 01       	movw	r28, r18
    1b52:	fb 83       	std	Y+3, r31	; 0x03
    1b54:	ea 83       	std	Y+2, r30	; 0x02
    1b56:	49 91       	ld	r20, Y+
    1b58:	59 91       	ld	r21, Y+
    1b5a:	c4 0f       	add	r28, r20
    1b5c:	d5 1f       	adc	r29, r21
    1b5e:	ec 17       	cp	r30, r28
    1b60:	fd 07       	cpc	r31, r29
    1b62:	61 f4       	brne	.+24     	; 0x1b7c <free+0xbe>
    1b64:	80 81       	ld	r24, Z
    1b66:	91 81       	ldd	r25, Z+1	; 0x01
    1b68:	84 0f       	add	r24, r20
    1b6a:	95 1f       	adc	r25, r21
    1b6c:	02 96       	adiw	r24, 0x02	; 2
    1b6e:	e9 01       	movw	r28, r18
    1b70:	99 83       	std	Y+1, r25	; 0x01
    1b72:	88 83       	st	Y, r24
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	9b 83       	std	Y+3, r25	; 0x03
    1b7a:	8a 83       	std	Y+2, r24	; 0x02
    1b7c:	e0 e0       	ldi	r30, 0x00	; 0
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	12 96       	adiw	r26, 0x02	; 2
    1b82:	8d 91       	ld	r24, X+
    1b84:	9c 91       	ld	r25, X
    1b86:	13 97       	sbiw	r26, 0x03	; 3
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	19 f0       	breq	.+6      	; 0x1b92 <free+0xd4>
    1b8c:	fd 01       	movw	r30, r26
    1b8e:	dc 01       	movw	r26, r24
    1b90:	f7 cf       	rjmp	.-18     	; 0x1b80 <free+0xc2>
    1b92:	8d 91       	ld	r24, X+
    1b94:	9c 91       	ld	r25, X
    1b96:	11 97       	sbiw	r26, 0x01	; 1
    1b98:	9d 01       	movw	r18, r26
    1b9a:	2e 5f       	subi	r18, 0xFE	; 254
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	82 0f       	add	r24, r18
    1ba0:	93 1f       	adc	r25, r19
    1ba2:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <__brkval>
    1ba6:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	69 f4       	brne	.+26     	; 0x1bca <free+0x10c>
    1bb0:	30 97       	sbiw	r30, 0x00	; 0
    1bb2:	29 f4       	brne	.+10     	; 0x1bbe <free+0x100>
    1bb4:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__flp+0x1>
    1bb8:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__flp>
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <free+0x104>
    1bbe:	13 82       	std	Z+3, r1	; 0x03
    1bc0:	12 82       	std	Z+2, r1	; 0x02
    1bc2:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <__brkval+0x1>
    1bc6:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <__brkval>
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	08 95       	ret

00001bd0 <realloc>:
    1bd0:	a0 e0       	ldi	r26, 0x00	; 0
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ed ee       	ldi	r30, 0xED	; 237
    1bd6:	fd e0       	ldi	r31, 0x0D	; 13
    1bd8:	01 c1       	rjmp	.+514    	; 0x1ddc <__prologue_saves__+0x8>
    1bda:	ec 01       	movw	r28, r24
    1bdc:	00 97       	sbiw	r24, 0x00	; 0
    1bde:	19 f4       	brne	.+6      	; 0x1be6 <realloc+0x16>
    1be0:	cb 01       	movw	r24, r22
    1be2:	d5 de       	rcall	.-598    	; 0x198e <malloc>
    1be4:	b0 c0       	rjmp	.+352    	; 0x1d46 <realloc+0x176>
    1be6:	fc 01       	movw	r30, r24
    1be8:	e6 0f       	add	r30, r22
    1bea:	f7 1f       	adc	r31, r23
    1bec:	9c 01       	movw	r18, r24
    1bee:	22 50       	subi	r18, 0x02	; 2
    1bf0:	31 09       	sbc	r19, r1
    1bf2:	e2 17       	cp	r30, r18
    1bf4:	f3 07       	cpc	r31, r19
    1bf6:	08 f4       	brcc	.+2      	; 0x1bfa <realloc+0x2a>
    1bf8:	a4 c0       	rjmp	.+328    	; 0x1d42 <realloc+0x172>
    1bfa:	d9 01       	movw	r26, r18
    1bfc:	0d 91       	ld	r16, X+
    1bfe:	1c 91       	ld	r17, X
    1c00:	11 97       	sbiw	r26, 0x01	; 1
    1c02:	06 17       	cp	r16, r22
    1c04:	17 07       	cpc	r17, r23
    1c06:	a8 f0       	brcs	.+42     	; 0x1c32 <realloc+0x62>
    1c08:	05 30       	cpi	r16, 0x05	; 5
    1c0a:	11 05       	cpc	r17, r1
    1c0c:	08 f4       	brcc	.+2      	; 0x1c10 <realloc+0x40>
    1c0e:	97 c0       	rjmp	.+302    	; 0x1d3e <realloc+0x16e>
    1c10:	c8 01       	movw	r24, r16
    1c12:	04 97       	sbiw	r24, 0x04	; 4
    1c14:	86 17       	cp	r24, r22
    1c16:	97 07       	cpc	r25, r23
    1c18:	08 f4       	brcc	.+2      	; 0x1c1c <realloc+0x4c>
    1c1a:	91 c0       	rjmp	.+290    	; 0x1d3e <realloc+0x16e>
    1c1c:	02 50       	subi	r16, 0x02	; 2
    1c1e:	11 09       	sbc	r17, r1
    1c20:	06 1b       	sub	r16, r22
    1c22:	17 0b       	sbc	r17, r23
    1c24:	01 93       	st	Z+, r16
    1c26:	11 93       	st	Z+, r17
    1c28:	6d 93       	st	X+, r22
    1c2a:	7c 93       	st	X, r23
    1c2c:	cf 01       	movw	r24, r30
    1c2e:	47 df       	rcall	.-370    	; 0x1abe <free>
    1c30:	86 c0       	rjmp	.+268    	; 0x1d3e <realloc+0x16e>
    1c32:	5b 01       	movw	r10, r22
    1c34:	a0 1a       	sub	r10, r16
    1c36:	b1 0a       	sbc	r11, r17
    1c38:	4c 01       	movw	r8, r24
    1c3a:	80 0e       	add	r8, r16
    1c3c:	91 1e       	adc	r9, r17
    1c3e:	a0 91 a5 00 	lds	r26, 0x00A5	; 0x8000a5 <__flp>
    1c42:	b0 91 a6 00 	lds	r27, 0x00A6	; 0x8000a6 <__flp+0x1>
    1c46:	61 2c       	mov	r6, r1
    1c48:	71 2c       	mov	r7, r1
    1c4a:	e1 2c       	mov	r14, r1
    1c4c:	f1 2c       	mov	r15, r1
    1c4e:	10 97       	sbiw	r26, 0x00	; 0
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <realloc+0x84>
    1c52:	46 c0       	rjmp	.+140    	; 0x1ce0 <realloc+0x110>
    1c54:	8d 91       	ld	r24, X+
    1c56:	9c 91       	ld	r25, X
    1c58:	11 97       	sbiw	r26, 0x01	; 1
    1c5a:	a8 15       	cp	r26, r8
    1c5c:	b9 05       	cpc	r27, r9
    1c5e:	b1 f5       	brne	.+108    	; 0x1ccc <realloc+0xfc>
    1c60:	6c 01       	movw	r12, r24
    1c62:	42 e0       	ldi	r20, 0x02	; 2
    1c64:	c4 0e       	add	r12, r20
    1c66:	d1 1c       	adc	r13, r1
    1c68:	ca 14       	cp	r12, r10
    1c6a:	db 04       	cpc	r13, r11
    1c6c:	78 f1       	brcs	.+94     	; 0x1ccc <realloc+0xfc>
    1c6e:	4c 01       	movw	r8, r24
    1c70:	8a 18       	sub	r8, r10
    1c72:	9b 08       	sbc	r9, r11
    1c74:	64 01       	movw	r12, r8
    1c76:	42 e0       	ldi	r20, 0x02	; 2
    1c78:	c4 0e       	add	r12, r20
    1c7a:	d1 1c       	adc	r13, r1
    1c7c:	12 96       	adiw	r26, 0x02	; 2
    1c7e:	bc 90       	ld	r11, X
    1c80:	12 97       	sbiw	r26, 0x02	; 2
    1c82:	13 96       	adiw	r26, 0x03	; 3
    1c84:	ac 91       	ld	r26, X
    1c86:	b5 e0       	ldi	r27, 0x05	; 5
    1c88:	cb 16       	cp	r12, r27
    1c8a:	d1 04       	cpc	r13, r1
    1c8c:	40 f0       	brcs	.+16     	; 0x1c9e <realloc+0xce>
    1c8e:	b2 82       	std	Z+2, r11	; 0x02
    1c90:	a3 83       	std	Z+3, r26	; 0x03
    1c92:	91 82       	std	Z+1, r9	; 0x01
    1c94:	80 82       	st	Z, r8
    1c96:	d9 01       	movw	r26, r18
    1c98:	6d 93       	st	X+, r22
    1c9a:	7c 93       	st	X, r23
    1c9c:	09 c0       	rjmp	.+18     	; 0x1cb0 <realloc+0xe0>
    1c9e:	0e 5f       	subi	r16, 0xFE	; 254
    1ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca2:	80 0f       	add	r24, r16
    1ca4:	91 1f       	adc	r25, r17
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
    1cac:	eb 2d       	mov	r30, r11
    1cae:	fa 2f       	mov	r31, r26
    1cb0:	e1 14       	cp	r14, r1
    1cb2:	f1 04       	cpc	r15, r1
    1cb4:	31 f0       	breq	.+12     	; 0x1cc2 <realloc+0xf2>
    1cb6:	d7 01       	movw	r26, r14
    1cb8:	13 96       	adiw	r26, 0x03	; 3
    1cba:	fc 93       	st	X, r31
    1cbc:	ee 93       	st	-X, r30
    1cbe:	12 97       	sbiw	r26, 0x02	; 2
    1cc0:	3e c0       	rjmp	.+124    	; 0x1d3e <realloc+0x16e>
    1cc2:	f0 93 a6 00 	sts	0x00A6, r31	; 0x8000a6 <__flp+0x1>
    1cc6:	e0 93 a5 00 	sts	0x00A5, r30	; 0x8000a5 <__flp>
    1cca:	39 c0       	rjmp	.+114    	; 0x1d3e <realloc+0x16e>
    1ccc:	68 16       	cp	r6, r24
    1cce:	79 06       	cpc	r7, r25
    1cd0:	08 f4       	brcc	.+2      	; 0x1cd4 <realloc+0x104>
    1cd2:	3c 01       	movw	r6, r24
    1cd4:	7d 01       	movw	r14, r26
    1cd6:	12 96       	adiw	r26, 0x02	; 2
    1cd8:	0d 90       	ld	r0, X+
    1cda:	bc 91       	ld	r27, X
    1cdc:	a0 2d       	mov	r26, r0
    1cde:	b7 cf       	rjmp	.-146    	; 0x1c4e <realloc+0x7e>
    1ce0:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <__brkval>
    1ce4:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <__brkval+0x1>
    1ce8:	88 16       	cp	r8, r24
    1cea:	99 06       	cpc	r9, r25
    1cec:	e1 f4       	brne	.+56     	; 0x1d26 <realloc+0x156>
    1cee:	66 16       	cp	r6, r22
    1cf0:	77 06       	cpc	r7, r23
    1cf2:	c8 f4       	brcc	.+50     	; 0x1d26 <realloc+0x156>
    1cf4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1cf8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	41 f4       	brne	.+16     	; 0x1d10 <realloc+0x140>
    1d00:	8d b7       	in	r24, 0x3d	; 61
    1d02:	9e b7       	in	r25, 0x3e	; 62
    1d04:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1d08:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1d0c:	84 1b       	sub	r24, r20
    1d0e:	95 0b       	sbc	r25, r21
    1d10:	e8 17       	cp	r30, r24
    1d12:	f9 07       	cpc	r31, r25
    1d14:	b0 f4       	brcc	.+44     	; 0x1d42 <realloc+0x172>
    1d16:	f0 93 a4 00 	sts	0x00A4, r31	; 0x8000a4 <__brkval+0x1>
    1d1a:	e0 93 a3 00 	sts	0x00A3, r30	; 0x8000a3 <__brkval>
    1d1e:	f9 01       	movw	r30, r18
    1d20:	71 83       	std	Z+1, r23	; 0x01
    1d22:	60 83       	st	Z, r22
    1d24:	0c c0       	rjmp	.+24     	; 0x1d3e <realloc+0x16e>
    1d26:	cb 01       	movw	r24, r22
    1d28:	32 de       	rcall	.-924    	; 0x198e <malloc>
    1d2a:	7c 01       	movw	r14, r24
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	49 f0       	breq	.+18     	; 0x1d42 <realloc+0x172>
    1d30:	a8 01       	movw	r20, r16
    1d32:	be 01       	movw	r22, r28
    1d34:	0c d0       	rcall	.+24     	; 0x1d4e <memcpy>
    1d36:	ce 01       	movw	r24, r28
    1d38:	c2 de       	rcall	.-636    	; 0x1abe <free>
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	04 c0       	rjmp	.+8      	; 0x1d46 <realloc+0x176>
    1d3e:	ce 01       	movw	r24, r28
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <realloc+0x176>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
    1d4a:	ee e0       	ldi	r30, 0x0E	; 14
    1d4c:	63 c0       	rjmp	.+198    	; 0x1e14 <__epilogue_restores__+0x8>

00001d4e <memcpy>:
    1d4e:	fb 01       	movw	r30, r22
    1d50:	dc 01       	movw	r26, r24
    1d52:	02 c0       	rjmp	.+4      	; 0x1d58 <memcpy+0xa>
    1d54:	01 90       	ld	r0, Z+
    1d56:	0d 92       	st	X+, r0
    1d58:	41 50       	subi	r20, 0x01	; 1
    1d5a:	50 40       	sbci	r21, 0x00	; 0
    1d5c:	d8 f7       	brcc	.-10     	; 0x1d54 <memcpy+0x6>
    1d5e:	08 95       	ret

00001d60 <memset>:
    1d60:	dc 01       	movw	r26, r24
    1d62:	01 c0       	rjmp	.+2      	; 0x1d66 <memset+0x6>
    1d64:	6d 93       	st	X+, r22
    1d66:	41 50       	subi	r20, 0x01	; 1
    1d68:	50 40       	sbci	r21, 0x00	; 0
    1d6a:	e0 f7       	brcc	.-8      	; 0x1d64 <memset+0x4>
    1d6c:	08 95       	ret

00001d6e <strlcat>:
    1d6e:	dc 01       	movw	r26, r24
    1d70:	fb 01       	movw	r30, r22
    1d72:	41 50       	subi	r20, 0x01	; 1
    1d74:	50 40       	sbci	r21, 0x00	; 0
    1d76:	70 f0       	brcs	.+28     	; 0x1d94 <strlcat+0x26>
    1d78:	0d 90       	ld	r0, X+
    1d7a:	00 20       	and	r0, r0
    1d7c:	d1 f7       	brne	.-12     	; 0x1d72 <strlcat+0x4>
    1d7e:	11 97       	sbiw	r26, 0x01	; 1
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <strlcat+0x1c>
    1d82:	01 90       	ld	r0, Z+
    1d84:	0d 92       	st	X+, r0
    1d86:	00 20       	and	r0, r0
    1d88:	61 f0       	breq	.+24     	; 0x1da2 <strlcat+0x34>
    1d8a:	41 50       	subi	r20, 0x01	; 1
    1d8c:	50 40       	sbci	r21, 0x00	; 0
    1d8e:	c8 f7       	brcc	.-14     	; 0x1d82 <strlcat+0x14>
    1d90:	1c 92       	st	X, r1
    1d92:	bf 01       	movw	r22, r30
    1d94:	01 90       	ld	r0, Z+
    1d96:	00 20       	and	r0, r0
    1d98:	e9 f7       	brne	.-6      	; 0x1d94 <strlcat+0x26>
    1d9a:	e6 1b       	sub	r30, r22
    1d9c:	f7 0b       	sbc	r31, r23
    1d9e:	ae 0f       	add	r26, r30
    1da0:	bf 1f       	adc	r27, r31
    1da2:	08 94       	sec
    1da4:	a8 0b       	sbc	r26, r24
    1da6:	b9 0b       	sbc	r27, r25
    1da8:	cd 01       	movw	r24, r26
    1daa:	08 95       	ret

00001dac <strlcpy>:
    1dac:	dc 01       	movw	r26, r24
    1dae:	fb 01       	movw	r30, r22
    1db0:	41 50       	subi	r20, 0x01	; 1
    1db2:	50 40       	sbci	r21, 0x00	; 0
    1db4:	58 f0       	brcs	.+22     	; 0x1dcc <strlcpy+0x20>
    1db6:	49 f0       	breq	.+18     	; 0x1dca <strlcpy+0x1e>
    1db8:	01 90       	ld	r0, Z+
    1dba:	0d 92       	st	X+, r0
    1dbc:	00 20       	and	r0, r0
    1dbe:	c1 f7       	brne	.-16     	; 0x1db0 <strlcpy+0x4>
    1dc0:	e6 1b       	sub	r30, r22
    1dc2:	f7 0b       	sbc	r31, r23
    1dc4:	31 97       	sbiw	r30, 0x01	; 1
    1dc6:	cf 01       	movw	r24, r30
    1dc8:	08 95       	ret
    1dca:	1c 92       	st	X, r1
    1dcc:	01 90       	ld	r0, Z+
    1dce:	00 20       	and	r0, r0
    1dd0:	e9 f7       	brne	.-6      	; 0x1dcc <strlcpy+0x20>
    1dd2:	f6 cf       	rjmp	.-20     	; 0x1dc0 <strlcpy+0x14>

00001dd4 <__prologue_saves__>:
    1dd4:	2f 92       	push	r2
    1dd6:	3f 92       	push	r3
    1dd8:	4f 92       	push	r4
    1dda:	5f 92       	push	r5
    1ddc:	6f 92       	push	r6
    1dde:	7f 92       	push	r7
    1de0:	8f 92       	push	r8
    1de2:	9f 92       	push	r9
    1de4:	af 92       	push	r10
    1de6:	bf 92       	push	r11
    1de8:	cf 92       	push	r12
    1dea:	df 92       	push	r13
    1dec:	ef 92       	push	r14
    1dee:	ff 92       	push	r15
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	ca 1b       	sub	r28, r26
    1dfe:	db 0b       	sbc	r29, r27
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	de bf       	out	0x3e, r29	; 62
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	cd bf       	out	0x3d, r28	; 61
    1e0a:	09 94       	ijmp

00001e0c <__epilogue_restores__>:
    1e0c:	2a 88       	ldd	r2, Y+18	; 0x12
    1e0e:	39 88       	ldd	r3, Y+17	; 0x11
    1e10:	48 88       	ldd	r4, Y+16	; 0x10
    1e12:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e14:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e16:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e18:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e1e:	b9 84       	ldd	r11, Y+9	; 0x09
    1e20:	c8 84       	ldd	r12, Y+8	; 0x08
    1e22:	df 80       	ldd	r13, Y+7	; 0x07
    1e24:	ee 80       	ldd	r14, Y+6	; 0x06
    1e26:	fd 80       	ldd	r15, Y+5	; 0x05
    1e28:	0c 81       	ldd	r16, Y+4	; 0x04
    1e2a:	1b 81       	ldd	r17, Y+3	; 0x03
    1e2c:	aa 81       	ldd	r26, Y+2	; 0x02
    1e2e:	b9 81       	ldd	r27, Y+1	; 0x01
    1e30:	ce 0f       	add	r28, r30
    1e32:	d1 1d       	adc	r29, r1
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	ed 01       	movw	r28, r26
    1e40:	08 95       	ret

00001e42 <_exit>:
    1e42:	f8 94       	cli

00001e44 <__stop_program>:
    1e44:	ff cf       	rjmp	.-2      	; 0x1e44 <__stop_program>
