
SN74HC595_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000d20  00000db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080007a  0080007a  00000dce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ec7  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117a  00000000  00000000  00003f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f9e  00000000  00000000  000050b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  00006054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c11  00000000  00000000  000066b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001567  00000000  00000000  000072c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00008828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	09 c2       	rjmp	.+1042   	; 0x424 <__vector_8>
  12:	3d c1       	rjmp	.+634    	; 0x28e <__vector_9>
  14:	63 c1       	rjmp	.+710    	; 0x2dc <__vector_10>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
  26:	56 02       	muls	r21, r22

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf e5       	ldi	r28, 0x5F	; 95
  2e:	d4 e0       	ldi	r29, 0x04	; 4
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a0 e6       	ldi	r26, 0x60	; 96
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	e0 e2       	ldi	r30, 0x20	; 32
  3c:	fd e0       	ldi	r31, 0x0D	; 13
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	aa 37       	cpi	r26, 0x7A	; 122
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	aa e7       	ldi	r26, 0x7A	; 122
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a2 39       	cpi	r26, 0x92	; 146
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	c4 e1       	ldi	r28, 0x14	; 20
  5e:	d0 e0       	ldi	r29, 0x00	; 0
  60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
  62:	21 97       	sbiw	r28, 0x01	; 1
  64:	fe 01       	movw	r30, r28
  66:	2d d4       	rcall	.+2138   	; 0x8c2 <__tablejump2__>
  68:	c3 31       	cpi	r28, 0x13	; 19
  6a:	d1 07       	cpc	r29, r17
  6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
  6e:	5d d1       	rcall	.+698    	; 0x32a <main>
  70:	55 c6       	rjmp	.+3242   	; 0xd1c <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_ZN6BufferC1Eh>:
		free((uint8_t*)this->buffer[i]);
	}
	
	free((uint8_t**)this->buffer);
	free((uint8_t*)this->dataSize);
}
  74:	ff 92       	push	r15
  76:	0f 93       	push	r16
  78:	1f 93       	push	r17
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	8c 01       	movw	r16, r24
  80:	f6 2e       	mov	r15, r22
  82:	fc 01       	movw	r30, r24
  84:	60 83       	st	Z, r22
  86:	16 82       	std	Z+6, r1	; 0x06
  88:	15 82       	std	Z+5, r1	; 0x05
  8a:	17 82       	std	Z+7, r1	; 0x07
  8c:	10 86       	std	Z+8, r1	; 0x08
  8e:	cf 2d       	mov	r28, r15
  90:	d0 e0       	ldi	r29, 0x00	; 0
  92:	cc 0f       	add	r28, r28
  94:	dd 1f       	adc	r29, r29
  96:	ce 01       	movw	r24, r28
  98:	1a d4       	rcall	.+2100   	; 0x8ce <malloc>
  9a:	f8 01       	movw	r30, r16
  9c:	92 83       	std	Z+2, r25	; 0x02
  9e:	81 83       	std	Z+1, r24	; 0x01
  a0:	00 97       	sbiw	r24, 0x00	; 0
  a2:	a9 f3       	breq	.-22     	; 0x8e <_ZN6BufferC1Eh+0x1a>
  a4:	ae 01       	movw	r20, r28
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	fa d5       	rcall	.+3060   	; 0xca0 <memset>
  ac:	f8 01       	movw	r30, r16
  ae:	80 81       	ld	r24, Z
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0d d4       	rcall	.+2074   	; 0x8ce <malloc>
  b4:	f8 01       	movw	r30, r16
  b6:	94 83       	std	Z+4, r25	; 0x04
  b8:	83 83       	std	Z+3, r24	; 0x03
  ba:	89 2b       	or	r24, r25
  bc:	b9 f3       	breq	.-18     	; 0xac <_ZN6BufferC1Eh+0x38>
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	1f 91       	pop	r17
  c4:	0f 91       	pop	r16
  c6:	ff 90       	pop	r15
  c8:	08 95       	ret

000000ca <_ZN6Buffer4ReadEv>:
  ca:	fc 01       	movw	r30, r24
  cc:	21 81       	ldd	r18, Z+1	; 0x01
  ce:	32 81       	ldd	r19, Z+2	; 0x02
  d0:	80 85       	ldd	r24, Z+8	; 0x08
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e2 0f       	add	r30, r18
  dc:	f3 1f       	adc	r31, r19
  de:	80 81       	ld	r24, Z
  e0:	91 81       	ldd	r25, Z+1	; 0x01
  e2:	08 95       	ret

000000e4 <_ZN6Buffer9BlockSizeEv>:
  e4:	fc 01       	movw	r30, r24
  e6:	86 81       	ldd	r24, Z+6	; 0x06
  e8:	88 23       	and	r24, r24
  ea:	39 f0       	breq	.+14     	; 0xfa <_ZN6Buffer9BlockSizeEv+0x16>
  ec:	83 81       	ldd	r24, Z+3	; 0x03
  ee:	94 81       	ldd	r25, Z+4	; 0x04
  f0:	20 85       	ldd	r18, Z+8	; 0x08
  f2:	fc 01       	movw	r30, r24
  f4:	e2 0f       	add	r30, r18
  f6:	f1 1d       	adc	r31, r1
  f8:	80 81       	ld	r24, Z
  fa:	08 95       	ret

000000fc <_ZN6Buffer10ClearBlockEv>:
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
 102:	29 81       	ldd	r18, Y+1	; 0x01
 104:	3a 81       	ldd	r19, Y+2	; 0x02
 106:	88 85       	ldd	r24, Y+8	; 0x08
 108:	e8 2f       	mov	r30, r24
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	e2 0f       	add	r30, r18
 112:	f3 1f       	adc	r31, r19
 114:	80 81       	ld	r24, Z
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	72 d4       	rcall	.+2276   	; 0x9fe <free>
 11a:	88 85       	ldd	r24, Y+8	; 0x08
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	68 81       	ld	r22, Y
 120:	c4 d3       	rcall	.+1928   	; 0x8aa <__udivmodqi4>
 122:	98 87       	std	Y+8, r25	; 0x08
 124:	8e 81       	ldd	r24, Y+6	; 0x06
 126:	81 50       	subi	r24, 0x01	; 1
 128:	8e 83       	std	Y+6, r24	; 0x06
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <_ZN6BuffernwEj>:

void* Buffer::operator new(size_t size)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
 136:	ce 01       	movw	r24, r28
 138:	ca d3       	rcall	.+1940   	; 0x8ce <malloc>
	}while(ptr == nullptr);
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	e1 f3       	breq	.-8      	; 0x136 <_ZN6BuffernwEj+0x6>
	
	return ptr;
}
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <_Z41__static_initialization_and_destruction_0ii>:
	
	while (1)
	{
		
	}
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	09 f0       	breq	.+2      	; 0x152 <_Z41__static_initialization_and_destruction_0ii+0xe>
 150:	99 c0       	rjmp	.+306    	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
 152:	6f 3f       	cpi	r22, 0xFF	; 255
 154:	7f 4f       	sbci	r23, 0xFF	; 255
 156:	09 f0       	breq	.+2      	; 0x15a <_Z41__static_initialization_and_destruction_0ii+0x16>
 158:	95 c0       	rjmp	.+298    	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>

#include "Port.h"
#include "SPI_Master.h"
#include "SN74HC595.h"

Port *sck = new Port(&PORTB, &DDRB, &PINB, 5);
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0c d2       	rcall	.+1048   	; 0x578 <_ZN4PortnwEj>
 160:	ec 01       	movw	r28, r24
 162:	05 e0       	ldi	r16, 0x05	; 5
 164:	26 e3       	ldi	r18, 0x36	; 54
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	47 e3       	ldi	r20, 0x37	; 55
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	68 e3       	ldi	r22, 0x38	; 56
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	f1 d1       	rcall	.+994    	; 0x554 <_ZN4PortC1EPVhS1_S1_h>
 172:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <sck+0x1>
 176:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <sck>
Port *mosi = new Port(&PORTB, &DDRB, &PINB, 3);
 17a:	87 e0       	ldi	r24, 0x07	; 7
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	fc d1       	rcall	.+1016   	; 0x578 <_ZN4PortnwEj>
 180:	ec 01       	movw	r28, r24
 182:	03 e0       	ldi	r16, 0x03	; 3
 184:	26 e3       	ldi	r18, 0x36	; 54
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	47 e3       	ldi	r20, 0x37	; 55
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	68 e3       	ldi	r22, 0x38	; 56
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	e1 d1       	rcall	.+962    	; 0x554 <_ZN4PortC1EPVhS1_S1_h>
 192:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <mosi+0x1>
 196:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <mosi>
Port *miso = new Port(&PORTB, &DDRB, &PINB, 4);
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ec d1       	rcall	.+984    	; 0x578 <_ZN4PortnwEj>
 1a0:	ec 01       	movw	r28, r24
 1a2:	04 e0       	ldi	r16, 0x04	; 4
 1a4:	26 e3       	ldi	r18, 0x36	; 54
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	47 e3       	ldi	r20, 0x37	; 55
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	68 e3       	ldi	r22, 0x38	; 56
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	d1 d1       	rcall	.+930    	; 0x554 <_ZN4PortC1EPVhS1_S1_h>
 1b2:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <miso+0x1>
 1b6:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <miso>
Port *ss = new Port(&PORTB, &DDRB, &PINB, 2);
 1ba:	87 e0       	ldi	r24, 0x07	; 7
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	dc d1       	rcall	.+952    	; 0x578 <_ZN4PortnwEj>
 1c0:	ec 01       	movw	r28, r24
 1c2:	02 e0       	ldi	r16, 0x02	; 2
 1c4:	26 e3       	ldi	r18, 0x36	; 54
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	47 e3       	ldi	r20, 0x37	; 55
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	68 e3       	ldi	r22, 0x38	; 56
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	c1 d1       	rcall	.+898    	; 0x554 <_ZN4PortC1EPVhS1_S1_h>
 1d2:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <ss+0x1>
 1d6:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <ss>

SPI_Master *spi = new SPI_Master(sck, mosi, miso, ss);
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	27 d2       	rcall	.+1102   	; 0x62e <_ZN10SPI_MasternwEj>
 1e0:	ec 01       	movw	r28, r24
 1e2:	00 91 86 00 	lds	r16, 0x0086	; 0x800086 <ss>
 1e6:	10 91 87 00 	lds	r17, 0x0087	; 0x800087 <ss+0x1>
 1ea:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <miso>
 1ee:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <miso+0x1>
 1f2:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <mosi>
 1f6:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <mosi+0x1>
 1fa:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <sck>
 1fe:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <sck+0x1>
 202:	2d d2       	rcall	.+1114   	; 0x65e <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>
 204:	d0 93 85 00 	sts	0x0085, r29	; 0x800085 <spi+0x1>
 208:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <spi>

Port *latch_1 = new Port(&PORTB, &DDRB, &PINB, 0);
 20c:	87 e0       	ldi	r24, 0x07	; 7
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	b3 d1       	rcall	.+870    	; 0x578 <_ZN4PortnwEj>
 212:	ec 01       	movw	r28, r24
 214:	00 e0       	ldi	r16, 0x00	; 0
 216:	26 e3       	ldi	r18, 0x36	; 54
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	47 e3       	ldi	r20, 0x37	; 55
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	68 e3       	ldi	r22, 0x38	; 56
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	98 d1       	rcall	.+816    	; 0x554 <_ZN4PortC1EPVhS1_S1_h>
 224:	d0 93 83 00 	sts	0x0083, r29	; 0x800083 <latch_1+0x1>
 228:	c0 93 82 00 	sts	0x0082, r28	; 0x800082 <latch_1>
Port *latch_2 = new Port(&PORTB, &DDRB, &PINB, 1);
 22c:	87 e0       	ldi	r24, 0x07	; 7
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	a3 d1       	rcall	.+838    	; 0x578 <_ZN4PortnwEj>
 232:	ec 01       	movw	r28, r24
 234:	01 e0       	ldi	r16, 0x01	; 1
 236:	26 e3       	ldi	r18, 0x36	; 54
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	47 e3       	ldi	r20, 0x37	; 55
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	68 e3       	ldi	r22, 0x38	; 56
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	88 d1       	rcall	.+784    	; 0x554 <_ZN4PortC1EPVhS1_S1_h>
 244:	d0 93 81 00 	sts	0x0081, r29	; 0x800081 <latch_2+0x1>
 248:	c0 93 80 00 	sts	0x0080, r28	; 0x800080 <latch_2>

SN74HC595 *reg_1 = new SN74HC595(latch_1, 5);
 24c:	8a e0       	ldi	r24, 0x0A	; 10
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	ce d1       	rcall	.+924    	; 0x5ee <_ZN9SN74HC595nwEj>
 252:	ec 01       	movw	r28, r24
 254:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <latch_1>
 258:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <latch_1+0x1>
 25c:	45 e0       	ldi	r20, 0x05	; 5
 25e:	a7 d1       	rcall	.+846    	; 0x5ae <_ZN9SN74HC595C1EP4Porth>
 260:	d0 93 7f 00 	sts	0x007F, r29	; 0x80007f <reg_1+0x1>
 264:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <reg_1>
SN74HC595 *reg_2 = new SN74HC595(latch_2, 5);
 268:	8a e0       	ldi	r24, 0x0A	; 10
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	c0 d1       	rcall	.+896    	; 0x5ee <_ZN9SN74HC595nwEj>
 26e:	ec 01       	movw	r28, r24
 270:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <latch_2>
 274:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <latch_2+0x1>
 278:	45 e0       	ldi	r20, 0x05	; 5
 27a:	99 d1       	rcall	.+818    	; 0x5ae <_ZN9SN74HC595C1EP4Porth>
 27c:	d0 93 7d 00 	sts	0x007D, r29	; 0x80007d <reg_2+0x1>
 280:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <reg_2>
	
	while (1)
	{
		
	}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

0000028e <__vector_9>:
	reg_1->SetOutput(data_1, sizeof(data_1));
	reg_2->SetOutput(data_2, sizeof(data_2));
}

ISR(TIMER0_OVF_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	2f 93       	push	r18
 29a:	3f 93       	push	r19
 29c:	4f 93       	push	r20
 29e:	5f 93       	push	r21
 2a0:	6f 93       	push	r22
 2a2:	7f 93       	push	r23
 2a4:	8f 93       	push	r24
 2a6:	9f 93       	push	r25
 2a8:	af 93       	push	r26
 2aa:	bf 93       	push	r27
 2ac:	ef 93       	push	r30
 2ae:	ff 93       	push	r31
	spi->CheckDevices();
 2b0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <spi>
 2b4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <spi+0x1>
 2b8:	7d d2       	rcall	.+1274   	; 0x7b4 <_ZN10SPI_Master12CheckDevicesEv>
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_10>:

ISR(SPI_STC_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	af 93       	push	r26
 2f8:	bf 93       	push	r27
 2fa:	ef 93       	push	r30
 2fc:	ff 93       	push	r31
	spi->NextOperation();
 2fe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <spi>
 302:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <spi+0x1>
 306:	2b d2       	rcall	.+1110   	; 0x75e <_ZN10SPI_Master13NextOperationEv>
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <main>:

int main(void)
{
	//T0
	TCCR0|=(1<<CS02)|(1<<CS00);	//prescaler 1024
 32a:	83 b7       	in	r24, 0x33	; 51
 32c:	85 60       	ori	r24, 0x05	; 5
 32e:	83 bf       	out	0x33, r24	; 51
	TCCR1B|=(1<<CS11)|(1<<CS10);
 330:	8e b5       	in	r24, 0x2e	; 46
 332:	83 60       	ori	r24, 0x03	; 3
 334:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE0)|(1<<TOIE1);			//enable interrupt OVF
 336:	89 b7       	in	r24, 0x39	; 57
 338:	85 60       	ori	r24, 0x05	; 5
 33a:	89 bf       	out	0x39, r24	; 57
		
	spi->AddDevice(reg_1);
 33c:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <reg_1>
 340:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <reg_1+0x1>
 344:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <spi>
 348:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <spi+0x1>
 34c:	ec d1       	rcall	.+984    	; 0x726 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	spi->AddDevice(reg_2);
 34e:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <reg_2>
 352:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <reg_2+0x1>
 356:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <spi>
 35a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <spi+0x1>
 35e:	e3 d1       	rcall	.+966    	; 0x726 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	
	sei();
 360:	78 94       	sei
 362:	ff cf       	rjmp	.-2      	; 0x362 <main+0x38>

00000364 <_ZN6Buffer5WriteIjEEvRT_h>:
	uint8_t writePtr;
	uint8_t readPtr;
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
 364:	bf 92       	push	r11
 366:	cf 92       	push	r12
 368:	df 92       	push	r13
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	8c 01       	movw	r16, r24
 378:	7b 01       	movw	r14, r22
 37a:	b4 2e       	mov	r11, r20
{	
	do 
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
 37c:	d8 01       	movw	r26, r16
 37e:	17 96       	adiw	r26, 0x07	; 7
 380:	cc 91       	ld	r28, X
 382:	17 97       	sbiw	r26, 0x07	; 7
 384:	d0 e0       	ldi	r29, 0x00	; 0
 386:	cc 0f       	add	r28, r28
 388:	dd 1f       	adc	r29, r29
 38a:	11 96       	adiw	r26, 0x01	; 1
 38c:	8d 91       	ld	r24, X+
 38e:	9c 91       	ld	r25, X
 390:	12 97       	sbiw	r26, 0x02	; 2
 392:	c8 0f       	add	r28, r24
 394:	d9 1f       	adc	r29, r25
 396:	cb 2c       	mov	r12, r11
 398:	d1 2c       	mov	r13, r1
 39a:	c6 01       	movw	r24, r12
 39c:	98 d2       	rcall	.+1328   	; 0x8ce <malloc>
 39e:	99 83       	std	Y+1, r25	; 0x01
 3a0:	88 83       	st	Y, r24
	} while (this->buffer[this->writePtr] == nullptr);
 3a2:	f8 01       	movw	r30, r16
 3a4:	87 81       	ldd	r24, Z+7	; 0x07
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	9c 01       	movw	r18, r24
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	01 80       	ldd	r0, Z+1	; 0x01
 3b0:	f2 81       	ldd	r31, Z+2	; 0x02
 3b2:	e0 2d       	mov	r30, r0
 3b4:	e2 0f       	add	r30, r18
 3b6:	f3 1f       	adc	r31, r19
 3b8:	20 81       	ld	r18, Z
 3ba:	31 81       	ldd	r19, Z+1	; 0x01
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
{	
	do 
 3bc:	23 2b       	or	r18, r19
 3be:	f1 f2       	breq	.-68     	; 0x37c <_ZN6Buffer5WriteIjEEvRT_h+0x18>
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
	} while (this->buffer[this->writePtr] == nullptr);
	
	this->dataSize[this->writePtr] = dataSize;	
 3c0:	d8 01       	movw	r26, r16
 3c2:	13 96       	adiw	r26, 0x03	; 3
 3c4:	2d 91       	ld	r18, X+
 3c6:	3c 91       	ld	r19, X
 3c8:	14 97       	sbiw	r26, 0x04	; 4
 3ca:	f9 01       	movw	r30, r18
 3cc:	e8 0f       	add	r30, r24
 3ce:	f9 1f       	adc	r31, r25
 3d0:	b0 82       	st	Z, r11
	
	memcpy(this->buffer[this->writePtr], &data, dataSize);
 3d2:	17 96       	adiw	r26, 0x07	; 7
 3d4:	ec 91       	ld	r30, X
 3d6:	17 97       	sbiw	r26, 0x07	; 7
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	11 96       	adiw	r26, 0x01	; 1
 3e0:	8d 91       	ld	r24, X+
 3e2:	9c 91       	ld	r25, X
 3e4:	12 97       	sbiw	r26, 0x02	; 2
 3e6:	e8 0f       	add	r30, r24
 3e8:	f9 1f       	adc	r31, r25
 3ea:	a6 01       	movw	r20, r12
 3ec:	b7 01       	movw	r22, r14
 3ee:	80 81       	ld	r24, Z
 3f0:	91 81       	ldd	r25, Z+1	; 0x01
 3f2:	4d d4       	rcall	.+2202   	; 0xc8e <memcpy>
	
	++this->writePtr %= this->bufferSize;
 3f4:	f8 01       	movw	r30, r16
 3f6:	87 81       	ldd	r24, Z+7	; 0x07
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	60 81       	ld	r22, Z
 3fc:	56 d2       	rcall	.+1196   	; 0x8aa <__udivmodqi4>
 3fe:	97 83       	std	Z+7, r25	; 0x07
	this->bufferCounter++;
 400:	86 81       	ldd	r24, Z+6	; 0x06
 402:	8f 5f       	subi	r24, 0xFF	; 255
 404:	86 83       	std	Z+6, r24	; 0x06
}
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	ff 90       	pop	r15
 410:	ef 90       	pop	r14
 412:	df 90       	pop	r13
 414:	cf 90       	pop	r12
 416:	bf 90       	pop	r11
 418:	08 95       	ret

0000041a <_ZN9SN74HC5959SetOutputIjEEvRT_h>:
};

template <typename T>
void SN74HC595::SetOutput(T &data, uint8_t dataSize)
{
	this->buffer->Write(data, dataSize);
 41a:	fc 01       	movw	r30, r24
 41c:	80 85       	ldd	r24, Z+8	; 0x08
 41e:	91 85       	ldd	r25, Z+9	; 0x09
 420:	a1 df       	rcall	.-190    	; 0x364 <_ZN6Buffer5WriteIjEEvRT_h>
 422:	08 95       	ret

00000424 <__vector_8>:

uint16_t data_1 = 0;
uint16_t data_2 = 1;

ISR(TIMER1_OVF_vect)
{
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	2f 93       	push	r18
 430:	3f 93       	push	r19
 432:	4f 93       	push	r20
 434:	5f 93       	push	r21
 436:	6f 93       	push	r22
 438:	7f 93       	push	r23
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	af 93       	push	r26
 440:	bf 93       	push	r27
 442:	ef 93       	push	r30
 444:	ff 93       	push	r31
	data_1++;
 446:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 44a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 454:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
	data_2 += 2;	
 458:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <data_2>
 45c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <data_2+0x1>
 460:	02 96       	adiw	r24, 0x02	; 2
 462:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <data_2+0x1>
 466:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <data_2>
	reg_1->SetOutput(data_1, sizeof(data_1));
 46a:	42 e0       	ldi	r20, 0x02	; 2
 46c:	6a e7       	ldi	r22, 0x7A	; 122
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <reg_1>
 474:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <reg_1+0x1>
 478:	d0 df       	rcall	.-96     	; 0x41a <_ZN9SN74HC5959SetOutputIjEEvRT_h>
	reg_2->SetOutput(data_2, sizeof(data_2));
 47a:	42 e0       	ldi	r20, 0x02	; 2
 47c:	66 e6       	ldi	r22, 0x66	; 102
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <reg_2>
 484:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <reg_2+0x1>
 488:	c8 df       	rcall	.-112    	; 0x41a <_ZN9SN74HC5959SetOutputIjEEvRT_h>
}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	0f 90       	pop	r0
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	0f 90       	pop	r0
 4a8:	1f 90       	pop	r1
 4aa:	18 95       	reti

000004ac <_GLOBAL__sub_I_sck>:
	
	while (1)
	{
		
	}
 4ac:	6f ef       	ldi	r22, 0xFF	; 255
 4ae:	7f ef       	ldi	r23, 0xFF	; 255
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	47 de       	rcall	.-882    	; 0x144 <_Z41__static_initialization_and_destruction_0ii>
 4b6:	08 95       	ret

000004b8 <_ZN4Port10SetAsInputEv>:
bool Port::IsClear()
{
	return !(*this->PIN & (1<<this->pinNum));
}

Port::~Port(){}
 4b8:	dc 01       	movw	r26, r24
 4ba:	12 96       	adiw	r26, 0x02	; 2
 4bc:	ed 91       	ld	r30, X+
 4be:	fc 91       	ld	r31, X
 4c0:	13 97       	sbiw	r26, 0x03	; 3
 4c2:	40 81       	ld	r20, Z
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	b9 01       	movw	r22, r18
 4ca:	16 96       	adiw	r26, 0x06	; 6
 4cc:	0c 90       	ld	r0, X
 4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <_ZN4Port10SetAsInputEv+0x1c>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	0a 94       	dec	r0
 4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <_ZN4Port10SetAsInputEv+0x18>
 4d8:	cb 01       	movw	r24, r22
 4da:	80 95       	com	r24
 4dc:	84 23       	and	r24, r20
 4de:	80 83       	st	Z, r24
 4e0:	08 95       	ret

000004e2 <_ZN4Port11SetAsOutputEv>:
 4e2:	dc 01       	movw	r26, r24
 4e4:	12 96       	adiw	r26, 0x02	; 2
 4e6:	ed 91       	ld	r30, X+
 4e8:	fc 91       	ld	r31, X
 4ea:	13 97       	sbiw	r26, 0x03	; 3
 4ec:	40 81       	ld	r20, Z
 4ee:	21 e0       	ldi	r18, 0x01	; 1
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	c9 01       	movw	r24, r18
 4f4:	16 96       	adiw	r26, 0x06	; 6
 4f6:	0c 90       	ld	r0, X
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <_ZN4Port11SetAsOutputEv+0x1c>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <_ZN4Port11SetAsOutputEv+0x18>
 502:	84 2b       	or	r24, r20
 504:	80 83       	st	Z, r24
 506:	08 95       	ret

00000508 <_ZN4Port3SetEv>:
 508:	dc 01       	movw	r26, r24
 50a:	ed 91       	ld	r30, X+
 50c:	fc 91       	ld	r31, X
 50e:	11 97       	sbiw	r26, 0x01	; 1
 510:	40 81       	ld	r20, Z
 512:	21 e0       	ldi	r18, 0x01	; 1
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	c9 01       	movw	r24, r18
 518:	16 96       	adiw	r26, 0x06	; 6
 51a:	0c 90       	ld	r0, X
 51c:	02 c0       	rjmp	.+4      	; 0x522 <_ZN4Port3SetEv+0x1a>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <_ZN4Port3SetEv+0x16>
 526:	84 2b       	or	r24, r20
 528:	80 83       	st	Z, r24
 52a:	08 95       	ret

0000052c <_ZN4Port5ClearEv>:
 52c:	dc 01       	movw	r26, r24
 52e:	ed 91       	ld	r30, X+
 530:	fc 91       	ld	r31, X
 532:	11 97       	sbiw	r26, 0x01	; 1
 534:	40 81       	ld	r20, Z
 536:	21 e0       	ldi	r18, 0x01	; 1
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	b9 01       	movw	r22, r18
 53c:	16 96       	adiw	r26, 0x06	; 6
 53e:	0c 90       	ld	r0, X
 540:	02 c0       	rjmp	.+4      	; 0x546 <_ZN4Port5ClearEv+0x1a>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	0a 94       	dec	r0
 548:	e2 f7       	brpl	.-8      	; 0x542 <_ZN4Port5ClearEv+0x16>
 54a:	cb 01       	movw	r24, r22
 54c:	80 95       	com	r24
 54e:	84 23       	and	r24, r20
 550:	80 83       	st	Z, r24
 552:	08 95       	ret

00000554 <_ZN4PortC1EPVhS1_S1_h>:
 554:	0f 93       	push	r16
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	ec 01       	movw	r28, r24
 55c:	79 83       	std	Y+1, r23	; 0x01
 55e:	68 83       	st	Y, r22
 560:	5b 83       	std	Y+3, r21	; 0x03
 562:	4a 83       	std	Y+2, r20	; 0x02
 564:	3d 83       	std	Y+5, r19	; 0x05
 566:	2c 83       	std	Y+4, r18	; 0x04
 568:	0e 83       	std	Y+6, r16	; 0x06
 56a:	a6 df       	rcall	.-180    	; 0x4b8 <_ZN4Port10SetAsInputEv>
 56c:	ce 01       	movw	r24, r28
 56e:	de df       	rcall	.-68     	; 0x52c <_ZN4Port5ClearEv>
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	0f 91       	pop	r16
 576:	08 95       	ret

00000578 <_ZN4PortnwEj>:

void* Port::operator new(size_t size)
{
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
 57e:	ce 01       	movw	r24, r28
 580:	a6 d1       	rcall	.+844    	; 0x8ce <malloc>
	}while(ptr == nullptr);
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	e1 f3       	breq	.-8      	; 0x57e <_ZN4PortnwEj+0x6>
	
	return ptr;
}
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <_ZN9SN74HC5958PolarityEv>:

void SN74HC595::AddRST(Port *RST)
{
	this->RST = RST;
	
	Reset();
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	08 95       	ret

00000590 <_ZN9SN74HC5955PhaseEv>:
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	08 95       	ret

00000594 <_ZN9SN74HC5959DataOrderEv>:
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	08 95       	ret

00000598 <_ZN9SN74HC5955StartEv>:
 598:	08 95       	ret

0000059a <_ZN9SN74HC5958DataSizeEv>:
 59a:	fc 01       	movw	r30, r24
 59c:	80 85       	ldd	r24, Z+8	; 0x08
 59e:	91 85       	ldd	r25, Z+9	; 0x09
 5a0:	a1 dd       	rcall	.-1214   	; 0xe4 <_ZN6Buffer9BlockSizeEv>
 5a2:	08 95       	ret

000005a4 <_ZN9SN74HC5954DataEv>:
 5a4:	fc 01       	movw	r30, r24
 5a6:	80 85       	ldd	r24, Z+8	; 0x08
 5a8:	91 85       	ldd	r25, Z+9	; 0x09
 5aa:	8f dd       	rcall	.-1250   	; 0xca <_ZN6Buffer4ReadEv>
 5ac:	08 95       	ret

000005ae <_ZN9SN74HC595C1EP4Porth>:
 5ae:	ff 92       	push	r15
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	ec 01       	movw	r28, r24
 5ba:	cb 01       	movw	r24, r22
 5bc:	f4 2e       	mov	r15, r20
 5be:	2c e6       	ldi	r18, 0x6C	; 108
 5c0:	30 e0       	ldi	r19, 0x00	; 0
 5c2:	39 83       	std	Y+1, r19	; 0x01
 5c4:	28 83       	st	Y, r18
 5c6:	7b 83       	std	Y+3, r23	; 0x03
 5c8:	6a 83       	std	Y+2, r22	; 0x02
 5ca:	8b df       	rcall	.-234    	; 0x4e2 <_ZN4Port11SetAsOutputEv>
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	9b 81       	ldd	r25, Y+3	; 0x03
 5d0:	ad df       	rcall	.-166    	; 0x52c <_ZN4Port5ClearEv>
 5d2:	89 e0       	ldi	r24, 0x09	; 9
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	ac dd       	rcall	.-1192   	; 0x130 <_ZN6BuffernwEj>
 5d8:	8c 01       	movw	r16, r24
 5da:	6f 2d       	mov	r22, r15
 5dc:	4b dd       	rcall	.-1386   	; 0x74 <_ZN6BufferC1Eh>
 5de:	19 87       	std	Y+9, r17	; 0x09
 5e0:	08 87       	std	Y+8, r16	; 0x08
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	1f 91       	pop	r17
 5e8:	0f 91       	pop	r16
 5ea:	ff 90       	pop	r15
 5ec:	08 95       	ret

000005ee <_ZN9SN74HC595nwEj>:
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	ec 01       	movw	r28, r24
 5f4:	ce 01       	movw	r24, r28
 5f6:	6b d1       	rcall	.+726    	; 0x8ce <malloc>
 5f8:	00 97       	sbiw	r24, 0x00	; 0
 5fa:	e1 f3       	breq	.-8      	; 0x5f4 <_ZN9SN74HC595nwEj+0x6>
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <_ZN9SN74HC5955LatchEv>:
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	ec 01       	movw	r28, r24
 608:	8a 81       	ldd	r24, Y+2	; 0x02
 60a:	9b 81       	ldd	r25, Y+3	; 0x03
 60c:	8f df       	rcall	.-226    	; 0x52c <_ZN4Port5ClearEv>
 60e:	8a 81       	ldd	r24, Y+2	; 0x02
 610:	9b 81       	ldd	r25, Y+3	; 0x03
 612:	7a df       	rcall	.-268    	; 0x508 <_ZN4Port3SetEv>
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <_ZN9SN74HC5956FinishEv>:
}

void SN74HC595::Start(){}

void SN74HC595::Finish()
{
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	ec 01       	movw	r28, r24
	Latch();	
 620:	f0 df       	rcall	.-32     	; 0x602 <_ZN9SN74HC5955LatchEv>
	
	this->buffer->ClearBlock();
 622:	88 85       	ldd	r24, Y+8	; 0x08
 624:	99 85       	ldd	r25, Y+9	; 0x09
 626:	6a dd       	rcall	.-1324   	; 0xfc <_ZN6Buffer10ClearBlockEv>
}
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret

0000062e <_ZN10SPI_MasternwEj>:
	return ptr;
}

void SPI_Master::operator delete(void* ptr)
{
	free(ptr);
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	ec 01       	movw	r28, r24
 634:	ce 01       	movw	r24, r28
 636:	4b d1       	rcall	.+662    	; 0x8ce <malloc>
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	e1 f3       	breq	.-8      	; 0x634 <_ZN10SPI_MasternwEj+0x6>
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	08 95       	ret

00000642 <_ZN7DevicesI4ISPIEnwEj>:
{
	free((T**)this->devicesList);
}

template <typename T>
void* Devices<T>::operator new(size_t size)
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	ec 01       	movw	r28, r24
{
	void* ptr;
	do
	{
		ptr = malloc(size);
 648:	ce 01       	movw	r24, r28
 64a:	41 d1       	rcall	.+642    	; 0x8ce <malloc>

template <typename T>
void* Devices<T>::operator new(size_t size)
{
	void* ptr;
	do
 64c:	00 97       	sbiw	r24, 0x00	; 0
 64e:	e1 f3       	breq	.-8      	; 0x648 <_ZN7DevicesI4ISPIEnwEj+0x6>
	{
		ptr = malloc(size);
	}while(ptr == nullptr);
	
	return ptr;
}
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	08 95       	ret

00000656 <_ZN7DevicesI4ISPIEC1Ev>:
};

template <typename T>
Devices<T>::Devices()
{
	this->selectedDevice = 0;
 656:	fc 01       	movw	r30, r24
 658:	12 82       	std	Z+2, r1	; 0x02
	this->devicesQuantity = 0;
 65a:	13 82       	std	Z+3, r1	; 0x03
 65c:	08 95       	ret

0000065e <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>:
﻿#include "SPI_Master.h"

SPI_Master :: SPI_Master(Port* SCK, Port* MOSI, Port* MISO, Port* SS)
 65e:	8f 92       	push	r8
 660:	9f 92       	push	r9
 662:	af 92       	push	r10
 664:	bf 92       	push	r11
 666:	cf 92       	push	r12
 668:	df 92       	push	r13
 66a:	ef 92       	push	r14
 66c:	ff 92       	push	r15
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	ec 01       	movw	r28, r24
 678:	6b 01       	movw	r12, r22
 67a:	7a 01       	movw	r14, r20
 67c:	59 01       	movw	r10, r18
 67e:	48 01       	movw	r8, r16
{	
	this->devices = new Devices<ISPI>();
 680:	84 e0       	ldi	r24, 0x04	; 4
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	de df       	rcall	.-68     	; 0x642 <_ZN7DevicesI4ISPIEnwEj>
 686:	8c 01       	movw	r16, r24
 688:	e6 df       	rcall	.-52     	; 0x656 <_ZN7DevicesI4ISPIEC1Ev>
 68a:	1a 83       	std	Y+2, r17	; 0x02
 68c:	09 83       	std	Y+1, r16	; 0x01
	
	this->spiBusy = false;
 68e:	18 82       	st	Y, r1
		
	SCK->SetAsOutput();
 690:	c6 01       	movw	r24, r12
 692:	27 df       	rcall	.-434    	; 0x4e2 <_ZN4Port11SetAsOutputEv>
	SCK->Clear();
 694:	c6 01       	movw	r24, r12
 696:	4a df       	rcall	.-364    	; 0x52c <_ZN4Port5ClearEv>
	
	MOSI->SetAsOutput();
 698:	c7 01       	movw	r24, r14
 69a:	23 df       	rcall	.-442    	; 0x4e2 <_ZN4Port11SetAsOutputEv>
	MOSI->Clear();
 69c:	c7 01       	movw	r24, r14
 69e:	46 df       	rcall	.-372    	; 0x52c <_ZN4Port5ClearEv>
	
	MISO->SetAsInput();
 6a0:	c5 01       	movw	r24, r10
 6a2:	0a df       	rcall	.-492    	; 0x4b8 <_ZN4Port10SetAsInputEv>
	MISO->Set();	
 6a4:	c5 01       	movw	r24, r10
 6a6:	30 df       	rcall	.-416    	; 0x508 <_ZN4Port3SetEv>
	
	SS->SetAsOutput();
 6a8:	c4 01       	movw	r24, r8
 6aa:	1b df       	rcall	.-458    	; 0x4e2 <_ZN4Port11SetAsOutputEv>
	SS->Set();	
 6ac:	c4 01       	movw	r24, r8
 6ae:	2c df       	rcall	.-424    	; 0x508 <_ZN4Port3SetEv>
	
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPIE)|(1<<SPR1);
 6b0:	8d b1       	in	r24, 0x0d	; 13
 6b2:	82 6d       	ori	r24, 0xD2	; 210
 6b4:	8d b9       	out	0x0d, r24	; 13
}
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	ff 90       	pop	r15
 6c0:	ef 90       	pop	r14
 6c2:	df 90       	pop	r13
 6c4:	cf 90       	pop	r12
 6c6:	bf 90       	pop	r11
 6c8:	af 90       	pop	r10
 6ca:	9f 90       	pop	r9
 6cc:	8f 90       	pop	r8
 6ce:	08 95       	ret

000006d0 <_ZN7DevicesI4ISPIE3AddEPS0_>:
}

template <typename T>
void Devices<T>::Add(T *device)
 6d0:	ef 92       	push	r14
 6d2:	ff 92       	push	r15
 6d4:	0f 93       	push	r16
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	8c 01       	movw	r16, r24
 6de:	7b 01       	movw	r14, r22
{
	this->devicesQuantity++;
 6e0:	fc 01       	movw	r30, r24
 6e2:	c3 81       	ldd	r28, Z+3	; 0x03
 6e4:	cf 5f       	subi	r28, 0xFF	; 255
 6e6:	c3 83       	std	Z+3, r28	; 0x03
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
 6e8:	d0 e0       	ldi	r29, 0x00	; 0
 6ea:	cc 0f       	add	r28, r28
 6ec:	dd 1f       	adc	r29, r29
	
	T **ptr = nullptr;		
	do 
	{
		ptr = (T**)realloc(this->devicesList, newSize);
 6ee:	be 01       	movw	r22, r28
 6f0:	f8 01       	movw	r30, r16
 6f2:	80 81       	ld	r24, Z
 6f4:	91 81       	ldd	r25, Z+1	; 0x01
 6f6:	0c d2       	rcall	.+1048   	; 0xb10 <realloc>
	this->devicesQuantity++;
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
	
	T **ptr = nullptr;		
	do 
 6f8:	00 97       	sbiw	r24, 0x00	; 0
 6fa:	c9 f3       	breq	.-14     	; 0x6ee <_ZN7DevicesI4ISPIE3AddEPS0_+0x1e>
	{
		ptr = (T**)realloc(this->devicesList, newSize);
	}while (ptr == nullptr);
	
	this->devicesList = ptr;
 6fc:	f8 01       	movw	r30, r16
 6fe:	91 83       	std	Z+1, r25	; 0x01
 700:	80 83       	st	Z, r24
	
	this->devicesList[this->devicesQuantity - 1] = device;
 702:	23 81       	ldd	r18, Z+3	; 0x03
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	21 50       	subi	r18, 0x01	; 1
 708:	30 48       	sbci	r19, 0x80	; 128
 70a:	22 0f       	add	r18, r18
 70c:	33 1f       	adc	r19, r19
 70e:	fc 01       	movw	r30, r24
 710:	e2 0f       	add	r30, r18
 712:	f3 1f       	adc	r31, r19
 714:	f1 82       	std	Z+1, r15	; 0x01
 716:	e0 82       	st	Z, r14
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	0f 91       	pop	r16
 720:	ff 90       	pop	r15
 722:	ef 90       	pop	r14
 724:	08 95       	ret

00000726 <_ZN10SPI_Master9AddDeviceEP4ISPI>:

void SPI_Master::AddDevice(ISPI *device)
{
	this->devices->Add(device);
 726:	fc 01       	movw	r30, r24
 728:	81 81       	ldd	r24, Z+1	; 0x01
 72a:	92 81       	ldd	r25, Z+2	; 0x02
 72c:	d1 df       	rcall	.-94     	; 0x6d0 <_ZN7DevicesI4ISPIE3AddEPS0_>
 72e:	08 95       	ret

00000730 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>:
}

template <typename T>
T* Devices<T>::CurrentDevice()
{
	return this->devicesList[this->selectedDevice];
 730:	dc 01       	movw	r26, r24
 732:	12 96       	adiw	r26, 0x02	; 2
 734:	ec 91       	ld	r30, X
 736:	12 97       	sbiw	r26, 0x02	; 2
 738:	f0 e0       	ldi	r31, 0x00	; 0
 73a:	ee 0f       	add	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	8d 91       	ld	r24, X+
 740:	9c 91       	ld	r25, X
 742:	e8 0f       	add	r30, r24
 744:	f9 1f       	adc	r31, r25
}
 746:	80 81       	ld	r24, Z
 748:	91 81       	ldd	r25, Z+1	; 0x01
 74a:	08 95       	ret

0000074c <_ZN7DevicesI4ISPIE4NextEv>:
	
	this->devicesList[this->devicesQuantity - 1] = device;
}

template <typename T>
void Devices<T>::Next()
 74c:	fc 01       	movw	r30, r24
{
	if(this->devicesQuantity > 0)
 74e:	63 81       	ldd	r22, Z+3	; 0x03
 750:	66 23       	and	r22, r22
 752:	21 f0       	breq	.+8      	; 0x75c <_ZN7DevicesI4ISPIE4NextEv+0x10>
	{
		++this->selectedDevice %= this->devicesQuantity;
 754:	82 81       	ldd	r24, Z+2	; 0x02
 756:	8f 5f       	subi	r24, 0xFF	; 255
 758:	a8 d0       	rcall	.+336    	; 0x8aa <__udivmodqi4>
 75a:	92 83       	std	Z+2, r25	; 0x02
 75c:	08 95       	ret

0000075e <_ZN10SPI_Master13NextOperationEv>:
}

void SPI_Master::NextOperation()
{
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	fc 01       	movw	r30, r24
	this->data[this->dataCounter++] = SPDR;
 764:	a3 81       	ldd	r26, Z+3	; 0x03
 766:	b4 81       	ldd	r27, Z+4	; 0x04
 768:	86 81       	ldd	r24, Z+6	; 0x06
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	98 0f       	add	r25, r24
 76e:	96 83       	std	Z+6, r25	; 0x06
 770:	a8 0f       	add	r26, r24
 772:	b1 1d       	adc	r27, r1
 774:	8f b1       	in	r24, 0x0f	; 15
 776:	8c 93       	st	X, r24
	
	if(this->dataCounter < this->dataSize)
 778:	86 81       	ldd	r24, Z+6	; 0x06
 77a:	95 81       	ldd	r25, Z+5	; 0x05
 77c:	89 17       	cp	r24, r25
 77e:	40 f4       	brcc	.+16     	; 0x790 <_ZN10SPI_Master13NextOperationEv+0x32>
	{
		SPDR = this->data[this->dataCounter];
 780:	03 80       	ldd	r0, Z+3	; 0x03
 782:	f4 81       	ldd	r31, Z+4	; 0x04
 784:	e0 2d       	mov	r30, r0
 786:	e8 0f       	add	r30, r24
 788:	f1 1d       	adc	r31, r1
 78a:	80 81       	ld	r24, Z
 78c:	8f b9       	out	0x0f, r24	; 15
 78e:	0f c0       	rjmp	.+30     	; 0x7ae <_ZN10SPI_Master13NextOperationEv+0x50>
 790:	ef 01       	movw	r28, r30
	}
	
	else
	{
		this->devices->CurrentDevice()->Finish();
 792:	81 81       	ldd	r24, Z+1	; 0x01
 794:	92 81       	ldd	r25, Z+2	; 0x02
 796:	cc df       	rcall	.-104    	; 0x730 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 798:	dc 01       	movw	r26, r24
 79a:	ed 91       	ld	r30, X+
 79c:	fc 91       	ld	r31, X
 79e:	04 84       	ldd	r0, Z+12	; 0x0c
 7a0:	f5 85       	ldd	r31, Z+13	; 0x0d
 7a2:	e0 2d       	mov	r30, r0
 7a4:	09 95       	icall
		
		this->spiBusy = false;
 7a6:	18 82       	st	Y, r1
		
		this->devices->Next();
 7a8:	89 81       	ldd	r24, Y+1	; 0x01
 7aa:	9a 81       	ldd	r25, Y+2	; 0x02
 7ac:	cf df       	rcall	.-98     	; 0x74c <_ZN7DevicesI4ISPIE4NextEv>
	}
}
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	08 95       	ret

000007b4 <_ZN10SPI_Master12CheckDevicesEv>:

void SPI_Master::CheckDevices()
{
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
	if(!this->spiBusy)
 7b8:	dc 01       	movw	r26, r24
 7ba:	2c 91       	ld	r18, X
 7bc:	21 11       	cpse	r18, r1
 7be:	72 c0       	rjmp	.+228    	; 0x8a4 <_ZN10SPI_Master12CheckDevicesEv+0xf0>
 7c0:	ec 01       	movw	r28, r24
	{
		this->dataSize = this->devices->CurrentDevice()->DataSize();
 7c2:	89 81       	ldd	r24, Y+1	; 0x01
 7c4:	9a 81       	ldd	r25, Y+2	; 0x02
 7c6:	b4 df       	rcall	.-152    	; 0x730 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 7c8:	dc 01       	movw	r26, r24
 7ca:	ed 91       	ld	r30, X+
 7cc:	fc 91       	ld	r31, X
 7ce:	06 80       	ldd	r0, Z+6	; 0x06
 7d0:	f7 81       	ldd	r31, Z+7	; 0x07
 7d2:	e0 2d       	mov	r30, r0
 7d4:	09 95       	icall
 7d6:	8d 83       	std	Y+5, r24	; 0x05
		
		if(this->dataSize > 0)
 7d8:	88 23       	and	r24, r24
 7da:	09 f4       	brne	.+2      	; 0x7de <_ZN10SPI_Master12CheckDevicesEv+0x2a>
 7dc:	60 c0       	rjmp	.+192    	; 0x89e <_ZN10SPI_Master12CheckDevicesEv+0xea>
		{			
			this->data = this->devices->CurrentDevice()->Data();
 7de:	89 81       	ldd	r24, Y+1	; 0x01
 7e0:	9a 81       	ldd	r25, Y+2	; 0x02
 7e2:	a6 df       	rcall	.-180    	; 0x730 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 7e4:	dc 01       	movw	r26, r24
 7e6:	ed 91       	ld	r30, X+
 7e8:	fc 91       	ld	r31, X
 7ea:	00 84       	ldd	r0, Z+8	; 0x08
 7ec:	f1 85       	ldd	r31, Z+9	; 0x09
 7ee:	e0 2d       	mov	r30, r0
 7f0:	09 95       	icall
 7f2:	9c 83       	std	Y+4, r25	; 0x04
 7f4:	8b 83       	std	Y+3, r24	; 0x03
			this->dataCounter = 0;
 7f6:	1e 82       	std	Y+6, r1	; 0x06
			
			SPI_DataOrder dataOrder = this->devices->CurrentDevice()->DataOrder();
 7f8:	89 81       	ldd	r24, Y+1	; 0x01
 7fa:	9a 81       	ldd	r25, Y+2	; 0x02
 7fc:	99 df       	rcall	.-206    	; 0x730 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 7fe:	dc 01       	movw	r26, r24
 800:	ed 91       	ld	r30, X+
 802:	fc 91       	ld	r31, X
 804:	04 80       	ldd	r0, Z+4	; 0x04
 806:	f5 81       	ldd	r31, Z+5	; 0x05
 808:	e0 2d       	mov	r30, r0
 80a:	09 95       	icall
			if(dataOrder == SPI_MBF) SPCR &= ~(1<<DORD);
 80c:	81 11       	cpse	r24, r1
 80e:	04 c0       	rjmp	.+8      	; 0x818 <_ZN10SPI_Master12CheckDevicesEv+0x64>
 810:	8d b1       	in	r24, 0x0d	; 13
 812:	8f 7d       	andi	r24, 0xDF	; 223
 814:	8d b9       	out	0x0d, r24	; 13
 816:	05 c0       	rjmp	.+10     	; 0x822 <_ZN10SPI_Master12CheckDevicesEv+0x6e>
			else if(dataOrder == SPI_LBF) SPCR |= (1<<DORD);
 818:	81 30       	cpi	r24, 0x01	; 1
 81a:	19 f4       	brne	.+6      	; 0x822 <_ZN10SPI_Master12CheckDevicesEv+0x6e>
 81c:	8d b1       	in	r24, 0x0d	; 13
 81e:	80 62       	ori	r24, 0x20	; 32
 820:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Phase phase = this->devices->CurrentDevice()->Phase();
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	9a 81       	ldd	r25, Y+2	; 0x02
 826:	84 df       	rcall	.-248    	; 0x730 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 828:	dc 01       	movw	r26, r24
 82a:	ed 91       	ld	r30, X+
 82c:	fc 91       	ld	r31, X
 82e:	02 80       	ldd	r0, Z+2	; 0x02
 830:	f3 81       	ldd	r31, Z+3	; 0x03
 832:	e0 2d       	mov	r30, r0
 834:	09 95       	icall
			if(phase == SPI_START) SPCR &= ~(1<<CPHA);
 836:	81 11       	cpse	r24, r1
 838:	04 c0       	rjmp	.+8      	; 0x842 <_ZN10SPI_Master12CheckDevicesEv+0x8e>
 83a:	8d b1       	in	r24, 0x0d	; 13
 83c:	8b 7f       	andi	r24, 0xFB	; 251
 83e:	8d b9       	out	0x0d, r24	; 13
 840:	05 c0       	rjmp	.+10     	; 0x84c <_ZN10SPI_Master12CheckDevicesEv+0x98>
			else if(phase == SPI_END) SPCR |= (1<<CPHA);
 842:	81 30       	cpi	r24, 0x01	; 1
 844:	19 f4       	brne	.+6      	; 0x84c <_ZN10SPI_Master12CheckDevicesEv+0x98>
 846:	8d b1       	in	r24, 0x0d	; 13
 848:	84 60       	ori	r24, 0x04	; 4
 84a:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Polarity polarity = this->devices->CurrentDevice()->Polarity();
 84c:	89 81       	ldd	r24, Y+1	; 0x01
 84e:	9a 81       	ldd	r25, Y+2	; 0x02
 850:	6f df       	rcall	.-290    	; 0x730 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 852:	dc 01       	movw	r26, r24
 854:	ed 91       	ld	r30, X+
 856:	fc 91       	ld	r31, X
 858:	01 90       	ld	r0, Z+
 85a:	f0 81       	ld	r31, Z
 85c:	e0 2d       	mov	r30, r0
 85e:	09 95       	icall
			if(polarity == SPI_RISING) SPCR &= ~(1<<CPOL);
 860:	81 11       	cpse	r24, r1
 862:	04 c0       	rjmp	.+8      	; 0x86c <_ZN10SPI_Master12CheckDevicesEv+0xb8>
 864:	8d b1       	in	r24, 0x0d	; 13
 866:	87 7f       	andi	r24, 0xF7	; 247
 868:	8d b9       	out	0x0d, r24	; 13
 86a:	05 c0       	rjmp	.+10     	; 0x876 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
			else if(polarity == SPI_FALLING) SPCR |= (1<<CPOL);
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	19 f4       	brne	.+6      	; 0x876 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
 870:	8d b1       	in	r24, 0x0d	; 13
 872:	88 60       	ori	r24, 0x08	; 8
 874:	8d b9       	out	0x0d, r24	; 13
			
			this->devices->CurrentDevice()->Start();
 876:	89 81       	ldd	r24, Y+1	; 0x01
 878:	9a 81       	ldd	r25, Y+2	; 0x02
 87a:	5a df       	rcall	.-332    	; 0x730 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 87c:	dc 01       	movw	r26, r24
 87e:	ed 91       	ld	r30, X+
 880:	fc 91       	ld	r31, X
 882:	02 84       	ldd	r0, Z+10	; 0x0a
 884:	f3 85       	ldd	r31, Z+11	; 0x0b
 886:	e0 2d       	mov	r30, r0
 888:	09 95       	icall
			
			SPDR = this->data[this->dataCounter];
 88a:	eb 81       	ldd	r30, Y+3	; 0x03
 88c:	fc 81       	ldd	r31, Y+4	; 0x04
 88e:	8e 81       	ldd	r24, Y+6	; 0x06
 890:	e8 0f       	add	r30, r24
 892:	f1 1d       	adc	r31, r1
 894:	80 81       	ld	r24, Z
 896:	8f b9       	out	0x0f, r24	; 15
			
			this->spiBusy = true;
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	88 83       	st	Y, r24
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <_ZN10SPI_Master12CheckDevicesEv+0xf0>
		}
		
		else this->devices->Next();
 89e:	89 81       	ldd	r24, Y+1	; 0x01
 8a0:	9a 81       	ldd	r25, Y+2	; 0x02
 8a2:	54 df       	rcall	.-344    	; 0x74c <_ZN7DevicesI4ISPIE4NextEv>
	}
}
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	08 95       	ret

000008aa <__udivmodqi4>:
 8aa:	99 1b       	sub	r25, r25
 8ac:	79 e0       	ldi	r23, 0x09	; 9
 8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__udivmodqi4_ep>

000008b0 <__udivmodqi4_loop>:
 8b0:	99 1f       	adc	r25, r25
 8b2:	96 17       	cp	r25, r22
 8b4:	08 f0       	brcs	.+2      	; 0x8b8 <__udivmodqi4_ep>
 8b6:	96 1b       	sub	r25, r22

000008b8 <__udivmodqi4_ep>:
 8b8:	88 1f       	adc	r24, r24
 8ba:	7a 95       	dec	r23
 8bc:	c9 f7       	brne	.-14     	; 0x8b0 <__udivmodqi4_loop>
 8be:	80 95       	com	r24
 8c0:	08 95       	ret

000008c2 <__tablejump2__>:
 8c2:	ee 0f       	add	r30, r30
 8c4:	ff 1f       	adc	r31, r31
 8c6:	05 90       	lpm	r0, Z+
 8c8:	f4 91       	lpm	r31, Z
 8ca:	e0 2d       	mov	r30, r0
 8cc:	09 94       	ijmp

000008ce <malloc>:
 8ce:	0f 93       	push	r16
 8d0:	1f 93       	push	r17
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	82 30       	cpi	r24, 0x02	; 2
 8d8:	91 05       	cpc	r25, r1
 8da:	10 f4       	brcc	.+4      	; 0x8e0 <malloc+0x12>
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__flp>
 8e4:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <__flp+0x1>
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a0 e0       	ldi	r26, 0x00	; 0
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	30 97       	sbiw	r30, 0x00	; 0
 8f2:	19 f1       	breq	.+70     	; 0x93a <malloc+0x6c>
 8f4:	40 81       	ld	r20, Z
 8f6:	51 81       	ldd	r21, Z+1	; 0x01
 8f8:	02 81       	ldd	r16, Z+2	; 0x02
 8fa:	13 81       	ldd	r17, Z+3	; 0x03
 8fc:	48 17       	cp	r20, r24
 8fe:	59 07       	cpc	r21, r25
 900:	c8 f0       	brcs	.+50     	; 0x934 <malloc+0x66>
 902:	84 17       	cp	r24, r20
 904:	95 07       	cpc	r25, r21
 906:	69 f4       	brne	.+26     	; 0x922 <malloc+0x54>
 908:	10 97       	sbiw	r26, 0x00	; 0
 90a:	31 f0       	breq	.+12     	; 0x918 <malloc+0x4a>
 90c:	12 96       	adiw	r26, 0x02	; 2
 90e:	0c 93       	st	X, r16
 910:	12 97       	sbiw	r26, 0x02	; 2
 912:	13 96       	adiw	r26, 0x03	; 3
 914:	1c 93       	st	X, r17
 916:	27 c0       	rjmp	.+78     	; 0x966 <malloc+0x98>
 918:	00 93 90 00 	sts	0x0090, r16	; 0x800090 <__flp>
 91c:	10 93 91 00 	sts	0x0091, r17	; 0x800091 <__flp+0x1>
 920:	22 c0       	rjmp	.+68     	; 0x966 <malloc+0x98>
 922:	21 15       	cp	r18, r1
 924:	31 05       	cpc	r19, r1
 926:	19 f0       	breq	.+6      	; 0x92e <malloc+0x60>
 928:	42 17       	cp	r20, r18
 92a:	53 07       	cpc	r21, r19
 92c:	18 f4       	brcc	.+6      	; 0x934 <malloc+0x66>
 92e:	9a 01       	movw	r18, r20
 930:	bd 01       	movw	r22, r26
 932:	ef 01       	movw	r28, r30
 934:	df 01       	movw	r26, r30
 936:	f8 01       	movw	r30, r16
 938:	db cf       	rjmp	.-74     	; 0x8f0 <malloc+0x22>
 93a:	21 15       	cp	r18, r1
 93c:	31 05       	cpc	r19, r1
 93e:	f9 f0       	breq	.+62     	; 0x97e <malloc+0xb0>
 940:	28 1b       	sub	r18, r24
 942:	39 0b       	sbc	r19, r25
 944:	24 30       	cpi	r18, 0x04	; 4
 946:	31 05       	cpc	r19, r1
 948:	80 f4       	brcc	.+32     	; 0x96a <malloc+0x9c>
 94a:	8a 81       	ldd	r24, Y+2	; 0x02
 94c:	9b 81       	ldd	r25, Y+3	; 0x03
 94e:	61 15       	cp	r22, r1
 950:	71 05       	cpc	r23, r1
 952:	21 f0       	breq	.+8      	; 0x95c <malloc+0x8e>
 954:	fb 01       	movw	r30, r22
 956:	93 83       	std	Z+3, r25	; 0x03
 958:	82 83       	std	Z+2, r24	; 0x02
 95a:	04 c0       	rjmp	.+8      	; 0x964 <malloc+0x96>
 95c:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__flp+0x1>
 960:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__flp>
 964:	fe 01       	movw	r30, r28
 966:	32 96       	adiw	r30, 0x02	; 2
 968:	44 c0       	rjmp	.+136    	; 0x9f2 <malloc+0x124>
 96a:	fe 01       	movw	r30, r28
 96c:	e2 0f       	add	r30, r18
 96e:	f3 1f       	adc	r31, r19
 970:	81 93       	st	Z+, r24
 972:	91 93       	st	Z+, r25
 974:	22 50       	subi	r18, 0x02	; 2
 976:	31 09       	sbc	r19, r1
 978:	39 83       	std	Y+1, r19	; 0x01
 97a:	28 83       	st	Y, r18
 97c:	3a c0       	rjmp	.+116    	; 0x9f2 <malloc+0x124>
 97e:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <__brkval>
 982:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <__brkval+0x1>
 986:	23 2b       	or	r18, r19
 988:	41 f4       	brne	.+16     	; 0x99a <malloc+0xcc>
 98a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 98e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 992:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <__brkval+0x1>
 996:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <__brkval>
 99a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 99e:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 9a2:	21 15       	cp	r18, r1
 9a4:	31 05       	cpc	r19, r1
 9a6:	41 f4       	brne	.+16     	; 0x9b8 <malloc+0xea>
 9a8:	2d b7       	in	r18, 0x3d	; 61
 9aa:	3e b7       	in	r19, 0x3e	; 62
 9ac:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 9b0:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 9b4:	24 1b       	sub	r18, r20
 9b6:	35 0b       	sbc	r19, r21
 9b8:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <__brkval>
 9bc:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <__brkval+0x1>
 9c0:	e2 17       	cp	r30, r18
 9c2:	f3 07       	cpc	r31, r19
 9c4:	a0 f4       	brcc	.+40     	; 0x9ee <malloc+0x120>
 9c6:	2e 1b       	sub	r18, r30
 9c8:	3f 0b       	sbc	r19, r31
 9ca:	28 17       	cp	r18, r24
 9cc:	39 07       	cpc	r19, r25
 9ce:	78 f0       	brcs	.+30     	; 0x9ee <malloc+0x120>
 9d0:	ac 01       	movw	r20, r24
 9d2:	4e 5f       	subi	r20, 0xFE	; 254
 9d4:	5f 4f       	sbci	r21, 0xFF	; 255
 9d6:	24 17       	cp	r18, r20
 9d8:	35 07       	cpc	r19, r21
 9da:	48 f0       	brcs	.+18     	; 0x9ee <malloc+0x120>
 9dc:	4e 0f       	add	r20, r30
 9de:	5f 1f       	adc	r21, r31
 9e0:	50 93 8f 00 	sts	0x008F, r21	; 0x80008f <__brkval+0x1>
 9e4:	40 93 8e 00 	sts	0x008E, r20	; 0x80008e <__brkval>
 9e8:	81 93       	st	Z+, r24
 9ea:	91 93       	st	Z+, r25
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <malloc+0x124>
 9ee:	e0 e0       	ldi	r30, 0x00	; 0
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	cf 01       	movw	r24, r30
 9f4:	df 91       	pop	r29
 9f6:	cf 91       	pop	r28
 9f8:	1f 91       	pop	r17
 9fa:	0f 91       	pop	r16
 9fc:	08 95       	ret

000009fe <free>:
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	00 97       	sbiw	r24, 0x00	; 0
 a04:	09 f4       	brne	.+2      	; 0xa08 <free+0xa>
 a06:	81 c0       	rjmp	.+258    	; 0xb0a <free+0x10c>
 a08:	fc 01       	movw	r30, r24
 a0a:	32 97       	sbiw	r30, 0x02	; 2
 a0c:	13 82       	std	Z+3, r1	; 0x03
 a0e:	12 82       	std	Z+2, r1	; 0x02
 a10:	a0 91 90 00 	lds	r26, 0x0090	; 0x800090 <__flp>
 a14:	b0 91 91 00 	lds	r27, 0x0091	; 0x800091 <__flp+0x1>
 a18:	10 97       	sbiw	r26, 0x00	; 0
 a1a:	81 f4       	brne	.+32     	; 0xa3c <free+0x3e>
 a1c:	20 81       	ld	r18, Z
 a1e:	31 81       	ldd	r19, Z+1	; 0x01
 a20:	82 0f       	add	r24, r18
 a22:	93 1f       	adc	r25, r19
 a24:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <__brkval>
 a28:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <__brkval+0x1>
 a2c:	28 17       	cp	r18, r24
 a2e:	39 07       	cpc	r19, r25
 a30:	51 f5       	brne	.+84     	; 0xa86 <free+0x88>
 a32:	f0 93 8f 00 	sts	0x008F, r31	; 0x80008f <__brkval+0x1>
 a36:	e0 93 8e 00 	sts	0x008E, r30	; 0x80008e <__brkval>
 a3a:	67 c0       	rjmp	.+206    	; 0xb0a <free+0x10c>
 a3c:	ed 01       	movw	r28, r26
 a3e:	20 e0       	ldi	r18, 0x00	; 0
 a40:	30 e0       	ldi	r19, 0x00	; 0
 a42:	ce 17       	cp	r28, r30
 a44:	df 07       	cpc	r29, r31
 a46:	40 f4       	brcc	.+16     	; 0xa58 <free+0x5a>
 a48:	4a 81       	ldd	r20, Y+2	; 0x02
 a4a:	5b 81       	ldd	r21, Y+3	; 0x03
 a4c:	9e 01       	movw	r18, r28
 a4e:	41 15       	cp	r20, r1
 a50:	51 05       	cpc	r21, r1
 a52:	f1 f0       	breq	.+60     	; 0xa90 <free+0x92>
 a54:	ea 01       	movw	r28, r20
 a56:	f5 cf       	rjmp	.-22     	; 0xa42 <free+0x44>
 a58:	d3 83       	std	Z+3, r29	; 0x03
 a5a:	c2 83       	std	Z+2, r28	; 0x02
 a5c:	40 81       	ld	r20, Z
 a5e:	51 81       	ldd	r21, Z+1	; 0x01
 a60:	84 0f       	add	r24, r20
 a62:	95 1f       	adc	r25, r21
 a64:	c8 17       	cp	r28, r24
 a66:	d9 07       	cpc	r29, r25
 a68:	59 f4       	brne	.+22     	; 0xa80 <free+0x82>
 a6a:	88 81       	ld	r24, Y
 a6c:	99 81       	ldd	r25, Y+1	; 0x01
 a6e:	84 0f       	add	r24, r20
 a70:	95 1f       	adc	r25, r21
 a72:	02 96       	adiw	r24, 0x02	; 2
 a74:	91 83       	std	Z+1, r25	; 0x01
 a76:	80 83       	st	Z, r24
 a78:	8a 81       	ldd	r24, Y+2	; 0x02
 a7a:	9b 81       	ldd	r25, Y+3	; 0x03
 a7c:	93 83       	std	Z+3, r25	; 0x03
 a7e:	82 83       	std	Z+2, r24	; 0x02
 a80:	21 15       	cp	r18, r1
 a82:	31 05       	cpc	r19, r1
 a84:	29 f4       	brne	.+10     	; 0xa90 <free+0x92>
 a86:	f0 93 91 00 	sts	0x0091, r31	; 0x800091 <__flp+0x1>
 a8a:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__flp>
 a8e:	3d c0       	rjmp	.+122    	; 0xb0a <free+0x10c>
 a90:	e9 01       	movw	r28, r18
 a92:	fb 83       	std	Y+3, r31	; 0x03
 a94:	ea 83       	std	Y+2, r30	; 0x02
 a96:	49 91       	ld	r20, Y+
 a98:	59 91       	ld	r21, Y+
 a9a:	c4 0f       	add	r28, r20
 a9c:	d5 1f       	adc	r29, r21
 a9e:	ec 17       	cp	r30, r28
 aa0:	fd 07       	cpc	r31, r29
 aa2:	61 f4       	brne	.+24     	; 0xabc <free+0xbe>
 aa4:	80 81       	ld	r24, Z
 aa6:	91 81       	ldd	r25, Z+1	; 0x01
 aa8:	84 0f       	add	r24, r20
 aaa:	95 1f       	adc	r25, r21
 aac:	02 96       	adiw	r24, 0x02	; 2
 aae:	e9 01       	movw	r28, r18
 ab0:	99 83       	std	Y+1, r25	; 0x01
 ab2:	88 83       	st	Y, r24
 ab4:	82 81       	ldd	r24, Z+2	; 0x02
 ab6:	93 81       	ldd	r25, Z+3	; 0x03
 ab8:	9b 83       	std	Y+3, r25	; 0x03
 aba:	8a 83       	std	Y+2, r24	; 0x02
 abc:	e0 e0       	ldi	r30, 0x00	; 0
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	12 96       	adiw	r26, 0x02	; 2
 ac2:	8d 91       	ld	r24, X+
 ac4:	9c 91       	ld	r25, X
 ac6:	13 97       	sbiw	r26, 0x03	; 3
 ac8:	00 97       	sbiw	r24, 0x00	; 0
 aca:	19 f0       	breq	.+6      	; 0xad2 <free+0xd4>
 acc:	fd 01       	movw	r30, r26
 ace:	dc 01       	movw	r26, r24
 ad0:	f7 cf       	rjmp	.-18     	; 0xac0 <free+0xc2>
 ad2:	8d 91       	ld	r24, X+
 ad4:	9c 91       	ld	r25, X
 ad6:	11 97       	sbiw	r26, 0x01	; 1
 ad8:	9d 01       	movw	r18, r26
 ada:	2e 5f       	subi	r18, 0xFE	; 254
 adc:	3f 4f       	sbci	r19, 0xFF	; 255
 ade:	82 0f       	add	r24, r18
 ae0:	93 1f       	adc	r25, r19
 ae2:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <__brkval>
 ae6:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <__brkval+0x1>
 aea:	28 17       	cp	r18, r24
 aec:	39 07       	cpc	r19, r25
 aee:	69 f4       	brne	.+26     	; 0xb0a <free+0x10c>
 af0:	30 97       	sbiw	r30, 0x00	; 0
 af2:	29 f4       	brne	.+10     	; 0xafe <free+0x100>
 af4:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__flp+0x1>
 af8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__flp>
 afc:	02 c0       	rjmp	.+4      	; 0xb02 <free+0x104>
 afe:	13 82       	std	Z+3, r1	; 0x03
 b00:	12 82       	std	Z+2, r1	; 0x02
 b02:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <__brkval+0x1>
 b06:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <__brkval>
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
 b0e:	08 95       	ret

00000b10 <realloc>:
 b10:	a0 e0       	ldi	r26, 0x00	; 0
 b12:	b0 e0       	ldi	r27, 0x00	; 0
 b14:	ed e8       	ldi	r30, 0x8D	; 141
 b16:	f5 e0       	ldi	r31, 0x05	; 5
 b18:	ce c0       	rjmp	.+412    	; 0xcb6 <__prologue_saves__+0x8>
 b1a:	ec 01       	movw	r28, r24
 b1c:	00 97       	sbiw	r24, 0x00	; 0
 b1e:	19 f4       	brne	.+6      	; 0xb26 <realloc+0x16>
 b20:	cb 01       	movw	r24, r22
 b22:	d5 de       	rcall	.-598    	; 0x8ce <malloc>
 b24:	b0 c0       	rjmp	.+352    	; 0xc86 <realloc+0x176>
 b26:	fc 01       	movw	r30, r24
 b28:	e6 0f       	add	r30, r22
 b2a:	f7 1f       	adc	r31, r23
 b2c:	9c 01       	movw	r18, r24
 b2e:	22 50       	subi	r18, 0x02	; 2
 b30:	31 09       	sbc	r19, r1
 b32:	e2 17       	cp	r30, r18
 b34:	f3 07       	cpc	r31, r19
 b36:	08 f4       	brcc	.+2      	; 0xb3a <realloc+0x2a>
 b38:	a4 c0       	rjmp	.+328    	; 0xc82 <realloc+0x172>
 b3a:	d9 01       	movw	r26, r18
 b3c:	0d 91       	ld	r16, X+
 b3e:	1c 91       	ld	r17, X
 b40:	11 97       	sbiw	r26, 0x01	; 1
 b42:	06 17       	cp	r16, r22
 b44:	17 07       	cpc	r17, r23
 b46:	a8 f0       	brcs	.+42     	; 0xb72 <realloc+0x62>
 b48:	05 30       	cpi	r16, 0x05	; 5
 b4a:	11 05       	cpc	r17, r1
 b4c:	08 f4       	brcc	.+2      	; 0xb50 <realloc+0x40>
 b4e:	97 c0       	rjmp	.+302    	; 0xc7e <realloc+0x16e>
 b50:	c8 01       	movw	r24, r16
 b52:	04 97       	sbiw	r24, 0x04	; 4
 b54:	86 17       	cp	r24, r22
 b56:	97 07       	cpc	r25, r23
 b58:	08 f4       	brcc	.+2      	; 0xb5c <realloc+0x4c>
 b5a:	91 c0       	rjmp	.+290    	; 0xc7e <realloc+0x16e>
 b5c:	02 50       	subi	r16, 0x02	; 2
 b5e:	11 09       	sbc	r17, r1
 b60:	06 1b       	sub	r16, r22
 b62:	17 0b       	sbc	r17, r23
 b64:	01 93       	st	Z+, r16
 b66:	11 93       	st	Z+, r17
 b68:	6d 93       	st	X+, r22
 b6a:	7c 93       	st	X, r23
 b6c:	cf 01       	movw	r24, r30
 b6e:	47 df       	rcall	.-370    	; 0x9fe <free>
 b70:	86 c0       	rjmp	.+268    	; 0xc7e <realloc+0x16e>
 b72:	5b 01       	movw	r10, r22
 b74:	a0 1a       	sub	r10, r16
 b76:	b1 0a       	sbc	r11, r17
 b78:	4c 01       	movw	r8, r24
 b7a:	80 0e       	add	r8, r16
 b7c:	91 1e       	adc	r9, r17
 b7e:	a0 91 90 00 	lds	r26, 0x0090	; 0x800090 <__flp>
 b82:	b0 91 91 00 	lds	r27, 0x0091	; 0x800091 <__flp+0x1>
 b86:	61 2c       	mov	r6, r1
 b88:	71 2c       	mov	r7, r1
 b8a:	e1 2c       	mov	r14, r1
 b8c:	f1 2c       	mov	r15, r1
 b8e:	10 97       	sbiw	r26, 0x00	; 0
 b90:	09 f4       	brne	.+2      	; 0xb94 <realloc+0x84>
 b92:	46 c0       	rjmp	.+140    	; 0xc20 <realloc+0x110>
 b94:	8d 91       	ld	r24, X+
 b96:	9c 91       	ld	r25, X
 b98:	11 97       	sbiw	r26, 0x01	; 1
 b9a:	a8 15       	cp	r26, r8
 b9c:	b9 05       	cpc	r27, r9
 b9e:	b1 f5       	brne	.+108    	; 0xc0c <realloc+0xfc>
 ba0:	6c 01       	movw	r12, r24
 ba2:	42 e0       	ldi	r20, 0x02	; 2
 ba4:	c4 0e       	add	r12, r20
 ba6:	d1 1c       	adc	r13, r1
 ba8:	ca 14       	cp	r12, r10
 baa:	db 04       	cpc	r13, r11
 bac:	78 f1       	brcs	.+94     	; 0xc0c <realloc+0xfc>
 bae:	4c 01       	movw	r8, r24
 bb0:	8a 18       	sub	r8, r10
 bb2:	9b 08       	sbc	r9, r11
 bb4:	64 01       	movw	r12, r8
 bb6:	42 e0       	ldi	r20, 0x02	; 2
 bb8:	c4 0e       	add	r12, r20
 bba:	d1 1c       	adc	r13, r1
 bbc:	12 96       	adiw	r26, 0x02	; 2
 bbe:	bc 90       	ld	r11, X
 bc0:	12 97       	sbiw	r26, 0x02	; 2
 bc2:	13 96       	adiw	r26, 0x03	; 3
 bc4:	ac 91       	ld	r26, X
 bc6:	b5 e0       	ldi	r27, 0x05	; 5
 bc8:	cb 16       	cp	r12, r27
 bca:	d1 04       	cpc	r13, r1
 bcc:	40 f0       	brcs	.+16     	; 0xbde <realloc+0xce>
 bce:	b2 82       	std	Z+2, r11	; 0x02
 bd0:	a3 83       	std	Z+3, r26	; 0x03
 bd2:	91 82       	std	Z+1, r9	; 0x01
 bd4:	80 82       	st	Z, r8
 bd6:	d9 01       	movw	r26, r18
 bd8:	6d 93       	st	X+, r22
 bda:	7c 93       	st	X, r23
 bdc:	09 c0       	rjmp	.+18     	; 0xbf0 <realloc+0xe0>
 bde:	0e 5f       	subi	r16, 0xFE	; 254
 be0:	1f 4f       	sbci	r17, 0xFF	; 255
 be2:	80 0f       	add	r24, r16
 be4:	91 1f       	adc	r25, r17
 be6:	f9 01       	movw	r30, r18
 be8:	91 83       	std	Z+1, r25	; 0x01
 bea:	80 83       	st	Z, r24
 bec:	eb 2d       	mov	r30, r11
 bee:	fa 2f       	mov	r31, r26
 bf0:	e1 14       	cp	r14, r1
 bf2:	f1 04       	cpc	r15, r1
 bf4:	31 f0       	breq	.+12     	; 0xc02 <realloc+0xf2>
 bf6:	d7 01       	movw	r26, r14
 bf8:	13 96       	adiw	r26, 0x03	; 3
 bfa:	fc 93       	st	X, r31
 bfc:	ee 93       	st	-X, r30
 bfe:	12 97       	sbiw	r26, 0x02	; 2
 c00:	3e c0       	rjmp	.+124    	; 0xc7e <realloc+0x16e>
 c02:	f0 93 91 00 	sts	0x0091, r31	; 0x800091 <__flp+0x1>
 c06:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__flp>
 c0a:	39 c0       	rjmp	.+114    	; 0xc7e <realloc+0x16e>
 c0c:	68 16       	cp	r6, r24
 c0e:	79 06       	cpc	r7, r25
 c10:	08 f4       	brcc	.+2      	; 0xc14 <realloc+0x104>
 c12:	3c 01       	movw	r6, r24
 c14:	7d 01       	movw	r14, r26
 c16:	12 96       	adiw	r26, 0x02	; 2
 c18:	0d 90       	ld	r0, X+
 c1a:	bc 91       	ld	r27, X
 c1c:	a0 2d       	mov	r26, r0
 c1e:	b7 cf       	rjmp	.-146    	; 0xb8e <realloc+0x7e>
 c20:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__brkval>
 c24:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__brkval+0x1>
 c28:	88 16       	cp	r8, r24
 c2a:	99 06       	cpc	r9, r25
 c2c:	e1 f4       	brne	.+56     	; 0xc66 <realloc+0x156>
 c2e:	66 16       	cp	r6, r22
 c30:	77 06       	cpc	r7, r23
 c32:	c8 f4       	brcc	.+50     	; 0xc66 <realloc+0x156>
 c34:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 c38:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 c3c:	00 97       	sbiw	r24, 0x00	; 0
 c3e:	41 f4       	brne	.+16     	; 0xc50 <realloc+0x140>
 c40:	8d b7       	in	r24, 0x3d	; 61
 c42:	9e b7       	in	r25, 0x3e	; 62
 c44:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 c48:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 c4c:	84 1b       	sub	r24, r20
 c4e:	95 0b       	sbc	r25, r21
 c50:	e8 17       	cp	r30, r24
 c52:	f9 07       	cpc	r31, r25
 c54:	b0 f4       	brcc	.+44     	; 0xc82 <realloc+0x172>
 c56:	f0 93 8f 00 	sts	0x008F, r31	; 0x80008f <__brkval+0x1>
 c5a:	e0 93 8e 00 	sts	0x008E, r30	; 0x80008e <__brkval>
 c5e:	f9 01       	movw	r30, r18
 c60:	71 83       	std	Z+1, r23	; 0x01
 c62:	60 83       	st	Z, r22
 c64:	0c c0       	rjmp	.+24     	; 0xc7e <realloc+0x16e>
 c66:	cb 01       	movw	r24, r22
 c68:	32 de       	rcall	.-924    	; 0x8ce <malloc>
 c6a:	7c 01       	movw	r14, r24
 c6c:	00 97       	sbiw	r24, 0x00	; 0
 c6e:	49 f0       	breq	.+18     	; 0xc82 <realloc+0x172>
 c70:	a8 01       	movw	r20, r16
 c72:	be 01       	movw	r22, r28
 c74:	0c d0       	rcall	.+24     	; 0xc8e <memcpy>
 c76:	ce 01       	movw	r24, r28
 c78:	c2 de       	rcall	.-636    	; 0x9fe <free>
 c7a:	c7 01       	movw	r24, r14
 c7c:	04 c0       	rjmp	.+8      	; 0xc86 <realloc+0x176>
 c7e:	ce 01       	movw	r24, r28
 c80:	02 c0       	rjmp	.+4      	; 0xc86 <realloc+0x176>
 c82:	80 e0       	ldi	r24, 0x00	; 0
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	cd b7       	in	r28, 0x3d	; 61
 c88:	de b7       	in	r29, 0x3e	; 62
 c8a:	ee e0       	ldi	r30, 0x0E	; 14
 c8c:	30 c0       	rjmp	.+96     	; 0xcee <__epilogue_restores__+0x8>

00000c8e <memcpy>:
 c8e:	fb 01       	movw	r30, r22
 c90:	dc 01       	movw	r26, r24
 c92:	02 c0       	rjmp	.+4      	; 0xc98 <memcpy+0xa>
 c94:	01 90       	ld	r0, Z+
 c96:	0d 92       	st	X+, r0
 c98:	41 50       	subi	r20, 0x01	; 1
 c9a:	50 40       	sbci	r21, 0x00	; 0
 c9c:	d8 f7       	brcc	.-10     	; 0xc94 <memcpy+0x6>
 c9e:	08 95       	ret

00000ca0 <memset>:
 ca0:	dc 01       	movw	r26, r24
 ca2:	01 c0       	rjmp	.+2      	; 0xca6 <memset+0x6>
 ca4:	6d 93       	st	X+, r22
 ca6:	41 50       	subi	r20, 0x01	; 1
 ca8:	50 40       	sbci	r21, 0x00	; 0
 caa:	e0 f7       	brcc	.-8      	; 0xca4 <memset+0x4>
 cac:	08 95       	ret

00000cae <__prologue_saves__>:
 cae:	2f 92       	push	r2
 cb0:	3f 92       	push	r3
 cb2:	4f 92       	push	r4
 cb4:	5f 92       	push	r5
 cb6:	6f 92       	push	r6
 cb8:	7f 92       	push	r7
 cba:	8f 92       	push	r8
 cbc:	9f 92       	push	r9
 cbe:	af 92       	push	r10
 cc0:	bf 92       	push	r11
 cc2:	cf 92       	push	r12
 cc4:	df 92       	push	r13
 cc6:	ef 92       	push	r14
 cc8:	ff 92       	push	r15
 cca:	0f 93       	push	r16
 ccc:	1f 93       	push	r17
 cce:	cf 93       	push	r28
 cd0:	df 93       	push	r29
 cd2:	cd b7       	in	r28, 0x3d	; 61
 cd4:	de b7       	in	r29, 0x3e	; 62
 cd6:	ca 1b       	sub	r28, r26
 cd8:	db 0b       	sbc	r29, r27
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	f8 94       	cli
 cde:	de bf       	out	0x3e, r29	; 62
 ce0:	0f be       	out	0x3f, r0	; 63
 ce2:	cd bf       	out	0x3d, r28	; 61
 ce4:	09 94       	ijmp

00000ce6 <__epilogue_restores__>:
 ce6:	2a 88       	ldd	r2, Y+18	; 0x12
 ce8:	39 88       	ldd	r3, Y+17	; 0x11
 cea:	48 88       	ldd	r4, Y+16	; 0x10
 cec:	5f 84       	ldd	r5, Y+15	; 0x0f
 cee:	6e 84       	ldd	r6, Y+14	; 0x0e
 cf0:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf2:	8c 84       	ldd	r8, Y+12	; 0x0c
 cf4:	9b 84       	ldd	r9, Y+11	; 0x0b
 cf6:	aa 84       	ldd	r10, Y+10	; 0x0a
 cf8:	b9 84       	ldd	r11, Y+9	; 0x09
 cfa:	c8 84       	ldd	r12, Y+8	; 0x08
 cfc:	df 80       	ldd	r13, Y+7	; 0x07
 cfe:	ee 80       	ldd	r14, Y+6	; 0x06
 d00:	fd 80       	ldd	r15, Y+5	; 0x05
 d02:	0c 81       	ldd	r16, Y+4	; 0x04
 d04:	1b 81       	ldd	r17, Y+3	; 0x03
 d06:	aa 81       	ldd	r26, Y+2	; 0x02
 d08:	b9 81       	ldd	r27, Y+1	; 0x01
 d0a:	ce 0f       	add	r28, r30
 d0c:	d1 1d       	adc	r29, r1
 d0e:	0f b6       	in	r0, 0x3f	; 63
 d10:	f8 94       	cli
 d12:	de bf       	out	0x3e, r29	; 62
 d14:	0f be       	out	0x3f, r0	; 63
 d16:	cd bf       	out	0x3d, r28	; 61
 d18:	ed 01       	movw	r28, r26
 d1a:	08 95       	ret

00000d1c <_exit>:
 d1c:	f8 94       	cli

00000d1e <__stop_program>:
 d1e:	ff cf       	rjmp	.-2      	; 0xd1e <__stop_program>
