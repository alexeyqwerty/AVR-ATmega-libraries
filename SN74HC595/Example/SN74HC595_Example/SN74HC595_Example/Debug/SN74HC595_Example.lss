
SN74HC595_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000d1e  00000db2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080007a  0080007a  00000dcc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e9a  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117a  00000000  00000000  00003f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f98  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000065c  00000000  00000000  0000601c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c11  00000000  00000000  00006678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001567  00000000  00000000  00007289  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  000087f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	08 c2       	rjmp	.+1040   	; 0x422 <__vector_8>
  12:	3c c1       	rjmp	.+632    	; 0x28c <__vector_9>
  14:	62 c1       	rjmp	.+708    	; 0x2da <__vector_10>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
  26:	55 02       	muls	r21, r21

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf e5       	ldi	r28, 0x5F	; 95
  2e:	d4 e0       	ldi	r29, 0x04	; 4
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a0 e6       	ldi	r26, 0x60	; 96
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	ee e1       	ldi	r30, 0x1E	; 30
  3c:	fd e0       	ldi	r31, 0x0D	; 13
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	aa 37       	cpi	r26, 0x7A	; 122
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	aa e7       	ldi	r26, 0x7A	; 122
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a2 39       	cpi	r26, 0x92	; 146
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	c4 e1       	ldi	r28, 0x14	; 20
  5e:	d0 e0       	ldi	r29, 0x00	; 0
  60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
  62:	21 97       	sbiw	r28, 0x01	; 1
  64:	fe 01       	movw	r30, r28
  66:	2c d4       	rcall	.+2136   	; 0x8c0 <__tablejump2__>
  68:	c3 31       	cpi	r28, 0x13	; 19
  6a:	d1 07       	cpc	r29, r17
  6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
  6e:	5c d1       	rcall	.+696    	; 0x328 <main>
  70:	54 c6       	rjmp	.+3240   	; 0xd1a <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_ZN6BufferC1Eh>:
		free((uint8_t*)this->buffer[i]);
	}
	
	free((uint8_t**)this->buffer);
	free((uint8_t*)this->dataSize);
}
  74:	ff 92       	push	r15
  76:	0f 93       	push	r16
  78:	1f 93       	push	r17
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	8c 01       	movw	r16, r24
  80:	f6 2e       	mov	r15, r22
  82:	fc 01       	movw	r30, r24
  84:	60 83       	st	Z, r22
  86:	15 82       	std	Z+5, r1	; 0x05
  88:	16 82       	std	Z+6, r1	; 0x06
  8a:	17 82       	std	Z+7, r1	; 0x07
  8c:	cf 2d       	mov	r28, r15
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	cc 0f       	add	r28, r28
  92:	dd 1f       	adc	r29, r29
  94:	ce 01       	movw	r24, r28
  96:	1a d4       	rcall	.+2100   	; 0x8cc <malloc>
  98:	f8 01       	movw	r30, r16
  9a:	92 83       	std	Z+2, r25	; 0x02
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	a9 f3       	breq	.-22     	; 0x8c <_ZN6BufferC1Eh+0x18>
  a2:	ae 01       	movw	r20, r28
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	fa d5       	rcall	.+3060   	; 0xc9e <memset>
  aa:	f8 01       	movw	r30, r16
  ac:	80 81       	ld	r24, Z
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0d d4       	rcall	.+2074   	; 0x8cc <malloc>
  b2:	f8 01       	movw	r30, r16
  b4:	94 83       	std	Z+4, r25	; 0x04
  b6:	83 83       	std	Z+3, r24	; 0x03
  b8:	89 2b       	or	r24, r25
  ba:	b9 f3       	breq	.-18     	; 0xaa <_ZN6BufferC1Eh+0x36>
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	ff 90       	pop	r15
  c6:	08 95       	ret

000000c8 <_ZN6Buffer4ReadEv>:
  c8:	fc 01       	movw	r30, r24
  ca:	21 81       	ldd	r18, Z+1	; 0x01
  cc:	32 81       	ldd	r19, Z+2	; 0x02
  ce:	87 81       	ldd	r24, Z+7	; 0x07
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	e2 0f       	add	r30, r18
  da:	f3 1f       	adc	r31, r19
  dc:	80 81       	ld	r24, Z
  de:	91 81       	ldd	r25, Z+1	; 0x01
  e0:	08 95       	ret

000000e2 <_ZN6Buffer9BlockSizeEv>:
  e2:	fc 01       	movw	r30, r24
  e4:	85 81       	ldd	r24, Z+5	; 0x05
  e6:	88 23       	and	r24, r24
  e8:	39 f0       	breq	.+14     	; 0xf8 <_ZN6Buffer9BlockSizeEv+0x16>
  ea:	83 81       	ldd	r24, Z+3	; 0x03
  ec:	94 81       	ldd	r25, Z+4	; 0x04
  ee:	27 81       	ldd	r18, Z+7	; 0x07
  f0:	fc 01       	movw	r30, r24
  f2:	e2 0f       	add	r30, r18
  f4:	f1 1d       	adc	r31, r1
  f6:	80 81       	ld	r24, Z
  f8:	08 95       	ret

000000fa <_ZN6Buffer10ClearBlockEv>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
 100:	29 81       	ldd	r18, Y+1	; 0x01
 102:	3a 81       	ldd	r19, Y+2	; 0x02
 104:	8f 81       	ldd	r24, Y+7	; 0x07
 106:	e8 2f       	mov	r30, r24
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	e2 0f       	add	r30, r18
 110:	f3 1f       	adc	r31, r19
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	72 d4       	rcall	.+2276   	; 0x9fc <free>
 118:	8f 81       	ldd	r24, Y+7	; 0x07
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	68 81       	ld	r22, Y
 11e:	c4 d3       	rcall	.+1928   	; 0x8a8 <__udivmodqi4>
 120:	9f 83       	std	Y+7, r25	; 0x07
 122:	8d 81       	ldd	r24, Y+5	; 0x05
 124:	81 50       	subi	r24, 0x01	; 1
 126:	8d 83       	std	Y+5, r24	; 0x05
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <_ZN6BuffernwEj>:

void* Buffer::operator new(size_t size)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
 134:	ce 01       	movw	r24, r28
 136:	ca d3       	rcall	.+1940   	; 0x8cc <malloc>
	}while(ptr == nullptr);
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	e1 f3       	breq	.-8      	; 0x134 <_ZN6BuffernwEj+0x6>
	
	return ptr;
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <_Z41__static_initialization_and_destruction_0ii>:
	
	while (1)
	{
		
	}
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	09 f0       	breq	.+2      	; 0x150 <_Z41__static_initialization_and_destruction_0ii+0xe>
 14e:	99 c0       	rjmp	.+306    	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
 150:	6f 3f       	cpi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	09 f0       	breq	.+2      	; 0x158 <_Z41__static_initialization_and_destruction_0ii+0x16>
 156:	95 c0       	rjmp	.+298    	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>

#include "Port.h"
#include "SPI_Master.h"
#include "SN74HC595.h"

Port *sck = new Port(&PORTB, &DDRB, &PINB, 5);
 158:	87 e0       	ldi	r24, 0x07	; 7
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0c d2       	rcall	.+1048   	; 0x576 <_ZN4PortnwEj>
 15e:	ec 01       	movw	r28, r24
 160:	05 e0       	ldi	r16, 0x05	; 5
 162:	26 e3       	ldi	r18, 0x36	; 54
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	47 e3       	ldi	r20, 0x37	; 55
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	68 e3       	ldi	r22, 0x38	; 56
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	f1 d1       	rcall	.+994    	; 0x552 <_ZN4PortC1EPVhS1_S1_h>
 170:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <sck+0x1>
 174:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <sck>
Port *mosi = new Port(&PORTB, &DDRB, &PINB, 3);
 178:	87 e0       	ldi	r24, 0x07	; 7
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc d1       	rcall	.+1016   	; 0x576 <_ZN4PortnwEj>
 17e:	ec 01       	movw	r28, r24
 180:	03 e0       	ldi	r16, 0x03	; 3
 182:	26 e3       	ldi	r18, 0x36	; 54
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	47 e3       	ldi	r20, 0x37	; 55
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	68 e3       	ldi	r22, 0x38	; 56
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	e1 d1       	rcall	.+962    	; 0x552 <_ZN4PortC1EPVhS1_S1_h>
 190:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <mosi+0x1>
 194:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <mosi>
Port *miso = new Port(&PORTB, &DDRB, &PINB, 4);
 198:	87 e0       	ldi	r24, 0x07	; 7
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	ec d1       	rcall	.+984    	; 0x576 <_ZN4PortnwEj>
 19e:	ec 01       	movw	r28, r24
 1a0:	04 e0       	ldi	r16, 0x04	; 4
 1a2:	26 e3       	ldi	r18, 0x36	; 54
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	47 e3       	ldi	r20, 0x37	; 55
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	68 e3       	ldi	r22, 0x38	; 56
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	d1 d1       	rcall	.+930    	; 0x552 <_ZN4PortC1EPVhS1_S1_h>
 1b0:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <miso+0x1>
 1b4:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <miso>
Port *ss = new Port(&PORTB, &DDRB, &PINB, 2);
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	dc d1       	rcall	.+952    	; 0x576 <_ZN4PortnwEj>
 1be:	ec 01       	movw	r28, r24
 1c0:	02 e0       	ldi	r16, 0x02	; 2
 1c2:	26 e3       	ldi	r18, 0x36	; 54
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	47 e3       	ldi	r20, 0x37	; 55
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	68 e3       	ldi	r22, 0x38	; 56
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	c1 d1       	rcall	.+898    	; 0x552 <_ZN4PortC1EPVhS1_S1_h>
 1d0:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <ss+0x1>
 1d4:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <ss>

SPI_Master *spi = new SPI_Master(sck, mosi, miso, ss);
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	27 d2       	rcall	.+1102   	; 0x62c <_ZN10SPI_MasternwEj>
 1de:	ec 01       	movw	r28, r24
 1e0:	00 91 86 00 	lds	r16, 0x0086	; 0x800086 <ss>
 1e4:	10 91 87 00 	lds	r17, 0x0087	; 0x800087 <ss+0x1>
 1e8:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <miso>
 1ec:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <miso+0x1>
 1f0:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <mosi>
 1f4:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <mosi+0x1>
 1f8:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <sck>
 1fc:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <sck+0x1>
 200:	2d d2       	rcall	.+1114   	; 0x65c <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>
 202:	d0 93 85 00 	sts	0x0085, r29	; 0x800085 <spi+0x1>
 206:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <spi>

Port *latch_1 = new Port(&PORTB, &DDRB, &PINB, 0);
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	b3 d1       	rcall	.+870    	; 0x576 <_ZN4PortnwEj>
 210:	ec 01       	movw	r28, r24
 212:	00 e0       	ldi	r16, 0x00	; 0
 214:	26 e3       	ldi	r18, 0x36	; 54
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	47 e3       	ldi	r20, 0x37	; 55
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	68 e3       	ldi	r22, 0x38	; 56
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	98 d1       	rcall	.+816    	; 0x552 <_ZN4PortC1EPVhS1_S1_h>
 222:	d0 93 83 00 	sts	0x0083, r29	; 0x800083 <latch_1+0x1>
 226:	c0 93 82 00 	sts	0x0082, r28	; 0x800082 <latch_1>
Port *latch_2 = new Port(&PORTB, &DDRB, &PINB, 1);
 22a:	87 e0       	ldi	r24, 0x07	; 7
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	a3 d1       	rcall	.+838    	; 0x576 <_ZN4PortnwEj>
 230:	ec 01       	movw	r28, r24
 232:	01 e0       	ldi	r16, 0x01	; 1
 234:	26 e3       	ldi	r18, 0x36	; 54
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	47 e3       	ldi	r20, 0x37	; 55
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	68 e3       	ldi	r22, 0x38	; 56
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	88 d1       	rcall	.+784    	; 0x552 <_ZN4PortC1EPVhS1_S1_h>
 242:	d0 93 81 00 	sts	0x0081, r29	; 0x800081 <latch_2+0x1>
 246:	c0 93 80 00 	sts	0x0080, r28	; 0x800080 <latch_2>

SN74HC595 *reg_1 = new SN74HC595(latch_1, 5);
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ce d1       	rcall	.+924    	; 0x5ec <_ZN9SN74HC595nwEj>
 250:	ec 01       	movw	r28, r24
 252:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <latch_1>
 256:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <latch_1+0x1>
 25a:	45 e0       	ldi	r20, 0x05	; 5
 25c:	a7 d1       	rcall	.+846    	; 0x5ac <_ZN9SN74HC595C1EP4Porth>
 25e:	d0 93 7f 00 	sts	0x007F, r29	; 0x80007f <reg_1+0x1>
 262:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <reg_1>
SN74HC595 *reg_2 = new SN74HC595(latch_2, 5);
 266:	8a e0       	ldi	r24, 0x0A	; 10
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	c0 d1       	rcall	.+896    	; 0x5ec <_ZN9SN74HC595nwEj>
 26c:	ec 01       	movw	r28, r24
 26e:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <latch_2>
 272:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <latch_2+0x1>
 276:	45 e0       	ldi	r20, 0x05	; 5
 278:	99 d1       	rcall	.+818    	; 0x5ac <_ZN9SN74HC595C1EP4Porth>
 27a:	d0 93 7d 00 	sts	0x007D, r29	; 0x80007d <reg_2+0x1>
 27e:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <reg_2>
	
	while (1)
	{
		
	}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	08 95       	ret

0000028c <__vector_9>:
	reg_1->SetOutput(data_1, sizeof(data_1));
	reg_2->SetOutput(data_2, sizeof(data_2));
}

ISR(TIMER0_OVF_vect)
{
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
 296:	2f 93       	push	r18
 298:	3f 93       	push	r19
 29a:	4f 93       	push	r20
 29c:	5f 93       	push	r21
 29e:	6f 93       	push	r22
 2a0:	7f 93       	push	r23
 2a2:	8f 93       	push	r24
 2a4:	9f 93       	push	r25
 2a6:	af 93       	push	r26
 2a8:	bf 93       	push	r27
 2aa:	ef 93       	push	r30
 2ac:	ff 93       	push	r31
	spi->CheckDevices();
 2ae:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <spi>
 2b2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <spi+0x1>
 2b6:	7d d2       	rcall	.+1274   	; 0x7b2 <_ZN10SPI_Master12CheckDevicesEv>
}
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <__vector_10>:

ISR(SPI_STC_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	2f 93       	push	r18
 2e6:	3f 93       	push	r19
 2e8:	4f 93       	push	r20
 2ea:	5f 93       	push	r21
 2ec:	6f 93       	push	r22
 2ee:	7f 93       	push	r23
 2f0:	8f 93       	push	r24
 2f2:	9f 93       	push	r25
 2f4:	af 93       	push	r26
 2f6:	bf 93       	push	r27
 2f8:	ef 93       	push	r30
 2fa:	ff 93       	push	r31
	spi->NextOperation();
 2fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <spi>
 300:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <spi+0x1>
 304:	2b d2       	rcall	.+1110   	; 0x75c <_ZN10SPI_Master13NextOperationEv>
}
 306:	ff 91       	pop	r31
 308:	ef 91       	pop	r30
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <main>:

int main(void)
{
	//T0
	TCCR0|=(1<<CS02)|(1<<CS00);	//prescaler 1024
 328:	83 b7       	in	r24, 0x33	; 51
 32a:	85 60       	ori	r24, 0x05	; 5
 32c:	83 bf       	out	0x33, r24	; 51
	TCCR1B|=(1<<CS11)|(1<<CS10);
 32e:	8e b5       	in	r24, 0x2e	; 46
 330:	83 60       	ori	r24, 0x03	; 3
 332:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE0)|(1<<TOIE1);			//enable interrupt OVF
 334:	89 b7       	in	r24, 0x39	; 57
 336:	85 60       	ori	r24, 0x05	; 5
 338:	89 bf       	out	0x39, r24	; 57
		
	spi->AddDevice(reg_1);
 33a:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <reg_1>
 33e:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <reg_1+0x1>
 342:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <spi>
 346:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <spi+0x1>
 34a:	ec d1       	rcall	.+984    	; 0x724 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	spi->AddDevice(reg_2);
 34c:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <reg_2>
 350:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <reg_2+0x1>
 354:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <spi>
 358:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <spi+0x1>
 35c:	e3 d1       	rcall	.+966    	; 0x724 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	
	sei();
 35e:	78 94       	sei
 360:	ff cf       	rjmp	.-2      	; 0x360 <main+0x38>

00000362 <_ZN6Buffer5WriteIjEEvRT_h>:
	uint8_t writePtr;
	uint8_t readPtr;
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
 362:	bf 92       	push	r11
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	8c 01       	movw	r16, r24
 376:	7b 01       	movw	r14, r22
 378:	b4 2e       	mov	r11, r20
{	
	do 
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
 37a:	d8 01       	movw	r26, r16
 37c:	16 96       	adiw	r26, 0x06	; 6
 37e:	cc 91       	ld	r28, X
 380:	16 97       	sbiw	r26, 0x06	; 6
 382:	d0 e0       	ldi	r29, 0x00	; 0
 384:	cc 0f       	add	r28, r28
 386:	dd 1f       	adc	r29, r29
 388:	11 96       	adiw	r26, 0x01	; 1
 38a:	8d 91       	ld	r24, X+
 38c:	9c 91       	ld	r25, X
 38e:	12 97       	sbiw	r26, 0x02	; 2
 390:	c8 0f       	add	r28, r24
 392:	d9 1f       	adc	r29, r25
 394:	cb 2c       	mov	r12, r11
 396:	d1 2c       	mov	r13, r1
 398:	c6 01       	movw	r24, r12
 39a:	98 d2       	rcall	.+1328   	; 0x8cc <malloc>
 39c:	99 83       	std	Y+1, r25	; 0x01
 39e:	88 83       	st	Y, r24
	} while (this->buffer[this->writePtr] == nullptr);
 3a0:	f8 01       	movw	r30, r16
 3a2:	86 81       	ldd	r24, Z+6	; 0x06
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	9c 01       	movw	r18, r24
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	01 80       	ldd	r0, Z+1	; 0x01
 3ae:	f2 81       	ldd	r31, Z+2	; 0x02
 3b0:	e0 2d       	mov	r30, r0
 3b2:	e2 0f       	add	r30, r18
 3b4:	f3 1f       	adc	r31, r19
 3b6:	20 81       	ld	r18, Z
 3b8:	31 81       	ldd	r19, Z+1	; 0x01
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
{	
	do 
 3ba:	23 2b       	or	r18, r19
 3bc:	f1 f2       	breq	.-68     	; 0x37a <_ZN6Buffer5WriteIjEEvRT_h+0x18>
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
	} while (this->buffer[this->writePtr] == nullptr);
	
	this->dataSize[this->writePtr] = dataSize;	
 3be:	d8 01       	movw	r26, r16
 3c0:	13 96       	adiw	r26, 0x03	; 3
 3c2:	2d 91       	ld	r18, X+
 3c4:	3c 91       	ld	r19, X
 3c6:	14 97       	sbiw	r26, 0x04	; 4
 3c8:	f9 01       	movw	r30, r18
 3ca:	e8 0f       	add	r30, r24
 3cc:	f9 1f       	adc	r31, r25
 3ce:	b0 82       	st	Z, r11
	
	memcpy(this->buffer[this->writePtr], &data, dataSize);
 3d0:	16 96       	adiw	r26, 0x06	; 6
 3d2:	ec 91       	ld	r30, X
 3d4:	16 97       	sbiw	r26, 0x06	; 6
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	11 96       	adiw	r26, 0x01	; 1
 3de:	8d 91       	ld	r24, X+
 3e0:	9c 91       	ld	r25, X
 3e2:	12 97       	sbiw	r26, 0x02	; 2
 3e4:	e8 0f       	add	r30, r24
 3e6:	f9 1f       	adc	r31, r25
 3e8:	a6 01       	movw	r20, r12
 3ea:	b7 01       	movw	r22, r14
 3ec:	80 81       	ld	r24, Z
 3ee:	91 81       	ldd	r25, Z+1	; 0x01
 3f0:	4d d4       	rcall	.+2202   	; 0xc8c <memcpy>
	
	++this->writePtr %= this->bufferSize;
 3f2:	f8 01       	movw	r30, r16
 3f4:	86 81       	ldd	r24, Z+6	; 0x06
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	60 81       	ld	r22, Z
 3fa:	56 d2       	rcall	.+1196   	; 0x8a8 <__udivmodqi4>
 3fc:	96 83       	std	Z+6, r25	; 0x06
	this->bufferCounter++;
 3fe:	85 81       	ldd	r24, Z+5	; 0x05
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	85 83       	std	Z+5, r24	; 0x05
}
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	bf 90       	pop	r11
 416:	08 95       	ret

00000418 <_ZN9SN74HC5959SetOutputIjEEvRT_h>:
};

template <typename T>
void SN74HC595::SetOutput(T &data, uint8_t dataSize)
{
	this->buffer->Write(data, dataSize);
 418:	fc 01       	movw	r30, r24
 41a:	80 85       	ldd	r24, Z+8	; 0x08
 41c:	91 85       	ldd	r25, Z+9	; 0x09
 41e:	a1 df       	rcall	.-190    	; 0x362 <_ZN6Buffer5WriteIjEEvRT_h>
 420:	08 95       	ret

00000422 <__vector_8>:

uint16_t data_1 = 0;
uint16_t data_2 = 1;

ISR(TIMER1_OVF_vect)
{
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	2f 93       	push	r18
 42e:	3f 93       	push	r19
 430:	4f 93       	push	r20
 432:	5f 93       	push	r21
 434:	6f 93       	push	r22
 436:	7f 93       	push	r23
 438:	8f 93       	push	r24
 43a:	9f 93       	push	r25
 43c:	af 93       	push	r26
 43e:	bf 93       	push	r27
 440:	ef 93       	push	r30
 442:	ff 93       	push	r31
	data_1++;
 444:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 448:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 452:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
	data_2 += 2;	
 456:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <data_2>
 45a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <data_2+0x1>
 45e:	02 96       	adiw	r24, 0x02	; 2
 460:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <data_2+0x1>
 464:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <data_2>
	reg_1->SetOutput(data_1, sizeof(data_1));
 468:	42 e0       	ldi	r20, 0x02	; 2
 46a:	6a e7       	ldi	r22, 0x7A	; 122
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <reg_1>
 472:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <reg_1+0x1>
 476:	d0 df       	rcall	.-96     	; 0x418 <_ZN9SN74HC5959SetOutputIjEEvRT_h>
	reg_2->SetOutput(data_2, sizeof(data_2));
 478:	42 e0       	ldi	r20, 0x02	; 2
 47a:	66 e6       	ldi	r22, 0x66	; 102
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <reg_2>
 482:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <reg_2+0x1>
 486:	c8 df       	rcall	.-112    	; 0x418 <_ZN9SN74HC5959SetOutputIjEEvRT_h>
}
 488:	ff 91       	pop	r31
 48a:	ef 91       	pop	r30
 48c:	bf 91       	pop	r27
 48e:	af 91       	pop	r26
 490:	9f 91       	pop	r25
 492:	8f 91       	pop	r24
 494:	7f 91       	pop	r23
 496:	6f 91       	pop	r22
 498:	5f 91       	pop	r21
 49a:	4f 91       	pop	r20
 49c:	3f 91       	pop	r19
 49e:	2f 91       	pop	r18
 4a0:	0f 90       	pop	r0
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	0f 90       	pop	r0
 4a6:	1f 90       	pop	r1
 4a8:	18 95       	reti

000004aa <_GLOBAL__sub_I_sck>:
	
	while (1)
	{
		
	}
 4aa:	6f ef       	ldi	r22, 0xFF	; 255
 4ac:	7f ef       	ldi	r23, 0xFF	; 255
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	47 de       	rcall	.-882    	; 0x142 <_Z41__static_initialization_and_destruction_0ii>
 4b4:	08 95       	ret

000004b6 <_ZN4Port10SetAsInputEv>:
bool Port::IsClear()
{
	return !(*this->PIN & (1<<this->pinNum));
}

Port::~Port(){}
 4b6:	dc 01       	movw	r26, r24
 4b8:	12 96       	adiw	r26, 0x02	; 2
 4ba:	ed 91       	ld	r30, X+
 4bc:	fc 91       	ld	r31, X
 4be:	13 97       	sbiw	r26, 0x03	; 3
 4c0:	40 81       	ld	r20, Z
 4c2:	21 e0       	ldi	r18, 0x01	; 1
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	b9 01       	movw	r22, r18
 4c8:	16 96       	adiw	r26, 0x06	; 6
 4ca:	0c 90       	ld	r0, X
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <_ZN4Port10SetAsInputEv+0x1c>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	0a 94       	dec	r0
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <_ZN4Port10SetAsInputEv+0x18>
 4d6:	cb 01       	movw	r24, r22
 4d8:	80 95       	com	r24
 4da:	84 23       	and	r24, r20
 4dc:	80 83       	st	Z, r24
 4de:	08 95       	ret

000004e0 <_ZN4Port11SetAsOutputEv>:
 4e0:	dc 01       	movw	r26, r24
 4e2:	12 96       	adiw	r26, 0x02	; 2
 4e4:	ed 91       	ld	r30, X+
 4e6:	fc 91       	ld	r31, X
 4e8:	13 97       	sbiw	r26, 0x03	; 3
 4ea:	40 81       	ld	r20, Z
 4ec:	21 e0       	ldi	r18, 0x01	; 1
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	c9 01       	movw	r24, r18
 4f2:	16 96       	adiw	r26, 0x06	; 6
 4f4:	0c 90       	ld	r0, X
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <_ZN4Port11SetAsOutputEv+0x1c>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	0a 94       	dec	r0
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <_ZN4Port11SetAsOutputEv+0x18>
 500:	84 2b       	or	r24, r20
 502:	80 83       	st	Z, r24
 504:	08 95       	ret

00000506 <_ZN4Port3SetEv>:
 506:	dc 01       	movw	r26, r24
 508:	ed 91       	ld	r30, X+
 50a:	fc 91       	ld	r31, X
 50c:	11 97       	sbiw	r26, 0x01	; 1
 50e:	40 81       	ld	r20, Z
 510:	21 e0       	ldi	r18, 0x01	; 1
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	c9 01       	movw	r24, r18
 516:	16 96       	adiw	r26, 0x06	; 6
 518:	0c 90       	ld	r0, X
 51a:	02 c0       	rjmp	.+4      	; 0x520 <_ZN4Port3SetEv+0x1a>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <_ZN4Port3SetEv+0x16>
 524:	84 2b       	or	r24, r20
 526:	80 83       	st	Z, r24
 528:	08 95       	ret

0000052a <_ZN4Port5ClearEv>:
 52a:	dc 01       	movw	r26, r24
 52c:	ed 91       	ld	r30, X+
 52e:	fc 91       	ld	r31, X
 530:	11 97       	sbiw	r26, 0x01	; 1
 532:	40 81       	ld	r20, Z
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	b9 01       	movw	r22, r18
 53a:	16 96       	adiw	r26, 0x06	; 6
 53c:	0c 90       	ld	r0, X
 53e:	02 c0       	rjmp	.+4      	; 0x544 <_ZN4Port5ClearEv+0x1a>
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	0a 94       	dec	r0
 546:	e2 f7       	brpl	.-8      	; 0x540 <_ZN4Port5ClearEv+0x16>
 548:	cb 01       	movw	r24, r22
 54a:	80 95       	com	r24
 54c:	84 23       	and	r24, r20
 54e:	80 83       	st	Z, r24
 550:	08 95       	ret

00000552 <_ZN4PortC1EPVhS1_S1_h>:
 552:	0f 93       	push	r16
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	ec 01       	movw	r28, r24
 55a:	79 83       	std	Y+1, r23	; 0x01
 55c:	68 83       	st	Y, r22
 55e:	5b 83       	std	Y+3, r21	; 0x03
 560:	4a 83       	std	Y+2, r20	; 0x02
 562:	3d 83       	std	Y+5, r19	; 0x05
 564:	2c 83       	std	Y+4, r18	; 0x04
 566:	0e 83       	std	Y+6, r16	; 0x06
 568:	a6 df       	rcall	.-180    	; 0x4b6 <_ZN4Port10SetAsInputEv>
 56a:	ce 01       	movw	r24, r28
 56c:	de df       	rcall	.-68     	; 0x52a <_ZN4Port5ClearEv>
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	0f 91       	pop	r16
 574:	08 95       	ret

00000576 <_ZN4PortnwEj>:

void* Port::operator new(size_t size)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
 57c:	ce 01       	movw	r24, r28
 57e:	a6 d1       	rcall	.+844    	; 0x8cc <malloc>
	}while(ptr == nullptr);
 580:	00 97       	sbiw	r24, 0x00	; 0
 582:	e1 f3       	breq	.-8      	; 0x57c <_ZN4PortnwEj+0x6>
	
	return ptr;
}
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <_ZN9SN74HC5958PolarityEv>:

void SN74HC595::AddRST(Port *RST)
{
	this->RST = RST;
	
	Reset();
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	08 95       	ret

0000058e <_ZN9SN74HC5955PhaseEv>:
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	08 95       	ret

00000592 <_ZN9SN74HC5959DataOrderEv>:
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	08 95       	ret

00000596 <_ZN9SN74HC5955StartEv>:
 596:	08 95       	ret

00000598 <_ZN9SN74HC5958DataSizeEv>:
 598:	fc 01       	movw	r30, r24
 59a:	80 85       	ldd	r24, Z+8	; 0x08
 59c:	91 85       	ldd	r25, Z+9	; 0x09
 59e:	a1 dd       	rcall	.-1214   	; 0xe2 <_ZN6Buffer9BlockSizeEv>
 5a0:	08 95       	ret

000005a2 <_ZN9SN74HC5954DataEv>:
 5a2:	fc 01       	movw	r30, r24
 5a4:	80 85       	ldd	r24, Z+8	; 0x08
 5a6:	91 85       	ldd	r25, Z+9	; 0x09
 5a8:	8f dd       	rcall	.-1250   	; 0xc8 <_ZN6Buffer4ReadEv>
 5aa:	08 95       	ret

000005ac <_ZN9SN74HC595C1EP4Porth>:
 5ac:	ff 92       	push	r15
 5ae:	0f 93       	push	r16
 5b0:	1f 93       	push	r17
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	ec 01       	movw	r28, r24
 5b8:	cb 01       	movw	r24, r22
 5ba:	f4 2e       	mov	r15, r20
 5bc:	2c e6       	ldi	r18, 0x6C	; 108
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	39 83       	std	Y+1, r19	; 0x01
 5c2:	28 83       	st	Y, r18
 5c4:	7b 83       	std	Y+3, r23	; 0x03
 5c6:	6a 83       	std	Y+2, r22	; 0x02
 5c8:	8b df       	rcall	.-234    	; 0x4e0 <_ZN4Port11SetAsOutputEv>
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	9b 81       	ldd	r25, Y+3	; 0x03
 5ce:	ad df       	rcall	.-166    	; 0x52a <_ZN4Port5ClearEv>
 5d0:	88 e0       	ldi	r24, 0x08	; 8
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	ac dd       	rcall	.-1192   	; 0x12e <_ZN6BuffernwEj>
 5d6:	8c 01       	movw	r16, r24
 5d8:	6f 2d       	mov	r22, r15
 5da:	4c dd       	rcall	.-1384   	; 0x74 <_ZN6BufferC1Eh>
 5dc:	19 87       	std	Y+9, r17	; 0x09
 5de:	08 87       	std	Y+8, r16	; 0x08
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	08 95       	ret

000005ec <_ZN9SN74HC595nwEj>:
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	ec 01       	movw	r28, r24
 5f2:	ce 01       	movw	r24, r28
 5f4:	6b d1       	rcall	.+726    	; 0x8cc <malloc>
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	e1 f3       	breq	.-8      	; 0x5f2 <_ZN9SN74HC595nwEj+0x6>
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <_ZN9SN74HC5955LatchEv>:
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	ec 01       	movw	r28, r24
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	9b 81       	ldd	r25, Y+3	; 0x03
 60a:	8f df       	rcall	.-226    	; 0x52a <_ZN4Port5ClearEv>
 60c:	8a 81       	ldd	r24, Y+2	; 0x02
 60e:	9b 81       	ldd	r25, Y+3	; 0x03
 610:	7a df       	rcall	.-268    	; 0x506 <_ZN4Port3SetEv>
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <_ZN9SN74HC5956FinishEv>:
}

void SN74HC595::Start(){}

void SN74HC595::Finish()
{
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	ec 01       	movw	r28, r24
	Latch();	
 61e:	f0 df       	rcall	.-32     	; 0x600 <_ZN9SN74HC5955LatchEv>
	
	this->buffer->ClearBlock();
 620:	88 85       	ldd	r24, Y+8	; 0x08
 622:	99 85       	ldd	r25, Y+9	; 0x09
 624:	6a dd       	rcall	.-1324   	; 0xfa <_ZN6Buffer10ClearBlockEv>
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	08 95       	ret

0000062c <_ZN10SPI_MasternwEj>:
	return ptr;
}

void SPI_Master::operator delete(void* ptr)
{
	free(ptr);
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	ec 01       	movw	r28, r24
 632:	ce 01       	movw	r24, r28
 634:	4b d1       	rcall	.+662    	; 0x8cc <malloc>
 636:	00 97       	sbiw	r24, 0x00	; 0
 638:	e1 f3       	breq	.-8      	; 0x632 <_ZN10SPI_MasternwEj+0x6>
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <_ZN7DevicesI4ISPIEnwEj>:
{
	free((T**)this->devicesList);
}

template <typename T>
void* Devices<T>::operator new(size_t size)
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	ec 01       	movw	r28, r24
{
	void* ptr;
	do
	{
		ptr = malloc(size);
 646:	ce 01       	movw	r24, r28
 648:	41 d1       	rcall	.+642    	; 0x8cc <malloc>

template <typename T>
void* Devices<T>::operator new(size_t size)
{
	void* ptr;
	do
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	e1 f3       	breq	.-8      	; 0x646 <_ZN7DevicesI4ISPIEnwEj+0x6>
	{
		ptr = malloc(size);
	}while(ptr == nullptr);
	
	return ptr;
}
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	08 95       	ret

00000654 <_ZN7DevicesI4ISPIEC1Ev>:
};

template <typename T>
Devices<T>::Devices()
{
	this->selectedDevice = 0;
 654:	fc 01       	movw	r30, r24
 656:	12 82       	std	Z+2, r1	; 0x02
	this->devicesQuantity = 0;
 658:	13 82       	std	Z+3, r1	; 0x03
 65a:	08 95       	ret

0000065c <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>:
﻿#include "SPI_Master.h"

SPI_Master :: SPI_Master(Port* SCK, Port* MOSI, Port* MISO, Port* SS)
 65c:	8f 92       	push	r8
 65e:	9f 92       	push	r9
 660:	af 92       	push	r10
 662:	bf 92       	push	r11
 664:	cf 92       	push	r12
 666:	df 92       	push	r13
 668:	ef 92       	push	r14
 66a:	ff 92       	push	r15
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	ec 01       	movw	r28, r24
 676:	6b 01       	movw	r12, r22
 678:	7a 01       	movw	r14, r20
 67a:	59 01       	movw	r10, r18
 67c:	48 01       	movw	r8, r16
{	
	this->devices = new Devices<ISPI>();
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	de df       	rcall	.-68     	; 0x640 <_ZN7DevicesI4ISPIEnwEj>
 684:	8c 01       	movw	r16, r24
 686:	e6 df       	rcall	.-52     	; 0x654 <_ZN7DevicesI4ISPIEC1Ev>
 688:	1a 83       	std	Y+2, r17	; 0x02
 68a:	09 83       	std	Y+1, r16	; 0x01
	
	this->spiBusy = false;
 68c:	18 82       	st	Y, r1
		
	SCK->SetAsOutput();
 68e:	c6 01       	movw	r24, r12
 690:	27 df       	rcall	.-434    	; 0x4e0 <_ZN4Port11SetAsOutputEv>
	SCK->Clear();
 692:	c6 01       	movw	r24, r12
 694:	4a df       	rcall	.-364    	; 0x52a <_ZN4Port5ClearEv>
	
	MOSI->SetAsOutput();
 696:	c7 01       	movw	r24, r14
 698:	23 df       	rcall	.-442    	; 0x4e0 <_ZN4Port11SetAsOutputEv>
	MOSI->Clear();
 69a:	c7 01       	movw	r24, r14
 69c:	46 df       	rcall	.-372    	; 0x52a <_ZN4Port5ClearEv>
	
	MISO->SetAsInput();
 69e:	c5 01       	movw	r24, r10
 6a0:	0a df       	rcall	.-492    	; 0x4b6 <_ZN4Port10SetAsInputEv>
	MISO->Set();	
 6a2:	c5 01       	movw	r24, r10
 6a4:	30 df       	rcall	.-416    	; 0x506 <_ZN4Port3SetEv>
	
	SS->SetAsOutput();
 6a6:	c4 01       	movw	r24, r8
 6a8:	1b df       	rcall	.-458    	; 0x4e0 <_ZN4Port11SetAsOutputEv>
	SS->Set();	
 6aa:	c4 01       	movw	r24, r8
 6ac:	2c df       	rcall	.-424    	; 0x506 <_ZN4Port3SetEv>
	
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPIE)|(1<<SPR1);
 6ae:	8d b1       	in	r24, 0x0d	; 13
 6b0:	82 6d       	ori	r24, 0xD2	; 210
 6b2:	8d b9       	out	0x0d, r24	; 13
}
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	ff 90       	pop	r15
 6be:	ef 90       	pop	r14
 6c0:	df 90       	pop	r13
 6c2:	cf 90       	pop	r12
 6c4:	bf 90       	pop	r11
 6c6:	af 90       	pop	r10
 6c8:	9f 90       	pop	r9
 6ca:	8f 90       	pop	r8
 6cc:	08 95       	ret

000006ce <_ZN7DevicesI4ISPIE3AddEPS0_>:
}

template <typename T>
void Devices<T>::Add(T *device)
 6ce:	ef 92       	push	r14
 6d0:	ff 92       	push	r15
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	8c 01       	movw	r16, r24
 6dc:	7b 01       	movw	r14, r22
{
	this->devicesQuantity++;
 6de:	fc 01       	movw	r30, r24
 6e0:	c3 81       	ldd	r28, Z+3	; 0x03
 6e2:	cf 5f       	subi	r28, 0xFF	; 255
 6e4:	c3 83       	std	Z+3, r28	; 0x03
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
 6e6:	d0 e0       	ldi	r29, 0x00	; 0
 6e8:	cc 0f       	add	r28, r28
 6ea:	dd 1f       	adc	r29, r29
	
	T **ptr = nullptr;		
	do 
	{
		ptr = (T**)realloc(this->devicesList, newSize);
 6ec:	be 01       	movw	r22, r28
 6ee:	f8 01       	movw	r30, r16
 6f0:	80 81       	ld	r24, Z
 6f2:	91 81       	ldd	r25, Z+1	; 0x01
 6f4:	0c d2       	rcall	.+1048   	; 0xb0e <realloc>
	this->devicesQuantity++;
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
	
	T **ptr = nullptr;		
	do 
 6f6:	00 97       	sbiw	r24, 0x00	; 0
 6f8:	c9 f3       	breq	.-14     	; 0x6ec <_ZN7DevicesI4ISPIE3AddEPS0_+0x1e>
	{
		ptr = (T**)realloc(this->devicesList, newSize);
	}while (ptr == nullptr);
	
	this->devicesList = ptr;
 6fa:	f8 01       	movw	r30, r16
 6fc:	91 83       	std	Z+1, r25	; 0x01
 6fe:	80 83       	st	Z, r24
	
	this->devicesList[this->devicesQuantity - 1] = device;
 700:	23 81       	ldd	r18, Z+3	; 0x03
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	21 50       	subi	r18, 0x01	; 1
 706:	30 48       	sbci	r19, 0x80	; 128
 708:	22 0f       	add	r18, r18
 70a:	33 1f       	adc	r19, r19
 70c:	fc 01       	movw	r30, r24
 70e:	e2 0f       	add	r30, r18
 710:	f3 1f       	adc	r31, r19
 712:	f1 82       	std	Z+1, r15	; 0x01
 714:	e0 82       	st	Z, r14
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	ff 90       	pop	r15
 720:	ef 90       	pop	r14
 722:	08 95       	ret

00000724 <_ZN10SPI_Master9AddDeviceEP4ISPI>:

void SPI_Master::AddDevice(ISPI *device)
{
	this->devices->Add(device);
 724:	fc 01       	movw	r30, r24
 726:	81 81       	ldd	r24, Z+1	; 0x01
 728:	92 81       	ldd	r25, Z+2	; 0x02
 72a:	d1 df       	rcall	.-94     	; 0x6ce <_ZN7DevicesI4ISPIE3AddEPS0_>
 72c:	08 95       	ret

0000072e <_ZN7DevicesI4ISPIE13CurrentDeviceEv>:
}

template <typename T>
T* Devices<T>::CurrentDevice()
{
	return this->devicesList[this->selectedDevice];
 72e:	dc 01       	movw	r26, r24
 730:	12 96       	adiw	r26, 0x02	; 2
 732:	ec 91       	ld	r30, X
 734:	12 97       	sbiw	r26, 0x02	; 2
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	ee 0f       	add	r30, r30
 73a:	ff 1f       	adc	r31, r31
 73c:	8d 91       	ld	r24, X+
 73e:	9c 91       	ld	r25, X
 740:	e8 0f       	add	r30, r24
 742:	f9 1f       	adc	r31, r25
}
 744:	80 81       	ld	r24, Z
 746:	91 81       	ldd	r25, Z+1	; 0x01
 748:	08 95       	ret

0000074a <_ZN7DevicesI4ISPIE4NextEv>:
	
	this->devicesList[this->devicesQuantity - 1] = device;
}

template <typename T>
void Devices<T>::Next()
 74a:	fc 01       	movw	r30, r24
{
	if(this->devicesQuantity > 0)
 74c:	63 81       	ldd	r22, Z+3	; 0x03
 74e:	66 23       	and	r22, r22
 750:	21 f0       	breq	.+8      	; 0x75a <_ZN7DevicesI4ISPIE4NextEv+0x10>
	{
		++this->selectedDevice %= this->devicesQuantity;
 752:	82 81       	ldd	r24, Z+2	; 0x02
 754:	8f 5f       	subi	r24, 0xFF	; 255
 756:	a8 d0       	rcall	.+336    	; 0x8a8 <__udivmodqi4>
 758:	92 83       	std	Z+2, r25	; 0x02
 75a:	08 95       	ret

0000075c <_ZN10SPI_Master13NextOperationEv>:
}

void SPI_Master::NextOperation()
{
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	fc 01       	movw	r30, r24
	this->data[this->dataCounter++] = SPDR;
 762:	a3 81       	ldd	r26, Z+3	; 0x03
 764:	b4 81       	ldd	r27, Z+4	; 0x04
 766:	86 81       	ldd	r24, Z+6	; 0x06
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	98 0f       	add	r25, r24
 76c:	96 83       	std	Z+6, r25	; 0x06
 76e:	a8 0f       	add	r26, r24
 770:	b1 1d       	adc	r27, r1
 772:	8f b1       	in	r24, 0x0f	; 15
 774:	8c 93       	st	X, r24
	
	if(this->dataCounter < this->dataSize)
 776:	86 81       	ldd	r24, Z+6	; 0x06
 778:	95 81       	ldd	r25, Z+5	; 0x05
 77a:	89 17       	cp	r24, r25
 77c:	40 f4       	brcc	.+16     	; 0x78e <_ZN10SPI_Master13NextOperationEv+0x32>
	{
		SPDR = this->data[this->dataCounter];
 77e:	03 80       	ldd	r0, Z+3	; 0x03
 780:	f4 81       	ldd	r31, Z+4	; 0x04
 782:	e0 2d       	mov	r30, r0
 784:	e8 0f       	add	r30, r24
 786:	f1 1d       	adc	r31, r1
 788:	80 81       	ld	r24, Z
 78a:	8f b9       	out	0x0f, r24	; 15
 78c:	0f c0       	rjmp	.+30     	; 0x7ac <_ZN10SPI_Master13NextOperationEv+0x50>
 78e:	ef 01       	movw	r28, r30
	}
	
	else
	{
		this->devices->CurrentDevice()->Finish();
 790:	81 81       	ldd	r24, Z+1	; 0x01
 792:	92 81       	ldd	r25, Z+2	; 0x02
 794:	cc df       	rcall	.-104    	; 0x72e <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 796:	dc 01       	movw	r26, r24
 798:	ed 91       	ld	r30, X+
 79a:	fc 91       	ld	r31, X
 79c:	04 84       	ldd	r0, Z+12	; 0x0c
 79e:	f5 85       	ldd	r31, Z+13	; 0x0d
 7a0:	e0 2d       	mov	r30, r0
 7a2:	09 95       	icall
		
		this->spiBusy = false;
 7a4:	18 82       	st	Y, r1
		
		this->devices->Next();
 7a6:	89 81       	ldd	r24, Y+1	; 0x01
 7a8:	9a 81       	ldd	r25, Y+2	; 0x02
 7aa:	cf df       	rcall	.-98     	; 0x74a <_ZN7DevicesI4ISPIE4NextEv>
	}
}
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <_ZN10SPI_Master12CheckDevicesEv>:

void SPI_Master::CheckDevices()
{
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
	if(!this->spiBusy)
 7b6:	dc 01       	movw	r26, r24
 7b8:	2c 91       	ld	r18, X
 7ba:	21 11       	cpse	r18, r1
 7bc:	72 c0       	rjmp	.+228    	; 0x8a2 <_ZN10SPI_Master12CheckDevicesEv+0xf0>
 7be:	ec 01       	movw	r28, r24
	{
		this->dataSize = this->devices->CurrentDevice()->DataSize();
 7c0:	89 81       	ldd	r24, Y+1	; 0x01
 7c2:	9a 81       	ldd	r25, Y+2	; 0x02
 7c4:	b4 df       	rcall	.-152    	; 0x72e <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 7c6:	dc 01       	movw	r26, r24
 7c8:	ed 91       	ld	r30, X+
 7ca:	fc 91       	ld	r31, X
 7cc:	06 80       	ldd	r0, Z+6	; 0x06
 7ce:	f7 81       	ldd	r31, Z+7	; 0x07
 7d0:	e0 2d       	mov	r30, r0
 7d2:	09 95       	icall
 7d4:	8d 83       	std	Y+5, r24	; 0x05
		
		if(this->dataSize > 0)
 7d6:	88 23       	and	r24, r24
 7d8:	09 f4       	brne	.+2      	; 0x7dc <_ZN10SPI_Master12CheckDevicesEv+0x2a>
 7da:	60 c0       	rjmp	.+192    	; 0x89c <_ZN10SPI_Master12CheckDevicesEv+0xea>
		{			
			this->data = this->devices->CurrentDevice()->Data();
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
 7de:	9a 81       	ldd	r25, Y+2	; 0x02
 7e0:	a6 df       	rcall	.-180    	; 0x72e <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 7e2:	dc 01       	movw	r26, r24
 7e4:	ed 91       	ld	r30, X+
 7e6:	fc 91       	ld	r31, X
 7e8:	00 84       	ldd	r0, Z+8	; 0x08
 7ea:	f1 85       	ldd	r31, Z+9	; 0x09
 7ec:	e0 2d       	mov	r30, r0
 7ee:	09 95       	icall
 7f0:	9c 83       	std	Y+4, r25	; 0x04
 7f2:	8b 83       	std	Y+3, r24	; 0x03
			this->dataCounter = 0;
 7f4:	1e 82       	std	Y+6, r1	; 0x06
			
			SPI_DataOrder dataOrder = this->devices->CurrentDevice()->DataOrder();
 7f6:	89 81       	ldd	r24, Y+1	; 0x01
 7f8:	9a 81       	ldd	r25, Y+2	; 0x02
 7fa:	99 df       	rcall	.-206    	; 0x72e <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 7fc:	dc 01       	movw	r26, r24
 7fe:	ed 91       	ld	r30, X+
 800:	fc 91       	ld	r31, X
 802:	04 80       	ldd	r0, Z+4	; 0x04
 804:	f5 81       	ldd	r31, Z+5	; 0x05
 806:	e0 2d       	mov	r30, r0
 808:	09 95       	icall
			if(dataOrder == SPI_MBF) SPCR &= ~(1<<DORD);
 80a:	81 11       	cpse	r24, r1
 80c:	04 c0       	rjmp	.+8      	; 0x816 <_ZN10SPI_Master12CheckDevicesEv+0x64>
 80e:	8d b1       	in	r24, 0x0d	; 13
 810:	8f 7d       	andi	r24, 0xDF	; 223
 812:	8d b9       	out	0x0d, r24	; 13
 814:	05 c0       	rjmp	.+10     	; 0x820 <_ZN10SPI_Master12CheckDevicesEv+0x6e>
			else if(dataOrder == SPI_LBF) SPCR |= (1<<DORD);
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	19 f4       	brne	.+6      	; 0x820 <_ZN10SPI_Master12CheckDevicesEv+0x6e>
 81a:	8d b1       	in	r24, 0x0d	; 13
 81c:	80 62       	ori	r24, 0x20	; 32
 81e:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Phase phase = this->devices->CurrentDevice()->Phase();
 820:	89 81       	ldd	r24, Y+1	; 0x01
 822:	9a 81       	ldd	r25, Y+2	; 0x02
 824:	84 df       	rcall	.-248    	; 0x72e <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 826:	dc 01       	movw	r26, r24
 828:	ed 91       	ld	r30, X+
 82a:	fc 91       	ld	r31, X
 82c:	02 80       	ldd	r0, Z+2	; 0x02
 82e:	f3 81       	ldd	r31, Z+3	; 0x03
 830:	e0 2d       	mov	r30, r0
 832:	09 95       	icall
			if(phase == SPI_START) SPCR &= ~(1<<CPHA);
 834:	81 11       	cpse	r24, r1
 836:	04 c0       	rjmp	.+8      	; 0x840 <_ZN10SPI_Master12CheckDevicesEv+0x8e>
 838:	8d b1       	in	r24, 0x0d	; 13
 83a:	8b 7f       	andi	r24, 0xFB	; 251
 83c:	8d b9       	out	0x0d, r24	; 13
 83e:	05 c0       	rjmp	.+10     	; 0x84a <_ZN10SPI_Master12CheckDevicesEv+0x98>
			else if(phase == SPI_END) SPCR |= (1<<CPHA);
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	19 f4       	brne	.+6      	; 0x84a <_ZN10SPI_Master12CheckDevicesEv+0x98>
 844:	8d b1       	in	r24, 0x0d	; 13
 846:	84 60       	ori	r24, 0x04	; 4
 848:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Polarity polarity = this->devices->CurrentDevice()->Polarity();
 84a:	89 81       	ldd	r24, Y+1	; 0x01
 84c:	9a 81       	ldd	r25, Y+2	; 0x02
 84e:	6f df       	rcall	.-290    	; 0x72e <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 850:	dc 01       	movw	r26, r24
 852:	ed 91       	ld	r30, X+
 854:	fc 91       	ld	r31, X
 856:	01 90       	ld	r0, Z+
 858:	f0 81       	ld	r31, Z
 85a:	e0 2d       	mov	r30, r0
 85c:	09 95       	icall
			if(polarity == SPI_RISING) SPCR &= ~(1<<CPOL);
 85e:	81 11       	cpse	r24, r1
 860:	04 c0       	rjmp	.+8      	; 0x86a <_ZN10SPI_Master12CheckDevicesEv+0xb8>
 862:	8d b1       	in	r24, 0x0d	; 13
 864:	87 7f       	andi	r24, 0xF7	; 247
 866:	8d b9       	out	0x0d, r24	; 13
 868:	05 c0       	rjmp	.+10     	; 0x874 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
			else if(polarity == SPI_FALLING) SPCR |= (1<<CPOL);
 86a:	81 30       	cpi	r24, 0x01	; 1
 86c:	19 f4       	brne	.+6      	; 0x874 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
 86e:	8d b1       	in	r24, 0x0d	; 13
 870:	88 60       	ori	r24, 0x08	; 8
 872:	8d b9       	out	0x0d, r24	; 13
			
			this->devices->CurrentDevice()->Start();
 874:	89 81       	ldd	r24, Y+1	; 0x01
 876:	9a 81       	ldd	r25, Y+2	; 0x02
 878:	5a df       	rcall	.-332    	; 0x72e <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 87a:	dc 01       	movw	r26, r24
 87c:	ed 91       	ld	r30, X+
 87e:	fc 91       	ld	r31, X
 880:	02 84       	ldd	r0, Z+10	; 0x0a
 882:	f3 85       	ldd	r31, Z+11	; 0x0b
 884:	e0 2d       	mov	r30, r0
 886:	09 95       	icall
			
			SPDR = this->data[this->dataCounter];
 888:	eb 81       	ldd	r30, Y+3	; 0x03
 88a:	fc 81       	ldd	r31, Y+4	; 0x04
 88c:	8e 81       	ldd	r24, Y+6	; 0x06
 88e:	e8 0f       	add	r30, r24
 890:	f1 1d       	adc	r31, r1
 892:	80 81       	ld	r24, Z
 894:	8f b9       	out	0x0f, r24	; 15
			
			this->spiBusy = true;
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	88 83       	st	Y, r24
 89a:	03 c0       	rjmp	.+6      	; 0x8a2 <_ZN10SPI_Master12CheckDevicesEv+0xf0>
		}
		
		else this->devices->Next();
 89c:	89 81       	ldd	r24, Y+1	; 0x01
 89e:	9a 81       	ldd	r25, Y+2	; 0x02
 8a0:	54 df       	rcall	.-344    	; 0x74a <_ZN7DevicesI4ISPIE4NextEv>
	}
}
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	08 95       	ret

000008a8 <__udivmodqi4>:
 8a8:	99 1b       	sub	r25, r25
 8aa:	79 e0       	ldi	r23, 0x09	; 9
 8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__udivmodqi4_ep>

000008ae <__udivmodqi4_loop>:
 8ae:	99 1f       	adc	r25, r25
 8b0:	96 17       	cp	r25, r22
 8b2:	08 f0       	brcs	.+2      	; 0x8b6 <__udivmodqi4_ep>
 8b4:	96 1b       	sub	r25, r22

000008b6 <__udivmodqi4_ep>:
 8b6:	88 1f       	adc	r24, r24
 8b8:	7a 95       	dec	r23
 8ba:	c9 f7       	brne	.-14     	; 0x8ae <__udivmodqi4_loop>
 8bc:	80 95       	com	r24
 8be:	08 95       	ret

000008c0 <__tablejump2__>:
 8c0:	ee 0f       	add	r30, r30
 8c2:	ff 1f       	adc	r31, r31
 8c4:	05 90       	lpm	r0, Z+
 8c6:	f4 91       	lpm	r31, Z
 8c8:	e0 2d       	mov	r30, r0
 8ca:	09 94       	ijmp

000008cc <malloc>:
 8cc:	0f 93       	push	r16
 8ce:	1f 93       	push	r17
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	82 30       	cpi	r24, 0x02	; 2
 8d6:	91 05       	cpc	r25, r1
 8d8:	10 f4       	brcc	.+4      	; 0x8de <malloc+0x12>
 8da:	82 e0       	ldi	r24, 0x02	; 2
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__flp>
 8e2:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <__flp+0x1>
 8e6:	20 e0       	ldi	r18, 0x00	; 0
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	a0 e0       	ldi	r26, 0x00	; 0
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	30 97       	sbiw	r30, 0x00	; 0
 8f0:	19 f1       	breq	.+70     	; 0x938 <malloc+0x6c>
 8f2:	40 81       	ld	r20, Z
 8f4:	51 81       	ldd	r21, Z+1	; 0x01
 8f6:	02 81       	ldd	r16, Z+2	; 0x02
 8f8:	13 81       	ldd	r17, Z+3	; 0x03
 8fa:	48 17       	cp	r20, r24
 8fc:	59 07       	cpc	r21, r25
 8fe:	c8 f0       	brcs	.+50     	; 0x932 <malloc+0x66>
 900:	84 17       	cp	r24, r20
 902:	95 07       	cpc	r25, r21
 904:	69 f4       	brne	.+26     	; 0x920 <malloc+0x54>
 906:	10 97       	sbiw	r26, 0x00	; 0
 908:	31 f0       	breq	.+12     	; 0x916 <malloc+0x4a>
 90a:	12 96       	adiw	r26, 0x02	; 2
 90c:	0c 93       	st	X, r16
 90e:	12 97       	sbiw	r26, 0x02	; 2
 910:	13 96       	adiw	r26, 0x03	; 3
 912:	1c 93       	st	X, r17
 914:	27 c0       	rjmp	.+78     	; 0x964 <malloc+0x98>
 916:	00 93 90 00 	sts	0x0090, r16	; 0x800090 <__flp>
 91a:	10 93 91 00 	sts	0x0091, r17	; 0x800091 <__flp+0x1>
 91e:	22 c0       	rjmp	.+68     	; 0x964 <malloc+0x98>
 920:	21 15       	cp	r18, r1
 922:	31 05       	cpc	r19, r1
 924:	19 f0       	breq	.+6      	; 0x92c <malloc+0x60>
 926:	42 17       	cp	r20, r18
 928:	53 07       	cpc	r21, r19
 92a:	18 f4       	brcc	.+6      	; 0x932 <malloc+0x66>
 92c:	9a 01       	movw	r18, r20
 92e:	bd 01       	movw	r22, r26
 930:	ef 01       	movw	r28, r30
 932:	df 01       	movw	r26, r30
 934:	f8 01       	movw	r30, r16
 936:	db cf       	rjmp	.-74     	; 0x8ee <malloc+0x22>
 938:	21 15       	cp	r18, r1
 93a:	31 05       	cpc	r19, r1
 93c:	f9 f0       	breq	.+62     	; 0x97c <malloc+0xb0>
 93e:	28 1b       	sub	r18, r24
 940:	39 0b       	sbc	r19, r25
 942:	24 30       	cpi	r18, 0x04	; 4
 944:	31 05       	cpc	r19, r1
 946:	80 f4       	brcc	.+32     	; 0x968 <malloc+0x9c>
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	9b 81       	ldd	r25, Y+3	; 0x03
 94c:	61 15       	cp	r22, r1
 94e:	71 05       	cpc	r23, r1
 950:	21 f0       	breq	.+8      	; 0x95a <malloc+0x8e>
 952:	fb 01       	movw	r30, r22
 954:	93 83       	std	Z+3, r25	; 0x03
 956:	82 83       	std	Z+2, r24	; 0x02
 958:	04 c0       	rjmp	.+8      	; 0x962 <malloc+0x96>
 95a:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__flp+0x1>
 95e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__flp>
 962:	fe 01       	movw	r30, r28
 964:	32 96       	adiw	r30, 0x02	; 2
 966:	44 c0       	rjmp	.+136    	; 0x9f0 <malloc+0x124>
 968:	fe 01       	movw	r30, r28
 96a:	e2 0f       	add	r30, r18
 96c:	f3 1f       	adc	r31, r19
 96e:	81 93       	st	Z+, r24
 970:	91 93       	st	Z+, r25
 972:	22 50       	subi	r18, 0x02	; 2
 974:	31 09       	sbc	r19, r1
 976:	39 83       	std	Y+1, r19	; 0x01
 978:	28 83       	st	Y, r18
 97a:	3a c0       	rjmp	.+116    	; 0x9f0 <malloc+0x124>
 97c:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <__brkval>
 980:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <__brkval+0x1>
 984:	23 2b       	or	r18, r19
 986:	41 f4       	brne	.+16     	; 0x998 <malloc+0xcc>
 988:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 98c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 990:	30 93 8f 00 	sts	0x008F, r19	; 0x80008f <__brkval+0x1>
 994:	20 93 8e 00 	sts	0x008E, r18	; 0x80008e <__brkval>
 998:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 99c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 9a0:	21 15       	cp	r18, r1
 9a2:	31 05       	cpc	r19, r1
 9a4:	41 f4       	brne	.+16     	; 0x9b6 <malloc+0xea>
 9a6:	2d b7       	in	r18, 0x3d	; 61
 9a8:	3e b7       	in	r19, 0x3e	; 62
 9aa:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 9ae:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 9b2:	24 1b       	sub	r18, r20
 9b4:	35 0b       	sbc	r19, r21
 9b6:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <__brkval>
 9ba:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <__brkval+0x1>
 9be:	e2 17       	cp	r30, r18
 9c0:	f3 07       	cpc	r31, r19
 9c2:	a0 f4       	brcc	.+40     	; 0x9ec <malloc+0x120>
 9c4:	2e 1b       	sub	r18, r30
 9c6:	3f 0b       	sbc	r19, r31
 9c8:	28 17       	cp	r18, r24
 9ca:	39 07       	cpc	r19, r25
 9cc:	78 f0       	brcs	.+30     	; 0x9ec <malloc+0x120>
 9ce:	ac 01       	movw	r20, r24
 9d0:	4e 5f       	subi	r20, 0xFE	; 254
 9d2:	5f 4f       	sbci	r21, 0xFF	; 255
 9d4:	24 17       	cp	r18, r20
 9d6:	35 07       	cpc	r19, r21
 9d8:	48 f0       	brcs	.+18     	; 0x9ec <malloc+0x120>
 9da:	4e 0f       	add	r20, r30
 9dc:	5f 1f       	adc	r21, r31
 9de:	50 93 8f 00 	sts	0x008F, r21	; 0x80008f <__brkval+0x1>
 9e2:	40 93 8e 00 	sts	0x008E, r20	; 0x80008e <__brkval>
 9e6:	81 93       	st	Z+, r24
 9e8:	91 93       	st	Z+, r25
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <malloc+0x124>
 9ec:	e0 e0       	ldi	r30, 0x00	; 0
 9ee:	f0 e0       	ldi	r31, 0x00	; 0
 9f0:	cf 01       	movw	r24, r30
 9f2:	df 91       	pop	r29
 9f4:	cf 91       	pop	r28
 9f6:	1f 91       	pop	r17
 9f8:	0f 91       	pop	r16
 9fa:	08 95       	ret

000009fc <free>:
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
 a00:	00 97       	sbiw	r24, 0x00	; 0
 a02:	09 f4       	brne	.+2      	; 0xa06 <free+0xa>
 a04:	81 c0       	rjmp	.+258    	; 0xb08 <free+0x10c>
 a06:	fc 01       	movw	r30, r24
 a08:	32 97       	sbiw	r30, 0x02	; 2
 a0a:	13 82       	std	Z+3, r1	; 0x03
 a0c:	12 82       	std	Z+2, r1	; 0x02
 a0e:	a0 91 90 00 	lds	r26, 0x0090	; 0x800090 <__flp>
 a12:	b0 91 91 00 	lds	r27, 0x0091	; 0x800091 <__flp+0x1>
 a16:	10 97       	sbiw	r26, 0x00	; 0
 a18:	81 f4       	brne	.+32     	; 0xa3a <free+0x3e>
 a1a:	20 81       	ld	r18, Z
 a1c:	31 81       	ldd	r19, Z+1	; 0x01
 a1e:	82 0f       	add	r24, r18
 a20:	93 1f       	adc	r25, r19
 a22:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <__brkval>
 a26:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <__brkval+0x1>
 a2a:	28 17       	cp	r18, r24
 a2c:	39 07       	cpc	r19, r25
 a2e:	51 f5       	brne	.+84     	; 0xa84 <free+0x88>
 a30:	f0 93 8f 00 	sts	0x008F, r31	; 0x80008f <__brkval+0x1>
 a34:	e0 93 8e 00 	sts	0x008E, r30	; 0x80008e <__brkval>
 a38:	67 c0       	rjmp	.+206    	; 0xb08 <free+0x10c>
 a3a:	ed 01       	movw	r28, r26
 a3c:	20 e0       	ldi	r18, 0x00	; 0
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	ce 17       	cp	r28, r30
 a42:	df 07       	cpc	r29, r31
 a44:	40 f4       	brcc	.+16     	; 0xa56 <free+0x5a>
 a46:	4a 81       	ldd	r20, Y+2	; 0x02
 a48:	5b 81       	ldd	r21, Y+3	; 0x03
 a4a:	9e 01       	movw	r18, r28
 a4c:	41 15       	cp	r20, r1
 a4e:	51 05       	cpc	r21, r1
 a50:	f1 f0       	breq	.+60     	; 0xa8e <free+0x92>
 a52:	ea 01       	movw	r28, r20
 a54:	f5 cf       	rjmp	.-22     	; 0xa40 <free+0x44>
 a56:	d3 83       	std	Z+3, r29	; 0x03
 a58:	c2 83       	std	Z+2, r28	; 0x02
 a5a:	40 81       	ld	r20, Z
 a5c:	51 81       	ldd	r21, Z+1	; 0x01
 a5e:	84 0f       	add	r24, r20
 a60:	95 1f       	adc	r25, r21
 a62:	c8 17       	cp	r28, r24
 a64:	d9 07       	cpc	r29, r25
 a66:	59 f4       	brne	.+22     	; 0xa7e <free+0x82>
 a68:	88 81       	ld	r24, Y
 a6a:	99 81       	ldd	r25, Y+1	; 0x01
 a6c:	84 0f       	add	r24, r20
 a6e:	95 1f       	adc	r25, r21
 a70:	02 96       	adiw	r24, 0x02	; 2
 a72:	91 83       	std	Z+1, r25	; 0x01
 a74:	80 83       	st	Z, r24
 a76:	8a 81       	ldd	r24, Y+2	; 0x02
 a78:	9b 81       	ldd	r25, Y+3	; 0x03
 a7a:	93 83       	std	Z+3, r25	; 0x03
 a7c:	82 83       	std	Z+2, r24	; 0x02
 a7e:	21 15       	cp	r18, r1
 a80:	31 05       	cpc	r19, r1
 a82:	29 f4       	brne	.+10     	; 0xa8e <free+0x92>
 a84:	f0 93 91 00 	sts	0x0091, r31	; 0x800091 <__flp+0x1>
 a88:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__flp>
 a8c:	3d c0       	rjmp	.+122    	; 0xb08 <free+0x10c>
 a8e:	e9 01       	movw	r28, r18
 a90:	fb 83       	std	Y+3, r31	; 0x03
 a92:	ea 83       	std	Y+2, r30	; 0x02
 a94:	49 91       	ld	r20, Y+
 a96:	59 91       	ld	r21, Y+
 a98:	c4 0f       	add	r28, r20
 a9a:	d5 1f       	adc	r29, r21
 a9c:	ec 17       	cp	r30, r28
 a9e:	fd 07       	cpc	r31, r29
 aa0:	61 f4       	brne	.+24     	; 0xaba <free+0xbe>
 aa2:	80 81       	ld	r24, Z
 aa4:	91 81       	ldd	r25, Z+1	; 0x01
 aa6:	84 0f       	add	r24, r20
 aa8:	95 1f       	adc	r25, r21
 aaa:	02 96       	adiw	r24, 0x02	; 2
 aac:	e9 01       	movw	r28, r18
 aae:	99 83       	std	Y+1, r25	; 0x01
 ab0:	88 83       	st	Y, r24
 ab2:	82 81       	ldd	r24, Z+2	; 0x02
 ab4:	93 81       	ldd	r25, Z+3	; 0x03
 ab6:	9b 83       	std	Y+3, r25	; 0x03
 ab8:	8a 83       	std	Y+2, r24	; 0x02
 aba:	e0 e0       	ldi	r30, 0x00	; 0
 abc:	f0 e0       	ldi	r31, 0x00	; 0
 abe:	12 96       	adiw	r26, 0x02	; 2
 ac0:	8d 91       	ld	r24, X+
 ac2:	9c 91       	ld	r25, X
 ac4:	13 97       	sbiw	r26, 0x03	; 3
 ac6:	00 97       	sbiw	r24, 0x00	; 0
 ac8:	19 f0       	breq	.+6      	; 0xad0 <free+0xd4>
 aca:	fd 01       	movw	r30, r26
 acc:	dc 01       	movw	r26, r24
 ace:	f7 cf       	rjmp	.-18     	; 0xabe <free+0xc2>
 ad0:	8d 91       	ld	r24, X+
 ad2:	9c 91       	ld	r25, X
 ad4:	11 97       	sbiw	r26, 0x01	; 1
 ad6:	9d 01       	movw	r18, r26
 ad8:	2e 5f       	subi	r18, 0xFE	; 254
 ada:	3f 4f       	sbci	r19, 0xFF	; 255
 adc:	82 0f       	add	r24, r18
 ade:	93 1f       	adc	r25, r19
 ae0:	20 91 8e 00 	lds	r18, 0x008E	; 0x80008e <__brkval>
 ae4:	30 91 8f 00 	lds	r19, 0x008F	; 0x80008f <__brkval+0x1>
 ae8:	28 17       	cp	r18, r24
 aea:	39 07       	cpc	r19, r25
 aec:	69 f4       	brne	.+26     	; 0xb08 <free+0x10c>
 aee:	30 97       	sbiw	r30, 0x00	; 0
 af0:	29 f4       	brne	.+10     	; 0xafc <free+0x100>
 af2:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__flp+0x1>
 af6:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__flp>
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <free+0x104>
 afc:	13 82       	std	Z+3, r1	; 0x03
 afe:	12 82       	std	Z+2, r1	; 0x02
 b00:	b0 93 8f 00 	sts	0x008F, r27	; 0x80008f <__brkval+0x1>
 b04:	a0 93 8e 00 	sts	0x008E, r26	; 0x80008e <__brkval>
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	08 95       	ret

00000b0e <realloc>:
 b0e:	a0 e0       	ldi	r26, 0x00	; 0
 b10:	b0 e0       	ldi	r27, 0x00	; 0
 b12:	ec e8       	ldi	r30, 0x8C	; 140
 b14:	f5 e0       	ldi	r31, 0x05	; 5
 b16:	ce c0       	rjmp	.+412    	; 0xcb4 <__prologue_saves__+0x8>
 b18:	ec 01       	movw	r28, r24
 b1a:	00 97       	sbiw	r24, 0x00	; 0
 b1c:	19 f4       	brne	.+6      	; 0xb24 <realloc+0x16>
 b1e:	cb 01       	movw	r24, r22
 b20:	d5 de       	rcall	.-598    	; 0x8cc <malloc>
 b22:	b0 c0       	rjmp	.+352    	; 0xc84 <realloc+0x176>
 b24:	fc 01       	movw	r30, r24
 b26:	e6 0f       	add	r30, r22
 b28:	f7 1f       	adc	r31, r23
 b2a:	9c 01       	movw	r18, r24
 b2c:	22 50       	subi	r18, 0x02	; 2
 b2e:	31 09       	sbc	r19, r1
 b30:	e2 17       	cp	r30, r18
 b32:	f3 07       	cpc	r31, r19
 b34:	08 f4       	brcc	.+2      	; 0xb38 <realloc+0x2a>
 b36:	a4 c0       	rjmp	.+328    	; 0xc80 <realloc+0x172>
 b38:	d9 01       	movw	r26, r18
 b3a:	0d 91       	ld	r16, X+
 b3c:	1c 91       	ld	r17, X
 b3e:	11 97       	sbiw	r26, 0x01	; 1
 b40:	06 17       	cp	r16, r22
 b42:	17 07       	cpc	r17, r23
 b44:	a8 f0       	brcs	.+42     	; 0xb70 <realloc+0x62>
 b46:	05 30       	cpi	r16, 0x05	; 5
 b48:	11 05       	cpc	r17, r1
 b4a:	08 f4       	brcc	.+2      	; 0xb4e <realloc+0x40>
 b4c:	97 c0       	rjmp	.+302    	; 0xc7c <realloc+0x16e>
 b4e:	c8 01       	movw	r24, r16
 b50:	04 97       	sbiw	r24, 0x04	; 4
 b52:	86 17       	cp	r24, r22
 b54:	97 07       	cpc	r25, r23
 b56:	08 f4       	brcc	.+2      	; 0xb5a <realloc+0x4c>
 b58:	91 c0       	rjmp	.+290    	; 0xc7c <realloc+0x16e>
 b5a:	02 50       	subi	r16, 0x02	; 2
 b5c:	11 09       	sbc	r17, r1
 b5e:	06 1b       	sub	r16, r22
 b60:	17 0b       	sbc	r17, r23
 b62:	01 93       	st	Z+, r16
 b64:	11 93       	st	Z+, r17
 b66:	6d 93       	st	X+, r22
 b68:	7c 93       	st	X, r23
 b6a:	cf 01       	movw	r24, r30
 b6c:	47 df       	rcall	.-370    	; 0x9fc <free>
 b6e:	86 c0       	rjmp	.+268    	; 0xc7c <realloc+0x16e>
 b70:	5b 01       	movw	r10, r22
 b72:	a0 1a       	sub	r10, r16
 b74:	b1 0a       	sbc	r11, r17
 b76:	4c 01       	movw	r8, r24
 b78:	80 0e       	add	r8, r16
 b7a:	91 1e       	adc	r9, r17
 b7c:	a0 91 90 00 	lds	r26, 0x0090	; 0x800090 <__flp>
 b80:	b0 91 91 00 	lds	r27, 0x0091	; 0x800091 <__flp+0x1>
 b84:	61 2c       	mov	r6, r1
 b86:	71 2c       	mov	r7, r1
 b88:	e1 2c       	mov	r14, r1
 b8a:	f1 2c       	mov	r15, r1
 b8c:	10 97       	sbiw	r26, 0x00	; 0
 b8e:	09 f4       	brne	.+2      	; 0xb92 <realloc+0x84>
 b90:	46 c0       	rjmp	.+140    	; 0xc1e <realloc+0x110>
 b92:	8d 91       	ld	r24, X+
 b94:	9c 91       	ld	r25, X
 b96:	11 97       	sbiw	r26, 0x01	; 1
 b98:	a8 15       	cp	r26, r8
 b9a:	b9 05       	cpc	r27, r9
 b9c:	b1 f5       	brne	.+108    	; 0xc0a <realloc+0xfc>
 b9e:	6c 01       	movw	r12, r24
 ba0:	42 e0       	ldi	r20, 0x02	; 2
 ba2:	c4 0e       	add	r12, r20
 ba4:	d1 1c       	adc	r13, r1
 ba6:	ca 14       	cp	r12, r10
 ba8:	db 04       	cpc	r13, r11
 baa:	78 f1       	brcs	.+94     	; 0xc0a <realloc+0xfc>
 bac:	4c 01       	movw	r8, r24
 bae:	8a 18       	sub	r8, r10
 bb0:	9b 08       	sbc	r9, r11
 bb2:	64 01       	movw	r12, r8
 bb4:	42 e0       	ldi	r20, 0x02	; 2
 bb6:	c4 0e       	add	r12, r20
 bb8:	d1 1c       	adc	r13, r1
 bba:	12 96       	adiw	r26, 0x02	; 2
 bbc:	bc 90       	ld	r11, X
 bbe:	12 97       	sbiw	r26, 0x02	; 2
 bc0:	13 96       	adiw	r26, 0x03	; 3
 bc2:	ac 91       	ld	r26, X
 bc4:	b5 e0       	ldi	r27, 0x05	; 5
 bc6:	cb 16       	cp	r12, r27
 bc8:	d1 04       	cpc	r13, r1
 bca:	40 f0       	brcs	.+16     	; 0xbdc <realloc+0xce>
 bcc:	b2 82       	std	Z+2, r11	; 0x02
 bce:	a3 83       	std	Z+3, r26	; 0x03
 bd0:	91 82       	std	Z+1, r9	; 0x01
 bd2:	80 82       	st	Z, r8
 bd4:	d9 01       	movw	r26, r18
 bd6:	6d 93       	st	X+, r22
 bd8:	7c 93       	st	X, r23
 bda:	09 c0       	rjmp	.+18     	; 0xbee <realloc+0xe0>
 bdc:	0e 5f       	subi	r16, 0xFE	; 254
 bde:	1f 4f       	sbci	r17, 0xFF	; 255
 be0:	80 0f       	add	r24, r16
 be2:	91 1f       	adc	r25, r17
 be4:	f9 01       	movw	r30, r18
 be6:	91 83       	std	Z+1, r25	; 0x01
 be8:	80 83       	st	Z, r24
 bea:	eb 2d       	mov	r30, r11
 bec:	fa 2f       	mov	r31, r26
 bee:	e1 14       	cp	r14, r1
 bf0:	f1 04       	cpc	r15, r1
 bf2:	31 f0       	breq	.+12     	; 0xc00 <realloc+0xf2>
 bf4:	d7 01       	movw	r26, r14
 bf6:	13 96       	adiw	r26, 0x03	; 3
 bf8:	fc 93       	st	X, r31
 bfa:	ee 93       	st	-X, r30
 bfc:	12 97       	sbiw	r26, 0x02	; 2
 bfe:	3e c0       	rjmp	.+124    	; 0xc7c <realloc+0x16e>
 c00:	f0 93 91 00 	sts	0x0091, r31	; 0x800091 <__flp+0x1>
 c04:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__flp>
 c08:	39 c0       	rjmp	.+114    	; 0xc7c <realloc+0x16e>
 c0a:	68 16       	cp	r6, r24
 c0c:	79 06       	cpc	r7, r25
 c0e:	08 f4       	brcc	.+2      	; 0xc12 <realloc+0x104>
 c10:	3c 01       	movw	r6, r24
 c12:	7d 01       	movw	r14, r26
 c14:	12 96       	adiw	r26, 0x02	; 2
 c16:	0d 90       	ld	r0, X+
 c18:	bc 91       	ld	r27, X
 c1a:	a0 2d       	mov	r26, r0
 c1c:	b7 cf       	rjmp	.-146    	; 0xb8c <realloc+0x7e>
 c1e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <__brkval>
 c22:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <__brkval+0x1>
 c26:	88 16       	cp	r8, r24
 c28:	99 06       	cpc	r9, r25
 c2a:	e1 f4       	brne	.+56     	; 0xc64 <realloc+0x156>
 c2c:	66 16       	cp	r6, r22
 c2e:	77 06       	cpc	r7, r23
 c30:	c8 f4       	brcc	.+50     	; 0xc64 <realloc+0x156>
 c32:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 c36:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 c3a:	00 97       	sbiw	r24, 0x00	; 0
 c3c:	41 f4       	brne	.+16     	; 0xc4e <realloc+0x140>
 c3e:	8d b7       	in	r24, 0x3d	; 61
 c40:	9e b7       	in	r25, 0x3e	; 62
 c42:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 c46:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 c4a:	84 1b       	sub	r24, r20
 c4c:	95 0b       	sbc	r25, r21
 c4e:	e8 17       	cp	r30, r24
 c50:	f9 07       	cpc	r31, r25
 c52:	b0 f4       	brcc	.+44     	; 0xc80 <realloc+0x172>
 c54:	f0 93 8f 00 	sts	0x008F, r31	; 0x80008f <__brkval+0x1>
 c58:	e0 93 8e 00 	sts	0x008E, r30	; 0x80008e <__brkval>
 c5c:	f9 01       	movw	r30, r18
 c5e:	71 83       	std	Z+1, r23	; 0x01
 c60:	60 83       	st	Z, r22
 c62:	0c c0       	rjmp	.+24     	; 0xc7c <realloc+0x16e>
 c64:	cb 01       	movw	r24, r22
 c66:	32 de       	rcall	.-924    	; 0x8cc <malloc>
 c68:	7c 01       	movw	r14, r24
 c6a:	00 97       	sbiw	r24, 0x00	; 0
 c6c:	49 f0       	breq	.+18     	; 0xc80 <realloc+0x172>
 c6e:	a8 01       	movw	r20, r16
 c70:	be 01       	movw	r22, r28
 c72:	0c d0       	rcall	.+24     	; 0xc8c <memcpy>
 c74:	ce 01       	movw	r24, r28
 c76:	c2 de       	rcall	.-636    	; 0x9fc <free>
 c78:	c7 01       	movw	r24, r14
 c7a:	04 c0       	rjmp	.+8      	; 0xc84 <realloc+0x176>
 c7c:	ce 01       	movw	r24, r28
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <realloc+0x176>
 c80:	80 e0       	ldi	r24, 0x00	; 0
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	cd b7       	in	r28, 0x3d	; 61
 c86:	de b7       	in	r29, 0x3e	; 62
 c88:	ee e0       	ldi	r30, 0x0E	; 14
 c8a:	30 c0       	rjmp	.+96     	; 0xcec <__epilogue_restores__+0x8>

00000c8c <memcpy>:
 c8c:	fb 01       	movw	r30, r22
 c8e:	dc 01       	movw	r26, r24
 c90:	02 c0       	rjmp	.+4      	; 0xc96 <memcpy+0xa>
 c92:	01 90       	ld	r0, Z+
 c94:	0d 92       	st	X+, r0
 c96:	41 50       	subi	r20, 0x01	; 1
 c98:	50 40       	sbci	r21, 0x00	; 0
 c9a:	d8 f7       	brcc	.-10     	; 0xc92 <memcpy+0x6>
 c9c:	08 95       	ret

00000c9e <memset>:
 c9e:	dc 01       	movw	r26, r24
 ca0:	01 c0       	rjmp	.+2      	; 0xca4 <memset+0x6>
 ca2:	6d 93       	st	X+, r22
 ca4:	41 50       	subi	r20, 0x01	; 1
 ca6:	50 40       	sbci	r21, 0x00	; 0
 ca8:	e0 f7       	brcc	.-8      	; 0xca2 <memset+0x4>
 caa:	08 95       	ret

00000cac <__prologue_saves__>:
 cac:	2f 92       	push	r2
 cae:	3f 92       	push	r3
 cb0:	4f 92       	push	r4
 cb2:	5f 92       	push	r5
 cb4:	6f 92       	push	r6
 cb6:	7f 92       	push	r7
 cb8:	8f 92       	push	r8
 cba:	9f 92       	push	r9
 cbc:	af 92       	push	r10
 cbe:	bf 92       	push	r11
 cc0:	cf 92       	push	r12
 cc2:	df 92       	push	r13
 cc4:	ef 92       	push	r14
 cc6:	ff 92       	push	r15
 cc8:	0f 93       	push	r16
 cca:	1f 93       	push	r17
 ccc:	cf 93       	push	r28
 cce:	df 93       	push	r29
 cd0:	cd b7       	in	r28, 0x3d	; 61
 cd2:	de b7       	in	r29, 0x3e	; 62
 cd4:	ca 1b       	sub	r28, r26
 cd6:	db 0b       	sbc	r29, r27
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	f8 94       	cli
 cdc:	de bf       	out	0x3e, r29	; 62
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	cd bf       	out	0x3d, r28	; 61
 ce2:	09 94       	ijmp

00000ce4 <__epilogue_restores__>:
 ce4:	2a 88       	ldd	r2, Y+18	; 0x12
 ce6:	39 88       	ldd	r3, Y+17	; 0x11
 ce8:	48 88       	ldd	r4, Y+16	; 0x10
 cea:	5f 84       	ldd	r5, Y+15	; 0x0f
 cec:	6e 84       	ldd	r6, Y+14	; 0x0e
 cee:	7d 84       	ldd	r7, Y+13	; 0x0d
 cf0:	8c 84       	ldd	r8, Y+12	; 0x0c
 cf2:	9b 84       	ldd	r9, Y+11	; 0x0b
 cf4:	aa 84       	ldd	r10, Y+10	; 0x0a
 cf6:	b9 84       	ldd	r11, Y+9	; 0x09
 cf8:	c8 84       	ldd	r12, Y+8	; 0x08
 cfa:	df 80       	ldd	r13, Y+7	; 0x07
 cfc:	ee 80       	ldd	r14, Y+6	; 0x06
 cfe:	fd 80       	ldd	r15, Y+5	; 0x05
 d00:	0c 81       	ldd	r16, Y+4	; 0x04
 d02:	1b 81       	ldd	r17, Y+3	; 0x03
 d04:	aa 81       	ldd	r26, Y+2	; 0x02
 d06:	b9 81       	ldd	r27, Y+1	; 0x01
 d08:	ce 0f       	add	r28, r30
 d0a:	d1 1d       	adc	r29, r1
 d0c:	0f b6       	in	r0, 0x3f	; 63
 d0e:	f8 94       	cli
 d10:	de bf       	out	0x3e, r29	; 62
 d12:	0f be       	out	0x3f, r0	; 63
 d14:	cd bf       	out	0x3d, r28	; 61
 d16:	ed 01       	movw	r28, r26
 d18:	08 95       	ret

00000d1a <_exit>:
 d1a:	f8 94       	cli

00000d1c <__stop_program>:
 d1c:	ff cf       	rjmp	.-2      	; 0xd1c <__stop_program>
