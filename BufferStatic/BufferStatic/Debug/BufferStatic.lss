
BufferStatic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001954  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001954  000019e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  0080007c  0080007c  00001a04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c7d  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001123  00000000  00000000  000048ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000119e  00000000  00000000  00005a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c0  00000000  00000000  00006bb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c6e  00000000  00000000  00007270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aa6  00000000  00000000  00007ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00009984  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 4c 02 	jmp	0x498	; 0x498 <__vector_11>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <__vector_13>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_19>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <_ZN9Scheduler7AddTaskEPFvvEj+0xea>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_start>:
      d6:	e2 02       	muls	r30, r18

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf e5       	ldi	r28, 0x5F	; 95
      de:	d4 e0       	ldi	r29, 0x04	; 4
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	10 e0       	ldi	r17, 0x00	; 0
      e6:	a0 e6       	ldi	r26, 0x60	; 96
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e4 e5       	ldi	r30, 0x54	; 84
      ec:	f9 e1       	ldi	r31, 0x19	; 25
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	ac 37       	cpi	r26, 0x7C	; 124
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	ac e7       	ldi	r26, 0x7C	; 124
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	a8 38       	cpi	r26, 0x88	; 136
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	cc e6       	ldi	r28, 0x6C	; 108
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
     112:	21 97       	sbiw	r28, 0x01	; 1
     114:	fe 01       	movw	r30, r28
     116:	0e 94 36 0b 	call	0x166c	; 0x166c <__tablejump2__>
     11a:	cb 36       	cpi	r28, 0x6B	; 107
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
     120:	0e 94 a2 02 	call	0x544	; 0x544 <main>
     124:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_ZN6BufferC1Ehh>:
	free(this->buffer);
	this->buffer = nullptr;
	
	free(this->dataSize);
	this->dataSize = nullptr;
}
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	7c 01       	movw	r14, r24
     13c:	c6 2f       	mov	r28, r22
     13e:	dc 01       	movw	r26, r24
     140:	6c 93       	st	X, r22
     142:	11 96       	adiw	r26, 0x01	; 1
     144:	4c 93       	st	X, r20
     146:	11 97       	sbiw	r26, 0x01	; 1
     148:	16 96       	adiw	r26, 0x06	; 6
     14a:	1c 92       	st	X, r1
     14c:	16 97       	sbiw	r26, 0x06	; 6
     14e:	17 96       	adiw	r26, 0x07	; 7
     150:	1c 92       	st	X, r1
     152:	17 97       	sbiw	r26, 0x07	; 7
     154:	18 96       	adiw	r26, 0x08	; 8
     156:	1c 92       	st	X, r1
     158:	8c 2f       	mov	r24, r28
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	0e 94 4b 0b 	call	0x1696	; 0x1696 <malloc>
     164:	f7 01       	movw	r30, r14
     166:	93 83       	std	Z+3, r25	; 0x03
     168:	82 83       	std	Z+2, r24	; 0x02
     16a:	89 2b       	or	r24, r25
     16c:	a9 f3       	breq	.-22     	; 0x158 <_ZN6BufferC1Ehh+0x2c>
     16e:	d1 2c       	mov	r13, r1
     170:	d7 01       	movw	r26, r14
     172:	cc 91       	ld	r28, X
     174:	dc 16       	cp	r13, r28
     176:	d8 f4       	brcc	.+54     	; 0x1ae <_ZN6BufferC1Ehh+0x82>
     178:	f7 01       	movw	r30, r14
     17a:	02 81       	ldd	r16, Z+2	; 0x02
     17c:	13 81       	ldd	r17, Z+3	; 0x03
     17e:	cd 2d       	mov	r28, r13
     180:	d0 e0       	ldi	r29, 0x00	; 0
     182:	cc 0f       	add	r28, r28
     184:	dd 1f       	adc	r29, r29
     186:	0c 0f       	add	r16, r28
     188:	1d 1f       	adc	r17, r29
     18a:	81 81       	ldd	r24, Z+1	; 0x01
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <malloc>
     192:	d8 01       	movw	r26, r16
     194:	8d 93       	st	X+, r24
     196:	9c 93       	st	X, r25
     198:	f7 01       	movw	r30, r14
     19a:	82 81       	ldd	r24, Z+2	; 0x02
     19c:	93 81       	ldd	r25, Z+3	; 0x03
     19e:	c8 0f       	add	r28, r24
     1a0:	d9 1f       	adc	r29, r25
     1a2:	88 81       	ld	r24, Y
     1a4:	99 81       	ldd	r25, Y+1	; 0x01
     1a6:	89 2b       	or	r24, r25
     1a8:	39 f3       	breq	.-50     	; 0x178 <_ZN6BufferC1Ehh+0x4c>
     1aa:	d3 94       	inc	r13
     1ac:	e1 cf       	rjmp	.-62     	; 0x170 <_ZN6BufferC1Ehh+0x44>
     1ae:	8c 2f       	mov	r24, r28
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <malloc>
     1b6:	d7 01       	movw	r26, r14
     1b8:	15 96       	adiw	r26, 0x05	; 5
     1ba:	9c 93       	st	X, r25
     1bc:	8e 93       	st	-X, r24
     1be:	14 97       	sbiw	r26, 0x04	; 4
     1c0:	89 2b       	or	r24, r25
     1c2:	a9 f3       	breq	.-22     	; 0x1ae <_ZN6BufferC1Ehh+0x82>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	f7 01       	movw	r30, r14
     1c8:	90 81       	ld	r25, Z
     1ca:	89 17       	cp	r24, r25
     1cc:	40 f4       	brcc	.+16     	; 0x1de <_ZN6BufferC1Ehh+0xb2>
     1ce:	04 80       	ldd	r0, Z+4	; 0x04
     1d0:	f5 81       	ldd	r31, Z+5	; 0x05
     1d2:	e0 2d       	mov	r30, r0
     1d4:	e8 0f       	add	r30, r24
     1d6:	f1 1d       	adc	r31, r1
     1d8:	10 82       	st	Z, r1
     1da:	8f 5f       	subi	r24, 0xFF	; 255
     1dc:	f4 cf       	rjmp	.-24     	; 0x1c6 <_ZN6BufferC1Ehh+0x9a>
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	ff 90       	pop	r15
     1e8:	ef 90       	pop	r14
     1ea:	df 90       	pop	r13
     1ec:	08 95       	ret

000001ee <_ZN6Buffer10BufferSizeEv>:
     1ee:	fc 01       	movw	r30, r24
     1f0:	80 81       	ld	r24, Z
     1f2:	08 95       	ret

000001f4 <_ZN6Buffer4SaveEv>:
     1f4:	fc 01       	movw	r30, r24
     1f6:	26 81       	ldd	r18, Z+6	; 0x06
     1f8:	60 81       	ld	r22, Z
     1fa:	26 17       	cp	r18, r22
     1fc:	39 f0       	breq	.+14     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
     1fe:	87 81       	ldd	r24, Z+7	; 0x07
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__udivmodqi4>
     206:	97 83       	std	Z+7, r25	; 0x07
     208:	2f 5f       	subi	r18, 0xFF	; 255
     20a:	26 83       	std	Z+6, r18	; 0x06
     20c:	08 95       	ret

0000020e <_ZN6Buffer4ReadEv>:
     20e:	dc 01       	movw	r26, r24
     210:	16 96       	adiw	r26, 0x06	; 6
     212:	8c 91       	ld	r24, X
     214:	16 97       	sbiw	r26, 0x06	; 6
     216:	88 23       	and	r24, r24
     218:	79 f0       	breq	.+30     	; 0x238 <_ZN6Buffer4ReadEv+0x2a>
     21a:	12 96       	adiw	r26, 0x02	; 2
     21c:	2d 91       	ld	r18, X+
     21e:	3c 91       	ld	r19, X
     220:	13 97       	sbiw	r26, 0x03	; 3
     222:	18 96       	adiw	r26, 0x08	; 8
     224:	8c 91       	ld	r24, X
     226:	e8 2f       	mov	r30, r24
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	ee 0f       	add	r30, r30
     22c:	ff 1f       	adc	r31, r31
     22e:	e2 0f       	add	r30, r18
     230:	f3 1f       	adc	r31, r19
     232:	80 81       	ld	r24, Z
     234:	91 81       	ldd	r25, Z+1	; 0x01
     236:	08 95       	ret
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	08 95       	ret

0000023e <_ZN6Buffer4NextEv>:
     23e:	fc 01       	movw	r30, r24
     240:	86 81       	ldd	r24, Z+6	; 0x06
     242:	88 23       	and	r24, r24
     244:	79 f0       	breq	.+30     	; 0x264 <_ZN6Buffer4NextEv+0x26>
     246:	a4 81       	ldd	r26, Z+4	; 0x04
     248:	b5 81       	ldd	r27, Z+5	; 0x05
     24a:	80 85       	ldd	r24, Z+8	; 0x08
     24c:	a8 0f       	add	r26, r24
     24e:	b1 1d       	adc	r27, r1
     250:	1c 92       	st	X, r1
     252:	80 85       	ldd	r24, Z+8	; 0x08
     254:	8f 5f       	subi	r24, 0xFF	; 255
     256:	60 81       	ld	r22, Z
     258:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__udivmodqi4>
     25c:	90 87       	std	Z+8, r25	; 0x08
     25e:	86 81       	ldd	r24, Z+6	; 0x06
     260:	81 50       	subi	r24, 0x01	; 1
     262:	86 83       	std	Z+6, r24	; 0x06
     264:	08 95       	ret

00000266 <_ZN6Buffer9BlockSizeEv>:
     266:	fc 01       	movw	r30, r24
     268:	86 81       	ldd	r24, Z+6	; 0x06
     26a:	88 23       	and	r24, r24
     26c:	39 f0       	breq	.+14     	; 0x27c <_ZN6Buffer9BlockSizeEv+0x16>
     26e:	84 81       	ldd	r24, Z+4	; 0x04
     270:	95 81       	ldd	r25, Z+5	; 0x05
     272:	20 85       	ldd	r18, Z+8	; 0x08
     274:	fc 01       	movw	r30, r24
     276:	e2 0f       	add	r30, r18
     278:	f1 1d       	adc	r31, r1
     27a:	80 81       	ld	r24, Z
     27c:	08 95       	ret

0000027e <_ZN6BuffernwEj>:

void* Buffer::operator new(size_t size)
{
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	ec 01       	movw	r28, r24
	void* ptr;
	
	do
	ptr = malloc(size);
     284:	ce 01       	movw	r24, r28
     286:	0e 94 4b 0b 	call	0x1696	; 0x1696 <malloc>
	while(ptr == nullptr);
     28a:	00 97       	sbiw	r24, 0x00	; 0
     28c:	d9 f3       	breq	.-10     	; 0x284 <_ZN6BuffernwEj+0x6>
	
	return ptr;
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <_Z1Sv>:

uint32_t sec = 0;

void S()
{
	sec++;
     294:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     298:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <__data_end+0x1>
     29c:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <__data_end+0x2>
     2a0:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <__data_end+0x3>
     2a4:	01 96       	adiw	r24, 0x01	; 1
     2a6:	a1 1d       	adc	r26, r1
     2a8:	b1 1d       	adc	r27, r1
     2aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
     2ae:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <__data_end+0x1>
     2b2:	a0 93 7e 00 	sts	0x007E, r26	; 0x80007e <__data_end+0x2>
     2b6:	b0 93 7f 00 	sts	0x007F, r27	; 0x80007f <__data_end+0x3>
     2ba:	08 95       	ret

000002bc <_Z1Tv>:
}

void T()
{
	uart->Transmit();
     2bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     2c0:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     2c4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN4UART8TransmitEv>
     2c8:	08 95       	ret

000002ca <_Z2F3v>:
}

void F3()
{
	PORTC ^= (1<<2);
     2ca:	95 b3       	in	r25, 0x15	; 21
     2cc:	84 e0       	ldi	r24, 0x04	; 4
     2ce:	89 27       	eor	r24, r25
     2d0:	85 bb       	out	0x15, r24	; 21
	
	if(uart->HaveUnreadMessages())
     2d2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     2d6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     2da:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN4UART18HaveUnreadMessagesEv>
     2de:	88 23       	and	r24, r24
     2e0:	99 f0       	breq	.+38     	; 0x308 <_Z2F3v+0x3e>
	{
		uart->UploadingDataForTransfer(uart->GetRX_Message());
     2e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     2e6:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     2ea:	0e 94 46 06 	call	0xc8c	; 0xc8c <_ZN4UART13GetRX_MessageEv>
     2ee:	bc 01       	movw	r22, r24
     2f0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     2f4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     2f8:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN4UART24UploadingDataForTransferEPKc>
		uart->ClearRX_Message();
     2fc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     300:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     304:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN4UART15ClearRX_MessageEv>
     308:	08 95       	ret

0000030a <_Z2F2v>:
	}
}

void F2()
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
	PORTC ^= (1<<1);
     30e:	95 b3       	in	r25, 0x15	; 21
     310:	82 e0       	ldi	r24, 0x02	; 2
     312:	89 27       	eor	r24, r25
     314:	85 bb       	out	0x15, r24	; 21
	uart->UploadingDataForTransfer("F2 - ");
     316:	66 e6       	ldi	r22, 0x66	; 102
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     31e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     322:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN4UART24UploadingDataForTransferEPKc>
	const char *s = StringHandler::FloatToString(sec, 0);
     326:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__data_end>
     32a:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <__data_end+0x1>
     32e:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end+0x2>
     332:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__data_end+0x3>
     336:	0e 94 a8 07 	call	0xf50	; 0xf50 <__floatunsisf>
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_ZN13StringHandler13FloatToStringEfh>
     340:	ec 01       	movw	r28, r24
	uart->UploadingDataForTransfer(s);
     342:	bc 01       	movw	r22, r24
     344:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     348:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     34c:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN4UART24UploadingDataForTransferEPKc>
	free((char*)s);
     350:	ce 01       	movw	r24, r28
     352:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <free>
	s = nullptr;
	uart->UploadingDataForTransfer(" sec\r");
     356:	6c e6       	ldi	r22, 0x6C	; 108
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     35e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     362:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN4UART24UploadingDataForTransferEPKc>
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <_Z2F1v>:

void F1()
{
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
	PORTC ^= (1<<0);
     370:	95 b3       	in	r25, 0x15	; 21
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	89 27       	eor	r24, r25
     376:	85 bb       	out	0x15, r24	; 21
	uart->UploadingDataForTransfer("F1 - ");
     378:	62 e7       	ldi	r22, 0x72	; 114
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     380:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     384:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN4UART24UploadingDataForTransferEPKc>
	const char *s = StringHandler::FloatToString(sec, 0);
     388:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <__data_end>
     38c:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <__data_end+0x1>
     390:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end+0x2>
     394:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__data_end+0x3>
     398:	0e 94 a8 07 	call	0xf50	; 0xf50 <__floatunsisf>
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <_ZN13StringHandler13FloatToStringEfh>
     3a2:	ec 01       	movw	r28, r24
	uart->UploadingDataForTransfer(s);
     3a4:	bc 01       	movw	r22, r24
     3a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     3aa:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     3ae:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN4UART24UploadingDataForTransferEPKc>
	free((char*)s);
     3b2:	ce 01       	movw	r24, r28
     3b4:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <free>
	s = nullptr;
	uart->UploadingDataForTransfer(" sec\r");
     3b8:	6c e6       	ldi	r22, 0x6C	; 108
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     3c0:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     3c4:	0e 94 8a 06 	call	0xd14	; 0xd14 <_ZN4UART24UploadingDataForTransferEPKc>
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret

000003ce <_Z41__static_initialization_and_destruction_0ii>:
    /* Replace with your application code */
    while (1) 
    {
		sch->DispatchTasks();
    }
}
     3ce:	cf 92       	push	r12
     3d0:	ef 92       	push	r14
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	71 f5       	brne	.+92     	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
     3de:	6f 3f       	cpi	r22, 0xFF	; 255
     3e0:	7f 4f       	sbci	r23, 0xFF	; 255
     3e2:	59 f5       	brne	.+86     	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
#include "StringHandler.h"

#define F_CPU 8000000
#define UART_BAUD 9600

Scheduler *sch = new Scheduler(F_CPU, 5);
     3e4:	85 e0       	ldi	r24, 0x05	; 5
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 6d 04 	call	0x8da	; 0x8da <_ZN9SchedulernwEj>
     3ec:	ec 01       	movw	r28, r24
     3ee:	25 e0       	ldi	r18, 0x05	; 5
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	52 e1       	ldi	r21, 0x12	; 18
     3f4:	6a e7       	ldi	r22, 0x7A	; 122
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN9SchedulerC1Emh>
     3fc:	d0 93 83 00 	sts	0x0083, r29	; 0x800083 <sch+0x1>
     400:	c0 93 82 00 	sts	0x0082, r28	; 0x800082 <sch>
UART *uart = new UART(UART_BAUD, F_CPU, 10, 10);
     404:	8b e0       	ldi	r24, 0x0B	; 11
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 52 06 	call	0xca4	; 0xca4 <_ZN4UARTnwEj>
     40c:	ec 01       	movw	r28, r24
     40e:	0f 2e       	mov	r0, r31
     410:	fa e0       	ldi	r31, 0x0A	; 10
     412:	cf 2e       	mov	r12, r31
     414:	f0 2d       	mov	r31, r0
     416:	0f 2e       	mov	r0, r31
     418:	fa e0       	ldi	r31, 0x0A	; 10
     41a:	ef 2e       	mov	r14, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	00 e0       	ldi	r16, 0x00	; 0
     420:	12 e1       	ldi	r17, 0x12	; 18
     422:	2a e7       	ldi	r18, 0x7A	; 122
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	40 e8       	ldi	r20, 0x80	; 128
     428:	55 e2       	ldi	r21, 0x25	; 37
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	0e 94 a8 05 	call	0xb50	; 0xb50 <_ZN4UARTC1Emmhh>
     432:	d0 93 81 00 	sts	0x0081, r29	; 0x800081 <uart+0x1>
     436:	c0 93 80 00 	sts	0x0080, r28	; 0x800080 <uart>
    /* Replace with your application code */
    while (1) 
    {
		sch->DispatchTasks();
    }
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ef 90       	pop	r14
     444:	cf 90       	pop	r12
     446:	08 95       	ret

00000448 <__vector_19>:

Scheduler *sch = new Scheduler(F_CPU, 5);
UART *uart = new UART(UART_BAUD, F_CPU, 10, 10);

ISR(SCHEDULER_INTERRUPT)
{
     448:	1f 92       	push	r1
     44a:	0f 92       	push	r0
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	0f 92       	push	r0
     450:	11 24       	eor	r1, r1
     452:	2f 93       	push	r18
     454:	3f 93       	push	r19
     456:	4f 93       	push	r20
     458:	5f 93       	push	r21
     45a:	6f 93       	push	r22
     45c:	7f 93       	push	r23
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
     466:	ef 93       	push	r30
     468:	ff 93       	push	r31
	sch->UpdateLeftTime();
     46a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sch>
     46e:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sch+0x1>
     472:	0e 94 7e 03 	call	0x6fc	; 0x6fc <_ZN9Scheduler14UpdateLeftTimeEv>
}
     476:	ff 91       	pop	r31
     478:	ef 91       	pop	r30
     47a:	bf 91       	pop	r27
     47c:	af 91       	pop	r26
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	7f 91       	pop	r23
     484:	6f 91       	pop	r22
     486:	5f 91       	pop	r21
     488:	4f 91       	pop	r20
     48a:	3f 91       	pop	r19
     48c:	2f 91       	pop	r18
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <__vector_11>:

ISR(USART_RX_INTERRUPT)
{
     498:	1f 92       	push	r1
     49a:	0f 92       	push	r0
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	0f 92       	push	r0
     4a0:	11 24       	eor	r1, r1
     4a2:	2f 93       	push	r18
     4a4:	3f 93       	push	r19
     4a6:	4f 93       	push	r20
     4a8:	5f 93       	push	r21
     4aa:	6f 93       	push	r22
     4ac:	7f 93       	push	r23
     4ae:	8f 93       	push	r24
     4b0:	9f 93       	push	r25
     4b2:	af 93       	push	r26
     4b4:	bf 93       	push	r27
     4b6:	ef 93       	push	r30
     4b8:	ff 93       	push	r31
	uart->Receive();
     4ba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     4be:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     4c2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <_ZN4UART7ReceiveEv>
}
     4c6:	ff 91       	pop	r31
     4c8:	ef 91       	pop	r30
     4ca:	bf 91       	pop	r27
     4cc:	af 91       	pop	r26
     4ce:	9f 91       	pop	r25
     4d0:	8f 91       	pop	r24
     4d2:	7f 91       	pop	r23
     4d4:	6f 91       	pop	r22
     4d6:	5f 91       	pop	r21
     4d8:	4f 91       	pop	r20
     4da:	3f 91       	pop	r19
     4dc:	2f 91       	pop	r18
     4de:	0f 90       	pop	r0
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	0f 90       	pop	r0
     4e4:	1f 90       	pop	r1
     4e6:	18 95       	reti

000004e8 <__vector_13>:

ISR(USART_TX_INTERRUPT)
{
     4e8:	1f 92       	push	r1
     4ea:	0f 92       	push	r0
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	0f 92       	push	r0
     4f0:	11 24       	eor	r1, r1
     4f2:	2f 93       	push	r18
     4f4:	3f 93       	push	r19
     4f6:	4f 93       	push	r20
     4f8:	5f 93       	push	r21
     4fa:	6f 93       	push	r22
     4fc:	7f 93       	push	r23
     4fe:	8f 93       	push	r24
     500:	9f 93       	push	r25
     502:	af 93       	push	r26
     504:	bf 93       	push	r27
     506:	ef 93       	push	r30
     508:	ff 93       	push	r31
	uart->TransmissionStop();
     50a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     50e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     512:	0e 94 0a 06 	call	0xc14	; 0xc14 <_ZN4UART16TransmissionStopEv>
	uart->Transmit();
     516:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     51a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     51e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <_ZN4UART8TransmitEv>
}
     522:	ff 91       	pop	r31
     524:	ef 91       	pop	r30
     526:	bf 91       	pop	r27
     528:	af 91       	pop	r26
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	7f 91       	pop	r23
     530:	6f 91       	pop	r22
     532:	5f 91       	pop	r21
     534:	4f 91       	pop	r20
     536:	3f 91       	pop	r19
     538:	2f 91       	pop	r18
     53a:	0f 90       	pop	r0
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	0f 90       	pop	r0
     540:	1f 90       	pop	r1
     542:	18 95       	reti

00000544 <main>:



int main(void)
{
	uart->Enable();
     544:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <uart>
     548:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <uart+0x1>
     54c:	0e 94 06 06 	call	0xc0c	; 0xc0c <_ZN4UART6EnableEv>
	
	sch->AddTask(S, 1000);
     550:	48 ee       	ldi	r20, 0xE8	; 232
     552:	53 e0       	ldi	r21, 0x03	; 3
     554:	6a e4       	ldi	r22, 0x4A	; 74
     556:	71 e0       	ldi	r23, 0x01	; 1
     558:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sch>
     55c:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sch+0x1>
     560:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN9Scheduler7AddTaskEPFvvEj>
	sch->AddTask(F1, 1000);
     564:	48 ee       	ldi	r20, 0xE8	; 232
     566:	53 e0       	ldi	r21, 0x03	; 3
     568:	66 eb       	ldi	r22, 0xB6	; 182
     56a:	71 e0       	ldi	r23, 0x01	; 1
     56c:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sch>
     570:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sch+0x1>
     574:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN9Scheduler7AddTaskEPFvvEj>
	sch->AddTask(T, 10);
     578:	4a e0       	ldi	r20, 0x0A	; 10
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	6e e5       	ldi	r22, 0x5E	; 94
     57e:	71 e0       	ldi	r23, 0x01	; 1
     580:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sch>
     584:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sch+0x1>
     588:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN9Scheduler7AddTaskEPFvvEj>
	sch->AddTask(F2, 2000);
     58c:	40 ed       	ldi	r20, 0xD0	; 208
     58e:	57 e0       	ldi	r21, 0x07	; 7
     590:	65 e8       	ldi	r22, 0x85	; 133
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sch>
     598:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sch+0x1>
     59c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN9Scheduler7AddTaskEPFvvEj>
	sch->AddTask(F3, 500);	
     5a0:	44 ef       	ldi	r20, 0xF4	; 244
     5a2:	51 e0       	ldi	r21, 0x01	; 1
     5a4:	65 e6       	ldi	r22, 0x65	; 101
     5a6:	71 e0       	ldi	r23, 0x01	; 1
     5a8:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sch>
     5ac:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sch+0x1>
     5b0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <_ZN9Scheduler7AddTaskEPFvvEj>
		
	sei();
     5b4:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		sch->DispatchTasks();
     5b6:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <sch>
     5ba:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <sch+0x1>
     5be:	0e 94 9d 03 	call	0x73a	; 0x73a <_ZN9Scheduler13DispatchTasksEv>
     5c2:	f9 cf       	rjmp	.-14     	; 0x5b6 <main+0x72>

000005c4 <_GLOBAL__sub_I_sch>:
    }
}
     5c4:	6f ef       	ldi	r22, 0xFF	; 255
     5c6:	7f ef       	ldi	r23, 0xFF	; 255
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_Z41__static_initialization_and_destruction_0ii>
     5d0:	08 95       	ret

000005d2 <_ZN9SchedulerC1Emh>:
	_TIMSK &= ~(1<<_OCIE0);
}

Scheduler::~Scheduler()
{
	ClearQueue();
     5d2:	8f 92       	push	r8
     5d4:	9f 92       	push	r9
     5d6:	af 92       	push	r10
     5d8:	bf 92       	push	r11
     5da:	df 92       	push	r13
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	7c 01       	movw	r14, r24
     5ea:	4a 01       	movw	r8, r20
     5ec:	5b 01       	movw	r10, r22
     5ee:	c2 2f       	mov	r28, r18
     5f0:	cb 01       	movw	r24, r22
     5f2:	ba 01       	movw	r22, r20
     5f4:	28 e1       	ldi	r18, 0x18	; 24
     5f6:	34 ee       	ldi	r19, 0xE4	; 228
     5f8:	43 e0       	ldi	r20, 0x03	; 3
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
     600:	28 30       	cpi	r18, 0x08	; 8
     602:	31 05       	cpc	r19, r1
     604:	41 05       	cpc	r20, r1
     606:	51 05       	cpc	r21, r1
     608:	40 f4       	brcc	.+16     	; 0x61a <_ZN9SchedulerC1Emh+0x48>
     60a:	83 b7       	in	r24, 0x33	; 51
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	83 bf       	out	0x33, r24	; 51
     610:	28 e0       	ldi	r18, 0x08	; 8
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	28 c0       	rjmp	.+80     	; 0x66a <_ZN9SchedulerC1Emh+0x98>
     61a:	20 34       	cpi	r18, 0x40	; 64
     61c:	31 05       	cpc	r19, r1
     61e:	41 05       	cpc	r20, r1
     620:	51 05       	cpc	r21, r1
     622:	40 f4       	brcc	.+16     	; 0x634 <_ZN9SchedulerC1Emh+0x62>
     624:	83 b7       	in	r24, 0x33	; 51
     626:	83 60       	ori	r24, 0x03	; 3
     628:	83 bf       	out	0x33, r24	; 51
     62a:	20 e4       	ldi	r18, 0x40	; 64
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	1b c0       	rjmp	.+54     	; 0x66a <_ZN9SchedulerC1Emh+0x98>
     634:	2f 3f       	cpi	r18, 0xFF	; 255
     636:	31 05       	cpc	r19, r1
     638:	41 05       	cpc	r20, r1
     63a:	51 05       	cpc	r21, r1
     63c:	09 f0       	breq	.+2      	; 0x640 <_ZN9SchedulerC1Emh+0x6e>
     63e:	40 f4       	brcc	.+16     	; 0x650 <_ZN9SchedulerC1Emh+0x7e>
     640:	83 b7       	in	r24, 0x33	; 51
     642:	84 60       	ori	r24, 0x04	; 4
     644:	83 bf       	out	0x33, r24	; 51
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	31 e0       	ldi	r19, 0x01	; 1
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	0d c0       	rjmp	.+26     	; 0x66a <_ZN9SchedulerC1Emh+0x98>
     650:	21 15       	cp	r18, r1
     652:	84 e0       	ldi	r24, 0x04	; 4
     654:	38 07       	cpc	r19, r24
     656:	41 05       	cpc	r20, r1
     658:	51 05       	cpc	r21, r1
     65a:	38 f4       	brcc	.+14     	; 0x66a <_ZN9SchedulerC1Emh+0x98>
     65c:	83 b7       	in	r24, 0x33	; 51
     65e:	85 60       	ori	r24, 0x05	; 5
     660:	83 bf       	out	0x33, r24	; 51
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	34 e0       	ldi	r19, 0x04	; 4
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	83 b7       	in	r24, 0x33	; 51
     66c:	88 60       	ori	r24, 0x08	; 8
     66e:	83 bf       	out	0x33, r24	; 51
     670:	a8 ee       	ldi	r26, 0xE8	; 232
     672:	b3 e0       	ldi	r27, 0x03	; 3
     674:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__muluhisi3>
     678:	9b 01       	movw	r18, r22
     67a:	ac 01       	movw	r20, r24
     67c:	c5 01       	movw	r24, r10
     67e:	b4 01       	movw	r22, r8
     680:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
     684:	2c bf       	out	0x3c, r18	; 60
     686:	f7 01       	movw	r30, r14
     688:	10 82       	st	Z, r1
     68a:	11 82       	std	Z+1, r1	; 0x01
     68c:	c2 83       	std	Z+2, r28	; 0x02
     68e:	8c 2f       	mov	r24, r28
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	0e 94 4b 0b 	call	0x1696	; 0x1696 <malloc>
     69a:	f7 01       	movw	r30, r14
     69c:	94 83       	std	Z+4, r25	; 0x04
     69e:	83 83       	std	Z+3, r24	; 0x03
     6a0:	89 2b       	or	r24, r25
     6a2:	a9 f3       	breq	.-22     	; 0x68e <_ZN9SchedulerC1Emh+0xbc>
     6a4:	d1 2c       	mov	r13, r1
     6a6:	f7 01       	movw	r30, r14
     6a8:	82 81       	ldd	r24, Z+2	; 0x02
     6aa:	d8 16       	cp	r13, r24
     6ac:	d8 f4       	brcc	.+54     	; 0x6e4 <_ZN9SchedulerC1Emh+0x112>
     6ae:	f7 01       	movw	r30, r14
     6b0:	03 81       	ldd	r16, Z+3	; 0x03
     6b2:	14 81       	ldd	r17, Z+4	; 0x04
     6b4:	cd 2d       	mov	r28, r13
     6b6:	d0 e0       	ldi	r29, 0x00	; 0
     6b8:	cc 0f       	add	r28, r28
     6ba:	dd 1f       	adc	r29, r29
     6bc:	0c 0f       	add	r16, r28
     6be:	1d 1f       	adc	r17, r29
     6c0:	87 e0       	ldi	r24, 0x07	; 7
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <malloc>
     6c8:	f8 01       	movw	r30, r16
     6ca:	91 83       	std	Z+1, r25	; 0x01
     6cc:	80 83       	st	Z, r24
     6ce:	f7 01       	movw	r30, r14
     6d0:	83 81       	ldd	r24, Z+3	; 0x03
     6d2:	94 81       	ldd	r25, Z+4	; 0x04
     6d4:	c8 0f       	add	r28, r24
     6d6:	d9 1f       	adc	r29, r25
     6d8:	88 81       	ld	r24, Y
     6da:	99 81       	ldd	r25, Y+1	; 0x01
     6dc:	89 2b       	or	r24, r25
     6de:	39 f3       	breq	.-50     	; 0x6ae <_ZN9SchedulerC1Emh+0xdc>
     6e0:	d3 94       	inc	r13
     6e2:	e1 cf       	rjmp	.-62     	; 0x6a6 <_ZN9SchedulerC1Emh+0xd4>
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	8f 90       	pop	r8
     6fa:	08 95       	ret

000006fc <_ZN9Scheduler14UpdateLeftTimeEv>:
     6fc:	dc 01       	movw	r26, r24
     6fe:	12 be       	out	0x32, r1	; 50
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	8c 91       	ld	r24, X
     704:	98 17       	cp	r25, r24
     706:	c0 f4       	brcc	.+48     	; 0x738 <_ZN9Scheduler14UpdateLeftTimeEv+0x3c>
     708:	13 96       	adiw	r26, 0x03	; 3
     70a:	2d 91       	ld	r18, X+
     70c:	3c 91       	ld	r19, X
     70e:	14 97       	sbiw	r26, 0x04	; 4
     710:	e9 2f       	mov	r30, r25
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	e2 0f       	add	r30, r18
     71a:	f3 1f       	adc	r31, r19
     71c:	01 90       	ld	r0, Z+
     71e:	f0 81       	ld	r31, Z
     720:	e0 2d       	mov	r30, r0
     722:	86 81       	ldd	r24, Z+6	; 0x06
     724:	81 11       	cpse	r24, r1
     726:	06 c0       	rjmp	.+12     	; 0x734 <_ZN9Scheduler14UpdateLeftTimeEv+0x38>
     728:	24 81       	ldd	r18, Z+4	; 0x04
     72a:	35 81       	ldd	r19, Z+5	; 0x05
     72c:	2f 5f       	subi	r18, 0xFF	; 255
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
     730:	35 83       	std	Z+5, r19	; 0x05
     732:	24 83       	std	Z+4, r18	; 0x04
     734:	9f 5f       	subi	r25, 0xFF	; 255
     736:	e5 cf       	rjmp	.-54     	; 0x702 <_ZN9Scheduler14UpdateLeftTimeEv+0x6>
     738:	08 95       	ret

0000073a <_ZN9Scheduler13DispatchTasksEv>:
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	fc 01       	movw	r30, r24
     740:	20 81       	ld	r18, Z
     742:	22 23       	and	r18, r18
     744:	09 f4       	brne	.+2      	; 0x748 <_ZN9Scheduler13DispatchTasksEv+0xe>
     746:	47 c0       	rjmp	.+142    	; 0x7d6 <_ZN9Scheduler13DispatchTasksEv+0x9c>
     748:	ec 01       	movw	r28, r24
     74a:	23 81       	ldd	r18, Z+3	; 0x03
     74c:	34 81       	ldd	r19, Z+4	; 0x04
     74e:	81 81       	ldd	r24, Z+1	; 0x01
     750:	e8 2f       	mov	r30, r24
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	e2 0f       	add	r30, r18
     75a:	f3 1f       	adc	r31, r19
     75c:	01 90       	ld	r0, Z+
     75e:	f0 81       	ld	r31, Z
     760:	e0 2d       	mov	r30, r0
     762:	24 81       	ldd	r18, Z+4	; 0x04
     764:	35 81       	ldd	r19, Z+5	; 0x05
     766:	82 81       	ldd	r24, Z+2	; 0x02
     768:	93 81       	ldd	r25, Z+3	; 0x03
     76a:	28 17       	cp	r18, r24
     76c:	39 07       	cpc	r19, r25
     76e:	68 f1       	brcs	.+90     	; 0x7ca <_ZN9Scheduler13DispatchTasksEv+0x90>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	86 83       	std	Z+6, r24	; 0x06
     774:	2b 81       	ldd	r18, Y+3	; 0x03
     776:	3c 81       	ldd	r19, Y+4	; 0x04
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	e8 2f       	mov	r30, r24
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	e2 0f       	add	r30, r18
     784:	f3 1f       	adc	r31, r19
     786:	01 90       	ld	r0, Z+
     788:	f0 81       	ld	r31, Z
     78a:	e0 2d       	mov	r30, r0
     78c:	15 82       	std	Z+5, r1	; 0x05
     78e:	14 82       	std	Z+4, r1	; 0x04
     790:	2b 81       	ldd	r18, Y+3	; 0x03
     792:	3c 81       	ldd	r19, Y+4	; 0x04
     794:	89 81       	ldd	r24, Y+1	; 0x01
     796:	e8 2f       	mov	r30, r24
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	e2 0f       	add	r30, r18
     7a0:	f3 1f       	adc	r31, r19
     7a2:	01 90       	ld	r0, Z+
     7a4:	f0 81       	ld	r31, Z
     7a6:	e0 2d       	mov	r30, r0
     7a8:	01 90       	ld	r0, Z+
     7aa:	f0 81       	ld	r31, Z
     7ac:	e0 2d       	mov	r30, r0
     7ae:	09 95       	icall
     7b0:	2b 81       	ldd	r18, Y+3	; 0x03
     7b2:	3c 81       	ldd	r19, Y+4	; 0x04
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	e8 2f       	mov	r30, r24
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	ee 0f       	add	r30, r30
     7bc:	ff 1f       	adc	r31, r31
     7be:	e2 0f       	add	r30, r18
     7c0:	f3 1f       	adc	r31, r19
     7c2:	01 90       	ld	r0, Z+
     7c4:	f0 81       	ld	r31, Z
     7c6:	e0 2d       	mov	r30, r0
     7c8:	16 82       	std	Z+6, r1	; 0x06
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	8f 5f       	subi	r24, 0xFF	; 255
     7ce:	68 81       	ld	r22, Y
     7d0:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <__udivmodqi4>
     7d4:	99 83       	std	Y+1, r25	; 0x01
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <_ZN9Scheduler14EnableDispatchEv>:
     7dc:	12 be       	out	0x32, r1	; 50
     7de:	89 b7       	in	r24, 0x39	; 57
     7e0:	82 60       	ori	r24, 0x02	; 2
     7e2:	89 bf       	out	0x39, r24	; 57
     7e4:	08 95       	ret

000007e6 <_ZN9Scheduler7AddTaskEPFvvEj>:
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	27 97       	sbiw	r28, 0x07	; 7
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	8c 01       	movw	r16, r24
     800:	dc 01       	movw	r26, r24
     802:	8c 91       	ld	r24, X
     804:	12 96       	adiw	r26, 0x02	; 2
     806:	9c 91       	ld	r25, X
     808:	89 17       	cp	r24, r25
     80a:	09 f4       	brne	.+2      	; 0x80e <_ZN9Scheduler7AddTaskEPFvvEj+0x28>
     80c:	5b c0       	rjmp	.+182    	; 0x8c4 <_ZN9Scheduler7AddTaskEPFvvEj+0xde>
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	98 17       	cp	r25, r24
     812:	80 f5       	brcc	.+96     	; 0x874 <_ZN9Scheduler7AddTaskEPFvvEj+0x8e>
     814:	d8 01       	movw	r26, r16
     816:	13 96       	adiw	r26, 0x03	; 3
     818:	ed 91       	ld	r30, X+
     81a:	fc 91       	ld	r31, X
     81c:	14 97       	sbiw	r26, 0x04	; 4
     81e:	29 2f       	mov	r18, r25
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	22 0f       	add	r18, r18
     824:	33 1f       	adc	r19, r19
     826:	e2 0f       	add	r30, r18
     828:	f3 1f       	adc	r31, r19
     82a:	01 90       	ld	r0, Z+
     82c:	f0 81       	ld	r31, Z
     82e:	e0 2d       	mov	r30, r0
     830:	a0 81       	ld	r26, Z
     832:	b1 81       	ldd	r27, Z+1	; 0x01
     834:	a6 17       	cp	r26, r22
     836:	b7 07       	cpc	r27, r23
     838:	d9 f4       	brne	.+54     	; 0x870 <_ZN9Scheduler7AddTaskEPFvvEj+0x8a>
     83a:	53 83       	std	Z+3, r21	; 0x03
     83c:	42 83       	std	Z+2, r20	; 0x02
     83e:	d8 01       	movw	r26, r16
     840:	13 96       	adiw	r26, 0x03	; 3
     842:	ed 91       	ld	r30, X+
     844:	fc 91       	ld	r31, X
     846:	14 97       	sbiw	r26, 0x04	; 4
     848:	e2 0f       	add	r30, r18
     84a:	f3 1f       	adc	r31, r19
     84c:	01 90       	ld	r0, Z+
     84e:	f0 81       	ld	r31, Z
     850:	e0 2d       	mov	r30, r0
     852:	15 82       	std	Z+5, r1	; 0x05
     854:	14 82       	std	Z+4, r1	; 0x04
     856:	13 96       	adiw	r26, 0x03	; 3
     858:	8d 91       	ld	r24, X+
     85a:	9c 91       	ld	r25, X
     85c:	14 97       	sbiw	r26, 0x04	; 4
     85e:	fc 01       	movw	r30, r24
     860:	e2 0f       	add	r30, r18
     862:	f3 1f       	adc	r31, r19
     864:	01 90       	ld	r0, Z+
     866:	f0 81       	ld	r31, Z
     868:	e0 2d       	mov	r30, r0
     86a:	16 82       	std	Z+6, r1	; 0x06
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	03 c0       	rjmp	.+6      	; 0x876 <_ZN9Scheduler7AddTaskEPFvvEj+0x90>
     870:	9f 5f       	subi	r25, 0xFF	; 255
     872:	ce cf       	rjmp	.-100    	; 0x810 <_ZN9Scheduler7AddTaskEPFvvEj+0x2a>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	81 11       	cpse	r24, r1
     878:	25 c0       	rjmp	.+74     	; 0x8c4 <_ZN9Scheduler7AddTaskEPFvvEj+0xde>
     87a:	7a 83       	std	Y+2, r23	; 0x02
     87c:	69 83       	std	Y+1, r22	; 0x01
     87e:	5c 83       	std	Y+4, r21	; 0x04
     880:	4b 83       	std	Y+3, r20	; 0x03
     882:	1e 82       	std	Y+6, r1	; 0x06
     884:	1d 82       	std	Y+5, r1	; 0x05
     886:	1f 82       	std	Y+7, r1	; 0x07
     888:	f8 01       	movw	r30, r16
     88a:	23 81       	ldd	r18, Z+3	; 0x03
     88c:	34 81       	ldd	r19, Z+4	; 0x04
     88e:	80 81       	ld	r24, Z
     890:	e8 2f       	mov	r30, r24
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	e2 0f       	add	r30, r18
     89a:	f3 1f       	adc	r31, r19
     89c:	a0 81       	ld	r26, Z
     89e:	b1 81       	ldd	r27, Z+1	; 0x01
     8a0:	87 e0       	ldi	r24, 0x07	; 7
     8a2:	fe 01       	movw	r30, r28
     8a4:	31 96       	adiw	r30, 0x01	; 1
     8a6:	01 90       	ld	r0, Z+
     8a8:	0d 92       	st	X+, r0
     8aa:	8a 95       	dec	r24
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <_ZN9Scheduler7AddTaskEPFvvEj+0xc0>
     8ae:	d8 01       	movw	r26, r16
     8b0:	8c 91       	ld	r24, X
     8b2:	81 11       	cpse	r24, r1
     8b4:	03 c0       	rjmp	.+6      	; 0x8bc <_ZN9Scheduler7AddTaskEPFvvEj+0xd6>
     8b6:	c8 01       	movw	r24, r16
     8b8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_ZN9Scheduler14EnableDispatchEv>
     8bc:	f8 01       	movw	r30, r16
     8be:	80 81       	ld	r24, Z
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	80 83       	st	Z, r24
     8c4:	27 96       	adiw	r28, 0x07	; 7
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <_ZN9SchedulernwEj>:
}

void* Scheduler::operator new(size_t size)
{
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	ec 01       	movw	r28, r24
	void* ptr;
		
	do
	ptr = malloc(size);
     8e0:	ce 01       	movw	r24, r28
     8e2:	0e 94 4b 0b 	call	0x1696	; 0x1696 <malloc>
	while(ptr == nullptr);
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	d9 f3       	breq	.-10     	; 0x8e0 <_ZN9SchedulernwEj+0x6>
		
	return ptr;
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <_ZN13StringHandler13FloatToStringEfh>:
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
     8f0:	2f 92       	push	r2
     8f2:	3f 92       	push	r3
     8f4:	4f 92       	push	r4
     8f6:	5f 92       	push	r5
     8f8:	6f 92       	push	r6
     8fa:	7f 92       	push	r7
     8fc:	8f 92       	push	r8
     8fe:	9f 92       	push	r9
     900:	af 92       	push	r10
     902:	bf 92       	push	r11
     904:	cf 92       	push	r12
     906:	df 92       	push	r13
     908:	ef 92       	push	r14
     90a:	ff 92       	push	r15
     90c:	0f 93       	push	r16
     90e:	1f 93       	push	r17
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	00 d0       	rcall	.+0      	; 0x916 <_ZN13StringHandler13FloatToStringEfh+0x26>
     916:	00 d0       	rcall	.+0      	; 0x918 <_ZN13StringHandler13FloatToStringEfh+0x28>
     918:	00 d0       	rcall	.+0      	; 0x91a <_ZN13StringHandler13FloatToStringEfh+0x2a>
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	2b 01       	movw	r4, r22
     920:	3c 01       	movw	r6, r24
     922:	94 2e       	mov	r9, r20
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
	
	return resultString;
}
     924:	2d b6       	in	r2, 0x3d	; 61
     926:	3e b6       	in	r3, 0x3e	; 62
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
	uint32_t integerPart = fabs(value);
     928:	9f 77       	andi	r25, 0x7F	; 127
     92a:	6b 83       	std	Y+3, r22	; 0x03
     92c:	7c 83       	std	Y+4, r23	; 0x04
     92e:	8d 83       	std	Y+5, r24	; 0x05
     930:	9e 83       	std	Y+6, r25	; 0x06
     932:	0e 94 79 07 	call	0xef2	; 0xef2 <__fixunssfsi>
     936:	a6 2e       	mov	r10, r22
     938:	b7 2e       	mov	r11, r23
     93a:	c8 2e       	mov	r12, r24
     93c:	d9 2e       	mov	r13, r25
     93e:	26 2f       	mov	r18, r22
     940:	37 2f       	mov	r19, r23
     942:	48 2f       	mov	r20, r24
     944:	59 2f       	mov	r21, r25
	
	uint8_t stringLength = 0;	
     946:	81 2c       	mov	r8, r1
     948:	01 c0       	rjmp	.+2      	; 0x94c <_ZN13StringHandler13FloatToStringEfh+0x5c>
	do
	{
		integerPart /= 10;
		stringLength++;
     94a:	8f 2c       	mov	r8, r15
	uint32_t integerPart = fabs(value);
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
     94c:	ca 01       	movw	r24, r20
     94e:	b9 01       	movw	r22, r18
     950:	2a e0       	ldi	r18, 0x0A	; 10
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
		stringLength++;
     95c:	ff 24       	eor	r15, r15
     95e:	f3 94       	inc	r15
     960:	f8 0c       	add	r15, r8
	}
	while(integerPart > 0);
     962:	21 15       	cp	r18, r1
     964:	31 05       	cpc	r19, r1
     966:	41 05       	cpc	r20, r1
     968:	51 05       	cpc	r21, r1
     96a:	79 f7       	brne	.-34     	; 0x94a <_ZN13StringHandler13FloatToStringEfh+0x5a>
	
	integerPart = fabs(value);
	
	uint8_t integerPartLength = stringLength;
	
	if(digitsAfterDot > 0)
     96c:	99 20       	and	r9, r9
     96e:	21 f0       	breq	.+8      	; 0x978 <_ZN13StringHandler13FloatToStringEfh+0x88>
	{
		stringLength++;										//for '.'
     970:	83 94       	inc	r8
     972:	83 94       	inc	r8
		stringLength += digitsAfterDot;						//for .xxxxx
     974:	89 0c       	add	r8, r9
     976:	01 c0       	rjmp	.+2      	; 0x97a <_ZN13StringHandler13FloatToStringEfh+0x8a>
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
		stringLength++;
     978:	8f 2c       	mov	r8, r15
	{
		stringLength++;										//for '.'
		stringLength += digitsAfterDot;						//for .xxxxx
	}
	
	if(value < 0) stringLength++;							//for '-'
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	a9 01       	movw	r20, r18
     980:	c3 01       	movw	r24, r6
     982:	b2 01       	movw	r22, r4
     984:	0e 94 74 07 	call	0xee8	; 0xee8 <__cmpsf2>
     988:	88 23       	and	r24, r24
     98a:	0c f4       	brge	.+2      	; 0x98e <_ZN13StringHandler13FloatToStringEfh+0x9e>
     98c:	83 94       	inc	r8
	
	stringLength++;											//for '\0'	
     98e:	83 94       	inc	r8
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
     990:	8f 2d       	mov	r24, r15
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	ad b7       	in	r26, 0x3d	; 61
     998:	be b7       	in	r27, 0x3e	; 62
     99a:	a8 1b       	sub	r26, r24
     99c:	b9 0b       	sbc	r27, r25
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	be bf       	out	0x3e, r27	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	ad bf       	out	0x3d, r26	; 61
     9a8:	2d b7       	in	r18, 0x3d	; 61
     9aa:	3e b7       	in	r19, 0x3e	; 62
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
     9ae:	3f 4f       	sbci	r19, 0xFF	; 255
     9b0:	3a 83       	std	Y+2, r19	; 0x02
     9b2:	29 83       	std	Y+1, r18	; 0x01
     9b4:	89 01       	movw	r16, r18
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     9b6:	ee 24       	eor	r14, r14
     9b8:	e3 94       	inc	r14
     9ba:	fe 14       	cp	r15, r14
     9bc:	c0 f0       	brcs	.+48     	; 0x9ee <_ZN13StringHandler13FloatToStringEfh+0xfe>
	{
		uint8_t dig = integerPart % 10;
				
		integerPart /= 10;
     9be:	6a 2d       	mov	r22, r10
     9c0:	7b 2d       	mov	r23, r11
     9c2:	8c 2d       	mov	r24, r12
     9c4:	9d 2d       	mov	r25, r13
     9c6:	2a e0       	ldi	r18, 0x0A	; 10
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
     9d2:	a2 2e       	mov	r10, r18
     9d4:	b3 2e       	mov	r11, r19
     9d6:	c4 2e       	mov	r12, r20
     9d8:	d5 2e       	mov	r13, r21
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
     9da:	ef 2d       	mov	r30, r15
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	ee 19       	sub	r30, r14
     9e0:	f1 09       	sbc	r31, r1
     9e2:	e0 0f       	add	r30, r16
     9e4:	f1 1f       	adc	r31, r17
     9e6:	60 5d       	subi	r22, 0xD0	; 208
     9e8:	60 83       	st	Z, r22
	
	stringLength++;											//for '\0'	
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     9ea:	e3 94       	inc	r14
     9ec:	e6 cf       	rjmp	.-52     	; 0x9ba <_ZN13StringHandler13FloatToStringEfh+0xca>
		integerPart /= 10;
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
	}
	
	integerPartDigitsArray[integerPartLength] = '\0';
     9ee:	e9 81       	ldd	r30, Y+1	; 0x01
     9f0:	fa 81       	ldd	r31, Y+2	; 0x02
     9f2:	ef 0d       	add	r30, r15
     9f4:	f1 1d       	adc	r31, r1
     9f6:	10 82       	st	Z, r1
				
	char* resultString;
	do 
	{
		resultString = (char*)malloc(stringLength);
     9f8:	e8 2c       	mov	r14, r8
     9fa:	f1 2c       	mov	r15, r1
     9fc:	c7 01       	movw	r24, r14
     9fe:	0e 94 4b 0b 	call	0x1696	; 0x1696 <malloc>
     a02:	8c 01       	movw	r16, r24
	}while(resultString == NULL);
     a04:	89 2b       	or	r24, r25
     a06:	c1 f3       	breq	.-16     	; 0x9f8 <_ZN13StringHandler13FloatToStringEfh+0x108>
	 
			
	if(value < 0)
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	a9 01       	movw	r20, r18
     a0e:	c3 01       	movw	r24, r6
     a10:	b2 01       	movw	r22, r4
     a12:	0e 94 74 07 	call	0xee8	; 0xee8 <__cmpsf2>
     a16:	88 23       	and	r24, r24
     a18:	6c f4       	brge	.+26     	; 0xa34 <_ZN13StringHandler13FloatToStringEfh+0x144>
	{
		strlcpy(resultString, "-", stringLength);
     a1a:	a7 01       	movw	r20, r14
     a1c:	68 e7       	ldi	r22, 0x78	; 120
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	c8 01       	movw	r24, r16
     a22:	0e 94 94 0c 	call	0x1928	; 0x1928 <strlcpy>
		strlcat(resultString, integerPartDigitsArray, stringLength);
     a26:	a7 01       	movw	r20, r14
     a28:	69 81       	ldd	r22, Y+1	; 0x01
     a2a:	7a 81       	ldd	r23, Y+2	; 0x02
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <strlcat>
     a32:	06 c0       	rjmp	.+12     	; 0xa40 <_ZN13StringHandler13FloatToStringEfh+0x150>
	}
	else strlcpy(resultString, integerPartDigitsArray, stringLength);
     a34:	a7 01       	movw	r20, r14
     a36:	69 81       	ldd	r22, Y+1	; 0x01
     a38:	7a 81       	ldd	r23, Y+2	; 0x02
     a3a:	c8 01       	movw	r24, r16
     a3c:	0e 94 94 0c 	call	0x1928	; 0x1928 <strlcpy>
	
	if(digitsAfterDot == 0)
     a40:	99 20       	and	r9, r9
     a42:	09 f4       	brne	.+2      	; 0xa46 <_ZN13StringHandler13FloatToStringEfh+0x156>
     a44:	66 c0       	rjmp	.+204    	; 0xb12 <_ZN13StringHandler13FloatToStringEfh+0x222>
	{		
		return resultString;
	}
		
	strlcat(resultString, ".", stringLength);
     a46:	a7 01       	movw	r20, r14
     a48:	6a e7       	ldi	r22, 0x7A	; 122
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	c8 01       	movw	r24, r16
     a4e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <strlcat>
		
	value = fabs(value) - integerPart;	
     a52:	6a 2d       	mov	r22, r10
     a54:	7b 2d       	mov	r23, r11
     a56:	8c 2d       	mov	r24, r12
     a58:	9d 2d       	mov	r25, r13
     a5a:	0e 94 a8 07 	call	0xf50	; 0xf50 <__floatunsisf>
     a5e:	9b 01       	movw	r18, r22
     a60:	ac 01       	movw	r20, r24
     a62:	6b 81       	ldd	r22, Y+3	; 0x03
     a64:	7c 81       	ldd	r23, Y+4	; 0x04
     a66:	8d 81       	ldd	r24, Y+5	; 0x05
     a68:	9e 81       	ldd	r25, Y+6	; 0x06
     a6a:	0e 94 07 07 	call	0xe0e	; 0xe0e <__subsf3>
     a6e:	2b 01       	movw	r4, r22
     a70:	3c 01       	movw	r6, r24
			
	uint32_t mult = (uint32_t)round(pow(10, digitsAfterDot));
     a72:	69 2d       	mov	r22, r9
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 a8 07 	call	0xf50	; 0xf50 <__floatunsisf>
     a7e:	9b 01       	movw	r18, r22
     a80:	ac 01       	movw	r20, r24
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	80 e2       	ldi	r24, 0x20	; 32
     a88:	91 e4       	ldi	r25, 0x41	; 65
     a8a:	0e 94 c7 08 	call	0x118e	; 0x118e <pow>
     a8e:	0e 94 17 09 	call	0x122e	; 0x122e <round>
     a92:	0e 94 79 07 	call	0xef2	; 0xef2 <__fixunssfsi>
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
     a96:	0e 94 a8 07 	call	0xf50	; 0xf50 <__floatunsisf>
     a9a:	9b 01       	movw	r18, r22
     a9c:	ac 01       	movw	r20, r24
     a9e:	c3 01       	movw	r24, r6
     aa0:	b2 01       	movw	r22, r4
     aa2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__mulsf3>
     aa6:	0e 94 17 09 	call	0x122e	; 0x122e <round>
     aaa:	0e 94 79 07 	call	0xef2	; 0xef2 <__fixunssfsi>
     aae:	9b 01       	movw	r18, r22
     ab0:	ac 01       	movw	r20, r24
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
     ab2:	89 2d       	mov	r24, r9
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	6d b7       	in	r22, 0x3d	; 61
     aba:	7e b7       	in	r23, 0x3e	; 62
     abc:	68 1b       	sub	r22, r24
     abe:	79 0b       	sbc	r23, r25
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	7e bf       	out	0x3e, r23	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	6d bf       	out	0x3d, r22	; 61
     aca:	8d b7       	in	r24, 0x3d	; 61
     acc:	9e b7       	in	r25, 0x3e	; 62
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	5c 01       	movw	r10, r24
     ad2:	6c 01       	movw	r12, r24
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     ad4:	88 24       	eor	r8, r8
     ad6:	83 94       	inc	r8
     ad8:	98 14       	cp	r9, r8
     ada:	90 f0       	brcs	.+36     	; 0xb00 <_ZN13StringHandler13FloatToStringEfh+0x210>
	{
		uint8_t dig = fractionalPart % 10;
				
		fractionalPart /= 10;
     adc:	ca 01       	movw	r24, r20
     ade:	b9 01       	movw	r22, r18
     ae0:	2a e0       	ldi	r18, 0x0A	; 10
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
     aec:	e9 2d       	mov	r30, r9
     aee:	f0 e0       	ldi	r31, 0x00	; 0
     af0:	e8 19       	sub	r30, r8
     af2:	f1 09       	sbc	r31, r1
     af4:	ec 0d       	add	r30, r12
     af6:	fd 1d       	adc	r31, r13
     af8:	60 5d       	subi	r22, 0xD0	; 208
     afa:	60 83       	st	Z, r22
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     afc:	83 94       	inc	r8
     afe:	ec cf       	rjmp	.-40     	; 0xad8 <_ZN13StringHandler13FloatToStringEfh+0x1e8>
				
		fractionalPart /= 10;
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
	}			
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
     b00:	f5 01       	movw	r30, r10
     b02:	e9 0d       	add	r30, r9
     b04:	f1 1d       	adc	r31, r1
     b06:	10 82       	st	Z, r1
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
     b08:	a7 01       	movw	r20, r14
     b0a:	b5 01       	movw	r22, r10
     b0c:	c8 01       	movw	r24, r16
     b0e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <strlcat>
	
	return resultString;
}
     b12:	c8 01       	movw	r24, r16
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	3e be       	out	0x3e, r3	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	2d be       	out	0x3d, r2	; 61
     b1e:	26 96       	adiw	r28, 0x06	; 6
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	7f 90       	pop	r7
     b44:	6f 90       	pop	r6
     b46:	5f 90       	pop	r5
     b48:	4f 90       	pop	r4
     b4a:	3f 90       	pop	r3
     b4c:	2f 90       	pop	r2
     b4e:	08 95       	ret

00000b50 <_ZN4UARTC1Emmhh>:
	return ptr;
}

void UART::operator delete(void* ptr)
{
	free(ptr);
     b50:	4f 92       	push	r4
     b52:	5f 92       	push	r5
     b54:	6f 92       	push	r6
     b56:	7f 92       	push	r7
     b58:	8f 92       	push	r8
     b5a:	9f 92       	push	r9
     b5c:	af 92       	push	r10
     b5e:	bf 92       	push	r11
     b60:	cf 92       	push	r12
     b62:	ef 92       	push	r14
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	ec 01       	movw	r28, r24
     b6e:	4a 01       	movw	r8, r20
     b70:	5b 01       	movw	r10, r22
     b72:	28 01       	movw	r4, r16
     b74:	39 01       	movw	r6, r18
     b76:	18 82       	st	Y, r1
     b78:	19 82       	std	Y+1, r1	; 0x01
     b7a:	89 e0       	ldi	r24, 0x09	; 9
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN6BuffernwEj>
     b82:	8c 01       	movw	r16, r24
     b84:	4c 2d       	mov	r20, r12
     b86:	6e 2d       	mov	r22, r14
     b88:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6BufferC1Ehh>
     b8c:	1b 83       	std	Y+3, r17	; 0x03
     b8e:	0a 83       	std	Y+2, r16	; 0x02
     b90:	1c 82       	std	Y+4, r1	; 0x04
     b92:	1e 82       	std	Y+6, r1	; 0x06
     b94:	89 e0       	ldi	r24, 0x09	; 9
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 3f 01 	call	0x27e	; 0x27e <_ZN6BuffernwEj>
     b9c:	8c 01       	movw	r16, r24
     b9e:	4c 2d       	mov	r20, r12
     ba0:	6e 2d       	mov	r22, r14
     ba2:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6BufferC1Ehh>
     ba6:	1a 87       	std	Y+10, r17	; 0x0a
     ba8:	09 87       	std	Y+9, r16	; 0x09
     baa:	d5 01       	movw	r26, r10
     bac:	c4 01       	movw	r24, r8
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	aa 1f       	adc	r26, r26
     bb4:	bb 1f       	adc	r27, r27
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	aa 1f       	adc	r26, r26
     bbc:	bb 1f       	adc	r27, r27
     bbe:	9c 01       	movw	r18, r24
     bc0:	ad 01       	movw	r20, r26
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	44 1f       	adc	r20, r20
     bc8:	55 1f       	adc	r21, r21
     bca:	22 0f       	add	r18, r18
     bcc:	33 1f       	adc	r19, r19
     bce:	44 1f       	adc	r20, r20
     bd0:	55 1f       	adc	r21, r21
     bd2:	c3 01       	movw	r24, r6
     bd4:	b2 01       	movw	r22, r4
     bd6:	0e 94 09 0b 	call	0x1612	; 0x1612 <__udivmodsi4>
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	31 09       	sbc	r19, r1
     bde:	80 b5       	in	r24, 0x20	; 32
     be0:	86 60       	ori	r24, 0x06	; 6
     be2:	80 bd       	out	0x20, r24	; 32
     be4:	80 b5       	in	r24, 0x20	; 32
     be6:	80 68       	ori	r24, 0x80	; 128
     be8:	80 bd       	out	0x20, r24	; 32
     bea:	30 bd       	out	0x20, r19	; 32
     bec:	29 b9       	out	0x09, r18	; 9
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ef 90       	pop	r14
     bf8:	cf 90       	pop	r12
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
     c0a:	08 95       	ret

00000c0c <_ZN4UART6EnableEv>:
     c0c:	8a b1       	in	r24, 0x0a	; 10
     c0e:	88 6d       	ori	r24, 0xD8	; 216
     c10:	8a b9       	out	0x0a, r24	; 10
     c12:	08 95       	ret

00000c14 <_ZN4UART16TransmissionStopEv>:
     c14:	fc 01       	movw	r30, r24
     c16:	10 82       	st	Z, r1
     c18:	08 95       	ret

00000c1a <_ZN4UART8TransmitEv>:
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	fc 01       	movw	r30, r24
     c22:	20 81       	ld	r18, Z
     c24:	21 11       	cpse	r18, r1
     c26:	23 c0       	rjmp	.+70     	; 0xc6e <_ZN4UART8TransmitEv+0x54>
     c28:	ec 01       	movw	r28, r24
     c2a:	82 81       	ldd	r24, Z+2	; 0x02
     c2c:	93 81       	ldd	r25, Z+3	; 0x03
     c2e:	0e 94 33 01 	call	0x266	; 0x266 <_ZN6Buffer9BlockSizeEv>
     c32:	88 23       	and	r24, r24
     c34:	e1 f0       	breq	.+56     	; 0xc6e <_ZN4UART8TransmitEv+0x54>
     c36:	19 81       	ldd	r17, Y+1	; 0x01
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	0e 94 33 01 	call	0x266	; 0x266 <_ZN6Buffer9BlockSizeEv>
     c40:	18 17       	cp	r17, r24
     c42:	80 f4       	brcc	.+32     	; 0xc64 <_ZN4UART8TransmitEv+0x4a>
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	9b 81       	ldd	r25, Y+3	; 0x03
     c48:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN6Buffer4ReadEv>
     c4c:	29 81       	ldd	r18, Y+1	; 0x01
     c4e:	31 e0       	ldi	r19, 0x01	; 1
     c50:	32 0f       	add	r19, r18
     c52:	39 83       	std	Y+1, r19	; 0x01
     c54:	82 0f       	add	r24, r18
     c56:	91 1d       	adc	r25, r1
     c58:	fc 01       	movw	r30, r24
     c5a:	80 81       	ld	r24, Z
     c5c:	8c b9       	out	0x0c, r24	; 12
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	88 83       	st	Y, r24
     c62:	05 c0       	rjmp	.+10     	; 0xc6e <_ZN4UART8TransmitEv+0x54>
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	9b 81       	ldd	r25, Y+3	; 0x03
     c68:	0e 94 1f 01 	call	0x23e	; 0x23e <_ZN6Buffer4NextEv>
     c6c:	19 82       	std	Y+1, r1	; 0x01
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	08 95       	ret

00000c76 <_ZN4UART18HaveUnreadMessagesEv>:
     c76:	fc 01       	movw	r30, r24
     c78:	81 85       	ldd	r24, Z+9	; 0x09
     c7a:	92 85       	ldd	r25, Z+10	; 0x0a
     c7c:	0e 94 33 01 	call	0x266	; 0x266 <_ZN6Buffer9BlockSizeEv>
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	81 11       	cpse	r24, r1
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <_ZN4UART18HaveUnreadMessagesEv+0x12>
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	89 2f       	mov	r24, r25
     c8a:	08 95       	ret

00000c8c <_ZN4UART13GetRX_MessageEv>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	81 85       	ldd	r24, Z+9	; 0x09
     c90:	92 85       	ldd	r25, Z+10	; 0x0a
     c92:	0e 94 07 01 	call	0x20e	; 0x20e <_ZN6Buffer4ReadEv>
     c96:	08 95       	ret

00000c98 <_ZN4UART15ClearRX_MessageEv>:
     c98:	fc 01       	movw	r30, r24
     c9a:	81 85       	ldd	r24, Z+9	; 0x09
     c9c:	92 85       	ldd	r25, Z+10	; 0x0a
     c9e:	0e 94 1f 01 	call	0x23e	; 0x23e <_ZN6Buffer4NextEv>
     ca2:	08 95       	ret

00000ca4 <_ZN4UARTnwEj>:
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	ec 01       	movw	r28, r24
     caa:	ce 01       	movw	r24, r28
     cac:	0e 94 4b 0b 	call	0x1696	; 0x1696 <malloc>
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	d9 f3       	breq	.-10     	; 0xcaa <_ZN4UARTnwEj+0x6>
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <_ZN6Buffer5WriteIKcEEvRT_h>:
	uint8_t readPtr;
}; 


template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	fc 01       	movw	r30, r24
{	
	if(this->bufferCounter == this->bufferSize) return;	
     cc2:	96 81       	ldd	r25, Z+6	; 0x06
     cc4:	80 81       	ld	r24, Z
     cc6:	98 17       	cp	r25, r24
     cc8:	09 f1       	breq	.+66     	; 0xd0c <_ZN6Buffer5WriteIKcEEvRT_h+0x52>
	
	uint8_t newDataSize = this->dataSize[this->writePtr] + dataSize;
     cca:	87 81       	ldd	r24, Z+7	; 0x07
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a4 81       	ldd	r26, Z+4	; 0x04
     cd0:	b5 81       	ldd	r27, Z+5	; 0x05
     cd2:	a8 0f       	add	r26, r24
     cd4:	b9 1f       	adc	r27, r25
     cd6:	2c 91       	ld	r18, X
     cd8:	12 2f       	mov	r17, r18
     cda:	14 0f       	add	r17, r20
	
	if(newDataSize >= this->blockSize) return;
     cdc:	31 81       	ldd	r19, Z+1	; 0x01
     cde:	13 17       	cp	r17, r19
     ce0:	a8 f4       	brcc	.+42     	; 0xd0c <_ZN6Buffer5WriteIKcEEvRT_h+0x52>
     ce2:	ef 01       	movw	r28, r30
	
	memcpy(this->buffer[this->writePtr] + this->dataSize[this->writePtr], &data, dataSize);
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	02 80       	ldd	r0, Z+2	; 0x02
     cec:	f3 81       	ldd	r31, Z+3	; 0x03
     cee:	e0 2d       	mov	r30, r0
     cf0:	e8 0f       	add	r30, r24
     cf2:	f9 1f       	adc	r31, r25
     cf4:	80 81       	ld	r24, Z
     cf6:	91 81       	ldd	r25, Z+1	; 0x01
     cf8:	82 0f       	add	r24, r18
     cfa:	91 1d       	adc	r25, r1
     cfc:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <memcpy>
	
	this->dataSize[this->writePtr] = newDataSize;	
     d00:	8f 81       	ldd	r24, Y+7	; 0x07
     d02:	ec 81       	ldd	r30, Y+4	; 0x04
     d04:	fd 81       	ldd	r31, Y+5	; 0x05
     d06:	e8 0f       	add	r30, r24
     d08:	f1 1d       	adc	r31, r1
     d0a:	10 83       	st	Z, r17
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	08 95       	ret

00000d14 <_ZN4UART24UploadingDataForTransferEPKc>:
{
	_UCSRB &= ~(1<<_RXEN)&~(1<<_TXEN)&~(1<<_RXCIE)&~(1<<_TXCIE);
}

void UART::UploadingDataForTransfer(const char* data)
{	
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	ec 01       	movw	r28, r24
	this->TX_Buffer->Write(*data, strlen(data));
     d1a:	fb 01       	movw	r30, r22
     d1c:	01 90       	ld	r0, Z+
     d1e:	00 20       	and	r0, r0
     d20:	e9 f7       	brne	.-6      	; 0xd1c <_ZN4UART24UploadingDataForTransferEPKc+0x8>
     d22:	31 97       	sbiw	r30, 0x01	; 1
     d24:	af 01       	movw	r20, r30
     d26:	46 1b       	sub	r20, r22
     d28:	57 0b       	sbc	r21, r23
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	9b 81       	ldd	r25, Y+3	; 0x03
     d2e:	0e 94 5d 06 	call	0xcba	; 0xcba <_ZN6Buffer5WriteIKcEEvRT_h>
	this->TX_Buffer->Save();
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	9b 81       	ldd	r25, Y+3	; 0x03
     d36:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6Buffer4SaveEv>
}
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	08 95       	ret

00000d40 <_ZN6Buffer5WriteIhEEvRT_h>:
	uint8_t readPtr;
}; 


template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	fc 01       	movw	r30, r24
{	
	if(this->bufferCounter == this->bufferSize) return;	
     d48:	96 81       	ldd	r25, Z+6	; 0x06
     d4a:	80 81       	ld	r24, Z
     d4c:	98 17       	cp	r25, r24
     d4e:	09 f1       	breq	.+66     	; 0xd92 <_ZN6Buffer5WriteIhEEvRT_h+0x52>
	
	uint8_t newDataSize = this->dataSize[this->writePtr] + dataSize;
     d50:	87 81       	ldd	r24, Z+7	; 0x07
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a4 81       	ldd	r26, Z+4	; 0x04
     d56:	b5 81       	ldd	r27, Z+5	; 0x05
     d58:	a8 0f       	add	r26, r24
     d5a:	b9 1f       	adc	r27, r25
     d5c:	2c 91       	ld	r18, X
     d5e:	12 2f       	mov	r17, r18
     d60:	14 0f       	add	r17, r20
	
	if(newDataSize >= this->blockSize) return;
     d62:	31 81       	ldd	r19, Z+1	; 0x01
     d64:	13 17       	cp	r17, r19
     d66:	a8 f4       	brcc	.+42     	; 0xd92 <_ZN6Buffer5WriteIhEEvRT_h+0x52>
     d68:	ef 01       	movw	r28, r30
	
	memcpy(this->buffer[this->writePtr] + this->dataSize[this->writePtr], &data, dataSize);
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	02 80       	ldd	r0, Z+2	; 0x02
     d72:	f3 81       	ldd	r31, Z+3	; 0x03
     d74:	e0 2d       	mov	r30, r0
     d76:	e8 0f       	add	r30, r24
     d78:	f9 1f       	adc	r31, r25
     d7a:	80 81       	ld	r24, Z
     d7c:	91 81       	ldd	r25, Z+1	; 0x01
     d7e:	82 0f       	add	r24, r18
     d80:	91 1d       	adc	r25, r1
     d82:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <memcpy>
	
	this->dataSize[this->writePtr] = newDataSize;	
     d86:	8f 81       	ldd	r24, Y+7	; 0x07
     d88:	ec 81       	ldd	r30, Y+4	; 0x04
     d8a:	fd 81       	ldd	r31, Y+5	; 0x05
     d8c:	e8 0f       	add	r30, r24
     d8e:	f1 1d       	adc	r31, r1
     d90:	10 83       	st	Z, r17
}
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	1f 91       	pop	r17
     d98:	08 95       	ret

00000d9a <_ZN4UART7ReceiveEv>:
		}
	}
}

void UART::Receive()
{
     d9a:	ff 92       	push	r15
     d9c:	0f 93       	push	r16
     d9e:	1f 93       	push	r17
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	1f 92       	push	r1
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = _UDR;
     daa:	2c b1       	in	r18, 0x0c	; 12
     dac:	29 83       	std	Y+1, r18	; 0x01

	if(data == start_mark)
     dae:	2a 32       	cpi	r18, 0x2A	; 42
     db0:	21 f4       	brne	.+8      	; 0xdba <_ZN4UART7ReceiveEv+0x20>
	{
		this->messageReceptionStarted = true;
     db2:	21 e0       	ldi	r18, 0x01	; 1
     db4:	fc 01       	movw	r30, r24
     db6:	24 83       	std	Z+4, r18	; 0x04
		
		return;
     db8:	23 c0       	rjmp	.+70     	; 0xe00 <_ZN4UART7ReceiveEv+0x66>
     dba:	8c 01       	movw	r16, r24
	}
	
	else if (data == end_mark)
     dbc:	24 32       	cpi	r18, 0x24	; 36
     dbe:	a1 f4       	brne	.+40     	; 0xde8 <_ZN4UART7ReceiveEv+0x4e>
	{		
		if(this->RX_MessagesCount < this->RX_Buffer->BufferSize())
     dc0:	fc 01       	movw	r30, r24
     dc2:	f5 80       	ldd	r15, Z+5	; 0x05
     dc4:	81 85       	ldd	r24, Z+9	; 0x09
     dc6:	92 85       	ldd	r25, Z+10	; 0x0a
     dc8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN6Buffer10BufferSizeEv>
     dcc:	f8 16       	cp	r15, r24
     dce:	40 f4       	brcc	.+16     	; 0xde0 <_ZN4UART7ReceiveEv+0x46>
		{
			this->RX_MessagesCount++;	
     dd0:	f8 01       	movw	r30, r16
     dd2:	85 81       	ldd	r24, Z+5	; 0x05
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	85 83       	std	Z+5, r24	; 0x05
			
			this->RX_Buffer->Save();
     dd8:	81 85       	ldd	r24, Z+9	; 0x09
     dda:	92 85       	ldd	r25, Z+10	; 0x0a
     ddc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN6Buffer4SaveEv>
		}
		
		this->messageReceptionStarted = false;
     de0:	f8 01       	movw	r30, r16
     de2:	14 82       	std	Z+4, r1	; 0x04
		
		this->RX_CharsCounter = 0;		
     de4:	16 82       	std	Z+6, r1	; 0x06
		
		return;
     de6:	0c c0       	rjmp	.+24     	; 0xe00 <_ZN4UART7ReceiveEv+0x66>
	}

	if(this->messageReceptionStarted == true)
     de8:	fc 01       	movw	r30, r24
     dea:	84 81       	ldd	r24, Z+4	; 0x04
     dec:	88 23       	and	r24, r24
     dee:	41 f0       	breq	.+16     	; 0xe00 <_ZN4UART7ReceiveEv+0x66>
	{
		this->RX_Buffer->Write(data, sizeof(data));
     df0:	41 e0       	ldi	r20, 0x01	; 1
     df2:	be 01       	movw	r22, r28
     df4:	6f 5f       	subi	r22, 0xFF	; 255
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	81 85       	ldd	r24, Z+9	; 0x09
     dfa:	92 85       	ldd	r25, Z+10	; 0x0a
     dfc:	0e 94 a0 06 	call	0xd40	; 0xd40 <_ZN6Buffer5WriteIhEEvRT_h>
	}
}
     e00:	0f 90       	pop	r0
     e02:	df 91       	pop	r29
     e04:	cf 91       	pop	r28
     e06:	1f 91       	pop	r17
     e08:	0f 91       	pop	r16
     e0a:	ff 90       	pop	r15
     e0c:	08 95       	ret

00000e0e <__subsf3>:
     e0e:	50 58       	subi	r21, 0x80	; 128

00000e10 <__addsf3>:
     e10:	bb 27       	eor	r27, r27
     e12:	aa 27       	eor	r26, r26
     e14:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__addsf3x>
     e18:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
     e1c:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
     e20:	38 f0       	brcs	.+14     	; 0xe30 <__addsf3+0x20>
     e22:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
     e26:	20 f0       	brcs	.+8      	; 0xe30 <__addsf3+0x20>
     e28:	39 f4       	brne	.+14     	; 0xe38 <__addsf3+0x28>
     e2a:	9f 3f       	cpi	r25, 0xFF	; 255
     e2c:	19 f4       	brne	.+6      	; 0xe34 <__addsf3+0x24>
     e2e:	26 f4       	brtc	.+8      	; 0xe38 <__addsf3+0x28>
     e30:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
     e34:	0e f4       	brtc	.+2      	; 0xe38 <__addsf3+0x28>
     e36:	e0 95       	com	r30
     e38:	e7 fb       	bst	r30, 7
     e3a:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>

00000e3e <__addsf3x>:
     e3e:	e9 2f       	mov	r30, r25
     e40:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
     e44:	58 f3       	brcs	.-42     	; 0xe1c <__addsf3+0xc>
     e46:	ba 17       	cp	r27, r26
     e48:	62 07       	cpc	r22, r18
     e4a:	73 07       	cpc	r23, r19
     e4c:	84 07       	cpc	r24, r20
     e4e:	95 07       	cpc	r25, r21
     e50:	20 f0       	brcs	.+8      	; 0xe5a <__addsf3x+0x1c>
     e52:	79 f4       	brne	.+30     	; 0xe72 <__addsf3x+0x34>
     e54:	a6 f5       	brtc	.+104    	; 0xebe <__addsf3x+0x80>
     e56:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_zero>
     e5a:	0e f4       	brtc	.+2      	; 0xe5e <__addsf3x+0x20>
     e5c:	e0 95       	com	r30
     e5e:	0b 2e       	mov	r0, r27
     e60:	ba 2f       	mov	r27, r26
     e62:	a0 2d       	mov	r26, r0
     e64:	0b 01       	movw	r0, r22
     e66:	b9 01       	movw	r22, r18
     e68:	90 01       	movw	r18, r0
     e6a:	0c 01       	movw	r0, r24
     e6c:	ca 01       	movw	r24, r20
     e6e:	a0 01       	movw	r20, r0
     e70:	11 24       	eor	r1, r1
     e72:	ff 27       	eor	r31, r31
     e74:	59 1b       	sub	r21, r25
     e76:	99 f0       	breq	.+38     	; 0xe9e <__addsf3x+0x60>
     e78:	59 3f       	cpi	r21, 0xF9	; 249
     e7a:	50 f4       	brcc	.+20     	; 0xe90 <__addsf3x+0x52>
     e7c:	50 3e       	cpi	r21, 0xE0	; 224
     e7e:	68 f1       	brcs	.+90     	; 0xeda <__addsf3x+0x9c>
     e80:	1a 16       	cp	r1, r26
     e82:	f0 40       	sbci	r31, 0x00	; 0
     e84:	a2 2f       	mov	r26, r18
     e86:	23 2f       	mov	r18, r19
     e88:	34 2f       	mov	r19, r20
     e8a:	44 27       	eor	r20, r20
     e8c:	58 5f       	subi	r21, 0xF8	; 248
     e8e:	f3 cf       	rjmp	.-26     	; 0xe76 <__addsf3x+0x38>
     e90:	46 95       	lsr	r20
     e92:	37 95       	ror	r19
     e94:	27 95       	ror	r18
     e96:	a7 95       	ror	r26
     e98:	f0 40       	sbci	r31, 0x00	; 0
     e9a:	53 95       	inc	r21
     e9c:	c9 f7       	brne	.-14     	; 0xe90 <__addsf3x+0x52>
     e9e:	7e f4       	brtc	.+30     	; 0xebe <__addsf3x+0x80>
     ea0:	1f 16       	cp	r1, r31
     ea2:	ba 0b       	sbc	r27, r26
     ea4:	62 0b       	sbc	r22, r18
     ea6:	73 0b       	sbc	r23, r19
     ea8:	84 0b       	sbc	r24, r20
     eaa:	ba f0       	brmi	.+46     	; 0xeda <__addsf3x+0x9c>
     eac:	91 50       	subi	r25, 0x01	; 1
     eae:	a1 f0       	breq	.+40     	; 0xed8 <__addsf3x+0x9a>
     eb0:	ff 0f       	add	r31, r31
     eb2:	bb 1f       	adc	r27, r27
     eb4:	66 1f       	adc	r22, r22
     eb6:	77 1f       	adc	r23, r23
     eb8:	88 1f       	adc	r24, r24
     eba:	c2 f7       	brpl	.-16     	; 0xeac <__addsf3x+0x6e>
     ebc:	0e c0       	rjmp	.+28     	; 0xeda <__addsf3x+0x9c>
     ebe:	ba 0f       	add	r27, r26
     ec0:	62 1f       	adc	r22, r18
     ec2:	73 1f       	adc	r23, r19
     ec4:	84 1f       	adc	r24, r20
     ec6:	48 f4       	brcc	.+18     	; 0xeda <__addsf3x+0x9c>
     ec8:	87 95       	ror	r24
     eca:	77 95       	ror	r23
     ecc:	67 95       	ror	r22
     ece:	b7 95       	ror	r27
     ed0:	f7 95       	ror	r31
     ed2:	9e 3f       	cpi	r25, 0xFE	; 254
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <__addsf3x+0x9a>
     ed6:	b0 cf       	rjmp	.-160    	; 0xe38 <__addsf3+0x28>
     ed8:	93 95       	inc	r25
     eda:	88 0f       	add	r24, r24
     edc:	08 f0       	brcs	.+2      	; 0xee0 <__addsf3x+0xa2>
     ede:	99 27       	eor	r25, r25
     ee0:	ee 0f       	add	r30, r30
     ee2:	97 95       	ror	r25
     ee4:	87 95       	ror	r24
     ee6:	08 95       	ret

00000ee8 <__cmpsf2>:
     ee8:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_cmp>
     eec:	08 f4       	brcc	.+2      	; 0xef0 <__cmpsf2+0x8>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	08 95       	ret

00000ef2 <__fixunssfsi>:
     ef2:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
     ef6:	88 f0       	brcs	.+34     	; 0xf1a <__fixunssfsi+0x28>
     ef8:	9f 57       	subi	r25, 0x7F	; 127
     efa:	98 f0       	brcs	.+38     	; 0xf22 <__fixunssfsi+0x30>
     efc:	b9 2f       	mov	r27, r25
     efe:	99 27       	eor	r25, r25
     f00:	b7 51       	subi	r27, 0x17	; 23
     f02:	b0 f0       	brcs	.+44     	; 0xf30 <__fixunssfsi+0x3e>
     f04:	e1 f0       	breq	.+56     	; 0xf3e <__fixunssfsi+0x4c>
     f06:	66 0f       	add	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	88 1f       	adc	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	1a f0       	brmi	.+6      	; 0xf16 <__fixunssfsi+0x24>
     f10:	ba 95       	dec	r27
     f12:	c9 f7       	brne	.-14     	; 0xf06 <__fixunssfsi+0x14>
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <__fixunssfsi+0x4c>
     f16:	b1 30       	cpi	r27, 0x01	; 1
     f18:	91 f0       	breq	.+36     	; 0xf3e <__fixunssfsi+0x4c>
     f1a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__fp_zero>
     f1e:	b1 e0       	ldi	r27, 0x01	; 1
     f20:	08 95       	ret
     f22:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_zero>
     f26:	67 2f       	mov	r22, r23
     f28:	78 2f       	mov	r23, r24
     f2a:	88 27       	eor	r24, r24
     f2c:	b8 5f       	subi	r27, 0xF8	; 248
     f2e:	39 f0       	breq	.+14     	; 0xf3e <__fixunssfsi+0x4c>
     f30:	b9 3f       	cpi	r27, 0xF9	; 249
     f32:	cc f3       	brlt	.-14     	; 0xf26 <__fixunssfsi+0x34>
     f34:	86 95       	lsr	r24
     f36:	77 95       	ror	r23
     f38:	67 95       	ror	r22
     f3a:	b3 95       	inc	r27
     f3c:	d9 f7       	brne	.-10     	; 0xf34 <__fixunssfsi+0x42>
     f3e:	3e f4       	brtc	.+14     	; 0xf4e <__fixunssfsi+0x5c>
     f40:	90 95       	com	r25
     f42:	80 95       	com	r24
     f44:	70 95       	com	r23
     f46:	61 95       	neg	r22
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8f 4f       	sbci	r24, 0xFF	; 255
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	08 95       	ret

00000f50 <__floatunsisf>:
     f50:	e8 94       	clt
     f52:	09 c0       	rjmp	.+18     	; 0xf66 <__floatsisf+0x12>

00000f54 <__floatsisf>:
     f54:	97 fb       	bst	r25, 7
     f56:	3e f4       	brtc	.+14     	; 0xf66 <__floatsisf+0x12>
     f58:	90 95       	com	r25
     f5a:	80 95       	com	r24
     f5c:	70 95       	com	r23
     f5e:	61 95       	neg	r22
     f60:	7f 4f       	sbci	r23, 0xFF	; 255
     f62:	8f 4f       	sbci	r24, 0xFF	; 255
     f64:	9f 4f       	sbci	r25, 0xFF	; 255
     f66:	99 23       	and	r25, r25
     f68:	a9 f0       	breq	.+42     	; 0xf94 <__floatsisf+0x40>
     f6a:	f9 2f       	mov	r31, r25
     f6c:	96 e9       	ldi	r25, 0x96	; 150
     f6e:	bb 27       	eor	r27, r27
     f70:	93 95       	inc	r25
     f72:	f6 95       	lsr	r31
     f74:	87 95       	ror	r24
     f76:	77 95       	ror	r23
     f78:	67 95       	ror	r22
     f7a:	b7 95       	ror	r27
     f7c:	f1 11       	cpse	r31, r1
     f7e:	f8 cf       	rjmp	.-16     	; 0xf70 <__floatsisf+0x1c>
     f80:	fa f4       	brpl	.+62     	; 0xfc0 <__floatsisf+0x6c>
     f82:	bb 0f       	add	r27, r27
     f84:	11 f4       	brne	.+4      	; 0xf8a <__floatsisf+0x36>
     f86:	60 ff       	sbrs	r22, 0
     f88:	1b c0       	rjmp	.+54     	; 0xfc0 <__floatsisf+0x6c>
     f8a:	6f 5f       	subi	r22, 0xFF	; 255
     f8c:	7f 4f       	sbci	r23, 0xFF	; 255
     f8e:	8f 4f       	sbci	r24, 0xFF	; 255
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	16 c0       	rjmp	.+44     	; 0xfc0 <__floatsisf+0x6c>
     f94:	88 23       	and	r24, r24
     f96:	11 f0       	breq	.+4      	; 0xf9c <__floatsisf+0x48>
     f98:	96 e9       	ldi	r25, 0x96	; 150
     f9a:	11 c0       	rjmp	.+34     	; 0xfbe <__floatsisf+0x6a>
     f9c:	77 23       	and	r23, r23
     f9e:	21 f0       	breq	.+8      	; 0xfa8 <__floatsisf+0x54>
     fa0:	9e e8       	ldi	r25, 0x8E	; 142
     fa2:	87 2f       	mov	r24, r23
     fa4:	76 2f       	mov	r23, r22
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <__floatsisf+0x5e>
     fa8:	66 23       	and	r22, r22
     faa:	71 f0       	breq	.+28     	; 0xfc8 <__floatsisf+0x74>
     fac:	96 e8       	ldi	r25, 0x86	; 134
     fae:	86 2f       	mov	r24, r22
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	2a f0       	brmi	.+10     	; 0xfc0 <__floatsisf+0x6c>
     fb6:	9a 95       	dec	r25
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	da f7       	brpl	.-10     	; 0xfb6 <__floatsisf+0x62>
     fc0:	88 0f       	add	r24, r24
     fc2:	96 95       	lsr	r25
     fc4:	87 95       	ror	r24
     fc6:	97 f9       	bld	r25, 7
     fc8:	08 95       	ret

00000fca <__fp_cmp>:
     fca:	99 0f       	add	r25, r25
     fcc:	00 08       	sbc	r0, r0
     fce:	55 0f       	add	r21, r21
     fd0:	aa 0b       	sbc	r26, r26
     fd2:	e0 e8       	ldi	r30, 0x80	; 128
     fd4:	fe ef       	ldi	r31, 0xFE	; 254
     fd6:	16 16       	cp	r1, r22
     fd8:	17 06       	cpc	r1, r23
     fda:	e8 07       	cpc	r30, r24
     fdc:	f9 07       	cpc	r31, r25
     fde:	c0 f0       	brcs	.+48     	; 0x1010 <__fp_cmp+0x46>
     fe0:	12 16       	cp	r1, r18
     fe2:	13 06       	cpc	r1, r19
     fe4:	e4 07       	cpc	r30, r20
     fe6:	f5 07       	cpc	r31, r21
     fe8:	98 f0       	brcs	.+38     	; 0x1010 <__fp_cmp+0x46>
     fea:	62 1b       	sub	r22, r18
     fec:	73 0b       	sbc	r23, r19
     fee:	84 0b       	sbc	r24, r20
     ff0:	95 0b       	sbc	r25, r21
     ff2:	39 f4       	brne	.+14     	; 0x1002 <__fp_cmp+0x38>
     ff4:	0a 26       	eor	r0, r26
     ff6:	61 f0       	breq	.+24     	; 0x1010 <__fp_cmp+0x46>
     ff8:	23 2b       	or	r18, r19
     ffa:	24 2b       	or	r18, r20
     ffc:	25 2b       	or	r18, r21
     ffe:	21 f4       	brne	.+8      	; 0x1008 <__fp_cmp+0x3e>
    1000:	08 95       	ret
    1002:	0a 26       	eor	r0, r26
    1004:	09 f4       	brne	.+2      	; 0x1008 <__fp_cmp+0x3e>
    1006:	a1 40       	sbci	r26, 0x01	; 1
    1008:	a6 95       	lsr	r26
    100a:	8f ef       	ldi	r24, 0xFF	; 255
    100c:	81 1d       	adc	r24, r1
    100e:	81 1d       	adc	r24, r1
    1010:	08 95       	ret

00001012 <__fp_inf>:
    1012:	97 f9       	bld	r25, 7
    1014:	9f 67       	ori	r25, 0x7F	; 127
    1016:	80 e8       	ldi	r24, 0x80	; 128
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	08 95       	ret

0000101e <__fp_nan>:
    101e:	9f ef       	ldi	r25, 0xFF	; 255
    1020:	80 ec       	ldi	r24, 0xC0	; 192
    1022:	08 95       	ret

00001024 <__fp_pscA>:
    1024:	00 24       	eor	r0, r0
    1026:	0a 94       	dec	r0
    1028:	16 16       	cp	r1, r22
    102a:	17 06       	cpc	r1, r23
    102c:	18 06       	cpc	r1, r24
    102e:	09 06       	cpc	r0, r25
    1030:	08 95       	ret

00001032 <__fp_pscB>:
    1032:	00 24       	eor	r0, r0
    1034:	0a 94       	dec	r0
    1036:	12 16       	cp	r1, r18
    1038:	13 06       	cpc	r1, r19
    103a:	14 06       	cpc	r1, r20
    103c:	05 06       	cpc	r0, r21
    103e:	08 95       	ret

00001040 <__fp_round>:
    1040:	09 2e       	mov	r0, r25
    1042:	03 94       	inc	r0
    1044:	00 0c       	add	r0, r0
    1046:	11 f4       	brne	.+4      	; 0x104c <__fp_round+0xc>
    1048:	88 23       	and	r24, r24
    104a:	52 f0       	brmi	.+20     	; 0x1060 <__fp_round+0x20>
    104c:	bb 0f       	add	r27, r27
    104e:	40 f4       	brcc	.+16     	; 0x1060 <__fp_round+0x20>
    1050:	bf 2b       	or	r27, r31
    1052:	11 f4       	brne	.+4      	; 0x1058 <__fp_round+0x18>
    1054:	60 ff       	sbrs	r22, 0
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <__fp_round+0x20>
    1058:	6f 5f       	subi	r22, 0xFF	; 255
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	8f 4f       	sbci	r24, 0xFF	; 255
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	08 95       	ret

00001062 <__fp_split3>:
    1062:	57 fd       	sbrc	r21, 7
    1064:	90 58       	subi	r25, 0x80	; 128
    1066:	44 0f       	add	r20, r20
    1068:	55 1f       	adc	r21, r21
    106a:	59 f0       	breq	.+22     	; 0x1082 <__fp_splitA+0x10>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	71 f0       	breq	.+28     	; 0x108c <__fp_splitA+0x1a>
    1070:	47 95       	ror	r20

00001072 <__fp_splitA>:
    1072:	88 0f       	add	r24, r24
    1074:	97 fb       	bst	r25, 7
    1076:	99 1f       	adc	r25, r25
    1078:	61 f0       	breq	.+24     	; 0x1092 <__fp_splitA+0x20>
    107a:	9f 3f       	cpi	r25, 0xFF	; 255
    107c:	79 f0       	breq	.+30     	; 0x109c <__fp_splitA+0x2a>
    107e:	87 95       	ror	r24
    1080:	08 95       	ret
    1082:	12 16       	cp	r1, r18
    1084:	13 06       	cpc	r1, r19
    1086:	14 06       	cpc	r1, r20
    1088:	55 1f       	adc	r21, r21
    108a:	f2 cf       	rjmp	.-28     	; 0x1070 <__fp_split3+0xe>
    108c:	46 95       	lsr	r20
    108e:	f1 df       	rcall	.-30     	; 0x1072 <__fp_splitA>
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <__fp_splitA+0x30>
    1092:	16 16       	cp	r1, r22
    1094:	17 06       	cpc	r1, r23
    1096:	18 06       	cpc	r1, r24
    1098:	99 1f       	adc	r25, r25
    109a:	f1 cf       	rjmp	.-30     	; 0x107e <__fp_splitA+0xc>
    109c:	86 95       	lsr	r24
    109e:	71 05       	cpc	r23, r1
    10a0:	61 05       	cpc	r22, r1
    10a2:	08 94       	sec
    10a4:	08 95       	ret

000010a6 <__fp_zero>:
    10a6:	e8 94       	clt

000010a8 <__fp_szero>:
    10a8:	bb 27       	eor	r27, r27
    10aa:	66 27       	eor	r22, r22
    10ac:	77 27       	eor	r23, r23
    10ae:	cb 01       	movw	r24, r22
    10b0:	97 f9       	bld	r25, 7
    10b2:	08 95       	ret

000010b4 <__mulsf3>:
    10b4:	0e 94 6d 08 	call	0x10da	; 0x10da <__mulsf3x>
    10b8:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
    10bc:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
    10c0:	38 f0       	brcs	.+14     	; 0x10d0 <__mulsf3+0x1c>
    10c2:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
    10c6:	20 f0       	brcs	.+8      	; 0x10d0 <__mulsf3+0x1c>
    10c8:	95 23       	and	r25, r21
    10ca:	11 f0       	breq	.+4      	; 0x10d0 <__mulsf3+0x1c>
    10cc:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    10d0:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
    10d4:	11 24       	eor	r1, r1
    10d6:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>

000010da <__mulsf3x>:
    10da:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
    10de:	70 f3       	brcs	.-36     	; 0x10bc <__mulsf3+0x8>

000010e0 <__mulsf3_pse>:
    10e0:	95 9f       	mul	r25, r21
    10e2:	c1 f3       	breq	.-16     	; 0x10d4 <__mulsf3+0x20>
    10e4:	95 0f       	add	r25, r21
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	55 1f       	adc	r21, r21
    10ea:	62 9f       	mul	r22, r18
    10ec:	f0 01       	movw	r30, r0
    10ee:	72 9f       	mul	r23, r18
    10f0:	bb 27       	eor	r27, r27
    10f2:	f0 0d       	add	r31, r0
    10f4:	b1 1d       	adc	r27, r1
    10f6:	63 9f       	mul	r22, r19
    10f8:	aa 27       	eor	r26, r26
    10fa:	f0 0d       	add	r31, r0
    10fc:	b1 1d       	adc	r27, r1
    10fe:	aa 1f       	adc	r26, r26
    1100:	64 9f       	mul	r22, r20
    1102:	66 27       	eor	r22, r22
    1104:	b0 0d       	add	r27, r0
    1106:	a1 1d       	adc	r26, r1
    1108:	66 1f       	adc	r22, r22
    110a:	82 9f       	mul	r24, r18
    110c:	22 27       	eor	r18, r18
    110e:	b0 0d       	add	r27, r0
    1110:	a1 1d       	adc	r26, r1
    1112:	62 1f       	adc	r22, r18
    1114:	73 9f       	mul	r23, r19
    1116:	b0 0d       	add	r27, r0
    1118:	a1 1d       	adc	r26, r1
    111a:	62 1f       	adc	r22, r18
    111c:	83 9f       	mul	r24, r19
    111e:	a0 0d       	add	r26, r0
    1120:	61 1d       	adc	r22, r1
    1122:	22 1f       	adc	r18, r18
    1124:	74 9f       	mul	r23, r20
    1126:	33 27       	eor	r19, r19
    1128:	a0 0d       	add	r26, r0
    112a:	61 1d       	adc	r22, r1
    112c:	23 1f       	adc	r18, r19
    112e:	84 9f       	mul	r24, r20
    1130:	60 0d       	add	r22, r0
    1132:	21 1d       	adc	r18, r1
    1134:	82 2f       	mov	r24, r18
    1136:	76 2f       	mov	r23, r22
    1138:	6a 2f       	mov	r22, r26
    113a:	11 24       	eor	r1, r1
    113c:	9f 57       	subi	r25, 0x7F	; 127
    113e:	50 40       	sbci	r21, 0x00	; 0
    1140:	9a f0       	brmi	.+38     	; 0x1168 <__mulsf3_pse+0x88>
    1142:	f1 f0       	breq	.+60     	; 0x1180 <__mulsf3_pse+0xa0>
    1144:	88 23       	and	r24, r24
    1146:	4a f0       	brmi	.+18     	; 0x115a <__mulsf3_pse+0x7a>
    1148:	ee 0f       	add	r30, r30
    114a:	ff 1f       	adc	r31, r31
    114c:	bb 1f       	adc	r27, r27
    114e:	66 1f       	adc	r22, r22
    1150:	77 1f       	adc	r23, r23
    1152:	88 1f       	adc	r24, r24
    1154:	91 50       	subi	r25, 0x01	; 1
    1156:	50 40       	sbci	r21, 0x00	; 0
    1158:	a9 f7       	brne	.-22     	; 0x1144 <__mulsf3_pse+0x64>
    115a:	9e 3f       	cpi	r25, 0xFE	; 254
    115c:	51 05       	cpc	r21, r1
    115e:	80 f0       	brcs	.+32     	; 0x1180 <__mulsf3_pse+0xa0>
    1160:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    1164:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    1168:	5f 3f       	cpi	r21, 0xFF	; 255
    116a:	e4 f3       	brlt	.-8      	; 0x1164 <__mulsf3_pse+0x84>
    116c:	98 3e       	cpi	r25, 0xE8	; 232
    116e:	d4 f3       	brlt	.-12     	; 0x1164 <__mulsf3_pse+0x84>
    1170:	86 95       	lsr	r24
    1172:	77 95       	ror	r23
    1174:	67 95       	ror	r22
    1176:	b7 95       	ror	r27
    1178:	f7 95       	ror	r31
    117a:	e7 95       	ror	r30
    117c:	9f 5f       	subi	r25, 0xFF	; 255
    117e:	c1 f7       	brne	.-16     	; 0x1170 <__mulsf3_pse+0x90>
    1180:	fe 2b       	or	r31, r30
    1182:	88 0f       	add	r24, r24
    1184:	91 1d       	adc	r25, r1
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	97 f9       	bld	r25, 7
    118c:	08 95       	ret

0000118e <pow>:
    118e:	fa 01       	movw	r30, r20
    1190:	ee 0f       	add	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	30 96       	adiw	r30, 0x00	; 0
    1196:	21 05       	cpc	r18, r1
    1198:	31 05       	cpc	r19, r1
    119a:	a1 f1       	breq	.+104    	; 0x1204 <pow+0x76>
    119c:	61 15       	cp	r22, r1
    119e:	71 05       	cpc	r23, r1
    11a0:	61 f4       	brne	.+24     	; 0x11ba <pow+0x2c>
    11a2:	80 38       	cpi	r24, 0x80	; 128
    11a4:	bf e3       	ldi	r27, 0x3F	; 63
    11a6:	9b 07       	cpc	r25, r27
    11a8:	49 f1       	breq	.+82     	; 0x11fc <pow+0x6e>
    11aa:	68 94       	set
    11ac:	90 38       	cpi	r25, 0x80	; 128
    11ae:	81 05       	cpc	r24, r1
    11b0:	61 f0       	breq	.+24     	; 0x11ca <pow+0x3c>
    11b2:	80 38       	cpi	r24, 0x80	; 128
    11b4:	bf ef       	ldi	r27, 0xFF	; 255
    11b6:	9b 07       	cpc	r25, r27
    11b8:	41 f0       	breq	.+16     	; 0x11ca <pow+0x3c>
    11ba:	99 23       	and	r25, r25
    11bc:	4a f5       	brpl	.+82     	; 0x1210 <pow+0x82>
    11be:	ff 3f       	cpi	r31, 0xFF	; 255
    11c0:	e1 05       	cpc	r30, r1
    11c2:	31 05       	cpc	r19, r1
    11c4:	21 05       	cpc	r18, r1
    11c6:	19 f1       	breq	.+70     	; 0x120e <pow+0x80>
    11c8:	e8 94       	clt
    11ca:	08 94       	sec
    11cc:	e7 95       	ror	r30
    11ce:	d9 01       	movw	r26, r18
    11d0:	aa 23       	and	r26, r26
    11d2:	29 f4       	brne	.+10     	; 0x11de <pow+0x50>
    11d4:	ab 2f       	mov	r26, r27
    11d6:	be 2f       	mov	r27, r30
    11d8:	f8 5f       	subi	r31, 0xF8	; 248
    11da:	d0 f3       	brcs	.-12     	; 0x11d0 <pow+0x42>
    11dc:	10 c0       	rjmp	.+32     	; 0x11fe <pow+0x70>
    11de:	ff 5f       	subi	r31, 0xFF	; 255
    11e0:	70 f4       	brcc	.+28     	; 0x11fe <pow+0x70>
    11e2:	a6 95       	lsr	r26
    11e4:	e0 f7       	brcc	.-8      	; 0x11de <pow+0x50>
    11e6:	f7 39       	cpi	r31, 0x97	; 151
    11e8:	50 f0       	brcs	.+20     	; 0x11fe <pow+0x70>
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <pow+0x64>
    11ec:	ff 3a       	cpi	r31, 0xAF	; 175
    11ee:	38 f4       	brcc	.+14     	; 0x11fe <pow+0x70>
    11f0:	9f 77       	andi	r25, 0x7F	; 127
    11f2:	9f 93       	push	r25
    11f4:	0d d0       	rcall	.+26     	; 0x1210 <pow+0x82>
    11f6:	0f 90       	pop	r0
    11f8:	07 fc       	sbrc	r0, 7
    11fa:	90 58       	subi	r25, 0x80	; 128
    11fc:	08 95       	ret
    11fe:	46 f0       	brts	.+16     	; 0x1210 <pow+0x82>
    1200:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	80 e8       	ldi	r24, 0x80	; 128
    120a:	9f e3       	ldi	r25, 0x3F	; 63
    120c:	08 95       	ret
    120e:	4f e7       	ldi	r20, 0x7F	; 127
    1210:	9f 77       	andi	r25, 0x7F	; 127
    1212:	5f 93       	push	r21
    1214:	4f 93       	push	r20
    1216:	3f 93       	push	r19
    1218:	2f 93       	push	r18
    121a:	0e 94 0f 0a 	call	0x141e	; 0x141e <log>
    121e:	2f 91       	pop	r18
    1220:	3f 91       	pop	r19
    1222:	4f 91       	pop	r20
    1224:	5f 91       	pop	r21
    1226:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <__mulsf3>
    122a:	0c 94 43 09 	jmp	0x1286	; 0x1286 <exp>

0000122e <round>:
    122e:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    1232:	e8 f0       	brcs	.+58     	; 0x126e <round+0x40>
    1234:	9e 37       	cpi	r25, 0x7E	; 126
    1236:	e8 f0       	brcs	.+58     	; 0x1272 <round+0x44>
    1238:	96 39       	cpi	r25, 0x96	; 150
    123a:	b8 f4       	brcc	.+46     	; 0x126a <round+0x3c>
    123c:	9e 38       	cpi	r25, 0x8E	; 142
    123e:	48 f4       	brcc	.+18     	; 0x1252 <round+0x24>
    1240:	67 2f       	mov	r22, r23
    1242:	78 2f       	mov	r23, r24
    1244:	88 27       	eor	r24, r24
    1246:	98 5f       	subi	r25, 0xF8	; 248
    1248:	f9 cf       	rjmp	.-14     	; 0x123c <round+0xe>
    124a:	86 95       	lsr	r24
    124c:	77 95       	ror	r23
    124e:	67 95       	ror	r22
    1250:	93 95       	inc	r25
    1252:	95 39       	cpi	r25, 0x95	; 149
    1254:	d0 f3       	brcs	.-12     	; 0x124a <round+0x1c>
    1256:	b6 2f       	mov	r27, r22
    1258:	b1 70       	andi	r27, 0x01	; 1
    125a:	6b 0f       	add	r22, r27
    125c:	71 1d       	adc	r23, r1
    125e:	81 1d       	adc	r24, r1
    1260:	20 f4       	brcc	.+8      	; 0x126a <round+0x3c>
    1262:	87 95       	ror	r24
    1264:	77 95       	ror	r23
    1266:	67 95       	ror	r22
    1268:	93 95       	inc	r25
    126a:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__fp_mintl>
    126e:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_mpack>
    1272:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    1276:	29 f4       	brne	.+10     	; 0x1282 <round+0x54>
    1278:	16 f0       	brts	.+4      	; 0x127e <round+0x50>
    127a:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    127e:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__fp_zero>
    1282:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>

00001286 <exp>:
    1286:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    128a:	a8 f3       	brcs	.-22     	; 0x1276 <round+0x48>
    128c:	96 38       	cpi	r25, 0x86	; 134
    128e:	a0 f7       	brcc	.-24     	; 0x1278 <round+0x4a>
    1290:	07 f8       	bld	r0, 7
    1292:	0f 92       	push	r0
    1294:	e8 94       	clt
    1296:	2b e3       	ldi	r18, 0x3B	; 59
    1298:	3a ea       	ldi	r19, 0xAA	; 170
    129a:	48 eb       	ldi	r20, 0xB8	; 184
    129c:	5f e7       	ldi	r21, 0x7F	; 127
    129e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__mulsf3_pse>
    12a2:	0f 92       	push	r0
    12a4:	0f 92       	push	r0
    12a6:	0f 92       	push	r0
    12a8:	4d b7       	in	r20, 0x3d	; 61
    12aa:	5e b7       	in	r21, 0x3e	; 62
    12ac:	0f 92       	push	r0
    12ae:	0e 94 57 0a 	call	0x14ae	; 0x14ae <modf>
    12b2:	e4 e5       	ldi	r30, 0x54	; 84
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_powser>
    12ba:	4f 91       	pop	r20
    12bc:	5f 91       	pop	r21
    12be:	ef 91       	pop	r30
    12c0:	ff 91       	pop	r31
    12c2:	e5 95       	asr	r30
    12c4:	ee 1f       	adc	r30, r30
    12c6:	ff 1f       	adc	r31, r31
    12c8:	49 f0       	breq	.+18     	; 0x12dc <exp+0x56>
    12ca:	fe 57       	subi	r31, 0x7E	; 126
    12cc:	e0 68       	ori	r30, 0x80	; 128
    12ce:	44 27       	eor	r20, r20
    12d0:	ee 0f       	add	r30, r30
    12d2:	44 1f       	adc	r20, r20
    12d4:	fa 95       	dec	r31
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <exp+0x4a>
    12d8:	41 95       	neg	r20
    12da:	55 0b       	sbc	r21, r21
    12dc:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <ldexp>
    12e0:	0f 90       	pop	r0
    12e2:	07 fe       	sbrs	r0, 7
    12e4:	0c 94 c5 09 	jmp	0x138a	; 0x138a <inverse>
    12e8:	08 95       	ret

000012ea <__fp_mintl>:
    12ea:	88 23       	and	r24, r24
    12ec:	71 f4       	brne	.+28     	; 0x130a <__fp_mintl+0x20>
    12ee:	77 23       	and	r23, r23
    12f0:	21 f0       	breq	.+8      	; 0x12fa <__fp_mintl+0x10>
    12f2:	98 50       	subi	r25, 0x08	; 8
    12f4:	87 2b       	or	r24, r23
    12f6:	76 2f       	mov	r23, r22
    12f8:	07 c0       	rjmp	.+14     	; 0x1308 <__fp_mintl+0x1e>
    12fa:	66 23       	and	r22, r22
    12fc:	11 f4       	brne	.+4      	; 0x1302 <__fp_mintl+0x18>
    12fe:	99 27       	eor	r25, r25
    1300:	0d c0       	rjmp	.+26     	; 0x131c <__fp_mintl+0x32>
    1302:	90 51       	subi	r25, 0x10	; 16
    1304:	86 2b       	or	r24, r22
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	2a f0       	brmi	.+10     	; 0x1316 <__fp_mintl+0x2c>
    130c:	9a 95       	dec	r25
    130e:	66 0f       	add	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	88 1f       	adc	r24, r24
    1314:	da f7       	brpl	.-10     	; 0x130c <__fp_mintl+0x22>
    1316:	88 0f       	add	r24, r24
    1318:	96 95       	lsr	r25
    131a:	87 95       	ror	r24
    131c:	97 f9       	bld	r25, 7
    131e:	08 95       	ret

00001320 <__fp_mpack>:
    1320:	9f 3f       	cpi	r25, 0xFF	; 255
    1322:	31 f0       	breq	.+12     	; 0x1330 <__fp_mpack_finite+0xc>

00001324 <__fp_mpack_finite>:
    1324:	91 50       	subi	r25, 0x01	; 1
    1326:	20 f4       	brcc	.+8      	; 0x1330 <__fp_mpack_finite+0xc>
    1328:	87 95       	ror	r24
    132a:	77 95       	ror	r23
    132c:	67 95       	ror	r22
    132e:	b7 95       	ror	r27
    1330:	88 0f       	add	r24, r24
    1332:	91 1d       	adc	r25, r1
    1334:	96 95       	lsr	r25
    1336:	87 95       	ror	r24
    1338:	97 f9       	bld	r25, 7
    133a:	08 95       	ret

0000133c <__fp_powser>:
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	1f 93       	push	r17
    1342:	0f 93       	push	r16
    1344:	ff 92       	push	r15
    1346:	ef 92       	push	r14
    1348:	df 92       	push	r13
    134a:	7b 01       	movw	r14, r22
    134c:	8c 01       	movw	r16, r24
    134e:	68 94       	set
    1350:	06 c0       	rjmp	.+12     	; 0x135e <__fp_powser+0x22>
    1352:	da 2e       	mov	r13, r26
    1354:	ef 01       	movw	r28, r30
    1356:	0e 94 6d 08 	call	0x10da	; 0x10da <__mulsf3x>
    135a:	fe 01       	movw	r30, r28
    135c:	e8 94       	clt
    135e:	a5 91       	lpm	r26, Z+
    1360:	25 91       	lpm	r18, Z+
    1362:	35 91       	lpm	r19, Z+
    1364:	45 91       	lpm	r20, Z+
    1366:	55 91       	lpm	r21, Z+
    1368:	a6 f3       	brts	.-24     	; 0x1352 <__fp_powser+0x16>
    136a:	ef 01       	movw	r28, r30
    136c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__addsf3x>
    1370:	fe 01       	movw	r30, r28
    1372:	97 01       	movw	r18, r14
    1374:	a8 01       	movw	r20, r16
    1376:	da 94       	dec	r13
    1378:	69 f7       	brne	.-38     	; 0x1354 <__fp_powser+0x18>
    137a:	df 90       	pop	r13
    137c:	ef 90       	pop	r14
    137e:	ff 90       	pop	r15
    1380:	0f 91       	pop	r16
    1382:	1f 91       	pop	r17
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <inverse>:
    138a:	9b 01       	movw	r18, r22
    138c:	ac 01       	movw	r20, r24
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	80 e8       	ldi	r24, 0x80	; 128
    1394:	9f e3       	ldi	r25, 0x3F	; 63
    1396:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__divsf3>
    139a:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    139e:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_mpack>

000013a2 <ldexp>:
    13a2:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    13a6:	d8 f3       	brcs	.-10     	; 0x139e <inverse+0x14>
    13a8:	99 23       	and	r25, r25
    13aa:	c9 f3       	breq	.-14     	; 0x139e <inverse+0x14>
    13ac:	94 0f       	add	r25, r20
    13ae:	51 1d       	adc	r21, r1
    13b0:	a3 f3       	brvs	.-24     	; 0x139a <inverse+0x10>
    13b2:	91 50       	subi	r25, 0x01	; 1
    13b4:	50 40       	sbci	r21, 0x00	; 0
    13b6:	94 f0       	brlt	.+36     	; 0x13dc <ldexp+0x3a>
    13b8:	59 f0       	breq	.+22     	; 0x13d0 <ldexp+0x2e>
    13ba:	88 23       	and	r24, r24
    13bc:	32 f0       	brmi	.+12     	; 0x13ca <ldexp+0x28>
    13be:	66 0f       	add	r22, r22
    13c0:	77 1f       	adc	r23, r23
    13c2:	88 1f       	adc	r24, r24
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	50 40       	sbci	r21, 0x00	; 0
    13c8:	c1 f7       	brne	.-16     	; 0x13ba <ldexp+0x18>
    13ca:	9e 3f       	cpi	r25, 0xFE	; 254
    13cc:	51 05       	cpc	r21, r1
    13ce:	2c f7       	brge	.-54     	; 0x139a <inverse+0x10>
    13d0:	88 0f       	add	r24, r24
    13d2:	91 1d       	adc	r25, r1
    13d4:	96 95       	lsr	r25
    13d6:	87 95       	ror	r24
    13d8:	97 f9       	bld	r25, 7
    13da:	08 95       	ret
    13dc:	5f 3f       	cpi	r21, 0xFF	; 255
    13de:	ac f0       	brlt	.+42     	; 0x140a <ldexp+0x68>
    13e0:	98 3e       	cpi	r25, 0xE8	; 232
    13e2:	9c f0       	brlt	.+38     	; 0x140a <ldexp+0x68>
    13e4:	bb 27       	eor	r27, r27
    13e6:	86 95       	lsr	r24
    13e8:	77 95       	ror	r23
    13ea:	67 95       	ror	r22
    13ec:	b7 95       	ror	r27
    13ee:	08 f4       	brcc	.+2      	; 0x13f2 <ldexp+0x50>
    13f0:	b1 60       	ori	r27, 0x01	; 1
    13f2:	93 95       	inc	r25
    13f4:	c1 f7       	brne	.-16     	; 0x13e6 <ldexp+0x44>
    13f6:	bb 0f       	add	r27, r27
    13f8:	58 f7       	brcc	.-42     	; 0x13d0 <ldexp+0x2e>
    13fa:	11 f4       	brne	.+4      	; 0x1400 <ldexp+0x5e>
    13fc:	60 ff       	sbrs	r22, 0
    13fe:	e8 cf       	rjmp	.-48     	; 0x13d0 <ldexp+0x2e>
    1400:	6f 5f       	subi	r22, 0xFF	; 255
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	8f 4f       	sbci	r24, 0xFF	; 255
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	e3 cf       	rjmp	.-58     	; 0x13d0 <ldexp+0x2e>
    140a:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    140e:	16 f0       	brts	.+4      	; 0x1414 <ldexp+0x72>
    1410:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_mpack>
    1414:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>
    1418:	68 94       	set
    141a:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>

0000141e <log>:
    141e:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_splitA>
    1422:	a8 f3       	brcs	.-22     	; 0x140e <ldexp+0x6c>
    1424:	99 23       	and	r25, r25
    1426:	c1 f3       	breq	.-16     	; 0x1418 <ldexp+0x76>
    1428:	ae f3       	brts	.-22     	; 0x1414 <ldexp+0x72>
    142a:	df 93       	push	r29
    142c:	cf 93       	push	r28
    142e:	1f 93       	push	r17
    1430:	0f 93       	push	r16
    1432:	ff 92       	push	r15
    1434:	c9 2f       	mov	r28, r25
    1436:	dd 27       	eor	r29, r29
    1438:	88 23       	and	r24, r24
    143a:	2a f0       	brmi	.+10     	; 0x1446 <log+0x28>
    143c:	21 97       	sbiw	r28, 0x01	; 1
    143e:	66 0f       	add	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	da f7       	brpl	.-10     	; 0x143c <log+0x1e>
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e8       	ldi	r20, 0x80	; 128
    144c:	5f eb       	ldi	r21, 0xBF	; 191
    144e:	9f e3       	ldi	r25, 0x3F	; 63
    1450:	88 39       	cpi	r24, 0x98	; 152
    1452:	20 f0       	brcs	.+8      	; 0x145c <log+0x3e>
    1454:	80 3e       	cpi	r24, 0xE0	; 224
    1456:	38 f0       	brcs	.+14     	; 0x1466 <log+0x48>
    1458:	21 96       	adiw	r28, 0x01	; 1
    145a:	8f 77       	andi	r24, 0x7F	; 127
    145c:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
    1460:	ec e7       	ldi	r30, 0x7C	; 124
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	04 c0       	rjmp	.+8      	; 0x146e <log+0x50>
    1466:	0e 94 08 07 	call	0xe10	; 0xe10 <__addsf3>
    146a:	e9 ea       	ldi	r30, 0xA9	; 169
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_powser>
    1472:	8b 01       	movw	r16, r22
    1474:	be 01       	movw	r22, r28
    1476:	ec 01       	movw	r28, r24
    1478:	fb 2e       	mov	r15, r27
    147a:	6f 57       	subi	r22, 0x7F	; 127
    147c:	71 09       	sbc	r23, r1
    147e:	75 95       	asr	r23
    1480:	77 1f       	adc	r23, r23
    1482:	88 0b       	sbc	r24, r24
    1484:	99 0b       	sbc	r25, r25
    1486:	0e 94 aa 07 	call	0xf54	; 0xf54 <__floatsisf>
    148a:	28 e1       	ldi	r18, 0x18	; 24
    148c:	32 e7       	ldi	r19, 0x72	; 114
    148e:	41 e3       	ldi	r20, 0x31	; 49
    1490:	5f e3       	ldi	r21, 0x3F	; 63
    1492:	0e 94 6d 08 	call	0x10da	; 0x10da <__mulsf3x>
    1496:	af 2d       	mov	r26, r15
    1498:	98 01       	movw	r18, r16
    149a:	ae 01       	movw	r20, r28
    149c:	ff 90       	pop	r15
    149e:	0f 91       	pop	r16
    14a0:	1f 91       	pop	r17
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__addsf3x>
    14aa:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>

000014ae <modf>:
    14ae:	fa 01       	movw	r30, r20
    14b0:	dc 01       	movw	r26, r24
    14b2:	aa 0f       	add	r26, r26
    14b4:	bb 1f       	adc	r27, r27
    14b6:	9b 01       	movw	r18, r22
    14b8:	ac 01       	movw	r20, r24
    14ba:	bf 57       	subi	r27, 0x7F	; 127
    14bc:	28 f4       	brcc	.+10     	; 0x14c8 <modf+0x1a>
    14be:	22 27       	eor	r18, r18
    14c0:	33 27       	eor	r19, r19
    14c2:	44 27       	eor	r20, r20
    14c4:	50 78       	andi	r21, 0x80	; 128
    14c6:	20 c0       	rjmp	.+64     	; 0x1508 <modf+0x5a>
    14c8:	b7 51       	subi	r27, 0x17	; 23
    14ca:	90 f4       	brcc	.+36     	; 0x14f0 <modf+0x42>
    14cc:	ab 2f       	mov	r26, r27
    14ce:	00 24       	eor	r0, r0
    14d0:	46 95       	lsr	r20
    14d2:	37 95       	ror	r19
    14d4:	27 95       	ror	r18
    14d6:	01 1c       	adc	r0, r1
    14d8:	a3 95       	inc	r26
    14da:	d2 f3       	brmi	.-12     	; 0x14d0 <modf+0x22>
    14dc:	00 20       	and	r0, r0
    14de:	71 f0       	breq	.+28     	; 0x14fc <modf+0x4e>
    14e0:	22 0f       	add	r18, r18
    14e2:	33 1f       	adc	r19, r19
    14e4:	44 1f       	adc	r20, r20
    14e6:	b3 95       	inc	r27
    14e8:	da f3       	brmi	.-10     	; 0x14e0 <modf+0x32>
    14ea:	0e d0       	rcall	.+28     	; 0x1508 <modf+0x5a>
    14ec:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__subsf3>
    14f0:	61 30       	cpi	r22, 0x01	; 1
    14f2:	71 05       	cpc	r23, r1
    14f4:	a0 e8       	ldi	r26, 0x80	; 128
    14f6:	8a 07       	cpc	r24, r26
    14f8:	b9 46       	sbci	r27, 0x69	; 105
    14fa:	30 f4       	brcc	.+12     	; 0x1508 <modf+0x5a>
    14fc:	9b 01       	movw	r18, r22
    14fe:	ac 01       	movw	r20, r24
    1500:	66 27       	eor	r22, r22
    1502:	77 27       	eor	r23, r23
    1504:	88 27       	eor	r24, r24
    1506:	90 78       	andi	r25, 0x80	; 128
    1508:	30 96       	adiw	r30, 0x00	; 0
    150a:	21 f0       	breq	.+8      	; 0x1514 <modf+0x66>
    150c:	20 83       	st	Z, r18
    150e:	31 83       	std	Z+1, r19	; 0x01
    1510:	42 83       	std	Z+2, r20	; 0x02
    1512:	53 83       	std	Z+3, r21	; 0x03
    1514:	08 95       	ret

00001516 <__divsf3>:
    1516:	0e 94 9f 0a 	call	0x153e	; 0x153e <__divsf3x>
    151a:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_round>
    151e:	0e 94 19 08 	call	0x1032	; 0x1032 <__fp_pscB>
    1522:	58 f0       	brcs	.+22     	; 0x153a <__divsf3+0x24>
    1524:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_pscA>
    1528:	40 f0       	brcs	.+16     	; 0x153a <__divsf3+0x24>
    152a:	29 f4       	brne	.+10     	; 0x1536 <__divsf3+0x20>
    152c:	5f 3f       	cpi	r21, 0xFF	; 255
    152e:	29 f0       	breq	.+10     	; 0x153a <__divsf3+0x24>
    1530:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    1534:	51 11       	cpse	r21, r1
    1536:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    153a:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_nan>

0000153e <__divsf3x>:
    153e:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_split3>
    1542:	68 f3       	brcs	.-38     	; 0x151e <__divsf3+0x8>

00001544 <__divsf3_pse>:
    1544:	99 23       	and	r25, r25
    1546:	b1 f3       	breq	.-20     	; 0x1534 <__divsf3+0x1e>
    1548:	55 23       	and	r21, r21
    154a:	91 f3       	breq	.-28     	; 0x1530 <__divsf3+0x1a>
    154c:	95 1b       	sub	r25, r21
    154e:	55 0b       	sbc	r21, r21
    1550:	bb 27       	eor	r27, r27
    1552:	aa 27       	eor	r26, r26
    1554:	62 17       	cp	r22, r18
    1556:	73 07       	cpc	r23, r19
    1558:	84 07       	cpc	r24, r20
    155a:	38 f0       	brcs	.+14     	; 0x156a <__divsf3_pse+0x26>
    155c:	9f 5f       	subi	r25, 0xFF	; 255
    155e:	5f 4f       	sbci	r21, 0xFF	; 255
    1560:	22 0f       	add	r18, r18
    1562:	33 1f       	adc	r19, r19
    1564:	44 1f       	adc	r20, r20
    1566:	aa 1f       	adc	r26, r26
    1568:	a9 f3       	breq	.-22     	; 0x1554 <__divsf3_pse+0x10>
    156a:	35 d0       	rcall	.+106    	; 0x15d6 <__divsf3_pse+0x92>
    156c:	0e 2e       	mov	r0, r30
    156e:	3a f0       	brmi	.+14     	; 0x157e <__divsf3_pse+0x3a>
    1570:	e0 e8       	ldi	r30, 0x80	; 128
    1572:	32 d0       	rcall	.+100    	; 0x15d8 <__divsf3_pse+0x94>
    1574:	91 50       	subi	r25, 0x01	; 1
    1576:	50 40       	sbci	r21, 0x00	; 0
    1578:	e6 95       	lsr	r30
    157a:	00 1c       	adc	r0, r0
    157c:	ca f7       	brpl	.-14     	; 0x1570 <__divsf3_pse+0x2c>
    157e:	2b d0       	rcall	.+86     	; 0x15d6 <__divsf3_pse+0x92>
    1580:	fe 2f       	mov	r31, r30
    1582:	29 d0       	rcall	.+82     	; 0x15d6 <__divsf3_pse+0x92>
    1584:	66 0f       	add	r22, r22
    1586:	77 1f       	adc	r23, r23
    1588:	88 1f       	adc	r24, r24
    158a:	bb 1f       	adc	r27, r27
    158c:	26 17       	cp	r18, r22
    158e:	37 07       	cpc	r19, r23
    1590:	48 07       	cpc	r20, r24
    1592:	ab 07       	cpc	r26, r27
    1594:	b0 e8       	ldi	r27, 0x80	; 128
    1596:	09 f0       	breq	.+2      	; 0x159a <__divsf3_pse+0x56>
    1598:	bb 0b       	sbc	r27, r27
    159a:	80 2d       	mov	r24, r0
    159c:	bf 01       	movw	r22, r30
    159e:	ff 27       	eor	r31, r31
    15a0:	93 58       	subi	r25, 0x83	; 131
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	3a f0       	brmi	.+14     	; 0x15b4 <__divsf3_pse+0x70>
    15a6:	9e 3f       	cpi	r25, 0xFE	; 254
    15a8:	51 05       	cpc	r21, r1
    15aa:	78 f0       	brcs	.+30     	; 0x15ca <__divsf3_pse+0x86>
    15ac:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__fp_inf>
    15b0:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__fp_szero>
    15b4:	5f 3f       	cpi	r21, 0xFF	; 255
    15b6:	e4 f3       	brlt	.-8      	; 0x15b0 <__divsf3_pse+0x6c>
    15b8:	98 3e       	cpi	r25, 0xE8	; 232
    15ba:	d4 f3       	brlt	.-12     	; 0x15b0 <__divsf3_pse+0x6c>
    15bc:	86 95       	lsr	r24
    15be:	77 95       	ror	r23
    15c0:	67 95       	ror	r22
    15c2:	b7 95       	ror	r27
    15c4:	f7 95       	ror	r31
    15c6:	9f 5f       	subi	r25, 0xFF	; 255
    15c8:	c9 f7       	brne	.-14     	; 0x15bc <__divsf3_pse+0x78>
    15ca:	88 0f       	add	r24, r24
    15cc:	91 1d       	adc	r25, r1
    15ce:	96 95       	lsr	r25
    15d0:	87 95       	ror	r24
    15d2:	97 f9       	bld	r25, 7
    15d4:	08 95       	ret
    15d6:	e1 e0       	ldi	r30, 0x01	; 1
    15d8:	66 0f       	add	r22, r22
    15da:	77 1f       	adc	r23, r23
    15dc:	88 1f       	adc	r24, r24
    15de:	bb 1f       	adc	r27, r27
    15e0:	62 17       	cp	r22, r18
    15e2:	73 07       	cpc	r23, r19
    15e4:	84 07       	cpc	r24, r20
    15e6:	ba 07       	cpc	r27, r26
    15e8:	20 f0       	brcs	.+8      	; 0x15f2 <__divsf3_pse+0xae>
    15ea:	62 1b       	sub	r22, r18
    15ec:	73 0b       	sbc	r23, r19
    15ee:	84 0b       	sbc	r24, r20
    15f0:	ba 0b       	sbc	r27, r26
    15f2:	ee 1f       	adc	r30, r30
    15f4:	88 f7       	brcc	.-30     	; 0x15d8 <__divsf3_pse+0x94>
    15f6:	e0 95       	com	r30
    15f8:	08 95       	ret

000015fa <__udivmodqi4>:
    15fa:	99 1b       	sub	r25, r25
    15fc:	79 e0       	ldi	r23, 0x09	; 9
    15fe:	04 c0       	rjmp	.+8      	; 0x1608 <__udivmodqi4_ep>

00001600 <__udivmodqi4_loop>:
    1600:	99 1f       	adc	r25, r25
    1602:	96 17       	cp	r25, r22
    1604:	08 f0       	brcs	.+2      	; 0x1608 <__udivmodqi4_ep>
    1606:	96 1b       	sub	r25, r22

00001608 <__udivmodqi4_ep>:
    1608:	88 1f       	adc	r24, r24
    160a:	7a 95       	dec	r23
    160c:	c9 f7       	brne	.-14     	; 0x1600 <__udivmodqi4_loop>
    160e:	80 95       	com	r24
    1610:	08 95       	ret

00001612 <__udivmodsi4>:
    1612:	a1 e2       	ldi	r26, 0x21	; 33
    1614:	1a 2e       	mov	r1, r26
    1616:	aa 1b       	sub	r26, r26
    1618:	bb 1b       	sub	r27, r27
    161a:	fd 01       	movw	r30, r26
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <__udivmodsi4_ep>

0000161e <__udivmodsi4_loop>:
    161e:	aa 1f       	adc	r26, r26
    1620:	bb 1f       	adc	r27, r27
    1622:	ee 1f       	adc	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	a2 17       	cp	r26, r18
    1628:	b3 07       	cpc	r27, r19
    162a:	e4 07       	cpc	r30, r20
    162c:	f5 07       	cpc	r31, r21
    162e:	20 f0       	brcs	.+8      	; 0x1638 <__udivmodsi4_ep>
    1630:	a2 1b       	sub	r26, r18
    1632:	b3 0b       	sbc	r27, r19
    1634:	e4 0b       	sbc	r30, r20
    1636:	f5 0b       	sbc	r31, r21

00001638 <__udivmodsi4_ep>:
    1638:	66 1f       	adc	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	88 1f       	adc	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	1a 94       	dec	r1
    1642:	69 f7       	brne	.-38     	; 0x161e <__udivmodsi4_loop>
    1644:	60 95       	com	r22
    1646:	70 95       	com	r23
    1648:	80 95       	com	r24
    164a:	90 95       	com	r25
    164c:	9b 01       	movw	r18, r22
    164e:	ac 01       	movw	r20, r24
    1650:	bd 01       	movw	r22, r26
    1652:	cf 01       	movw	r24, r30
    1654:	08 95       	ret

00001656 <__muluhisi3>:
    1656:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__umulhisi3>
    165a:	a5 9f       	mul	r26, r21
    165c:	90 0d       	add	r25, r0
    165e:	b4 9f       	mul	r27, r20
    1660:	90 0d       	add	r25, r0
    1662:	a4 9f       	mul	r26, r20
    1664:	80 0d       	add	r24, r0
    1666:	91 1d       	adc	r25, r1
    1668:	11 24       	eor	r1, r1
    166a:	08 95       	ret

0000166c <__tablejump2__>:
    166c:	ee 0f       	add	r30, r30
    166e:	ff 1f       	adc	r31, r31
    1670:	05 90       	lpm	r0, Z+
    1672:	f4 91       	lpm	r31, Z
    1674:	e0 2d       	mov	r30, r0
    1676:	09 94       	ijmp

00001678 <__umulhisi3>:
    1678:	a2 9f       	mul	r26, r18
    167a:	b0 01       	movw	r22, r0
    167c:	b3 9f       	mul	r27, r19
    167e:	c0 01       	movw	r24, r0
    1680:	a3 9f       	mul	r26, r19
    1682:	70 0d       	add	r23, r0
    1684:	81 1d       	adc	r24, r1
    1686:	11 24       	eor	r1, r1
    1688:	91 1d       	adc	r25, r1
    168a:	b2 9f       	mul	r27, r18
    168c:	70 0d       	add	r23, r0
    168e:	81 1d       	adc	r24, r1
    1690:	11 24       	eor	r1, r1
    1692:	91 1d       	adc	r25, r1
    1694:	08 95       	ret

00001696 <malloc>:
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	82 30       	cpi	r24, 0x02	; 2
    16a0:	91 05       	cpc	r25, r1
    16a2:	10 f4       	brcc	.+4      	; 0x16a8 <malloc+0x12>
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <__flp>
    16ac:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <__flp+0x1>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	a0 e0       	ldi	r26, 0x00	; 0
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	30 97       	sbiw	r30, 0x00	; 0
    16ba:	19 f1       	breq	.+70     	; 0x1702 <malloc+0x6c>
    16bc:	40 81       	ld	r20, Z
    16be:	51 81       	ldd	r21, Z+1	; 0x01
    16c0:	02 81       	ldd	r16, Z+2	; 0x02
    16c2:	13 81       	ldd	r17, Z+3	; 0x03
    16c4:	48 17       	cp	r20, r24
    16c6:	59 07       	cpc	r21, r25
    16c8:	c8 f0       	brcs	.+50     	; 0x16fc <malloc+0x66>
    16ca:	84 17       	cp	r24, r20
    16cc:	95 07       	cpc	r25, r21
    16ce:	69 f4       	brne	.+26     	; 0x16ea <malloc+0x54>
    16d0:	10 97       	sbiw	r26, 0x00	; 0
    16d2:	31 f0       	breq	.+12     	; 0x16e0 <malloc+0x4a>
    16d4:	12 96       	adiw	r26, 0x02	; 2
    16d6:	0c 93       	st	X, r16
    16d8:	12 97       	sbiw	r26, 0x02	; 2
    16da:	13 96       	adiw	r26, 0x03	; 3
    16dc:	1c 93       	st	X, r17
    16de:	27 c0       	rjmp	.+78     	; 0x172e <malloc+0x98>
    16e0:	00 93 86 00 	sts	0x0086, r16	; 0x800086 <__flp>
    16e4:	10 93 87 00 	sts	0x0087, r17	; 0x800087 <__flp+0x1>
    16e8:	22 c0       	rjmp	.+68     	; 0x172e <malloc+0x98>
    16ea:	21 15       	cp	r18, r1
    16ec:	31 05       	cpc	r19, r1
    16ee:	19 f0       	breq	.+6      	; 0x16f6 <malloc+0x60>
    16f0:	42 17       	cp	r20, r18
    16f2:	53 07       	cpc	r21, r19
    16f4:	18 f4       	brcc	.+6      	; 0x16fc <malloc+0x66>
    16f6:	9a 01       	movw	r18, r20
    16f8:	bd 01       	movw	r22, r26
    16fa:	ef 01       	movw	r28, r30
    16fc:	df 01       	movw	r26, r30
    16fe:	f8 01       	movw	r30, r16
    1700:	db cf       	rjmp	.-74     	; 0x16b8 <malloc+0x22>
    1702:	21 15       	cp	r18, r1
    1704:	31 05       	cpc	r19, r1
    1706:	f9 f0       	breq	.+62     	; 0x1746 <malloc+0xb0>
    1708:	28 1b       	sub	r18, r24
    170a:	39 0b       	sbc	r19, r25
    170c:	24 30       	cpi	r18, 0x04	; 4
    170e:	31 05       	cpc	r19, r1
    1710:	80 f4       	brcc	.+32     	; 0x1732 <malloc+0x9c>
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	61 15       	cp	r22, r1
    1718:	71 05       	cpc	r23, r1
    171a:	21 f0       	breq	.+8      	; 0x1724 <malloc+0x8e>
    171c:	fb 01       	movw	r30, r22
    171e:	93 83       	std	Z+3, r25	; 0x03
    1720:	82 83       	std	Z+2, r24	; 0x02
    1722:	04 c0       	rjmp	.+8      	; 0x172c <malloc+0x96>
    1724:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__flp+0x1>
    1728:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__flp>
    172c:	fe 01       	movw	r30, r28
    172e:	32 96       	adiw	r30, 0x02	; 2
    1730:	44 c0       	rjmp	.+136    	; 0x17ba <malloc+0x124>
    1732:	fe 01       	movw	r30, r28
    1734:	e2 0f       	add	r30, r18
    1736:	f3 1f       	adc	r31, r19
    1738:	81 93       	st	Z+, r24
    173a:	91 93       	st	Z+, r25
    173c:	22 50       	subi	r18, 0x02	; 2
    173e:	31 09       	sbc	r19, r1
    1740:	39 83       	std	Y+1, r19	; 0x01
    1742:	28 83       	st	Y, r18
    1744:	3a c0       	rjmp	.+116    	; 0x17ba <malloc+0x124>
    1746:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__brkval>
    174a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__brkval+0x1>
    174e:	23 2b       	or	r18, r19
    1750:	41 f4       	brne	.+16     	; 0x1762 <malloc+0xcc>
    1752:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1756:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    175a:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__brkval+0x1>
    175e:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__brkval>
    1762:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1766:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    176a:	21 15       	cp	r18, r1
    176c:	31 05       	cpc	r19, r1
    176e:	41 f4       	brne	.+16     	; 0x1780 <malloc+0xea>
    1770:	2d b7       	in	r18, 0x3d	; 61
    1772:	3e b7       	in	r19, 0x3e	; 62
    1774:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1778:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    177c:	24 1b       	sub	r18, r20
    177e:	35 0b       	sbc	r19, r21
    1780:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__brkval>
    1784:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__brkval+0x1>
    1788:	e2 17       	cp	r30, r18
    178a:	f3 07       	cpc	r31, r19
    178c:	a0 f4       	brcc	.+40     	; 0x17b6 <malloc+0x120>
    178e:	2e 1b       	sub	r18, r30
    1790:	3f 0b       	sbc	r19, r31
    1792:	28 17       	cp	r18, r24
    1794:	39 07       	cpc	r19, r25
    1796:	78 f0       	brcs	.+30     	; 0x17b6 <malloc+0x120>
    1798:	ac 01       	movw	r20, r24
    179a:	4e 5f       	subi	r20, 0xFE	; 254
    179c:	5f 4f       	sbci	r21, 0xFF	; 255
    179e:	24 17       	cp	r18, r20
    17a0:	35 07       	cpc	r19, r21
    17a2:	48 f0       	brcs	.+18     	; 0x17b6 <malloc+0x120>
    17a4:	4e 0f       	add	r20, r30
    17a6:	5f 1f       	adc	r21, r31
    17a8:	50 93 85 00 	sts	0x0085, r21	; 0x800085 <__brkval+0x1>
    17ac:	40 93 84 00 	sts	0x0084, r20	; 0x800084 <__brkval>
    17b0:	81 93       	st	Z+, r24
    17b2:	91 93       	st	Z+, r25
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <malloc+0x124>
    17b6:	e0 e0       	ldi	r30, 0x00	; 0
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	cf 01       	movw	r24, r30
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	08 95       	ret

000017c6 <free>:
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	09 f4       	brne	.+2      	; 0x17d0 <free+0xa>
    17ce:	81 c0       	rjmp	.+258    	; 0x18d2 <free+0x10c>
    17d0:	fc 01       	movw	r30, r24
    17d2:	32 97       	sbiw	r30, 0x02	; 2
    17d4:	13 82       	std	Z+3, r1	; 0x03
    17d6:	12 82       	std	Z+2, r1	; 0x02
    17d8:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <__flp>
    17dc:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <__flp+0x1>
    17e0:	10 97       	sbiw	r26, 0x00	; 0
    17e2:	81 f4       	brne	.+32     	; 0x1804 <free+0x3e>
    17e4:	20 81       	ld	r18, Z
    17e6:	31 81       	ldd	r19, Z+1	; 0x01
    17e8:	82 0f       	add	r24, r18
    17ea:	93 1f       	adc	r25, r19
    17ec:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__brkval>
    17f0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__brkval+0x1>
    17f4:	28 17       	cp	r18, r24
    17f6:	39 07       	cpc	r19, r25
    17f8:	51 f5       	brne	.+84     	; 0x184e <free+0x88>
    17fa:	f0 93 85 00 	sts	0x0085, r31	; 0x800085 <__brkval+0x1>
    17fe:	e0 93 84 00 	sts	0x0084, r30	; 0x800084 <__brkval>
    1802:	67 c0       	rjmp	.+206    	; 0x18d2 <free+0x10c>
    1804:	ed 01       	movw	r28, r26
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	ce 17       	cp	r28, r30
    180c:	df 07       	cpc	r29, r31
    180e:	40 f4       	brcc	.+16     	; 0x1820 <free+0x5a>
    1810:	4a 81       	ldd	r20, Y+2	; 0x02
    1812:	5b 81       	ldd	r21, Y+3	; 0x03
    1814:	9e 01       	movw	r18, r28
    1816:	41 15       	cp	r20, r1
    1818:	51 05       	cpc	r21, r1
    181a:	f1 f0       	breq	.+60     	; 0x1858 <free+0x92>
    181c:	ea 01       	movw	r28, r20
    181e:	f5 cf       	rjmp	.-22     	; 0x180a <free+0x44>
    1820:	d3 83       	std	Z+3, r29	; 0x03
    1822:	c2 83       	std	Z+2, r28	; 0x02
    1824:	40 81       	ld	r20, Z
    1826:	51 81       	ldd	r21, Z+1	; 0x01
    1828:	84 0f       	add	r24, r20
    182a:	95 1f       	adc	r25, r21
    182c:	c8 17       	cp	r28, r24
    182e:	d9 07       	cpc	r29, r25
    1830:	59 f4       	brne	.+22     	; 0x1848 <free+0x82>
    1832:	88 81       	ld	r24, Y
    1834:	99 81       	ldd	r25, Y+1	; 0x01
    1836:	84 0f       	add	r24, r20
    1838:	95 1f       	adc	r25, r21
    183a:	02 96       	adiw	r24, 0x02	; 2
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	93 83       	std	Z+3, r25	; 0x03
    1846:	82 83       	std	Z+2, r24	; 0x02
    1848:	21 15       	cp	r18, r1
    184a:	31 05       	cpc	r19, r1
    184c:	29 f4       	brne	.+10     	; 0x1858 <free+0x92>
    184e:	f0 93 87 00 	sts	0x0087, r31	; 0x800087 <__flp+0x1>
    1852:	e0 93 86 00 	sts	0x0086, r30	; 0x800086 <__flp>
    1856:	3d c0       	rjmp	.+122    	; 0x18d2 <free+0x10c>
    1858:	e9 01       	movw	r28, r18
    185a:	fb 83       	std	Y+3, r31	; 0x03
    185c:	ea 83       	std	Y+2, r30	; 0x02
    185e:	49 91       	ld	r20, Y+
    1860:	59 91       	ld	r21, Y+
    1862:	c4 0f       	add	r28, r20
    1864:	d5 1f       	adc	r29, r21
    1866:	ec 17       	cp	r30, r28
    1868:	fd 07       	cpc	r31, r29
    186a:	61 f4       	brne	.+24     	; 0x1884 <free+0xbe>
    186c:	80 81       	ld	r24, Z
    186e:	91 81       	ldd	r25, Z+1	; 0x01
    1870:	84 0f       	add	r24, r20
    1872:	95 1f       	adc	r25, r21
    1874:	02 96       	adiw	r24, 0x02	; 2
    1876:	e9 01       	movw	r28, r18
    1878:	99 83       	std	Y+1, r25	; 0x01
    187a:	88 83       	st	Y, r24
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	9b 83       	std	Y+3, r25	; 0x03
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	e0 e0       	ldi	r30, 0x00	; 0
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	12 96       	adiw	r26, 0x02	; 2
    188a:	8d 91       	ld	r24, X+
    188c:	9c 91       	ld	r25, X
    188e:	13 97       	sbiw	r26, 0x03	; 3
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	19 f0       	breq	.+6      	; 0x189a <free+0xd4>
    1894:	fd 01       	movw	r30, r26
    1896:	dc 01       	movw	r26, r24
    1898:	f7 cf       	rjmp	.-18     	; 0x1888 <free+0xc2>
    189a:	8d 91       	ld	r24, X+
    189c:	9c 91       	ld	r25, X
    189e:	11 97       	sbiw	r26, 0x01	; 1
    18a0:	9d 01       	movw	r18, r26
    18a2:	2e 5f       	subi	r18, 0xFE	; 254
    18a4:	3f 4f       	sbci	r19, 0xFF	; 255
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__brkval>
    18ae:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__brkval+0x1>
    18b2:	28 17       	cp	r18, r24
    18b4:	39 07       	cpc	r19, r25
    18b6:	69 f4       	brne	.+26     	; 0x18d2 <free+0x10c>
    18b8:	30 97       	sbiw	r30, 0x00	; 0
    18ba:	29 f4       	brne	.+10     	; 0x18c6 <free+0x100>
    18bc:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__flp+0x1>
    18c0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__flp>
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <free+0x104>
    18c6:	13 82       	std	Z+3, r1	; 0x03
    18c8:	12 82       	std	Z+2, r1	; 0x02
    18ca:	b0 93 85 00 	sts	0x0085, r27	; 0x800085 <__brkval+0x1>
    18ce:	a0 93 84 00 	sts	0x0084, r26	; 0x800084 <__brkval>
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	08 95       	ret

000018d8 <memcpy>:
    18d8:	fb 01       	movw	r30, r22
    18da:	dc 01       	movw	r26, r24
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <memcpy+0xa>
    18de:	01 90       	ld	r0, Z+
    18e0:	0d 92       	st	X+, r0
    18e2:	41 50       	subi	r20, 0x01	; 1
    18e4:	50 40       	sbci	r21, 0x00	; 0
    18e6:	d8 f7       	brcc	.-10     	; 0x18de <memcpy+0x6>
    18e8:	08 95       	ret

000018ea <strlcat>:
    18ea:	dc 01       	movw	r26, r24
    18ec:	fb 01       	movw	r30, r22
    18ee:	41 50       	subi	r20, 0x01	; 1
    18f0:	50 40       	sbci	r21, 0x00	; 0
    18f2:	70 f0       	brcs	.+28     	; 0x1910 <strlcat+0x26>
    18f4:	0d 90       	ld	r0, X+
    18f6:	00 20       	and	r0, r0
    18f8:	d1 f7       	brne	.-12     	; 0x18ee <strlcat+0x4>
    18fa:	11 97       	sbiw	r26, 0x01	; 1
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <strlcat+0x1c>
    18fe:	01 90       	ld	r0, Z+
    1900:	0d 92       	st	X+, r0
    1902:	00 20       	and	r0, r0
    1904:	61 f0       	breq	.+24     	; 0x191e <strlcat+0x34>
    1906:	41 50       	subi	r20, 0x01	; 1
    1908:	50 40       	sbci	r21, 0x00	; 0
    190a:	c8 f7       	brcc	.-14     	; 0x18fe <strlcat+0x14>
    190c:	1c 92       	st	X, r1
    190e:	bf 01       	movw	r22, r30
    1910:	01 90       	ld	r0, Z+
    1912:	00 20       	and	r0, r0
    1914:	e9 f7       	brne	.-6      	; 0x1910 <strlcat+0x26>
    1916:	e6 1b       	sub	r30, r22
    1918:	f7 0b       	sbc	r31, r23
    191a:	ae 0f       	add	r26, r30
    191c:	bf 1f       	adc	r27, r31
    191e:	08 94       	sec
    1920:	a8 0b       	sbc	r26, r24
    1922:	b9 0b       	sbc	r27, r25
    1924:	cd 01       	movw	r24, r26
    1926:	08 95       	ret

00001928 <strlcpy>:
    1928:	dc 01       	movw	r26, r24
    192a:	fb 01       	movw	r30, r22
    192c:	41 50       	subi	r20, 0x01	; 1
    192e:	50 40       	sbci	r21, 0x00	; 0
    1930:	58 f0       	brcs	.+22     	; 0x1948 <strlcpy+0x20>
    1932:	49 f0       	breq	.+18     	; 0x1946 <strlcpy+0x1e>
    1934:	01 90       	ld	r0, Z+
    1936:	0d 92       	st	X+, r0
    1938:	00 20       	and	r0, r0
    193a:	c1 f7       	brne	.-16     	; 0x192c <strlcpy+0x4>
    193c:	e6 1b       	sub	r30, r22
    193e:	f7 0b       	sbc	r31, r23
    1940:	31 97       	sbiw	r30, 0x01	; 1
    1942:	cf 01       	movw	r24, r30
    1944:	08 95       	ret
    1946:	1c 92       	st	X, r1
    1948:	01 90       	ld	r0, Z+
    194a:	00 20       	and	r0, r0
    194c:	e9 f7       	brne	.-6      	; 0x1948 <strlcpy+0x20>
    194e:	f6 cf       	rjmp	.-20     	; 0x193c <strlcpy+0x14>

00001950 <_exit>:
    1950:	f8 94       	cli

00001952 <__stop_program>:
    1952:	ff cf       	rjmp	.-2      	; 0x1952 <__stop_program>
