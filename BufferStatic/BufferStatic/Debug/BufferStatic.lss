
BufferStatic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  000019c6  00001a5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800092  00800092  00001a8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c1b  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c9  00000000  00000000  00004913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001199  00000000  00000000  000059dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006ac  00000000  00000000  00006b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c45  00000000  00000000  00007224  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a50  00000000  00000000  00007e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000098b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__ctors_end>
       4:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       8:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
       c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      10:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      14:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      18:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      20:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      24:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      28:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      2c:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_11>
      30:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      34:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_13>
      38:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      3c:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      40:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      44:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      48:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      4c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_19>
      50:	0c 94 94 00 	jmp	0x128	; 0x128 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <_ZN9Scheduler7AddTaskEPFvvEj+0xbc>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_start>:
      d6:	16 03       	mulsu	r17, r22

000000d8 <__ctors_end>:
      d8:	11 24       	eor	r1, r1
      da:	1f be       	out	0x3f, r1	; 63
      dc:	cf e5       	ldi	r28, 0x5F	; 95
      de:	d4 e0       	ldi	r29, 0x04	; 4
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	cd bf       	out	0x3d, r28	; 61

000000e4 <__do_copy_data>:
      e4:	10 e0       	ldi	r17, 0x00	; 0
      e6:	a0 e6       	ldi	r26, 0x60	; 96
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e6 ec       	ldi	r30, 0xC6	; 198
      ec:	f9 e1       	ldi	r31, 0x19	; 25
      ee:	02 c0       	rjmp	.+4      	; 0xf4 <__do_copy_data+0x10>
      f0:	05 90       	lpm	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	a2 39       	cpi	r26, 0x92	; 146
      f6:	b1 07       	cpc	r27, r17
      f8:	d9 f7       	brne	.-10     	; 0xf0 <__do_copy_data+0xc>

000000fa <__do_clear_bss>:
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	a2 e9       	ldi	r26, 0x92	; 146
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	01 c0       	rjmp	.+2      	; 0x104 <.do_clear_bss_start>

00000102 <.do_clear_bss_loop>:
     102:	1d 92       	st	X+, r1

00000104 <.do_clear_bss_start>:
     104:	af 39       	cpi	r26, 0x9F	; 159
     106:	b2 07       	cpc	r27, r18
     108:	e1 f7       	brne	.-8      	; 0x102 <.do_clear_bss_loop>

0000010a <__do_global_ctors>:
     10a:	10 e0       	ldi	r17, 0x00	; 0
     10c:	cc e6       	ldi	r28, 0x6C	; 108
     10e:	d0 e0       	ldi	r29, 0x00	; 0
     110:	04 c0       	rjmp	.+8      	; 0x11a <__do_global_ctors+0x10>
     112:	21 97       	sbiw	r28, 0x01	; 1
     114:	fe 01       	movw	r30, r28
     116:	0e 94 6f 0b 	call	0x16de	; 0x16de <__tablejump2__>
     11a:	cb 36       	cpi	r28, 0x6B	; 107
     11c:	d1 07       	cpc	r29, r17
     11e:	c9 f7       	brne	.-14     	; 0x112 <__do_global_ctors+0x8>
     120:	0e 94 d6 02 	call	0x5ac	; 0x5ac <main>
     124:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <_exit>

00000128 <__bad_interrupt>:
     128:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012c <_ZN6BufferC1Ehh>:
	free(this->buffer);
	this->buffer = nullptr;
	
	free(this->dataSize);
	this->dataSize = nullptr;
}
     12c:	df 92       	push	r13
     12e:	ef 92       	push	r14
     130:	ff 92       	push	r15
     132:	0f 93       	push	r16
     134:	1f 93       	push	r17
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	7c 01       	movw	r14, r24
     13c:	c6 2f       	mov	r28, r22
     13e:	dc 01       	movw	r26, r24
     140:	6c 93       	st	X, r22
     142:	11 96       	adiw	r26, 0x01	; 1
     144:	4c 93       	st	X, r20
     146:	11 97       	sbiw	r26, 0x01	; 1
     148:	16 96       	adiw	r26, 0x06	; 6
     14a:	1c 92       	st	X, r1
     14c:	16 97       	sbiw	r26, 0x06	; 6
     14e:	17 96       	adiw	r26, 0x07	; 7
     150:	1c 92       	st	X, r1
     152:	17 97       	sbiw	r26, 0x07	; 7
     154:	18 96       	adiw	r26, 0x08	; 8
     156:	1c 92       	st	X, r1
     158:	8c 2f       	mov	r24, r28
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	88 0f       	add	r24, r24
     15e:	99 1f       	adc	r25, r25
     160:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
     164:	f7 01       	movw	r30, r14
     166:	93 83       	std	Z+3, r25	; 0x03
     168:	82 83       	std	Z+2, r24	; 0x02
     16a:	89 2b       	or	r24, r25
     16c:	a9 f3       	breq	.-22     	; 0x158 <_ZN6BufferC1Ehh+0x2c>
     16e:	d1 2c       	mov	r13, r1
     170:	d7 01       	movw	r26, r14
     172:	cc 91       	ld	r28, X
     174:	dc 16       	cp	r13, r28
     176:	d8 f4       	brcc	.+54     	; 0x1ae <_ZN6BufferC1Ehh+0x82>
     178:	f7 01       	movw	r30, r14
     17a:	02 81       	ldd	r16, Z+2	; 0x02
     17c:	13 81       	ldd	r17, Z+3	; 0x03
     17e:	cd 2d       	mov	r28, r13
     180:	d0 e0       	ldi	r29, 0x00	; 0
     182:	cc 0f       	add	r28, r28
     184:	dd 1f       	adc	r29, r29
     186:	0c 0f       	add	r16, r28
     188:	1d 1f       	adc	r17, r29
     18a:	81 81       	ldd	r24, Z+1	; 0x01
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
     192:	d8 01       	movw	r26, r16
     194:	8d 93       	st	X+, r24
     196:	9c 93       	st	X, r25
     198:	f7 01       	movw	r30, r14
     19a:	82 81       	ldd	r24, Z+2	; 0x02
     19c:	93 81       	ldd	r25, Z+3	; 0x03
     19e:	c8 0f       	add	r28, r24
     1a0:	d9 1f       	adc	r29, r25
     1a2:	88 81       	ld	r24, Y
     1a4:	99 81       	ldd	r25, Y+1	; 0x01
     1a6:	89 2b       	or	r24, r25
     1a8:	39 f3       	breq	.-50     	; 0x178 <_ZN6BufferC1Ehh+0x4c>
     1aa:	d3 94       	inc	r13
     1ac:	e1 cf       	rjmp	.-62     	; 0x170 <_ZN6BufferC1Ehh+0x44>
     1ae:	8c 2f       	mov	r24, r28
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
     1b6:	d7 01       	movw	r26, r14
     1b8:	15 96       	adiw	r26, 0x05	; 5
     1ba:	9c 93       	st	X, r25
     1bc:	8e 93       	st	-X, r24
     1be:	14 97       	sbiw	r26, 0x04	; 4
     1c0:	89 2b       	or	r24, r25
     1c2:	a9 f3       	breq	.-22     	; 0x1ae <_ZN6BufferC1Ehh+0x82>
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	f7 01       	movw	r30, r14
     1c8:	90 81       	ld	r25, Z
     1ca:	89 17       	cp	r24, r25
     1cc:	40 f4       	brcc	.+16     	; 0x1de <_ZN6BufferC1Ehh+0xb2>
     1ce:	04 80       	ldd	r0, Z+4	; 0x04
     1d0:	f5 81       	ldd	r31, Z+5	; 0x05
     1d2:	e0 2d       	mov	r30, r0
     1d4:	e8 0f       	add	r30, r24
     1d6:	f1 1d       	adc	r31, r1
     1d8:	10 82       	st	Z, r1
     1da:	8f 5f       	subi	r24, 0xFF	; 255
     1dc:	f4 cf       	rjmp	.-24     	; 0x1c6 <_ZN6BufferC1Ehh+0x9a>
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	1f 91       	pop	r17
     1e4:	0f 91       	pop	r16
     1e6:	ff 90       	pop	r15
     1e8:	ef 90       	pop	r14
     1ea:	df 90       	pop	r13
     1ec:	08 95       	ret

000001ee <_ZN6Buffer4SaveEv>:
     1ee:	fc 01       	movw	r30, r24
     1f0:	26 81       	ldd	r18, Z+6	; 0x06
     1f2:	60 81       	ld	r22, Z
     1f4:	26 17       	cp	r18, r22
     1f6:	71 f0       	breq	.+28     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
     1f8:	a4 81       	ldd	r26, Z+4	; 0x04
     1fa:	b5 81       	ldd	r27, Z+5	; 0x05
     1fc:	87 81       	ldd	r24, Z+7	; 0x07
     1fe:	a8 0f       	add	r26, r24
     200:	b1 1d       	adc	r27, r1
     202:	9c 91       	ld	r25, X
     204:	99 23       	and	r25, r25
     206:	31 f0       	breq	.+12     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
     208:	8f 5f       	subi	r24, 0xFF	; 255
     20a:	0e 94 36 0b 	call	0x166c	; 0x166c <__udivmodqi4>
     20e:	97 83       	std	Z+7, r25	; 0x07
     210:	2f 5f       	subi	r18, 0xFF	; 255
     212:	26 83       	std	Z+6, r18	; 0x06
     214:	08 95       	ret

00000216 <_ZN6Buffer4ReadEv>:
     216:	dc 01       	movw	r26, r24
     218:	16 96       	adiw	r26, 0x06	; 6
     21a:	8c 91       	ld	r24, X
     21c:	16 97       	sbiw	r26, 0x06	; 6
     21e:	88 23       	and	r24, r24
     220:	79 f0       	breq	.+30     	; 0x240 <_ZN6Buffer4ReadEv+0x2a>
     222:	12 96       	adiw	r26, 0x02	; 2
     224:	2d 91       	ld	r18, X+
     226:	3c 91       	ld	r19, X
     228:	13 97       	sbiw	r26, 0x03	; 3
     22a:	18 96       	adiw	r26, 0x08	; 8
     22c:	8c 91       	ld	r24, X
     22e:	e8 2f       	mov	r30, r24
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	ee 0f       	add	r30, r30
     234:	ff 1f       	adc	r31, r31
     236:	e2 0f       	add	r30, r18
     238:	f3 1f       	adc	r31, r19
     23a:	80 81       	ld	r24, Z
     23c:	91 81       	ldd	r25, Z+1	; 0x01
     23e:	08 95       	ret
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	08 95       	ret

00000246 <_ZN6Buffer4NextEv>:
     246:	fc 01       	movw	r30, r24
     248:	86 81       	ldd	r24, Z+6	; 0x06
     24a:	88 23       	and	r24, r24
     24c:	79 f0       	breq	.+30     	; 0x26c <_ZN6Buffer4NextEv+0x26>
     24e:	a4 81       	ldd	r26, Z+4	; 0x04
     250:	b5 81       	ldd	r27, Z+5	; 0x05
     252:	80 85       	ldd	r24, Z+8	; 0x08
     254:	a8 0f       	add	r26, r24
     256:	b1 1d       	adc	r27, r1
     258:	1c 92       	st	X, r1
     25a:	80 85       	ldd	r24, Z+8	; 0x08
     25c:	8f 5f       	subi	r24, 0xFF	; 255
     25e:	60 81       	ld	r22, Z
     260:	0e 94 36 0b 	call	0x166c	; 0x166c <__udivmodqi4>
     264:	90 87       	std	Z+8, r25	; 0x08
     266:	86 81       	ldd	r24, Z+6	; 0x06
     268:	81 50       	subi	r24, 0x01	; 1
     26a:	86 83       	std	Z+6, r24	; 0x06
     26c:	08 95       	ret

0000026e <_ZN6Buffer9BlockSizeEv>:
     26e:	fc 01       	movw	r30, r24
     270:	86 81       	ldd	r24, Z+6	; 0x06
     272:	88 23       	and	r24, r24
     274:	39 f0       	breq	.+14     	; 0x284 <_ZN6Buffer9BlockSizeEv+0x16>
     276:	84 81       	ldd	r24, Z+4	; 0x04
     278:	95 81       	ldd	r25, Z+5	; 0x05
     27a:	20 85       	ldd	r18, Z+8	; 0x08
     27c:	fc 01       	movw	r30, r24
     27e:	e2 0f       	add	r30, r18
     280:	f1 1d       	adc	r31, r1
     282:	80 81       	ld	r24, Z
     284:	08 95       	ret

00000286 <_ZN6BuffernwEj>:

void* Buffer::operator new(size_t size)
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	ec 01       	movw	r28, r24
	void* ptr;
	
	do
	ptr = malloc(size);
     28c:	ce 01       	movw	r24, r28
     28e:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
	while(ptr == nullptr);
     292:	00 97       	sbiw	r24, 0x00	; 0
     294:	d9 f3       	breq	.-10     	; 0x28c <_ZN6BuffernwEj+0x6>
	
	return ptr;
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <_Z1Sv>:
uint32_t sec = 0;
uint8_t count = 0;

void S()
{
	sec++;
     29c:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sec>
     2a0:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <sec+0x1>
     2a4:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <sec+0x2>
     2a8:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <sec+0x3>
     2ac:	01 96       	adiw	r24, 0x01	; 1
     2ae:	a1 1d       	adc	r26, r1
     2b0:	b1 1d       	adc	r27, r1
     2b2:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <sec>
     2b6:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <sec+0x1>
     2ba:	a0 93 95 00 	sts	0x0095, r26	; 0x800095 <sec+0x2>
     2be:	b0 93 96 00 	sts	0x0096, r27	; 0x800096 <sec+0x3>
     2c2:	08 95       	ret

000002c4 <_Z1Tv>:
}

void T()
{
	uart->Transmit();
     2c4:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     2c8:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     2cc:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN4UART8TransmitEv>
     2d0:	08 95       	ret

000002d2 <_Z2F3v>:
}

void F3()
{
	PORTC ^= (1<<2);
     2d2:	95 b3       	in	r25, 0x15	; 21
     2d4:	84 e0       	ldi	r24, 0x04	; 4
     2d6:	89 27       	eor	r24, r25
     2d8:	85 bb       	out	0x15, r24	; 21
	
	if(uart->HaveUnreadMessages())
     2da:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     2de:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     2e2:	0e 94 81 06 	call	0xd02	; 0xd02 <_ZN4UART18HaveUnreadMessagesEv>
     2e6:	88 23       	and	r24, r24
     2e8:	99 f0       	breq	.+38     	; 0x310 <_Z2F3v+0x3e>
	{
		uart->UploadingDataForTransfer(uart->GetRX_Message());
     2ea:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     2ee:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     2f2:	0e 94 8c 06 	call	0xd18	; 0xd18 <_ZN4UART13GetRX_MessageEv>
     2f6:	bc 01       	movw	r22, r24
     2f8:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     2fc:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     300:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN4UART24UploadingDataForTransferEPKc>
		uart->ClearRX_Message();
     304:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     308:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     30c:	0e 94 92 06 	call	0xd24	; 0xd24 <_ZN4UART15ClearRX_MessageEv>
     310:	08 95       	ret

00000312 <_Z2F2v>:
	}
}

void F2()
{
     312:	cf 93       	push	r28
     314:	df 93       	push	r29
	PORTC ^= (1<<1);
     316:	95 b3       	in	r25, 0x15	; 21
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	89 27       	eor	r24, r25
     31c:	85 bb       	out	0x15, r24	; 21
	uart->UploadingDataForTransfer("F2 - ");
     31e:	66 e6       	ldi	r22, 0x66	; 102
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     326:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     32a:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN4UART24UploadingDataForTransferEPKc>
	const char *s = StringHandler::FloatToString(sec, 0);
     32e:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <sec>
     332:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <sec+0x1>
     336:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <sec+0x2>
     33a:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <sec+0x3>
     33e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__floatunsisf>
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN13StringHandler13FloatToStringEfh>
     348:	ec 01       	movw	r28, r24
	uart->UploadingDataForTransfer(s);
     34a:	bc 01       	movw	r22, r24
     34c:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     350:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     354:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN4UART24UploadingDataForTransferEPKc>
	free((char*)s);
     358:	ce 01       	movw	r24, r28
     35a:	0e 94 1c 0c 	call	0x1838	; 0x1838 <free>
	s = nullptr;
	uart->UploadingDataForTransfer(" sec\r");
     35e:	6c e6       	ldi	r22, 0x6C	; 108
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     366:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     36a:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN4UART24UploadingDataForTransferEPKc>
}
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <_Z2F1v>:

void F1()
{
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
	PORTC ^= (1<<0);
     378:	95 b3       	in	r25, 0x15	; 21
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	89 27       	eor	r24, r25
     37e:	85 bb       	out	0x15, r24	; 21
	count++;
     380:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     384:	8f 5f       	subi	r24, 0xFF	; 255
     386:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
	uart->UploadingDataForTransfer("F1 - ");
     38a:	62 e7       	ldi	r22, 0x72	; 114
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     392:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     396:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN4UART24UploadingDataForTransferEPKc>
	const char *s = StringHandler::FloatToString(sec, 0);
     39a:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <sec>
     39e:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <sec+0x1>
     3a2:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <sec+0x2>
     3a6:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <sec+0x3>
     3aa:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__floatunsisf>
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN13StringHandler13FloatToStringEfh>
     3b4:	ec 01       	movw	r28, r24
	uart->UploadingDataForTransfer(s);
     3b6:	bc 01       	movw	r22, r24
     3b8:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     3bc:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     3c0:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN4UART24UploadingDataForTransferEPKc>
	free((char*)s);
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <free>
	s = nullptr;
	uart->UploadingDataForTransfer(" sec\r");
     3ca:	6c e6       	ldi	r22, 0x6C	; 108
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     3d2:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     3d6:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN4UART24UploadingDataForTransferEPKc>
	
	if(count == 5) 
     3da:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     3de:	85 30       	cpi	r24, 0x05	; 5
     3e0:	89 f4       	brne	.+34     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
	{
		sch->DeleteTask(F2);
     3e2:	69 e8       	ldi	r22, 0x89	; 137
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sch>
     3ea:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sch+0x1>
     3ee:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <_ZN9Scheduler10DeleteTaskEPFvvE>
		uart->UploadingDataForTransfer("F2 deleted\r");
     3f2:	68 e7       	ldi	r22, 0x78	; 120
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     3fa:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     3fe:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN4UART24UploadingDataForTransferEPKc>
     402:	16 c0       	rjmp	.+44     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
	}
	
	else if(count >= 20)
     404:	84 31       	cpi	r24, 0x14	; 20
     406:	a0 f0       	brcs	.+40     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
	{
		count = 0;
     408:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
		sch->AddTask(F2, 2000);
     40c:	40 ed       	ldi	r20, 0xD0	; 208
     40e:	57 e0       	ldi	r21, 0x07	; 7
     410:	69 e8       	ldi	r22, 0x89	; 137
     412:	71 e0       	ldi	r23, 0x01	; 1
     414:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sch>
     418:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sch+0x1>
     41c:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN9Scheduler7AddTaskEPFvvEj>
		uart->UploadingDataForTransfer("F2 added\r");
     420:	64 e8       	ldi	r22, 0x84	; 132
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     428:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     42c:	0e 94 d0 06 	call	0xda0	; 0xda0 <_ZN4UART24UploadingDataForTransferEPKc>
	}
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <_Z41__static_initialization_and_destruction_0ii>:
    /* Replace with your application code */
    while (1) 
    {
		sch->DispatchTasks();
    }
}
     436:	cf 92       	push	r12
     438:	ef 92       	push	r14
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	71 f5       	brne	.+92     	; 0x4a2 <__stack+0x43>
     446:	6f 3f       	cpi	r22, 0xFF	; 255
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	59 f5       	brne	.+86     	; 0x4a2 <__stack+0x43>
#include "StringHandler.h"

#define F_CPU 8000000
#define UART_BAUD 9600

Scheduler *sch = new Scheduler(F_CPU, 5);
     44c:	85 e0       	ldi	r24, 0x05	; 5
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 b3 04 	call	0x966	; 0x966 <_ZN9SchedulernwEj>
     454:	ec 01       	movw	r28, r24
     456:	25 e0       	ldi	r18, 0x05	; 5
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	52 e1       	ldi	r21, 0x12	; 18
     45c:	6a e7       	ldi	r22, 0x7A	; 122
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	0e 94 1d 03 	call	0x63a	; 0x63a <_ZN9SchedulerC1Emh>
     464:	d0 93 9a 00 	sts	0x009A, r29	; 0x80009a <sch+0x1>
     468:	c0 93 99 00 	sts	0x0099, r28	; 0x800099 <sch>
UART *uart = new UART(UART_BAUD, F_CPU, 15, 15);
     46c:	88 e0       	ldi	r24, 0x08	; 8
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 98 06 	call	0xd30	; 0xd30 <_ZN4UARTnwEj>
     474:	ec 01       	movw	r28, r24
     476:	0f 2e       	mov	r0, r31
     478:	ff e0       	ldi	r31, 0x0F	; 15
     47a:	cf 2e       	mov	r12, r31
     47c:	f0 2d       	mov	r31, r0
     47e:	0f 2e       	mov	r0, r31
     480:	ff e0       	ldi	r31, 0x0F	; 15
     482:	ef 2e       	mov	r14, r31
     484:	f0 2d       	mov	r31, r0
     486:	00 e0       	ldi	r16, 0x00	; 0
     488:	12 e1       	ldi	r17, 0x12	; 18
     48a:	2a e7       	ldi	r18, 0x7A	; 122
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e8       	ldi	r20, 0x80	; 128
     490:	55 e2       	ldi	r21, 0x25	; 37
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_ZN4UARTC1Emmhh>
     49a:	d0 93 98 00 	sts	0x0098, r29	; 0x800098 <uart+0x1>
     49e:	c0 93 97 00 	sts	0x0097, r28	; 0x800097 <uart>
    /* Replace with your application code */
    while (1) 
    {
		sch->DispatchTasks();
    }
}
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ef 90       	pop	r14
     4ac:	cf 90       	pop	r12
     4ae:	08 95       	ret

000004b0 <__vector_19>:

Scheduler *sch = new Scheduler(F_CPU, 5);
UART *uart = new UART(UART_BAUD, F_CPU, 15, 15);

ISR(SCHEDULER_INTERRUPT)
{
     4b0:	1f 92       	push	r1
     4b2:	0f 92       	push	r0
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	0f 92       	push	r0
     4b8:	11 24       	eor	r1, r1
     4ba:	2f 93       	push	r18
     4bc:	3f 93       	push	r19
     4be:	4f 93       	push	r20
     4c0:	5f 93       	push	r21
     4c2:	6f 93       	push	r22
     4c4:	7f 93       	push	r23
     4c6:	8f 93       	push	r24
     4c8:	9f 93       	push	r25
     4ca:	af 93       	push	r26
     4cc:	bf 93       	push	r27
     4ce:	ef 93       	push	r30
     4d0:	ff 93       	push	r31
	sch->UpdateLeftTime();
     4d2:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sch>
     4d6:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sch+0x1>
     4da:	0e 94 b2 03 	call	0x764	; 0x764 <_ZN9Scheduler14UpdateLeftTimeEv>
}
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	bf 91       	pop	r27
     4e4:	af 91       	pop	r26
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	7f 91       	pop	r23
     4ec:	6f 91       	pop	r22
     4ee:	5f 91       	pop	r21
     4f0:	4f 91       	pop	r20
     4f2:	3f 91       	pop	r19
     4f4:	2f 91       	pop	r18
     4f6:	0f 90       	pop	r0
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	0f 90       	pop	r0
     4fc:	1f 90       	pop	r1
     4fe:	18 95       	reti

00000500 <__vector_11>:

ISR(USART_RX_INTERRUPT)
{
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	2f 93       	push	r18
     50c:	3f 93       	push	r19
     50e:	4f 93       	push	r20
     510:	5f 93       	push	r21
     512:	6f 93       	push	r22
     514:	7f 93       	push	r23
     516:	8f 93       	push	r24
     518:	9f 93       	push	r25
     51a:	af 93       	push	r26
     51c:	bf 93       	push	r27
     51e:	ef 93       	push	r30
     520:	ff 93       	push	r31
	uart->Receive();
     522:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     526:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     52a:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZN4UART7ReceiveEv>
}
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	7f 91       	pop	r23
     53c:	6f 91       	pop	r22
     53e:	5f 91       	pop	r21
     540:	4f 91       	pop	r20
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <__vector_13>:

ISR(USART_TX_INTERRUPT)
{
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	11 24       	eor	r1, r1
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	5f 93       	push	r21
     562:	6f 93       	push	r22
     564:	7f 93       	push	r23
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	af 93       	push	r26
     56c:	bf 93       	push	r27
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
	uart->TransmissionStop();
     572:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     576:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     57a:	0e 94 50 06 	call	0xca0	; 0xca0 <_ZN4UART16TransmissionStopEv>
	uart->Transmit();
     57e:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     582:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     586:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN4UART8TransmitEv>
}
     58a:	ff 91       	pop	r31
     58c:	ef 91       	pop	r30
     58e:	bf 91       	pop	r27
     590:	af 91       	pop	r26
     592:	9f 91       	pop	r25
     594:	8f 91       	pop	r24
     596:	7f 91       	pop	r23
     598:	6f 91       	pop	r22
     59a:	5f 91       	pop	r21
     59c:	4f 91       	pop	r20
     59e:	3f 91       	pop	r19
     5a0:	2f 91       	pop	r18
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <main>:



int main(void)
{
	uart->Enable();
     5ac:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <uart>
     5b0:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <uart+0x1>
     5b4:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN4UART6EnableEv>
	
	sch->AddTask(S, 1000);
     5b8:	48 ee       	ldi	r20, 0xE8	; 232
     5ba:	53 e0       	ldi	r21, 0x03	; 3
     5bc:	6e e4       	ldi	r22, 0x4E	; 78
     5be:	71 e0       	ldi	r23, 0x01	; 1
     5c0:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sch>
     5c4:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sch+0x1>
     5c8:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN9Scheduler7AddTaskEPFvvEj>
	sch->AddTask(F1, 1000);
     5cc:	48 ee       	ldi	r20, 0xE8	; 232
     5ce:	53 e0       	ldi	r21, 0x03	; 3
     5d0:	6a eb       	ldi	r22, 0xBA	; 186
     5d2:	71 e0       	ldi	r23, 0x01	; 1
     5d4:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sch>
     5d8:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sch+0x1>
     5dc:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN9Scheduler7AddTaskEPFvvEj>
	sch->AddTask(T, 10);
     5e0:	4a e0       	ldi	r20, 0x0A	; 10
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	62 e6       	ldi	r22, 0x62	; 98
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sch>
     5ec:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sch+0x1>
     5f0:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN9Scheduler7AddTaskEPFvvEj>
	sch->AddTask(F2, 2000);
     5f4:	40 ed       	ldi	r20, 0xD0	; 208
     5f6:	57 e0       	ldi	r21, 0x07	; 7
     5f8:	69 e8       	ldi	r22, 0x89	; 137
     5fa:	71 e0       	ldi	r23, 0x01	; 1
     5fc:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sch>
     600:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sch+0x1>
     604:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN9Scheduler7AddTaskEPFvvEj>
	sch->AddTask(F3, 500);		
     608:	44 ef       	ldi	r20, 0xF4	; 244
     60a:	51 e0       	ldi	r21, 0x01	; 1
     60c:	69 e6       	ldi	r22, 0x69	; 105
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sch>
     614:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sch+0x1>
     618:	0e 94 0a 04 	call	0x814	; 0x814 <_ZN9Scheduler7AddTaskEPFvvEj>
	
	sei();
     61c:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		sch->DispatchTasks();
     61e:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <sch>
     622:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <sch+0x1>
     626:	0e 94 ce 03 	call	0x79c	; 0x79c <_ZN9Scheduler13DispatchTasksEv>
     62a:	f9 cf       	rjmp	.-14     	; 0x61e <main+0x72>

0000062c <_GLOBAL__sub_I_sch>:
    }
}
     62c:	6f ef       	ldi	r22, 0xFF	; 255
     62e:	7f ef       	ldi	r23, 0xFF	; 255
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 1b 02 	call	0x436	; 0x436 <_Z41__static_initialization_and_destruction_0ii>
     638:	08 95       	ret

0000063a <_ZN9SchedulerC1Emh>:
	_TIMSK &= ~(1<<_OCIE0);
}

Scheduler::~Scheduler()
{
	ClearQueue();
     63a:	8f 92       	push	r8
     63c:	9f 92       	push	r9
     63e:	af 92       	push	r10
     640:	bf 92       	push	r11
     642:	df 92       	push	r13
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	7c 01       	movw	r14, r24
     652:	4a 01       	movw	r8, r20
     654:	5b 01       	movw	r10, r22
     656:	c2 2f       	mov	r28, r18
     658:	cb 01       	movw	r24, r22
     65a:	ba 01       	movw	r22, r20
     65c:	28 e1       	ldi	r18, 0x18	; 24
     65e:	34 ee       	ldi	r19, 0xE4	; 228
     660:	43 e0       	ldi	r20, 0x03	; 3
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	0e 94 42 0b 	call	0x1684	; 0x1684 <__udivmodsi4>
     668:	28 30       	cpi	r18, 0x08	; 8
     66a:	31 05       	cpc	r19, r1
     66c:	41 05       	cpc	r20, r1
     66e:	51 05       	cpc	r21, r1
     670:	40 f4       	brcc	.+16     	; 0x682 <_ZN9SchedulerC1Emh+0x48>
     672:	83 b7       	in	r24, 0x33	; 51
     674:	82 60       	ori	r24, 0x02	; 2
     676:	83 bf       	out	0x33, r24	; 51
     678:	28 e0       	ldi	r18, 0x08	; 8
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	40 e0       	ldi	r20, 0x00	; 0
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	28 c0       	rjmp	.+80     	; 0x6d2 <_ZN9SchedulerC1Emh+0x98>
     682:	20 34       	cpi	r18, 0x40	; 64
     684:	31 05       	cpc	r19, r1
     686:	41 05       	cpc	r20, r1
     688:	51 05       	cpc	r21, r1
     68a:	40 f4       	brcc	.+16     	; 0x69c <_ZN9SchedulerC1Emh+0x62>
     68c:	83 b7       	in	r24, 0x33	; 51
     68e:	83 60       	ori	r24, 0x03	; 3
     690:	83 bf       	out	0x33, r24	; 51
     692:	20 e4       	ldi	r18, 0x40	; 64
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	1b c0       	rjmp	.+54     	; 0x6d2 <_ZN9SchedulerC1Emh+0x98>
     69c:	2f 3f       	cpi	r18, 0xFF	; 255
     69e:	31 05       	cpc	r19, r1
     6a0:	41 05       	cpc	r20, r1
     6a2:	51 05       	cpc	r21, r1
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <_ZN9SchedulerC1Emh+0x6e>
     6a6:	40 f4       	brcc	.+16     	; 0x6b8 <_ZN9SchedulerC1Emh+0x7e>
     6a8:	83 b7       	in	r24, 0x33	; 51
     6aa:	84 60       	ori	r24, 0x04	; 4
     6ac:	83 bf       	out	0x33, r24	; 51
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	31 e0       	ldi	r19, 0x01	; 1
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	0d c0       	rjmp	.+26     	; 0x6d2 <_ZN9SchedulerC1Emh+0x98>
     6b8:	21 15       	cp	r18, r1
     6ba:	84 e0       	ldi	r24, 0x04	; 4
     6bc:	38 07       	cpc	r19, r24
     6be:	41 05       	cpc	r20, r1
     6c0:	51 05       	cpc	r21, r1
     6c2:	38 f4       	brcc	.+14     	; 0x6d2 <_ZN9SchedulerC1Emh+0x98>
     6c4:	83 b7       	in	r24, 0x33	; 51
     6c6:	85 60       	ori	r24, 0x05	; 5
     6c8:	83 bf       	out	0x33, r24	; 51
     6ca:	20 e0       	ldi	r18, 0x00	; 0
     6cc:	34 e0       	ldi	r19, 0x04	; 4
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	83 b7       	in	r24, 0x33	; 51
     6d4:	88 60       	ori	r24, 0x08	; 8
     6d6:	83 bf       	out	0x33, r24	; 51
     6d8:	a8 ee       	ldi	r26, 0xE8	; 232
     6da:	b3 e0       	ldi	r27, 0x03	; 3
     6dc:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__muluhisi3>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c5 01       	movw	r24, r10
     6e6:	b4 01       	movw	r22, r8
     6e8:	0e 94 42 0b 	call	0x1684	; 0x1684 <__udivmodsi4>
     6ec:	2c bf       	out	0x3c, r18	; 60
     6ee:	f7 01       	movw	r30, r14
     6f0:	10 82       	st	Z, r1
     6f2:	11 82       	std	Z+1, r1	; 0x01
     6f4:	c2 83       	std	Z+2, r28	; 0x02
     6f6:	8c 2f       	mov	r24, r28
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
     702:	f7 01       	movw	r30, r14
     704:	94 83       	std	Z+4, r25	; 0x04
     706:	83 83       	std	Z+3, r24	; 0x03
     708:	89 2b       	or	r24, r25
     70a:	a9 f3       	breq	.-22     	; 0x6f6 <_ZN9SchedulerC1Emh+0xbc>
     70c:	d1 2c       	mov	r13, r1
     70e:	f7 01       	movw	r30, r14
     710:	82 81       	ldd	r24, Z+2	; 0x02
     712:	d8 16       	cp	r13, r24
     714:	d8 f4       	brcc	.+54     	; 0x74c <_ZN9SchedulerC1Emh+0x112>
     716:	f7 01       	movw	r30, r14
     718:	03 81       	ldd	r16, Z+3	; 0x03
     71a:	14 81       	ldd	r17, Z+4	; 0x04
     71c:	cd 2d       	mov	r28, r13
     71e:	d0 e0       	ldi	r29, 0x00	; 0
     720:	cc 0f       	add	r28, r28
     722:	dd 1f       	adc	r29, r29
     724:	0c 0f       	add	r16, r28
     726:	1d 1f       	adc	r17, r29
     728:	86 e0       	ldi	r24, 0x06	; 6
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
     730:	f8 01       	movw	r30, r16
     732:	91 83       	std	Z+1, r25	; 0x01
     734:	80 83       	st	Z, r24
     736:	f7 01       	movw	r30, r14
     738:	83 81       	ldd	r24, Z+3	; 0x03
     73a:	94 81       	ldd	r25, Z+4	; 0x04
     73c:	c8 0f       	add	r28, r24
     73e:	d9 1f       	adc	r29, r25
     740:	88 81       	ld	r24, Y
     742:	99 81       	ldd	r25, Y+1	; 0x01
     744:	89 2b       	or	r24, r25
     746:	39 f3       	breq	.-50     	; 0x716 <_ZN9SchedulerC1Emh+0xdc>
     748:	d3 94       	inc	r13
     74a:	e1 cf       	rjmp	.-62     	; 0x70e <_ZN9SchedulerC1Emh+0xd4>
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	bf 90       	pop	r11
     75c:	af 90       	pop	r10
     75e:	9f 90       	pop	r9
     760:	8f 90       	pop	r8
     762:	08 95       	ret

00000764 <_ZN9Scheduler14UpdateLeftTimeEv>:
     764:	dc 01       	movw	r26, r24
     766:	12 be       	out	0x32, r1	; 50
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	8c 91       	ld	r24, X
     76c:	98 17       	cp	r25, r24
     76e:	a8 f4       	brcc	.+42     	; 0x79a <_ZN9Scheduler14UpdateLeftTimeEv+0x36>
     770:	13 96       	adiw	r26, 0x03	; 3
     772:	2d 91       	ld	r18, X+
     774:	3c 91       	ld	r19, X
     776:	14 97       	sbiw	r26, 0x04	; 4
     778:	e9 2f       	mov	r30, r25
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	e2 0f       	add	r30, r18
     782:	f3 1f       	adc	r31, r19
     784:	01 90       	ld	r0, Z+
     786:	f0 81       	ld	r31, Z
     788:	e0 2d       	mov	r30, r0
     78a:	24 81       	ldd	r18, Z+4	; 0x04
     78c:	35 81       	ldd	r19, Z+5	; 0x05
     78e:	2f 5f       	subi	r18, 0xFF	; 255
     790:	3f 4f       	sbci	r19, 0xFF	; 255
     792:	35 83       	std	Z+5, r19	; 0x05
     794:	24 83       	std	Z+4, r18	; 0x04
     796:	9f 5f       	subi	r25, 0xFF	; 255
     798:	e8 cf       	rjmp	.-48     	; 0x76a <_ZN9Scheduler14UpdateLeftTimeEv+0x6>
     79a:	08 95       	ret

0000079c <_ZN9Scheduler13DispatchTasksEv>:
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	fc 01       	movw	r30, r24
     7a2:	20 81       	ld	r18, Z
     7a4:	22 23       	and	r18, r18
     7a6:	71 f1       	breq	.+92     	; 0x804 <_ZN9Scheduler13DispatchTasksEv+0x68>
     7a8:	ec 01       	movw	r28, r24
     7aa:	23 81       	ldd	r18, Z+3	; 0x03
     7ac:	34 81       	ldd	r19, Z+4	; 0x04
     7ae:	81 81       	ldd	r24, Z+1	; 0x01
     7b0:	e8 2f       	mov	r30, r24
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	e2 0f       	add	r30, r18
     7ba:	f3 1f       	adc	r31, r19
     7bc:	01 90       	ld	r0, Z+
     7be:	f0 81       	ld	r31, Z
     7c0:	e0 2d       	mov	r30, r0
     7c2:	84 81       	ldd	r24, Z+4	; 0x04
     7c4:	95 81       	ldd	r25, Z+5	; 0x05
     7c6:	22 81       	ldd	r18, Z+2	; 0x02
     7c8:	33 81       	ldd	r19, Z+3	; 0x03
     7ca:	82 17       	cp	r24, r18
     7cc:	93 07       	cpc	r25, r19
     7ce:	a0 f0       	brcs	.+40     	; 0x7f8 <_ZN9Scheduler13DispatchTasksEv+0x5c>
     7d0:	82 1b       	sub	r24, r18
     7d2:	93 0b       	sbc	r25, r19
     7d4:	95 83       	std	Z+5, r25	; 0x05
     7d6:	84 83       	std	Z+4, r24	; 0x04
     7d8:	2b 81       	ldd	r18, Y+3	; 0x03
     7da:	3c 81       	ldd	r19, Y+4	; 0x04
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	e8 2f       	mov	r30, r24
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	e2 0f       	add	r30, r18
     7e8:	f3 1f       	adc	r31, r19
     7ea:	01 90       	ld	r0, Z+
     7ec:	f0 81       	ld	r31, Z
     7ee:	e0 2d       	mov	r30, r0
     7f0:	01 90       	ld	r0, Z+
     7f2:	f0 81       	ld	r31, Z
     7f4:	e0 2d       	mov	r30, r0
     7f6:	09 95       	icall
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	68 81       	ld	r22, Y
     7fe:	0e 94 36 0b 	call	0x166c	; 0x166c <__udivmodqi4>
     802:	99 83       	std	Y+1, r25	; 0x01
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <_ZN9Scheduler14EnableDispatchEv>:
     80a:	12 be       	out	0x32, r1	; 50
     80c:	89 b7       	in	r24, 0x39	; 57
     80e:	82 60       	ori	r24, 0x02	; 2
     810:	89 bf       	out	0x39, r24	; 57
     812:	08 95       	ret

00000814 <_ZN9Scheduler7AddTaskEPFvvEj>:
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <_ZN9Scheduler7AddTaskEPFvvEj+0xa>
     81e:	00 d0       	rcall	.+0      	; 0x820 <_ZN9Scheduler7AddTaskEPFvvEj+0xc>
     820:	00 d0       	rcall	.+0      	; 0x822 <_ZN9Scheduler7AddTaskEPFvvEj+0xe>
     822:	cd b7       	in	r28, 0x3d	; 61
     824:	de b7       	in	r29, 0x3e	; 62
     826:	8c 01       	movw	r16, r24
     828:	dc 01       	movw	r26, r24
     82a:	8c 91       	ld	r24, X
     82c:	12 96       	adiw	r26, 0x02	; 2
     82e:	9c 91       	ld	r25, X
     830:	89 17       	cp	r24, r25
     832:	09 f4       	brne	.+2      	; 0x836 <_ZN9Scheduler7AddTaskEPFvvEj+0x22>
     834:	50 c0       	rjmp	.+160    	; 0x8d6 <_ZN9Scheduler7AddTaskEPFvvEj+0xc2>
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	98 17       	cp	r25, r24
     83a:	20 f5       	brcc	.+72     	; 0x884 <_ZN9Scheduler7AddTaskEPFvvEj+0x70>
     83c:	d8 01       	movw	r26, r16
     83e:	13 96       	adiw	r26, 0x03	; 3
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
     844:	14 97       	sbiw	r26, 0x04	; 4
     846:	29 2f       	mov	r18, r25
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	22 0f       	add	r18, r18
     84c:	33 1f       	adc	r19, r19
     84e:	e2 0f       	add	r30, r18
     850:	f3 1f       	adc	r31, r19
     852:	01 90       	ld	r0, Z+
     854:	f0 81       	ld	r31, Z
     856:	e0 2d       	mov	r30, r0
     858:	a0 81       	ld	r26, Z
     85a:	b1 81       	ldd	r27, Z+1	; 0x01
     85c:	a6 17       	cp	r26, r22
     85e:	b7 07       	cpc	r27, r23
     860:	79 f4       	brne	.+30     	; 0x880 <_ZN9Scheduler7AddTaskEPFvvEj+0x6c>
     862:	53 83       	std	Z+3, r21	; 0x03
     864:	42 83       	std	Z+2, r20	; 0x02
     866:	f8 01       	movw	r30, r16
     868:	83 81       	ldd	r24, Z+3	; 0x03
     86a:	94 81       	ldd	r25, Z+4	; 0x04
     86c:	fc 01       	movw	r30, r24
     86e:	e2 0f       	add	r30, r18
     870:	f3 1f       	adc	r31, r19
     872:	01 90       	ld	r0, Z+
     874:	f0 81       	ld	r31, Z
     876:	e0 2d       	mov	r30, r0
     878:	15 82       	std	Z+5, r1	; 0x05
     87a:	14 82       	std	Z+4, r1	; 0x04
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	03 c0       	rjmp	.+6      	; 0x886 <_ZN9Scheduler7AddTaskEPFvvEj+0x72>
     880:	9f 5f       	subi	r25, 0xFF	; 255
     882:	da cf       	rjmp	.-76     	; 0x838 <_ZN9Scheduler7AddTaskEPFvvEj+0x24>
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	81 11       	cpse	r24, r1
     888:	26 c0       	rjmp	.+76     	; 0x8d6 <_ZN9Scheduler7AddTaskEPFvvEj+0xc2>
     88a:	7a 83       	std	Y+2, r23	; 0x02
     88c:	69 83       	std	Y+1, r22	; 0x01
     88e:	5c 83       	std	Y+4, r21	; 0x04
     890:	4b 83       	std	Y+3, r20	; 0x03
     892:	1e 82       	std	Y+6, r1	; 0x06
     894:	1d 82       	std	Y+5, r1	; 0x05
     896:	d8 01       	movw	r26, r16
     898:	13 96       	adiw	r26, 0x03	; 3
     89a:	2d 91       	ld	r18, X+
     89c:	3c 91       	ld	r19, X
     89e:	14 97       	sbiw	r26, 0x04	; 4
     8a0:	8c 91       	ld	r24, X
     8a2:	e8 2f       	mov	r30, r24
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	ee 0f       	add	r30, r30
     8a8:	ff 1f       	adc	r31, r31
     8aa:	e2 0f       	add	r30, r18
     8ac:	f3 1f       	adc	r31, r19
     8ae:	a0 81       	ld	r26, Z
     8b0:	b1 81       	ldd	r27, Z+1	; 0x01
     8b2:	86 e0       	ldi	r24, 0x06	; 6
     8b4:	fe 01       	movw	r30, r28
     8b6:	31 96       	adiw	r30, 0x01	; 1
     8b8:	01 90       	ld	r0, Z+
     8ba:	0d 92       	st	X+, r0
     8bc:	8a 95       	dec	r24
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <_ZN9Scheduler7AddTaskEPFvvEj+0xa4>
     8c0:	f8 01       	movw	r30, r16
     8c2:	80 81       	ld	r24, Z
     8c4:	81 11       	cpse	r24, r1
     8c6:	03 c0       	rjmp	.+6      	; 0x8ce <_ZN9Scheduler7AddTaskEPFvvEj+0xba>
     8c8:	c8 01       	movw	r24, r16
     8ca:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN9Scheduler14EnableDispatchEv>
     8ce:	d8 01       	movw	r26, r16
     8d0:	8c 91       	ld	r24, X
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	8c 93       	st	X, r24
     8d6:	26 96       	adiw	r28, 0x06	; 6
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	08 95       	ret

000008ec <_ZN9Scheduler15DisableDispatchEv>:
     8ec:	89 b7       	in	r24, 0x39	; 57
     8ee:	8d 7f       	andi	r24, 0xFD	; 253
     8f0:	89 bf       	out	0x39, r24	; 57
     8f2:	08 95       	ret

000008f4 <_ZN9Scheduler10DeleteTaskEPFvvE>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	ec 01       	movw	r28, r24
     8fa:	88 81       	ld	r24, Y
     8fc:	88 23       	and	r24, r24
     8fe:	81 f1       	breq	.+96     	; 0x960 <_ZN9Scheduler10DeleteTaskEPFvvE+0x6c>
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	98 17       	cp	r25, r24
     904:	30 f5       	brcc	.+76     	; 0x952 <_ZN9Scheduler10DeleteTaskEPFvvE+0x5e>
     906:	2b 81       	ldd	r18, Y+3	; 0x03
     908:	3c 81       	ldd	r19, Y+4	; 0x04
     90a:	a9 2f       	mov	r26, r25
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	aa 0f       	add	r26, r26
     910:	bb 1f       	adc	r27, r27
     912:	a2 0f       	add	r26, r18
     914:	b3 1f       	adc	r27, r19
     916:	ed 91       	ld	r30, X+
     918:	fc 91       	ld	r31, X
     91a:	11 97       	sbiw	r26, 0x01	; 1
     91c:	40 81       	ld	r20, Z
     91e:	51 81       	ldd	r21, Z+1	; 0x01
     920:	46 17       	cp	r20, r22
     922:	57 07       	cpc	r21, r23
     924:	a1 f4       	brne	.+40     	; 0x94e <_ZN9Scheduler10DeleteTaskEPFvvE+0x5a>
     926:	81 50       	subi	r24, 0x01	; 1
     928:	88 83       	st	Y, r24
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	f9 01       	movw	r30, r18
     932:	e8 0f       	add	r30, r24
     934:	f9 1f       	adc	r31, r25
     936:	01 90       	ld	r0, Z+
     938:	f0 81       	ld	r31, Z
     93a:	e0 2d       	mov	r30, r0
     93c:	0d 90       	ld	r0, X+
     93e:	bc 91       	ld	r27, X
     940:	a0 2d       	mov	r26, r0
     942:	86 e0       	ldi	r24, 0x06	; 6
     944:	01 90       	ld	r0, Z+
     946:	0d 92       	st	X+, r0
     948:	8a 95       	dec	r24
     94a:	e1 f7       	brne	.-8      	; 0x944 <_ZN9Scheduler10DeleteTaskEPFvvE+0x50>
     94c:	02 c0       	rjmp	.+4      	; 0x952 <_ZN9Scheduler10DeleteTaskEPFvvE+0x5e>
     94e:	9f 5f       	subi	r25, 0xFF	; 255
     950:	d8 cf       	rjmp	.-80     	; 0x902 <_ZN9Scheduler10DeleteTaskEPFvvE+0xe>
     952:	19 82       	std	Y+1, r1	; 0x01
     954:	88 81       	ld	r24, Y
     956:	81 11       	cpse	r24, r1
     958:	03 c0       	rjmp	.+6      	; 0x960 <_ZN9Scheduler10DeleteTaskEPFvvE+0x6c>
     95a:	ce 01       	movw	r24, r28
     95c:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN9Scheduler15DisableDispatchEv>
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	08 95       	ret

00000966 <_ZN9SchedulernwEj>:
}

void* Scheduler::operator new(size_t size)
{
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	ec 01       	movw	r28, r24
	void* ptr;
		
	do
		ptr = malloc(size);
     96c:	ce 01       	movw	r24, r28
     96e:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
	while(ptr == nullptr);
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	d9 f3       	breq	.-10     	; 0x96c <_ZN9SchedulernwEj+0x6>
		
	return ptr;
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <_ZN13StringHandler13FloatToStringEfh>:
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
     97c:	2f 92       	push	r2
     97e:	3f 92       	push	r3
     980:	4f 92       	push	r4
     982:	5f 92       	push	r5
     984:	6f 92       	push	r6
     986:	7f 92       	push	r7
     988:	8f 92       	push	r8
     98a:	9f 92       	push	r9
     98c:	af 92       	push	r10
     98e:	bf 92       	push	r11
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <_ZN13StringHandler13FloatToStringEfh+0x26>
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <_ZN13StringHandler13FloatToStringEfh+0x28>
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <_ZN13StringHandler13FloatToStringEfh+0x2a>
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	2b 01       	movw	r4, r22
     9ac:	3c 01       	movw	r6, r24
     9ae:	94 2e       	mov	r9, r20
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
	
	return resultString;
}
     9b0:	2d b6       	in	r2, 0x3d	; 61
     9b2:	3e b6       	in	r3, 0x3e	; 62
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
	uint32_t integerPart = fabs(value);
     9b4:	9f 77       	andi	r25, 0x7F	; 127
     9b6:	6b 83       	std	Y+3, r22	; 0x03
     9b8:	7c 83       	std	Y+4, r23	; 0x04
     9ba:	8d 83       	std	Y+5, r24	; 0x05
     9bc:	9e 83       	std	Y+6, r25	; 0x06
     9be:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fixunssfsi>
     9c2:	a6 2e       	mov	r10, r22
     9c4:	b7 2e       	mov	r11, r23
     9c6:	c8 2e       	mov	r12, r24
     9c8:	d9 2e       	mov	r13, r25
     9ca:	26 2f       	mov	r18, r22
     9cc:	37 2f       	mov	r19, r23
     9ce:	48 2f       	mov	r20, r24
     9d0:	59 2f       	mov	r21, r25
	
	uint8_t stringLength = 0;	
     9d2:	81 2c       	mov	r8, r1
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <_ZN13StringHandler13FloatToStringEfh+0x5c>
	do
	{
		integerPart /= 10;
		stringLength++;
     9d6:	8f 2c       	mov	r8, r15
	uint32_t integerPart = fabs(value);
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
     9d8:	ca 01       	movw	r24, r20
     9da:	b9 01       	movw	r22, r18
     9dc:	2a e0       	ldi	r18, 0x0A	; 10
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	0e 94 42 0b 	call	0x1684	; 0x1684 <__udivmodsi4>
		stringLength++;
     9e8:	ff 24       	eor	r15, r15
     9ea:	f3 94       	inc	r15
     9ec:	f8 0c       	add	r15, r8
	}
	while(integerPart > 0);
     9ee:	21 15       	cp	r18, r1
     9f0:	31 05       	cpc	r19, r1
     9f2:	41 05       	cpc	r20, r1
     9f4:	51 05       	cpc	r21, r1
     9f6:	79 f7       	brne	.-34     	; 0x9d6 <_ZN13StringHandler13FloatToStringEfh+0x5a>
	
	integerPart = fabs(value);
	
	uint8_t integerPartLength = stringLength;
	
	if(digitsAfterDot > 0)
     9f8:	99 20       	and	r9, r9
     9fa:	21 f0       	breq	.+8      	; 0xa04 <_ZN13StringHandler13FloatToStringEfh+0x88>
	{
		stringLength++;										//for '.'
     9fc:	83 94       	inc	r8
     9fe:	83 94       	inc	r8
		stringLength += digitsAfterDot;						//for .xxxxx
     a00:	89 0c       	add	r8, r9
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <_ZN13StringHandler13FloatToStringEfh+0x8a>
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
		stringLength++;
     a04:	8f 2c       	mov	r8, r15
	{
		stringLength++;										//for '.'
		stringLength += digitsAfterDot;						//for .xxxxx
	}
	
	if(value < 0) stringLength++;							//for '-'
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	a9 01       	movw	r20, r18
     a0c:	c3 01       	movw	r24, r6
     a0e:	b2 01       	movw	r22, r4
     a10:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__cmpsf2>
     a14:	88 23       	and	r24, r24
     a16:	0c f4       	brge	.+2      	; 0xa1a <_ZN13StringHandler13FloatToStringEfh+0x9e>
     a18:	83 94       	inc	r8
	
	stringLength++;											//for '\0'	
     a1a:	83 94       	inc	r8
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
     a1c:	8f 2d       	mov	r24, r15
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	ad b7       	in	r26, 0x3d	; 61
     a24:	be b7       	in	r27, 0x3e	; 62
     a26:	a8 1b       	sub	r26, r24
     a28:	b9 0b       	sbc	r27, r25
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	be bf       	out	0x3e, r27	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	ad bf       	out	0x3d, r26	; 61
     a34:	2d b7       	in	r18, 0x3d	; 61
     a36:	3e b7       	in	r19, 0x3e	; 62
     a38:	2f 5f       	subi	r18, 0xFF	; 255
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	3a 83       	std	Y+2, r19	; 0x02
     a3e:	29 83       	std	Y+1, r18	; 0x01
     a40:	89 01       	movw	r16, r18
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     a42:	ee 24       	eor	r14, r14
     a44:	e3 94       	inc	r14
     a46:	fe 14       	cp	r15, r14
     a48:	c0 f0       	brcs	.+48     	; 0xa7a <_ZN13StringHandler13FloatToStringEfh+0xfe>
	{
		uint8_t dig = integerPart % 10;
				
		integerPart /= 10;
     a4a:	6a 2d       	mov	r22, r10
     a4c:	7b 2d       	mov	r23, r11
     a4e:	8c 2d       	mov	r24, r12
     a50:	9d 2d       	mov	r25, r13
     a52:	2a e0       	ldi	r18, 0x0A	; 10
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	0e 94 42 0b 	call	0x1684	; 0x1684 <__udivmodsi4>
     a5e:	a2 2e       	mov	r10, r18
     a60:	b3 2e       	mov	r11, r19
     a62:	c4 2e       	mov	r12, r20
     a64:	d5 2e       	mov	r13, r21
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
     a66:	ef 2d       	mov	r30, r15
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	ee 19       	sub	r30, r14
     a6c:	f1 09       	sbc	r31, r1
     a6e:	e0 0f       	add	r30, r16
     a70:	f1 1f       	adc	r31, r17
     a72:	60 5d       	subi	r22, 0xD0	; 208
     a74:	60 83       	st	Z, r22
	
	stringLength++;											//for '\0'	
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     a76:	e3 94       	inc	r14
     a78:	e6 cf       	rjmp	.-52     	; 0xa46 <_ZN13StringHandler13FloatToStringEfh+0xca>
		integerPart /= 10;
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
	}
	
	integerPartDigitsArray[integerPartLength] = '\0';
     a7a:	e9 81       	ldd	r30, Y+1	; 0x01
     a7c:	fa 81       	ldd	r31, Y+2	; 0x02
     a7e:	ef 0d       	add	r30, r15
     a80:	f1 1d       	adc	r31, r1
     a82:	10 82       	st	Z, r1
				
	char* resultString;
	do 
	{
		resultString = (char*)malloc(stringLength);
     a84:	e8 2c       	mov	r14, r8
     a86:	f1 2c       	mov	r15, r1
     a88:	c7 01       	movw	r24, r14
     a8a:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
     a8e:	8c 01       	movw	r16, r24
	}while(resultString == NULL);
     a90:	89 2b       	or	r24, r25
     a92:	c1 f3       	breq	.-16     	; 0xa84 <_ZN13StringHandler13FloatToStringEfh+0x108>
	 
			
	if(value < 0)
     a94:	20 e0       	ldi	r18, 0x00	; 0
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	a9 01       	movw	r20, r18
     a9a:	c3 01       	movw	r24, r6
     a9c:	b2 01       	movw	r22, r4
     a9e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__cmpsf2>
     aa2:	88 23       	and	r24, r24
     aa4:	6c f4       	brge	.+26     	; 0xac0 <_ZN13StringHandler13FloatToStringEfh+0x144>
	{
		strlcpy(resultString, "-", stringLength);
     aa6:	a7 01       	movw	r20, r14
     aa8:	6e e8       	ldi	r22, 0x8E	; 142
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	c8 01       	movw	r24, r16
     aae:	0e 94 cd 0c 	call	0x199a	; 0x199a <strlcpy>
		strlcat(resultString, integerPartDigitsArray, stringLength);
     ab2:	a7 01       	movw	r20, r14
     ab4:	69 81       	ldd	r22, Y+1	; 0x01
     ab6:	7a 81       	ldd	r23, Y+2	; 0x02
     ab8:	c8 01       	movw	r24, r16
     aba:	0e 94 ae 0c 	call	0x195c	; 0x195c <strlcat>
     abe:	06 c0       	rjmp	.+12     	; 0xacc <_ZN13StringHandler13FloatToStringEfh+0x150>
	}
	else strlcpy(resultString, integerPartDigitsArray, stringLength);
     ac0:	a7 01       	movw	r20, r14
     ac2:	69 81       	ldd	r22, Y+1	; 0x01
     ac4:	7a 81       	ldd	r23, Y+2	; 0x02
     ac6:	c8 01       	movw	r24, r16
     ac8:	0e 94 cd 0c 	call	0x199a	; 0x199a <strlcpy>
	
	if(digitsAfterDot == 0)
     acc:	99 20       	and	r9, r9
     ace:	09 f4       	brne	.+2      	; 0xad2 <_ZN13StringHandler13FloatToStringEfh+0x156>
     ad0:	66 c0       	rjmp	.+204    	; 0xb9e <_ZN13StringHandler13FloatToStringEfh+0x222>
	{		
		return resultString;
	}
		
	strlcat(resultString, ".", stringLength);
     ad2:	a7 01       	movw	r20, r14
     ad4:	60 e9       	ldi	r22, 0x90	; 144
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	c8 01       	movw	r24, r16
     ada:	0e 94 ae 0c 	call	0x195c	; 0x195c <strlcat>
		
	value = fabs(value) - integerPart;	
     ade:	6a 2d       	mov	r22, r10
     ae0:	7b 2d       	mov	r23, r11
     ae2:	8c 2d       	mov	r24, r12
     ae4:	9d 2d       	mov	r25, r13
     ae6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__floatunsisf>
     aea:	9b 01       	movw	r18, r22
     aec:	ac 01       	movw	r20, r24
     aee:	6b 81       	ldd	r22, Y+3	; 0x03
     af0:	7c 81       	ldd	r23, Y+4	; 0x04
     af2:	8d 81       	ldd	r24, Y+5	; 0x05
     af4:	9e 81       	ldd	r25, Y+6	; 0x06
     af6:	0e 94 40 07 	call	0xe80	; 0xe80 <__subsf3>
     afa:	2b 01       	movw	r4, r22
     afc:	3c 01       	movw	r6, r24
			
	uint32_t mult = (uint32_t)round(pow(10, digitsAfterDot));
     afe:	69 2d       	mov	r22, r9
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__floatunsisf>
     b0a:	9b 01       	movw	r18, r22
     b0c:	ac 01       	movw	r20, r24
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	80 e2       	ldi	r24, 0x20	; 32
     b14:	91 e4       	ldi	r25, 0x41	; 65
     b16:	0e 94 00 09 	call	0x1200	; 0x1200 <pow>
     b1a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <round>
     b1e:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fixunssfsi>
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
     b22:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <__floatunsisf>
     b26:	9b 01       	movw	r18, r22
     b28:	ac 01       	movw	r20, r24
     b2a:	c3 01       	movw	r24, r6
     b2c:	b2 01       	movw	r22, r4
     b2e:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
     b32:	0e 94 50 09 	call	0x12a0	; 0x12a0 <round>
     b36:	0e 94 b2 07 	call	0xf64	; 0xf64 <__fixunssfsi>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
     b3e:	89 2d       	mov	r24, r9
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	6d b7       	in	r22, 0x3d	; 61
     b46:	7e b7       	in	r23, 0x3e	; 62
     b48:	68 1b       	sub	r22, r24
     b4a:	79 0b       	sbc	r23, r25
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	7e bf       	out	0x3e, r23	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	6d bf       	out	0x3d, r22	; 61
     b56:	8d b7       	in	r24, 0x3d	; 61
     b58:	9e b7       	in	r25, 0x3e	; 62
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	5c 01       	movw	r10, r24
     b5e:	6c 01       	movw	r12, r24
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     b60:	88 24       	eor	r8, r8
     b62:	83 94       	inc	r8
     b64:	98 14       	cp	r9, r8
     b66:	90 f0       	brcs	.+36     	; 0xb8c <_ZN13StringHandler13FloatToStringEfh+0x210>
	{
		uint8_t dig = fractionalPart % 10;
				
		fractionalPart /= 10;
     b68:	ca 01       	movw	r24, r20
     b6a:	b9 01       	movw	r22, r18
     b6c:	2a e0       	ldi	r18, 0x0A	; 10
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	0e 94 42 0b 	call	0x1684	; 0x1684 <__udivmodsi4>
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
     b78:	e9 2d       	mov	r30, r9
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	e8 19       	sub	r30, r8
     b7e:	f1 09       	sbc	r31, r1
     b80:	ec 0d       	add	r30, r12
     b82:	fd 1d       	adc	r31, r13
     b84:	60 5d       	subi	r22, 0xD0	; 208
     b86:	60 83       	st	Z, r22
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     b88:	83 94       	inc	r8
     b8a:	ec cf       	rjmp	.-40     	; 0xb64 <_ZN13StringHandler13FloatToStringEfh+0x1e8>
				
		fractionalPart /= 10;
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
	}			
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
     b8c:	f5 01       	movw	r30, r10
     b8e:	e9 0d       	add	r30, r9
     b90:	f1 1d       	adc	r31, r1
     b92:	10 82       	st	Z, r1
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
     b94:	a7 01       	movw	r20, r14
     b96:	b5 01       	movw	r22, r10
     b98:	c8 01       	movw	r24, r16
     b9a:	0e 94 ae 0c 	call	0x195c	; 0x195c <strlcat>
	
	return resultString;
}
     b9e:	c8 01       	movw	r24, r16
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	3e be       	out	0x3e, r3	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	2d be       	out	0x3d, r2	; 61
     baa:	26 96       	adiw	r28, 0x06	; 6
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	bf 90       	pop	r11
     bc8:	af 90       	pop	r10
     bca:	9f 90       	pop	r9
     bcc:	8f 90       	pop	r8
     bce:	7f 90       	pop	r7
     bd0:	6f 90       	pop	r6
     bd2:	5f 90       	pop	r5
     bd4:	4f 90       	pop	r4
     bd6:	3f 90       	pop	r3
     bd8:	2f 90       	pop	r2
     bda:	08 95       	ret

00000bdc <_ZN4UARTC1Emmhh>:
	return ptr;
}

void UART::operator delete(void* ptr)
{
	free(ptr);
     bdc:	4f 92       	push	r4
     bde:	5f 92       	push	r5
     be0:	6f 92       	push	r6
     be2:	7f 92       	push	r7
     be4:	8f 92       	push	r8
     be6:	9f 92       	push	r9
     be8:	af 92       	push	r10
     bea:	bf 92       	push	r11
     bec:	cf 92       	push	r12
     bee:	ef 92       	push	r14
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	ec 01       	movw	r28, r24
     bfa:	4a 01       	movw	r8, r20
     bfc:	5b 01       	movw	r10, r22
     bfe:	28 01       	movw	r4, r16
     c00:	39 01       	movw	r6, r18
     c02:	18 82       	st	Y, r1
     c04:	19 82       	std	Y+1, r1	; 0x01
     c06:	89 e0       	ldi	r24, 0x09	; 9
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 43 01 	call	0x286	; 0x286 <_ZN6BuffernwEj>
     c0e:	8c 01       	movw	r16, r24
     c10:	4c 2d       	mov	r20, r12
     c12:	6e 2d       	mov	r22, r14
     c14:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6BufferC1Ehh>
     c18:	1b 83       	std	Y+3, r17	; 0x03
     c1a:	0a 83       	std	Y+2, r16	; 0x02
     c1c:	1c 82       	std	Y+4, r1	; 0x04
     c1e:	1d 82       	std	Y+5, r1	; 0x05
     c20:	89 e0       	ldi	r24, 0x09	; 9
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 43 01 	call	0x286	; 0x286 <_ZN6BuffernwEj>
     c28:	8c 01       	movw	r16, r24
     c2a:	4c 2d       	mov	r20, r12
     c2c:	6e 2d       	mov	r22, r14
     c2e:	0e 94 96 00 	call	0x12c	; 0x12c <_ZN6BufferC1Ehh>
     c32:	1f 83       	std	Y+7, r17	; 0x07
     c34:	0e 83       	std	Y+6, r16	; 0x06
     c36:	d5 01       	movw	r26, r10
     c38:	c4 01       	movw	r24, r8
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	aa 1f       	adc	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	aa 1f       	adc	r26, r26
     c48:	bb 1f       	adc	r27, r27
     c4a:	9c 01       	movw	r18, r24
     c4c:	ad 01       	movw	r20, r26
     c4e:	22 0f       	add	r18, r18
     c50:	33 1f       	adc	r19, r19
     c52:	44 1f       	adc	r20, r20
     c54:	55 1f       	adc	r21, r21
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	c3 01       	movw	r24, r6
     c60:	b2 01       	movw	r22, r4
     c62:	0e 94 42 0b 	call	0x1684	; 0x1684 <__udivmodsi4>
     c66:	21 50       	subi	r18, 0x01	; 1
     c68:	31 09       	sbc	r19, r1
     c6a:	80 b5       	in	r24, 0x20	; 32
     c6c:	86 60       	ori	r24, 0x06	; 6
     c6e:	80 bd       	out	0x20, r24	; 32
     c70:	80 b5       	in	r24, 0x20	; 32
     c72:	80 68       	ori	r24, 0x80	; 128
     c74:	80 bd       	out	0x20, r24	; 32
     c76:	30 bd       	out	0x20, r19	; 32
     c78:	29 b9       	out	0x09, r18	; 9
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ef 90       	pop	r14
     c84:	cf 90       	pop	r12
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	9f 90       	pop	r9
     c8c:	8f 90       	pop	r8
     c8e:	7f 90       	pop	r7
     c90:	6f 90       	pop	r6
     c92:	5f 90       	pop	r5
     c94:	4f 90       	pop	r4
     c96:	08 95       	ret

00000c98 <_ZN4UART6EnableEv>:
     c98:	8a b1       	in	r24, 0x0a	; 10
     c9a:	88 6d       	ori	r24, 0xD8	; 216
     c9c:	8a b9       	out	0x0a, r24	; 10
     c9e:	08 95       	ret

00000ca0 <_ZN4UART16TransmissionStopEv>:
     ca0:	fc 01       	movw	r30, r24
     ca2:	10 82       	st	Z, r1
     ca4:	08 95       	ret

00000ca6 <_ZN4UART8TransmitEv>:
     ca6:	1f 93       	push	r17
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	fc 01       	movw	r30, r24
     cae:	20 81       	ld	r18, Z
     cb0:	21 11       	cpse	r18, r1
     cb2:	23 c0       	rjmp	.+70     	; 0xcfa <_ZN4UART8TransmitEv+0x54>
     cb4:	ec 01       	movw	r28, r24
     cb6:	82 81       	ldd	r24, Z+2	; 0x02
     cb8:	93 81       	ldd	r25, Z+3	; 0x03
     cba:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN6Buffer9BlockSizeEv>
     cbe:	88 23       	and	r24, r24
     cc0:	e1 f0       	breq	.+56     	; 0xcfa <_ZN4UART8TransmitEv+0x54>
     cc2:	19 81       	ldd	r17, Y+1	; 0x01
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	9b 81       	ldd	r25, Y+3	; 0x03
     cc8:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN6Buffer9BlockSizeEv>
     ccc:	18 17       	cp	r17, r24
     cce:	80 f4       	brcc	.+32     	; 0xcf0 <_ZN4UART8TransmitEv+0x4a>
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN6Buffer4ReadEv>
     cd8:	29 81       	ldd	r18, Y+1	; 0x01
     cda:	31 e0       	ldi	r19, 0x01	; 1
     cdc:	32 0f       	add	r19, r18
     cde:	39 83       	std	Y+1, r19	; 0x01
     ce0:	82 0f       	add	r24, r18
     ce2:	91 1d       	adc	r25, r1
     ce4:	fc 01       	movw	r30, r24
     ce6:	80 81       	ld	r24, Z
     ce8:	8c b9       	out	0x0c, r24	; 12
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	88 83       	st	Y, r24
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <_ZN4UART8TransmitEv+0x54>
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	0e 94 23 01 	call	0x246	; 0x246 <_ZN6Buffer4NextEv>
     cf8:	19 82       	std	Y+1, r1	; 0x01
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	08 95       	ret

00000d02 <_ZN4UART18HaveUnreadMessagesEv>:
     d02:	fc 01       	movw	r30, r24
     d04:	86 81       	ldd	r24, Z+6	; 0x06
     d06:	97 81       	ldd	r25, Z+7	; 0x07
     d08:	0e 94 37 01 	call	0x26e	; 0x26e <_ZN6Buffer9BlockSizeEv>
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	81 11       	cpse	r24, r1
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <_ZN4UART18HaveUnreadMessagesEv+0x12>
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	89 2f       	mov	r24, r25
     d16:	08 95       	ret

00000d18 <_ZN4UART13GetRX_MessageEv>:
     d18:	fc 01       	movw	r30, r24
     d1a:	86 81       	ldd	r24, Z+6	; 0x06
     d1c:	97 81       	ldd	r25, Z+7	; 0x07
     d1e:	0e 94 0b 01 	call	0x216	; 0x216 <_ZN6Buffer4ReadEv>
     d22:	08 95       	ret

00000d24 <_ZN4UART15ClearRX_MessageEv>:
     d24:	fc 01       	movw	r30, r24
     d26:	86 81       	ldd	r24, Z+6	; 0x06
     d28:	97 81       	ldd	r25, Z+7	; 0x07
     d2a:	0e 94 23 01 	call	0x246	; 0x246 <_ZN6Buffer4NextEv>
     d2e:	08 95       	ret

00000d30 <_ZN4UARTnwEj>:
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	ce 01       	movw	r24, r28
     d38:	0e 94 84 0b 	call	0x1708	; 0x1708 <malloc>
     d3c:	00 97       	sbiw	r24, 0x00	; 0
     d3e:	d9 f3       	breq	.-10     	; 0xd36 <_ZN4UARTnwEj+0x6>
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <_ZN6Buffer5WriteIKcEEvRT_h>:
	uint8_t readPtr;
}; 


template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	fc 01       	movw	r30, r24
{	
	if(this->bufferCounter == this->bufferSize) return;	
     d4e:	96 81       	ldd	r25, Z+6	; 0x06
     d50:	80 81       	ld	r24, Z
     d52:	98 17       	cp	r25, r24
     d54:	09 f1       	breq	.+66     	; 0xd98 <_ZN6Buffer5WriteIKcEEvRT_h+0x52>
	
	uint8_t newDataSize = this->dataSize[this->writePtr] + dataSize;
     d56:	87 81       	ldd	r24, Z+7	; 0x07
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a4 81       	ldd	r26, Z+4	; 0x04
     d5c:	b5 81       	ldd	r27, Z+5	; 0x05
     d5e:	a8 0f       	add	r26, r24
     d60:	b9 1f       	adc	r27, r25
     d62:	2c 91       	ld	r18, X
     d64:	12 2f       	mov	r17, r18
     d66:	14 0f       	add	r17, r20
	
	if(newDataSize >= this->blockSize) return;
     d68:	31 81       	ldd	r19, Z+1	; 0x01
     d6a:	13 17       	cp	r17, r19
     d6c:	a8 f4       	brcc	.+42     	; 0xd98 <_ZN6Buffer5WriteIKcEEvRT_h+0x52>
     d6e:	ef 01       	movw	r28, r30
	
	memcpy(this->buffer[this->writePtr] + this->dataSize[this->writePtr], &data, dataSize);
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	88 0f       	add	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	02 80       	ldd	r0, Z+2	; 0x02
     d78:	f3 81       	ldd	r31, Z+3	; 0x03
     d7a:	e0 2d       	mov	r30, r0
     d7c:	e8 0f       	add	r30, r24
     d7e:	f9 1f       	adc	r31, r25
     d80:	80 81       	ld	r24, Z
     d82:	91 81       	ldd	r25, Z+1	; 0x01
     d84:	82 0f       	add	r24, r18
     d86:	91 1d       	adc	r25, r1
     d88:	0e 94 a5 0c 	call	0x194a	; 0x194a <memcpy>
	
	this->dataSize[this->writePtr] = newDataSize;	
     d8c:	8f 81       	ldd	r24, Y+7	; 0x07
     d8e:	ec 81       	ldd	r30, Y+4	; 0x04
     d90:	fd 81       	ldd	r31, Y+5	; 0x05
     d92:	e8 0f       	add	r30, r24
     d94:	f1 1d       	adc	r31, r1
     d96:	10 83       	st	Z, r17
}
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	08 95       	ret

00000da0 <_ZN4UART24UploadingDataForTransferEPKc>:
{
	_UCSRB &= ~(1<<_RXEN)&~(1<<_TXEN)&~(1<<_RXCIE)&~(1<<_TXCIE);
}

void UART::UploadingDataForTransfer(const char* data)
{	
     da0:	cf 93       	push	r28
     da2:	df 93       	push	r29
     da4:	ec 01       	movw	r28, r24
	this->TX_Buffer->Write(*data, strlen(data));
     da6:	fb 01       	movw	r30, r22
     da8:	01 90       	ld	r0, Z+
     daa:	00 20       	and	r0, r0
     dac:	e9 f7       	brne	.-6      	; 0xda8 <_ZN4UART24UploadingDataForTransferEPKc+0x8>
     dae:	31 97       	sbiw	r30, 0x01	; 1
     db0:	af 01       	movw	r20, r30
     db2:	46 1b       	sub	r20, r22
     db4:	57 0b       	sbc	r21, r23
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	0e 94 a3 06 	call	0xd46	; 0xd46 <_ZN6Buffer5WriteIKcEEvRT_h>
	this->TX_Buffer->Save();
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN6Buffer4SaveEv>
}
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <_ZN6Buffer5WriteIhEEvRT_h>:
	uint8_t readPtr;
}; 


template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	fc 01       	movw	r30, r24
{	
	if(this->bufferCounter == this->bufferSize) return;	
     dd4:	96 81       	ldd	r25, Z+6	; 0x06
     dd6:	80 81       	ld	r24, Z
     dd8:	98 17       	cp	r25, r24
     dda:	09 f1       	breq	.+66     	; 0xe1e <_ZN6Buffer5WriteIhEEvRT_h+0x52>
	
	uint8_t newDataSize = this->dataSize[this->writePtr] + dataSize;
     ddc:	87 81       	ldd	r24, Z+7	; 0x07
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a4 81       	ldd	r26, Z+4	; 0x04
     de2:	b5 81       	ldd	r27, Z+5	; 0x05
     de4:	a8 0f       	add	r26, r24
     de6:	b9 1f       	adc	r27, r25
     de8:	2c 91       	ld	r18, X
     dea:	12 2f       	mov	r17, r18
     dec:	14 0f       	add	r17, r20
	
	if(newDataSize >= this->blockSize) return;
     dee:	31 81       	ldd	r19, Z+1	; 0x01
     df0:	13 17       	cp	r17, r19
     df2:	a8 f4       	brcc	.+42     	; 0xe1e <_ZN6Buffer5WriteIhEEvRT_h+0x52>
     df4:	ef 01       	movw	r28, r30
	
	memcpy(this->buffer[this->writePtr] + this->dataSize[this->writePtr], &data, dataSize);
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	02 80       	ldd	r0, Z+2	; 0x02
     dfe:	f3 81       	ldd	r31, Z+3	; 0x03
     e00:	e0 2d       	mov	r30, r0
     e02:	e8 0f       	add	r30, r24
     e04:	f9 1f       	adc	r31, r25
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	82 0f       	add	r24, r18
     e0c:	91 1d       	adc	r25, r1
     e0e:	0e 94 a5 0c 	call	0x194a	; 0x194a <memcpy>
	
	this->dataSize[this->writePtr] = newDataSize;	
     e12:	8f 81       	ldd	r24, Y+7	; 0x07
     e14:	ec 81       	ldd	r30, Y+4	; 0x04
     e16:	fd 81       	ldd	r31, Y+5	; 0x05
     e18:	e8 0f       	add	r30, r24
     e1a:	f1 1d       	adc	r31, r1
     e1c:	10 83       	st	Z, r17
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	08 95       	ret

00000e26 <_ZN4UART7ReceiveEv>:
		}
	}
}

void UART::Receive()
{
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	1f 92       	push	r1
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	uint8_t data = _UDR;
     e34:	2c b1       	in	r18, 0x0c	; 12
     e36:	29 83       	std	Y+1, r18	; 0x01

	if(data == start_mark)
     e38:	2a 32       	cpi	r18, 0x2A	; 42
     e3a:	21 f4       	brne	.+8      	; 0xe44 <_ZN4UART7ReceiveEv+0x1e>
	{
		this->messageReceptionStarted = true;
     e3c:	21 e0       	ldi	r18, 0x01	; 1
     e3e:	fc 01       	movw	r30, r24
     e40:	24 83       	std	Z+4, r18	; 0x04
		
		return;
     e42:	18 c0       	rjmp	.+48     	; 0xe74 <_ZN4UART7ReceiveEv+0x4e>
     e44:	8c 01       	movw	r16, r24
	}
	
	else if (data == end_mark)
     e46:	24 32       	cpi	r18, 0x24	; 36
     e48:	49 f4       	brne	.+18     	; 0xe5c <_ZN4UART7ReceiveEv+0x36>
	{	
		this->RX_Buffer->Save();
     e4a:	fc 01       	movw	r30, r24
     e4c:	86 81       	ldd	r24, Z+6	; 0x06
     e4e:	97 81       	ldd	r25, Z+7	; 0x07
     e50:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_ZN6Buffer4SaveEv>
		
		this->messageReceptionStarted = false;
     e54:	f8 01       	movw	r30, r16
     e56:	14 82       	std	Z+4, r1	; 0x04
		
		this->RX_CharsCounter = 0;		
     e58:	15 82       	std	Z+5, r1	; 0x05
		
		return;
     e5a:	0c c0       	rjmp	.+24     	; 0xe74 <_ZN4UART7ReceiveEv+0x4e>
	}

	if(this->messageReceptionStarted == true)
     e5c:	fc 01       	movw	r30, r24
     e5e:	84 81       	ldd	r24, Z+4	; 0x04
     e60:	88 23       	and	r24, r24
     e62:	41 f0       	breq	.+16     	; 0xe74 <_ZN4UART7ReceiveEv+0x4e>
	{
		this->RX_Buffer->Write(data, sizeof(data));
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	be 01       	movw	r22, r28
     e68:	6f 5f       	subi	r22, 0xFF	; 255
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	86 81       	ldd	r24, Z+6	; 0x06
     e6e:	97 81       	ldd	r25, Z+7	; 0x07
     e70:	0e 94 e6 06 	call	0xdcc	; 0xdcc <_ZN6Buffer5WriteIhEEvRT_h>
	}
}
     e74:	0f 90       	pop	r0
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <__subsf3>:
     e80:	50 58       	subi	r21, 0x80	; 128

00000e82 <__addsf3>:
     e82:	bb 27       	eor	r27, r27
     e84:	aa 27       	eor	r26, r26
     e86:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3x>
     e8a:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_round>
     e8e:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fp_pscA>
     e92:	38 f0       	brcs	.+14     	; 0xea2 <__addsf3+0x20>
     e94:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscB>
     e98:	20 f0       	brcs	.+8      	; 0xea2 <__addsf3+0x20>
     e9a:	39 f4       	brne	.+14     	; 0xeaa <__addsf3+0x28>
     e9c:	9f 3f       	cpi	r25, 0xFF	; 255
     e9e:	19 f4       	brne	.+6      	; 0xea6 <__addsf3+0x24>
     ea0:	26 f4       	brtc	.+8      	; 0xeaa <__addsf3+0x28>
     ea2:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_nan>
     ea6:	0e f4       	brtc	.+2      	; 0xeaa <__addsf3+0x28>
     ea8:	e0 95       	com	r30
     eaa:	e7 fb       	bst	r30, 7
     eac:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_inf>

00000eb0 <__addsf3x>:
     eb0:	e9 2f       	mov	r30, r25
     eb2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_split3>
     eb6:	58 f3       	brcs	.-42     	; 0xe8e <__addsf3+0xc>
     eb8:	ba 17       	cp	r27, r26
     eba:	62 07       	cpc	r22, r18
     ebc:	73 07       	cpc	r23, r19
     ebe:	84 07       	cpc	r24, r20
     ec0:	95 07       	cpc	r25, r21
     ec2:	20 f0       	brcs	.+8      	; 0xecc <__addsf3x+0x1c>
     ec4:	79 f4       	brne	.+30     	; 0xee4 <__addsf3x+0x34>
     ec6:	a6 f5       	brtc	.+104    	; 0xf30 <__addsf3x+0x80>
     ec8:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_zero>
     ecc:	0e f4       	brtc	.+2      	; 0xed0 <__addsf3x+0x20>
     ece:	e0 95       	com	r30
     ed0:	0b 2e       	mov	r0, r27
     ed2:	ba 2f       	mov	r27, r26
     ed4:	a0 2d       	mov	r26, r0
     ed6:	0b 01       	movw	r0, r22
     ed8:	b9 01       	movw	r22, r18
     eda:	90 01       	movw	r18, r0
     edc:	0c 01       	movw	r0, r24
     ede:	ca 01       	movw	r24, r20
     ee0:	a0 01       	movw	r20, r0
     ee2:	11 24       	eor	r1, r1
     ee4:	ff 27       	eor	r31, r31
     ee6:	59 1b       	sub	r21, r25
     ee8:	99 f0       	breq	.+38     	; 0xf10 <__addsf3x+0x60>
     eea:	59 3f       	cpi	r21, 0xF9	; 249
     eec:	50 f4       	brcc	.+20     	; 0xf02 <__addsf3x+0x52>
     eee:	50 3e       	cpi	r21, 0xE0	; 224
     ef0:	68 f1       	brcs	.+90     	; 0xf4c <__addsf3x+0x9c>
     ef2:	1a 16       	cp	r1, r26
     ef4:	f0 40       	sbci	r31, 0x00	; 0
     ef6:	a2 2f       	mov	r26, r18
     ef8:	23 2f       	mov	r18, r19
     efa:	34 2f       	mov	r19, r20
     efc:	44 27       	eor	r20, r20
     efe:	58 5f       	subi	r21, 0xF8	; 248
     f00:	f3 cf       	rjmp	.-26     	; 0xee8 <__addsf3x+0x38>
     f02:	46 95       	lsr	r20
     f04:	37 95       	ror	r19
     f06:	27 95       	ror	r18
     f08:	a7 95       	ror	r26
     f0a:	f0 40       	sbci	r31, 0x00	; 0
     f0c:	53 95       	inc	r21
     f0e:	c9 f7       	brne	.-14     	; 0xf02 <__addsf3x+0x52>
     f10:	7e f4       	brtc	.+30     	; 0xf30 <__addsf3x+0x80>
     f12:	1f 16       	cp	r1, r31
     f14:	ba 0b       	sbc	r27, r26
     f16:	62 0b       	sbc	r22, r18
     f18:	73 0b       	sbc	r23, r19
     f1a:	84 0b       	sbc	r24, r20
     f1c:	ba f0       	brmi	.+46     	; 0xf4c <__addsf3x+0x9c>
     f1e:	91 50       	subi	r25, 0x01	; 1
     f20:	a1 f0       	breq	.+40     	; 0xf4a <__addsf3x+0x9a>
     f22:	ff 0f       	add	r31, r31
     f24:	bb 1f       	adc	r27, r27
     f26:	66 1f       	adc	r22, r22
     f28:	77 1f       	adc	r23, r23
     f2a:	88 1f       	adc	r24, r24
     f2c:	c2 f7       	brpl	.-16     	; 0xf1e <__addsf3x+0x6e>
     f2e:	0e c0       	rjmp	.+28     	; 0xf4c <__addsf3x+0x9c>
     f30:	ba 0f       	add	r27, r26
     f32:	62 1f       	adc	r22, r18
     f34:	73 1f       	adc	r23, r19
     f36:	84 1f       	adc	r24, r20
     f38:	48 f4       	brcc	.+18     	; 0xf4c <__addsf3x+0x9c>
     f3a:	87 95       	ror	r24
     f3c:	77 95       	ror	r23
     f3e:	67 95       	ror	r22
     f40:	b7 95       	ror	r27
     f42:	f7 95       	ror	r31
     f44:	9e 3f       	cpi	r25, 0xFE	; 254
     f46:	08 f0       	brcs	.+2      	; 0xf4a <__addsf3x+0x9a>
     f48:	b0 cf       	rjmp	.-160    	; 0xeaa <__addsf3+0x28>
     f4a:	93 95       	inc	r25
     f4c:	88 0f       	add	r24, r24
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <__addsf3x+0xa2>
     f50:	99 27       	eor	r25, r25
     f52:	ee 0f       	add	r30, r30
     f54:	97 95       	ror	r25
     f56:	87 95       	ror	r24
     f58:	08 95       	ret

00000f5a <__cmpsf2>:
     f5a:	0e 94 1e 08 	call	0x103c	; 0x103c <__fp_cmp>
     f5e:	08 f4       	brcc	.+2      	; 0xf62 <__cmpsf2+0x8>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	08 95       	ret

00000f64 <__fixunssfsi>:
     f64:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_splitA>
     f68:	88 f0       	brcs	.+34     	; 0xf8c <__fixunssfsi+0x28>
     f6a:	9f 57       	subi	r25, 0x7F	; 127
     f6c:	98 f0       	brcs	.+38     	; 0xf94 <__fixunssfsi+0x30>
     f6e:	b9 2f       	mov	r27, r25
     f70:	99 27       	eor	r25, r25
     f72:	b7 51       	subi	r27, 0x17	; 23
     f74:	b0 f0       	brcs	.+44     	; 0xfa2 <__fixunssfsi+0x3e>
     f76:	e1 f0       	breq	.+56     	; 0xfb0 <__fixunssfsi+0x4c>
     f78:	66 0f       	add	r22, r22
     f7a:	77 1f       	adc	r23, r23
     f7c:	88 1f       	adc	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	1a f0       	brmi	.+6      	; 0xf88 <__fixunssfsi+0x24>
     f82:	ba 95       	dec	r27
     f84:	c9 f7       	brne	.-14     	; 0xf78 <__fixunssfsi+0x14>
     f86:	14 c0       	rjmp	.+40     	; 0xfb0 <__fixunssfsi+0x4c>
     f88:	b1 30       	cpi	r27, 0x01	; 1
     f8a:	91 f0       	breq	.+36     	; 0xfb0 <__fixunssfsi+0x4c>
     f8c:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_zero>
     f90:	b1 e0       	ldi	r27, 0x01	; 1
     f92:	08 95       	ret
     f94:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_zero>
     f98:	67 2f       	mov	r22, r23
     f9a:	78 2f       	mov	r23, r24
     f9c:	88 27       	eor	r24, r24
     f9e:	b8 5f       	subi	r27, 0xF8	; 248
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <__fixunssfsi+0x4c>
     fa2:	b9 3f       	cpi	r27, 0xF9	; 249
     fa4:	cc f3       	brlt	.-14     	; 0xf98 <__fixunssfsi+0x34>
     fa6:	86 95       	lsr	r24
     fa8:	77 95       	ror	r23
     faa:	67 95       	ror	r22
     fac:	b3 95       	inc	r27
     fae:	d9 f7       	brne	.-10     	; 0xfa6 <__fixunssfsi+0x42>
     fb0:	3e f4       	brtc	.+14     	; 0xfc0 <__fixunssfsi+0x5c>
     fb2:	90 95       	com	r25
     fb4:	80 95       	com	r24
     fb6:	70 95       	com	r23
     fb8:	61 95       	neg	r22
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	08 95       	ret

00000fc2 <__floatunsisf>:
     fc2:	e8 94       	clt
     fc4:	09 c0       	rjmp	.+18     	; 0xfd8 <__floatsisf+0x12>

00000fc6 <__floatsisf>:
     fc6:	97 fb       	bst	r25, 7
     fc8:	3e f4       	brtc	.+14     	; 0xfd8 <__floatsisf+0x12>
     fca:	90 95       	com	r25
     fcc:	80 95       	com	r24
     fce:	70 95       	com	r23
     fd0:	61 95       	neg	r22
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	8f 4f       	sbci	r24, 0xFF	; 255
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	99 23       	and	r25, r25
     fda:	a9 f0       	breq	.+42     	; 0x1006 <__floatsisf+0x40>
     fdc:	f9 2f       	mov	r31, r25
     fde:	96 e9       	ldi	r25, 0x96	; 150
     fe0:	bb 27       	eor	r27, r27
     fe2:	93 95       	inc	r25
     fe4:	f6 95       	lsr	r31
     fe6:	87 95       	ror	r24
     fe8:	77 95       	ror	r23
     fea:	67 95       	ror	r22
     fec:	b7 95       	ror	r27
     fee:	f1 11       	cpse	r31, r1
     ff0:	f8 cf       	rjmp	.-16     	; 0xfe2 <__floatsisf+0x1c>
     ff2:	fa f4       	brpl	.+62     	; 0x1032 <__floatsisf+0x6c>
     ff4:	bb 0f       	add	r27, r27
     ff6:	11 f4       	brne	.+4      	; 0xffc <__floatsisf+0x36>
     ff8:	60 ff       	sbrs	r22, 0
     ffa:	1b c0       	rjmp	.+54     	; 0x1032 <__floatsisf+0x6c>
     ffc:	6f 5f       	subi	r22, 0xFF	; 255
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	8f 4f       	sbci	r24, 0xFF	; 255
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	16 c0       	rjmp	.+44     	; 0x1032 <__floatsisf+0x6c>
    1006:	88 23       	and	r24, r24
    1008:	11 f0       	breq	.+4      	; 0x100e <__floatsisf+0x48>
    100a:	96 e9       	ldi	r25, 0x96	; 150
    100c:	11 c0       	rjmp	.+34     	; 0x1030 <__floatsisf+0x6a>
    100e:	77 23       	and	r23, r23
    1010:	21 f0       	breq	.+8      	; 0x101a <__floatsisf+0x54>
    1012:	9e e8       	ldi	r25, 0x8E	; 142
    1014:	87 2f       	mov	r24, r23
    1016:	76 2f       	mov	r23, r22
    1018:	05 c0       	rjmp	.+10     	; 0x1024 <__floatsisf+0x5e>
    101a:	66 23       	and	r22, r22
    101c:	71 f0       	breq	.+28     	; 0x103a <__floatsisf+0x74>
    101e:	96 e8       	ldi	r25, 0x86	; 134
    1020:	86 2f       	mov	r24, r22
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	2a f0       	brmi	.+10     	; 0x1032 <__floatsisf+0x6c>
    1028:	9a 95       	dec	r25
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	da f7       	brpl	.-10     	; 0x1028 <__floatsisf+0x62>
    1032:	88 0f       	add	r24, r24
    1034:	96 95       	lsr	r25
    1036:	87 95       	ror	r24
    1038:	97 f9       	bld	r25, 7
    103a:	08 95       	ret

0000103c <__fp_cmp>:
    103c:	99 0f       	add	r25, r25
    103e:	00 08       	sbc	r0, r0
    1040:	55 0f       	add	r21, r21
    1042:	aa 0b       	sbc	r26, r26
    1044:	e0 e8       	ldi	r30, 0x80	; 128
    1046:	fe ef       	ldi	r31, 0xFE	; 254
    1048:	16 16       	cp	r1, r22
    104a:	17 06       	cpc	r1, r23
    104c:	e8 07       	cpc	r30, r24
    104e:	f9 07       	cpc	r31, r25
    1050:	c0 f0       	brcs	.+48     	; 0x1082 <__fp_cmp+0x46>
    1052:	12 16       	cp	r1, r18
    1054:	13 06       	cpc	r1, r19
    1056:	e4 07       	cpc	r30, r20
    1058:	f5 07       	cpc	r31, r21
    105a:	98 f0       	brcs	.+38     	; 0x1082 <__fp_cmp+0x46>
    105c:	62 1b       	sub	r22, r18
    105e:	73 0b       	sbc	r23, r19
    1060:	84 0b       	sbc	r24, r20
    1062:	95 0b       	sbc	r25, r21
    1064:	39 f4       	brne	.+14     	; 0x1074 <__fp_cmp+0x38>
    1066:	0a 26       	eor	r0, r26
    1068:	61 f0       	breq	.+24     	; 0x1082 <__fp_cmp+0x46>
    106a:	23 2b       	or	r18, r19
    106c:	24 2b       	or	r18, r20
    106e:	25 2b       	or	r18, r21
    1070:	21 f4       	brne	.+8      	; 0x107a <__fp_cmp+0x3e>
    1072:	08 95       	ret
    1074:	0a 26       	eor	r0, r26
    1076:	09 f4       	brne	.+2      	; 0x107a <__fp_cmp+0x3e>
    1078:	a1 40       	sbci	r26, 0x01	; 1
    107a:	a6 95       	lsr	r26
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	81 1d       	adc	r24, r1
    1080:	81 1d       	adc	r24, r1
    1082:	08 95       	ret

00001084 <__fp_inf>:
    1084:	97 f9       	bld	r25, 7
    1086:	9f 67       	ori	r25, 0x7F	; 127
    1088:	80 e8       	ldi	r24, 0x80	; 128
    108a:	70 e0       	ldi	r23, 0x00	; 0
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	08 95       	ret

00001090 <__fp_nan>:
    1090:	9f ef       	ldi	r25, 0xFF	; 255
    1092:	80 ec       	ldi	r24, 0xC0	; 192
    1094:	08 95       	ret

00001096 <__fp_pscA>:
    1096:	00 24       	eor	r0, r0
    1098:	0a 94       	dec	r0
    109a:	16 16       	cp	r1, r22
    109c:	17 06       	cpc	r1, r23
    109e:	18 06       	cpc	r1, r24
    10a0:	09 06       	cpc	r0, r25
    10a2:	08 95       	ret

000010a4 <__fp_pscB>:
    10a4:	00 24       	eor	r0, r0
    10a6:	0a 94       	dec	r0
    10a8:	12 16       	cp	r1, r18
    10aa:	13 06       	cpc	r1, r19
    10ac:	14 06       	cpc	r1, r20
    10ae:	05 06       	cpc	r0, r21
    10b0:	08 95       	ret

000010b2 <__fp_round>:
    10b2:	09 2e       	mov	r0, r25
    10b4:	03 94       	inc	r0
    10b6:	00 0c       	add	r0, r0
    10b8:	11 f4       	brne	.+4      	; 0x10be <__fp_round+0xc>
    10ba:	88 23       	and	r24, r24
    10bc:	52 f0       	brmi	.+20     	; 0x10d2 <__fp_round+0x20>
    10be:	bb 0f       	add	r27, r27
    10c0:	40 f4       	brcc	.+16     	; 0x10d2 <__fp_round+0x20>
    10c2:	bf 2b       	or	r27, r31
    10c4:	11 f4       	brne	.+4      	; 0x10ca <__fp_round+0x18>
    10c6:	60 ff       	sbrs	r22, 0
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <__fp_round+0x20>
    10ca:	6f 5f       	subi	r22, 0xFF	; 255
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	08 95       	ret

000010d4 <__fp_split3>:
    10d4:	57 fd       	sbrc	r21, 7
    10d6:	90 58       	subi	r25, 0x80	; 128
    10d8:	44 0f       	add	r20, r20
    10da:	55 1f       	adc	r21, r21
    10dc:	59 f0       	breq	.+22     	; 0x10f4 <__fp_splitA+0x10>
    10de:	5f 3f       	cpi	r21, 0xFF	; 255
    10e0:	71 f0       	breq	.+28     	; 0x10fe <__fp_splitA+0x1a>
    10e2:	47 95       	ror	r20

000010e4 <__fp_splitA>:
    10e4:	88 0f       	add	r24, r24
    10e6:	97 fb       	bst	r25, 7
    10e8:	99 1f       	adc	r25, r25
    10ea:	61 f0       	breq	.+24     	; 0x1104 <__fp_splitA+0x20>
    10ec:	9f 3f       	cpi	r25, 0xFF	; 255
    10ee:	79 f0       	breq	.+30     	; 0x110e <__fp_splitA+0x2a>
    10f0:	87 95       	ror	r24
    10f2:	08 95       	ret
    10f4:	12 16       	cp	r1, r18
    10f6:	13 06       	cpc	r1, r19
    10f8:	14 06       	cpc	r1, r20
    10fa:	55 1f       	adc	r21, r21
    10fc:	f2 cf       	rjmp	.-28     	; 0x10e2 <__fp_split3+0xe>
    10fe:	46 95       	lsr	r20
    1100:	f1 df       	rcall	.-30     	; 0x10e4 <__fp_splitA>
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <__fp_splitA+0x30>
    1104:	16 16       	cp	r1, r22
    1106:	17 06       	cpc	r1, r23
    1108:	18 06       	cpc	r1, r24
    110a:	99 1f       	adc	r25, r25
    110c:	f1 cf       	rjmp	.-30     	; 0x10f0 <__fp_splitA+0xc>
    110e:	86 95       	lsr	r24
    1110:	71 05       	cpc	r23, r1
    1112:	61 05       	cpc	r22, r1
    1114:	08 94       	sec
    1116:	08 95       	ret

00001118 <__fp_zero>:
    1118:	e8 94       	clt

0000111a <__fp_szero>:
    111a:	bb 27       	eor	r27, r27
    111c:	66 27       	eor	r22, r22
    111e:	77 27       	eor	r23, r23
    1120:	cb 01       	movw	r24, r22
    1122:	97 f9       	bld	r25, 7
    1124:	08 95       	ret

00001126 <__mulsf3>:
    1126:	0e 94 a6 08 	call	0x114c	; 0x114c <__mulsf3x>
    112a:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_round>
    112e:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fp_pscA>
    1132:	38 f0       	brcs	.+14     	; 0x1142 <__mulsf3+0x1c>
    1134:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscB>
    1138:	20 f0       	brcs	.+8      	; 0x1142 <__mulsf3+0x1c>
    113a:	95 23       	and	r25, r21
    113c:	11 f0       	breq	.+4      	; 0x1142 <__mulsf3+0x1c>
    113e:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_inf>
    1142:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_nan>
    1146:	11 24       	eor	r1, r1
    1148:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>

0000114c <__mulsf3x>:
    114c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_split3>
    1150:	70 f3       	brcs	.-36     	; 0x112e <__mulsf3+0x8>

00001152 <__mulsf3_pse>:
    1152:	95 9f       	mul	r25, r21
    1154:	c1 f3       	breq	.-16     	; 0x1146 <__mulsf3+0x20>
    1156:	95 0f       	add	r25, r21
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	55 1f       	adc	r21, r21
    115c:	62 9f       	mul	r22, r18
    115e:	f0 01       	movw	r30, r0
    1160:	72 9f       	mul	r23, r18
    1162:	bb 27       	eor	r27, r27
    1164:	f0 0d       	add	r31, r0
    1166:	b1 1d       	adc	r27, r1
    1168:	63 9f       	mul	r22, r19
    116a:	aa 27       	eor	r26, r26
    116c:	f0 0d       	add	r31, r0
    116e:	b1 1d       	adc	r27, r1
    1170:	aa 1f       	adc	r26, r26
    1172:	64 9f       	mul	r22, r20
    1174:	66 27       	eor	r22, r22
    1176:	b0 0d       	add	r27, r0
    1178:	a1 1d       	adc	r26, r1
    117a:	66 1f       	adc	r22, r22
    117c:	82 9f       	mul	r24, r18
    117e:	22 27       	eor	r18, r18
    1180:	b0 0d       	add	r27, r0
    1182:	a1 1d       	adc	r26, r1
    1184:	62 1f       	adc	r22, r18
    1186:	73 9f       	mul	r23, r19
    1188:	b0 0d       	add	r27, r0
    118a:	a1 1d       	adc	r26, r1
    118c:	62 1f       	adc	r22, r18
    118e:	83 9f       	mul	r24, r19
    1190:	a0 0d       	add	r26, r0
    1192:	61 1d       	adc	r22, r1
    1194:	22 1f       	adc	r18, r18
    1196:	74 9f       	mul	r23, r20
    1198:	33 27       	eor	r19, r19
    119a:	a0 0d       	add	r26, r0
    119c:	61 1d       	adc	r22, r1
    119e:	23 1f       	adc	r18, r19
    11a0:	84 9f       	mul	r24, r20
    11a2:	60 0d       	add	r22, r0
    11a4:	21 1d       	adc	r18, r1
    11a6:	82 2f       	mov	r24, r18
    11a8:	76 2f       	mov	r23, r22
    11aa:	6a 2f       	mov	r22, r26
    11ac:	11 24       	eor	r1, r1
    11ae:	9f 57       	subi	r25, 0x7F	; 127
    11b0:	50 40       	sbci	r21, 0x00	; 0
    11b2:	9a f0       	brmi	.+38     	; 0x11da <__mulsf3_pse+0x88>
    11b4:	f1 f0       	breq	.+60     	; 0x11f2 <__mulsf3_pse+0xa0>
    11b6:	88 23       	and	r24, r24
    11b8:	4a f0       	brmi	.+18     	; 0x11cc <__mulsf3_pse+0x7a>
    11ba:	ee 0f       	add	r30, r30
    11bc:	ff 1f       	adc	r31, r31
    11be:	bb 1f       	adc	r27, r27
    11c0:	66 1f       	adc	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	91 50       	subi	r25, 0x01	; 1
    11c8:	50 40       	sbci	r21, 0x00	; 0
    11ca:	a9 f7       	brne	.-22     	; 0x11b6 <__mulsf3_pse+0x64>
    11cc:	9e 3f       	cpi	r25, 0xFE	; 254
    11ce:	51 05       	cpc	r21, r1
    11d0:	80 f0       	brcs	.+32     	; 0x11f2 <__mulsf3_pse+0xa0>
    11d2:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_inf>
    11d6:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>
    11da:	5f 3f       	cpi	r21, 0xFF	; 255
    11dc:	e4 f3       	brlt	.-8      	; 0x11d6 <__mulsf3_pse+0x84>
    11de:	98 3e       	cpi	r25, 0xE8	; 232
    11e0:	d4 f3       	brlt	.-12     	; 0x11d6 <__mulsf3_pse+0x84>
    11e2:	86 95       	lsr	r24
    11e4:	77 95       	ror	r23
    11e6:	67 95       	ror	r22
    11e8:	b7 95       	ror	r27
    11ea:	f7 95       	ror	r31
    11ec:	e7 95       	ror	r30
    11ee:	9f 5f       	subi	r25, 0xFF	; 255
    11f0:	c1 f7       	brne	.-16     	; 0x11e2 <__mulsf3_pse+0x90>
    11f2:	fe 2b       	or	r31, r30
    11f4:	88 0f       	add	r24, r24
    11f6:	91 1d       	adc	r25, r1
    11f8:	96 95       	lsr	r25
    11fa:	87 95       	ror	r24
    11fc:	97 f9       	bld	r25, 7
    11fe:	08 95       	ret

00001200 <pow>:
    1200:	fa 01       	movw	r30, r20
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	30 96       	adiw	r30, 0x00	; 0
    1208:	21 05       	cpc	r18, r1
    120a:	31 05       	cpc	r19, r1
    120c:	a1 f1       	breq	.+104    	; 0x1276 <pow+0x76>
    120e:	61 15       	cp	r22, r1
    1210:	71 05       	cpc	r23, r1
    1212:	61 f4       	brne	.+24     	; 0x122c <pow+0x2c>
    1214:	80 38       	cpi	r24, 0x80	; 128
    1216:	bf e3       	ldi	r27, 0x3F	; 63
    1218:	9b 07       	cpc	r25, r27
    121a:	49 f1       	breq	.+82     	; 0x126e <pow+0x6e>
    121c:	68 94       	set
    121e:	90 38       	cpi	r25, 0x80	; 128
    1220:	81 05       	cpc	r24, r1
    1222:	61 f0       	breq	.+24     	; 0x123c <pow+0x3c>
    1224:	80 38       	cpi	r24, 0x80	; 128
    1226:	bf ef       	ldi	r27, 0xFF	; 255
    1228:	9b 07       	cpc	r25, r27
    122a:	41 f0       	breq	.+16     	; 0x123c <pow+0x3c>
    122c:	99 23       	and	r25, r25
    122e:	4a f5       	brpl	.+82     	; 0x1282 <pow+0x82>
    1230:	ff 3f       	cpi	r31, 0xFF	; 255
    1232:	e1 05       	cpc	r30, r1
    1234:	31 05       	cpc	r19, r1
    1236:	21 05       	cpc	r18, r1
    1238:	19 f1       	breq	.+70     	; 0x1280 <pow+0x80>
    123a:	e8 94       	clt
    123c:	08 94       	sec
    123e:	e7 95       	ror	r30
    1240:	d9 01       	movw	r26, r18
    1242:	aa 23       	and	r26, r26
    1244:	29 f4       	brne	.+10     	; 0x1250 <pow+0x50>
    1246:	ab 2f       	mov	r26, r27
    1248:	be 2f       	mov	r27, r30
    124a:	f8 5f       	subi	r31, 0xF8	; 248
    124c:	d0 f3       	brcs	.-12     	; 0x1242 <pow+0x42>
    124e:	10 c0       	rjmp	.+32     	; 0x1270 <pow+0x70>
    1250:	ff 5f       	subi	r31, 0xFF	; 255
    1252:	70 f4       	brcc	.+28     	; 0x1270 <pow+0x70>
    1254:	a6 95       	lsr	r26
    1256:	e0 f7       	brcc	.-8      	; 0x1250 <pow+0x50>
    1258:	f7 39       	cpi	r31, 0x97	; 151
    125a:	50 f0       	brcs	.+20     	; 0x1270 <pow+0x70>
    125c:	19 f0       	breq	.+6      	; 0x1264 <pow+0x64>
    125e:	ff 3a       	cpi	r31, 0xAF	; 175
    1260:	38 f4       	brcc	.+14     	; 0x1270 <pow+0x70>
    1262:	9f 77       	andi	r25, 0x7F	; 127
    1264:	9f 93       	push	r25
    1266:	0d d0       	rcall	.+26     	; 0x1282 <pow+0x82>
    1268:	0f 90       	pop	r0
    126a:	07 fc       	sbrc	r0, 7
    126c:	90 58       	subi	r25, 0x80	; 128
    126e:	08 95       	ret
    1270:	46 f0       	brts	.+16     	; 0x1282 <pow+0x82>
    1272:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_nan>
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	80 e8       	ldi	r24, 0x80	; 128
    127c:	9f e3       	ldi	r25, 0x3F	; 63
    127e:	08 95       	ret
    1280:	4f e7       	ldi	r20, 0x7F	; 127
    1282:	9f 77       	andi	r25, 0x7F	; 127
    1284:	5f 93       	push	r21
    1286:	4f 93       	push	r20
    1288:	3f 93       	push	r19
    128a:	2f 93       	push	r18
    128c:	0e 94 48 0a 	call	0x1490	; 0x1490 <log>
    1290:	2f 91       	pop	r18
    1292:	3f 91       	pop	r19
    1294:	4f 91       	pop	r20
    1296:	5f 91       	pop	r21
    1298:	0e 94 93 08 	call	0x1126	; 0x1126 <__mulsf3>
    129c:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <exp>

000012a0 <round>:
    12a0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_splitA>
    12a4:	e8 f0       	brcs	.+58     	; 0x12e0 <round+0x40>
    12a6:	9e 37       	cpi	r25, 0x7E	; 126
    12a8:	e8 f0       	brcs	.+58     	; 0x12e4 <round+0x44>
    12aa:	96 39       	cpi	r25, 0x96	; 150
    12ac:	b8 f4       	brcc	.+46     	; 0x12dc <round+0x3c>
    12ae:	9e 38       	cpi	r25, 0x8E	; 142
    12b0:	48 f4       	brcc	.+18     	; 0x12c4 <round+0x24>
    12b2:	67 2f       	mov	r22, r23
    12b4:	78 2f       	mov	r23, r24
    12b6:	88 27       	eor	r24, r24
    12b8:	98 5f       	subi	r25, 0xF8	; 248
    12ba:	f9 cf       	rjmp	.-14     	; 0x12ae <round+0xe>
    12bc:	86 95       	lsr	r24
    12be:	77 95       	ror	r23
    12c0:	67 95       	ror	r22
    12c2:	93 95       	inc	r25
    12c4:	95 39       	cpi	r25, 0x95	; 149
    12c6:	d0 f3       	brcs	.-12     	; 0x12bc <round+0x1c>
    12c8:	b6 2f       	mov	r27, r22
    12ca:	b1 70       	andi	r27, 0x01	; 1
    12cc:	6b 0f       	add	r22, r27
    12ce:	71 1d       	adc	r23, r1
    12d0:	81 1d       	adc	r24, r1
    12d2:	20 f4       	brcc	.+8      	; 0x12dc <round+0x3c>
    12d4:	87 95       	ror	r24
    12d6:	77 95       	ror	r23
    12d8:	67 95       	ror	r22
    12da:	93 95       	inc	r25
    12dc:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__fp_mintl>
    12e0:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_mpack>
    12e4:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>
    12e8:	29 f4       	brne	.+10     	; 0x12f4 <round+0x54>
    12ea:	16 f0       	brts	.+4      	; 0x12f0 <round+0x50>
    12ec:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_inf>
    12f0:	0c 94 8c 08 	jmp	0x1118	; 0x1118 <__fp_zero>
    12f4:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_nan>

000012f8 <exp>:
    12f8:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_splitA>
    12fc:	a8 f3       	brcs	.-22     	; 0x12e8 <round+0x48>
    12fe:	96 38       	cpi	r25, 0x86	; 134
    1300:	a0 f7       	brcc	.-24     	; 0x12ea <round+0x4a>
    1302:	07 f8       	bld	r0, 7
    1304:	0f 92       	push	r0
    1306:	e8 94       	clt
    1308:	2b e3       	ldi	r18, 0x3B	; 59
    130a:	3a ea       	ldi	r19, 0xAA	; 170
    130c:	48 eb       	ldi	r20, 0xB8	; 184
    130e:	5f e7       	ldi	r21, 0x7F	; 127
    1310:	0e 94 a9 08 	call	0x1152	; 0x1152 <__mulsf3_pse>
    1314:	0f 92       	push	r0
    1316:	0f 92       	push	r0
    1318:	0f 92       	push	r0
    131a:	4d b7       	in	r20, 0x3d	; 61
    131c:	5e b7       	in	r21, 0x3e	; 62
    131e:	0f 92       	push	r0
    1320:	0e 94 90 0a 	call	0x1520	; 0x1520 <modf>
    1324:	e4 e5       	ldi	r30, 0x54	; 84
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_powser>
    132c:	4f 91       	pop	r20
    132e:	5f 91       	pop	r21
    1330:	ef 91       	pop	r30
    1332:	ff 91       	pop	r31
    1334:	e5 95       	asr	r30
    1336:	ee 1f       	adc	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	49 f0       	breq	.+18     	; 0x134e <exp+0x56>
    133c:	fe 57       	subi	r31, 0x7E	; 126
    133e:	e0 68       	ori	r30, 0x80	; 128
    1340:	44 27       	eor	r20, r20
    1342:	ee 0f       	add	r30, r30
    1344:	44 1f       	adc	r20, r20
    1346:	fa 95       	dec	r31
    1348:	e1 f7       	brne	.-8      	; 0x1342 <exp+0x4a>
    134a:	41 95       	neg	r20
    134c:	55 0b       	sbc	r21, r21
    134e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <ldexp>
    1352:	0f 90       	pop	r0
    1354:	07 fe       	sbrs	r0, 7
    1356:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <inverse>
    135a:	08 95       	ret

0000135c <__fp_mintl>:
    135c:	88 23       	and	r24, r24
    135e:	71 f4       	brne	.+28     	; 0x137c <__fp_mintl+0x20>
    1360:	77 23       	and	r23, r23
    1362:	21 f0       	breq	.+8      	; 0x136c <__fp_mintl+0x10>
    1364:	98 50       	subi	r25, 0x08	; 8
    1366:	87 2b       	or	r24, r23
    1368:	76 2f       	mov	r23, r22
    136a:	07 c0       	rjmp	.+14     	; 0x137a <__fp_mintl+0x1e>
    136c:	66 23       	and	r22, r22
    136e:	11 f4       	brne	.+4      	; 0x1374 <__fp_mintl+0x18>
    1370:	99 27       	eor	r25, r25
    1372:	0d c0       	rjmp	.+26     	; 0x138e <__fp_mintl+0x32>
    1374:	90 51       	subi	r25, 0x10	; 16
    1376:	86 2b       	or	r24, r22
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	2a f0       	brmi	.+10     	; 0x1388 <__fp_mintl+0x2c>
    137e:	9a 95       	dec	r25
    1380:	66 0f       	add	r22, r22
    1382:	77 1f       	adc	r23, r23
    1384:	88 1f       	adc	r24, r24
    1386:	da f7       	brpl	.-10     	; 0x137e <__fp_mintl+0x22>
    1388:	88 0f       	add	r24, r24
    138a:	96 95       	lsr	r25
    138c:	87 95       	ror	r24
    138e:	97 f9       	bld	r25, 7
    1390:	08 95       	ret

00001392 <__fp_mpack>:
    1392:	9f 3f       	cpi	r25, 0xFF	; 255
    1394:	31 f0       	breq	.+12     	; 0x13a2 <__fp_mpack_finite+0xc>

00001396 <__fp_mpack_finite>:
    1396:	91 50       	subi	r25, 0x01	; 1
    1398:	20 f4       	brcc	.+8      	; 0x13a2 <__fp_mpack_finite+0xc>
    139a:	87 95       	ror	r24
    139c:	77 95       	ror	r23
    139e:	67 95       	ror	r22
    13a0:	b7 95       	ror	r27
    13a2:	88 0f       	add	r24, r24
    13a4:	91 1d       	adc	r25, r1
    13a6:	96 95       	lsr	r25
    13a8:	87 95       	ror	r24
    13aa:	97 f9       	bld	r25, 7
    13ac:	08 95       	ret

000013ae <__fp_powser>:
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	1f 93       	push	r17
    13b4:	0f 93       	push	r16
    13b6:	ff 92       	push	r15
    13b8:	ef 92       	push	r14
    13ba:	df 92       	push	r13
    13bc:	7b 01       	movw	r14, r22
    13be:	8c 01       	movw	r16, r24
    13c0:	68 94       	set
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <__fp_powser+0x22>
    13c4:	da 2e       	mov	r13, r26
    13c6:	ef 01       	movw	r28, r30
    13c8:	0e 94 a6 08 	call	0x114c	; 0x114c <__mulsf3x>
    13cc:	fe 01       	movw	r30, r28
    13ce:	e8 94       	clt
    13d0:	a5 91       	lpm	r26, Z+
    13d2:	25 91       	lpm	r18, Z+
    13d4:	35 91       	lpm	r19, Z+
    13d6:	45 91       	lpm	r20, Z+
    13d8:	55 91       	lpm	r21, Z+
    13da:	a6 f3       	brts	.-24     	; 0x13c4 <__fp_powser+0x16>
    13dc:	ef 01       	movw	r28, r30
    13de:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3x>
    13e2:	fe 01       	movw	r30, r28
    13e4:	97 01       	movw	r18, r14
    13e6:	a8 01       	movw	r20, r16
    13e8:	da 94       	dec	r13
    13ea:	69 f7       	brne	.-38     	; 0x13c6 <__fp_powser+0x18>
    13ec:	df 90       	pop	r13
    13ee:	ef 90       	pop	r14
    13f0:	ff 90       	pop	r15
    13f2:	0f 91       	pop	r16
    13f4:	1f 91       	pop	r17
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <inverse>:
    13fc:	9b 01       	movw	r18, r22
    13fe:	ac 01       	movw	r20, r24
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	80 e8       	ldi	r24, 0x80	; 128
    1406:	9f e3       	ldi	r25, 0x3F	; 63
    1408:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__divsf3>
    140c:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_inf>
    1410:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_mpack>

00001414 <ldexp>:
    1414:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_splitA>
    1418:	d8 f3       	brcs	.-10     	; 0x1410 <inverse+0x14>
    141a:	99 23       	and	r25, r25
    141c:	c9 f3       	breq	.-14     	; 0x1410 <inverse+0x14>
    141e:	94 0f       	add	r25, r20
    1420:	51 1d       	adc	r21, r1
    1422:	a3 f3       	brvs	.-24     	; 0x140c <inverse+0x10>
    1424:	91 50       	subi	r25, 0x01	; 1
    1426:	50 40       	sbci	r21, 0x00	; 0
    1428:	94 f0       	brlt	.+36     	; 0x144e <ldexp+0x3a>
    142a:	59 f0       	breq	.+22     	; 0x1442 <ldexp+0x2e>
    142c:	88 23       	and	r24, r24
    142e:	32 f0       	brmi	.+12     	; 0x143c <ldexp+0x28>
    1430:	66 0f       	add	r22, r22
    1432:	77 1f       	adc	r23, r23
    1434:	88 1f       	adc	r24, r24
    1436:	91 50       	subi	r25, 0x01	; 1
    1438:	50 40       	sbci	r21, 0x00	; 0
    143a:	c1 f7       	brne	.-16     	; 0x142c <ldexp+0x18>
    143c:	9e 3f       	cpi	r25, 0xFE	; 254
    143e:	51 05       	cpc	r21, r1
    1440:	2c f7       	brge	.-54     	; 0x140c <inverse+0x10>
    1442:	88 0f       	add	r24, r24
    1444:	91 1d       	adc	r25, r1
    1446:	96 95       	lsr	r25
    1448:	87 95       	ror	r24
    144a:	97 f9       	bld	r25, 7
    144c:	08 95       	ret
    144e:	5f 3f       	cpi	r21, 0xFF	; 255
    1450:	ac f0       	brlt	.+42     	; 0x147c <ldexp+0x68>
    1452:	98 3e       	cpi	r25, 0xE8	; 232
    1454:	9c f0       	brlt	.+38     	; 0x147c <ldexp+0x68>
    1456:	bb 27       	eor	r27, r27
    1458:	86 95       	lsr	r24
    145a:	77 95       	ror	r23
    145c:	67 95       	ror	r22
    145e:	b7 95       	ror	r27
    1460:	08 f4       	brcc	.+2      	; 0x1464 <ldexp+0x50>
    1462:	b1 60       	ori	r27, 0x01	; 1
    1464:	93 95       	inc	r25
    1466:	c1 f7       	brne	.-16     	; 0x1458 <ldexp+0x44>
    1468:	bb 0f       	add	r27, r27
    146a:	58 f7       	brcc	.-42     	; 0x1442 <ldexp+0x2e>
    146c:	11 f4       	brne	.+4      	; 0x1472 <ldexp+0x5e>
    146e:	60 ff       	sbrs	r22, 0
    1470:	e8 cf       	rjmp	.-48     	; 0x1442 <ldexp+0x2e>
    1472:	6f 5f       	subi	r22, 0xFF	; 255
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	8f 4f       	sbci	r24, 0xFF	; 255
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	e3 cf       	rjmp	.-58     	; 0x1442 <ldexp+0x2e>
    147c:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>
    1480:	16 f0       	brts	.+4      	; 0x1486 <ldexp+0x72>
    1482:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_mpack>
    1486:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_nan>
    148a:	68 94       	set
    148c:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_inf>

00001490 <log>:
    1490:	0e 94 72 08 	call	0x10e4	; 0x10e4 <__fp_splitA>
    1494:	a8 f3       	brcs	.-22     	; 0x1480 <ldexp+0x6c>
    1496:	99 23       	and	r25, r25
    1498:	c1 f3       	breq	.-16     	; 0x148a <ldexp+0x76>
    149a:	ae f3       	brts	.-22     	; 0x1486 <ldexp+0x72>
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	1f 93       	push	r17
    14a2:	0f 93       	push	r16
    14a4:	ff 92       	push	r15
    14a6:	c9 2f       	mov	r28, r25
    14a8:	dd 27       	eor	r29, r29
    14aa:	88 23       	and	r24, r24
    14ac:	2a f0       	brmi	.+10     	; 0x14b8 <log+0x28>
    14ae:	21 97       	sbiw	r28, 0x01	; 1
    14b0:	66 0f       	add	r22, r22
    14b2:	77 1f       	adc	r23, r23
    14b4:	88 1f       	adc	r24, r24
    14b6:	da f7       	brpl	.-10     	; 0x14ae <log+0x1e>
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e8       	ldi	r20, 0x80	; 128
    14be:	5f eb       	ldi	r21, 0xBF	; 191
    14c0:	9f e3       	ldi	r25, 0x3F	; 63
    14c2:	88 39       	cpi	r24, 0x98	; 152
    14c4:	20 f0       	brcs	.+8      	; 0x14ce <log+0x3e>
    14c6:	80 3e       	cpi	r24, 0xE0	; 224
    14c8:	38 f0       	brcs	.+14     	; 0x14d8 <log+0x48>
    14ca:	21 96       	adiw	r28, 0x01	; 1
    14cc:	8f 77       	andi	r24, 0x7F	; 127
    14ce:	0e 94 41 07 	call	0xe82	; 0xe82 <__addsf3>
    14d2:	ec e7       	ldi	r30, 0x7C	; 124
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <log+0x50>
    14d8:	0e 94 41 07 	call	0xe82	; 0xe82 <__addsf3>
    14dc:	e9 ea       	ldi	r30, 0xA9	; 169
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_powser>
    14e4:	8b 01       	movw	r16, r22
    14e6:	be 01       	movw	r22, r28
    14e8:	ec 01       	movw	r28, r24
    14ea:	fb 2e       	mov	r15, r27
    14ec:	6f 57       	subi	r22, 0x7F	; 127
    14ee:	71 09       	sbc	r23, r1
    14f0:	75 95       	asr	r23
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 0b       	sbc	r24, r24
    14f6:	99 0b       	sbc	r25, r25
    14f8:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__floatsisf>
    14fc:	28 e1       	ldi	r18, 0x18	; 24
    14fe:	32 e7       	ldi	r19, 0x72	; 114
    1500:	41 e3       	ldi	r20, 0x31	; 49
    1502:	5f e3       	ldi	r21, 0x3F	; 63
    1504:	0e 94 a6 08 	call	0x114c	; 0x114c <__mulsf3x>
    1508:	af 2d       	mov	r26, r15
    150a:	98 01       	movw	r18, r16
    150c:	ae 01       	movw	r20, r28
    150e:	ff 90       	pop	r15
    1510:	0f 91       	pop	r16
    1512:	1f 91       	pop	r17
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__addsf3x>
    151c:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_round>

00001520 <modf>:
    1520:	fa 01       	movw	r30, r20
    1522:	dc 01       	movw	r26, r24
    1524:	aa 0f       	add	r26, r26
    1526:	bb 1f       	adc	r27, r27
    1528:	9b 01       	movw	r18, r22
    152a:	ac 01       	movw	r20, r24
    152c:	bf 57       	subi	r27, 0x7F	; 127
    152e:	28 f4       	brcc	.+10     	; 0x153a <modf+0x1a>
    1530:	22 27       	eor	r18, r18
    1532:	33 27       	eor	r19, r19
    1534:	44 27       	eor	r20, r20
    1536:	50 78       	andi	r21, 0x80	; 128
    1538:	20 c0       	rjmp	.+64     	; 0x157a <modf+0x5a>
    153a:	b7 51       	subi	r27, 0x17	; 23
    153c:	90 f4       	brcc	.+36     	; 0x1562 <modf+0x42>
    153e:	ab 2f       	mov	r26, r27
    1540:	00 24       	eor	r0, r0
    1542:	46 95       	lsr	r20
    1544:	37 95       	ror	r19
    1546:	27 95       	ror	r18
    1548:	01 1c       	adc	r0, r1
    154a:	a3 95       	inc	r26
    154c:	d2 f3       	brmi	.-12     	; 0x1542 <modf+0x22>
    154e:	00 20       	and	r0, r0
    1550:	71 f0       	breq	.+28     	; 0x156e <modf+0x4e>
    1552:	22 0f       	add	r18, r18
    1554:	33 1f       	adc	r19, r19
    1556:	44 1f       	adc	r20, r20
    1558:	b3 95       	inc	r27
    155a:	da f3       	brmi	.-10     	; 0x1552 <modf+0x32>
    155c:	0e d0       	rcall	.+28     	; 0x157a <modf+0x5a>
    155e:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__subsf3>
    1562:	61 30       	cpi	r22, 0x01	; 1
    1564:	71 05       	cpc	r23, r1
    1566:	a0 e8       	ldi	r26, 0x80	; 128
    1568:	8a 07       	cpc	r24, r26
    156a:	b9 46       	sbci	r27, 0x69	; 105
    156c:	30 f4       	brcc	.+12     	; 0x157a <modf+0x5a>
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	66 27       	eor	r22, r22
    1574:	77 27       	eor	r23, r23
    1576:	88 27       	eor	r24, r24
    1578:	90 78       	andi	r25, 0x80	; 128
    157a:	30 96       	adiw	r30, 0x00	; 0
    157c:	21 f0       	breq	.+8      	; 0x1586 <modf+0x66>
    157e:	20 83       	st	Z, r18
    1580:	31 83       	std	Z+1, r19	; 0x01
    1582:	42 83       	std	Z+2, r20	; 0x02
    1584:	53 83       	std	Z+3, r21	; 0x03
    1586:	08 95       	ret

00001588 <__divsf3>:
    1588:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__divsf3x>
    158c:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__fp_round>
    1590:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscB>
    1594:	58 f0       	brcs	.+22     	; 0x15ac <__divsf3+0x24>
    1596:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fp_pscA>
    159a:	40 f0       	brcs	.+16     	; 0x15ac <__divsf3+0x24>
    159c:	29 f4       	brne	.+10     	; 0x15a8 <__divsf3+0x20>
    159e:	5f 3f       	cpi	r21, 0xFF	; 255
    15a0:	29 f0       	breq	.+10     	; 0x15ac <__divsf3+0x24>
    15a2:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_inf>
    15a6:	51 11       	cpse	r21, r1
    15a8:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>
    15ac:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__fp_nan>

000015b0 <__divsf3x>:
    15b0:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_split3>
    15b4:	68 f3       	brcs	.-38     	; 0x1590 <__divsf3+0x8>

000015b6 <__divsf3_pse>:
    15b6:	99 23       	and	r25, r25
    15b8:	b1 f3       	breq	.-20     	; 0x15a6 <__divsf3+0x1e>
    15ba:	55 23       	and	r21, r21
    15bc:	91 f3       	breq	.-28     	; 0x15a2 <__divsf3+0x1a>
    15be:	95 1b       	sub	r25, r21
    15c0:	55 0b       	sbc	r21, r21
    15c2:	bb 27       	eor	r27, r27
    15c4:	aa 27       	eor	r26, r26
    15c6:	62 17       	cp	r22, r18
    15c8:	73 07       	cpc	r23, r19
    15ca:	84 07       	cpc	r24, r20
    15cc:	38 f0       	brcs	.+14     	; 0x15dc <__divsf3_pse+0x26>
    15ce:	9f 5f       	subi	r25, 0xFF	; 255
    15d0:	5f 4f       	sbci	r21, 0xFF	; 255
    15d2:	22 0f       	add	r18, r18
    15d4:	33 1f       	adc	r19, r19
    15d6:	44 1f       	adc	r20, r20
    15d8:	aa 1f       	adc	r26, r26
    15da:	a9 f3       	breq	.-22     	; 0x15c6 <__divsf3_pse+0x10>
    15dc:	35 d0       	rcall	.+106    	; 0x1648 <__divsf3_pse+0x92>
    15de:	0e 2e       	mov	r0, r30
    15e0:	3a f0       	brmi	.+14     	; 0x15f0 <__divsf3_pse+0x3a>
    15e2:	e0 e8       	ldi	r30, 0x80	; 128
    15e4:	32 d0       	rcall	.+100    	; 0x164a <__divsf3_pse+0x94>
    15e6:	91 50       	subi	r25, 0x01	; 1
    15e8:	50 40       	sbci	r21, 0x00	; 0
    15ea:	e6 95       	lsr	r30
    15ec:	00 1c       	adc	r0, r0
    15ee:	ca f7       	brpl	.-14     	; 0x15e2 <__divsf3_pse+0x2c>
    15f0:	2b d0       	rcall	.+86     	; 0x1648 <__divsf3_pse+0x92>
    15f2:	fe 2f       	mov	r31, r30
    15f4:	29 d0       	rcall	.+82     	; 0x1648 <__divsf3_pse+0x92>
    15f6:	66 0f       	add	r22, r22
    15f8:	77 1f       	adc	r23, r23
    15fa:	88 1f       	adc	r24, r24
    15fc:	bb 1f       	adc	r27, r27
    15fe:	26 17       	cp	r18, r22
    1600:	37 07       	cpc	r19, r23
    1602:	48 07       	cpc	r20, r24
    1604:	ab 07       	cpc	r26, r27
    1606:	b0 e8       	ldi	r27, 0x80	; 128
    1608:	09 f0       	breq	.+2      	; 0x160c <__divsf3_pse+0x56>
    160a:	bb 0b       	sbc	r27, r27
    160c:	80 2d       	mov	r24, r0
    160e:	bf 01       	movw	r22, r30
    1610:	ff 27       	eor	r31, r31
    1612:	93 58       	subi	r25, 0x83	; 131
    1614:	5f 4f       	sbci	r21, 0xFF	; 255
    1616:	3a f0       	brmi	.+14     	; 0x1626 <__divsf3_pse+0x70>
    1618:	9e 3f       	cpi	r25, 0xFE	; 254
    161a:	51 05       	cpc	r21, r1
    161c:	78 f0       	brcs	.+30     	; 0x163c <__divsf3_pse+0x86>
    161e:	0c 94 42 08 	jmp	0x1084	; 0x1084 <__fp_inf>
    1622:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__fp_szero>
    1626:	5f 3f       	cpi	r21, 0xFF	; 255
    1628:	e4 f3       	brlt	.-8      	; 0x1622 <__divsf3_pse+0x6c>
    162a:	98 3e       	cpi	r25, 0xE8	; 232
    162c:	d4 f3       	brlt	.-12     	; 0x1622 <__divsf3_pse+0x6c>
    162e:	86 95       	lsr	r24
    1630:	77 95       	ror	r23
    1632:	67 95       	ror	r22
    1634:	b7 95       	ror	r27
    1636:	f7 95       	ror	r31
    1638:	9f 5f       	subi	r25, 0xFF	; 255
    163a:	c9 f7       	brne	.-14     	; 0x162e <__divsf3_pse+0x78>
    163c:	88 0f       	add	r24, r24
    163e:	91 1d       	adc	r25, r1
    1640:	96 95       	lsr	r25
    1642:	87 95       	ror	r24
    1644:	97 f9       	bld	r25, 7
    1646:	08 95       	ret
    1648:	e1 e0       	ldi	r30, 0x01	; 1
    164a:	66 0f       	add	r22, r22
    164c:	77 1f       	adc	r23, r23
    164e:	88 1f       	adc	r24, r24
    1650:	bb 1f       	adc	r27, r27
    1652:	62 17       	cp	r22, r18
    1654:	73 07       	cpc	r23, r19
    1656:	84 07       	cpc	r24, r20
    1658:	ba 07       	cpc	r27, r26
    165a:	20 f0       	brcs	.+8      	; 0x1664 <__divsf3_pse+0xae>
    165c:	62 1b       	sub	r22, r18
    165e:	73 0b       	sbc	r23, r19
    1660:	84 0b       	sbc	r24, r20
    1662:	ba 0b       	sbc	r27, r26
    1664:	ee 1f       	adc	r30, r30
    1666:	88 f7       	brcc	.-30     	; 0x164a <__divsf3_pse+0x94>
    1668:	e0 95       	com	r30
    166a:	08 95       	ret

0000166c <__udivmodqi4>:
    166c:	99 1b       	sub	r25, r25
    166e:	79 e0       	ldi	r23, 0x09	; 9
    1670:	04 c0       	rjmp	.+8      	; 0x167a <__udivmodqi4_ep>

00001672 <__udivmodqi4_loop>:
    1672:	99 1f       	adc	r25, r25
    1674:	96 17       	cp	r25, r22
    1676:	08 f0       	brcs	.+2      	; 0x167a <__udivmodqi4_ep>
    1678:	96 1b       	sub	r25, r22

0000167a <__udivmodqi4_ep>:
    167a:	88 1f       	adc	r24, r24
    167c:	7a 95       	dec	r23
    167e:	c9 f7       	brne	.-14     	; 0x1672 <__udivmodqi4_loop>
    1680:	80 95       	com	r24
    1682:	08 95       	ret

00001684 <__udivmodsi4>:
    1684:	a1 e2       	ldi	r26, 0x21	; 33
    1686:	1a 2e       	mov	r1, r26
    1688:	aa 1b       	sub	r26, r26
    168a:	bb 1b       	sub	r27, r27
    168c:	fd 01       	movw	r30, r26
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <__udivmodsi4_ep>

00001690 <__udivmodsi4_loop>:
    1690:	aa 1f       	adc	r26, r26
    1692:	bb 1f       	adc	r27, r27
    1694:	ee 1f       	adc	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	a2 17       	cp	r26, r18
    169a:	b3 07       	cpc	r27, r19
    169c:	e4 07       	cpc	r30, r20
    169e:	f5 07       	cpc	r31, r21
    16a0:	20 f0       	brcs	.+8      	; 0x16aa <__udivmodsi4_ep>
    16a2:	a2 1b       	sub	r26, r18
    16a4:	b3 0b       	sbc	r27, r19
    16a6:	e4 0b       	sbc	r30, r20
    16a8:	f5 0b       	sbc	r31, r21

000016aa <__udivmodsi4_ep>:
    16aa:	66 1f       	adc	r22, r22
    16ac:	77 1f       	adc	r23, r23
    16ae:	88 1f       	adc	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	1a 94       	dec	r1
    16b4:	69 f7       	brne	.-38     	; 0x1690 <__udivmodsi4_loop>
    16b6:	60 95       	com	r22
    16b8:	70 95       	com	r23
    16ba:	80 95       	com	r24
    16bc:	90 95       	com	r25
    16be:	9b 01       	movw	r18, r22
    16c0:	ac 01       	movw	r20, r24
    16c2:	bd 01       	movw	r22, r26
    16c4:	cf 01       	movw	r24, r30
    16c6:	08 95       	ret

000016c8 <__muluhisi3>:
    16c8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__umulhisi3>
    16cc:	a5 9f       	mul	r26, r21
    16ce:	90 0d       	add	r25, r0
    16d0:	b4 9f       	mul	r27, r20
    16d2:	90 0d       	add	r25, r0
    16d4:	a4 9f       	mul	r26, r20
    16d6:	80 0d       	add	r24, r0
    16d8:	91 1d       	adc	r25, r1
    16da:	11 24       	eor	r1, r1
    16dc:	08 95       	ret

000016de <__tablejump2__>:
    16de:	ee 0f       	add	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	05 90       	lpm	r0, Z+
    16e4:	f4 91       	lpm	r31, Z
    16e6:	e0 2d       	mov	r30, r0
    16e8:	09 94       	ijmp

000016ea <__umulhisi3>:
    16ea:	a2 9f       	mul	r26, r18
    16ec:	b0 01       	movw	r22, r0
    16ee:	b3 9f       	mul	r27, r19
    16f0:	c0 01       	movw	r24, r0
    16f2:	a3 9f       	mul	r26, r19
    16f4:	70 0d       	add	r23, r0
    16f6:	81 1d       	adc	r24, r1
    16f8:	11 24       	eor	r1, r1
    16fa:	91 1d       	adc	r25, r1
    16fc:	b2 9f       	mul	r27, r18
    16fe:	70 0d       	add	r23, r0
    1700:	81 1d       	adc	r24, r1
    1702:	11 24       	eor	r1, r1
    1704:	91 1d       	adc	r25, r1
    1706:	08 95       	ret

00001708 <malloc>:
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	91 05       	cpc	r25, r1
    1714:	10 f4       	brcc	.+4      	; 0x171a <malloc+0x12>
    1716:	82 e0       	ldi	r24, 0x02	; 2
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <__flp>
    171e:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <__flp+0x1>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	a0 e0       	ldi	r26, 0x00	; 0
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	30 97       	sbiw	r30, 0x00	; 0
    172c:	19 f1       	breq	.+70     	; 0x1774 <malloc+0x6c>
    172e:	40 81       	ld	r20, Z
    1730:	51 81       	ldd	r21, Z+1	; 0x01
    1732:	02 81       	ldd	r16, Z+2	; 0x02
    1734:	13 81       	ldd	r17, Z+3	; 0x03
    1736:	48 17       	cp	r20, r24
    1738:	59 07       	cpc	r21, r25
    173a:	c8 f0       	brcs	.+50     	; 0x176e <malloc+0x66>
    173c:	84 17       	cp	r24, r20
    173e:	95 07       	cpc	r25, r21
    1740:	69 f4       	brne	.+26     	; 0x175c <malloc+0x54>
    1742:	10 97       	sbiw	r26, 0x00	; 0
    1744:	31 f0       	breq	.+12     	; 0x1752 <malloc+0x4a>
    1746:	12 96       	adiw	r26, 0x02	; 2
    1748:	0c 93       	st	X, r16
    174a:	12 97       	sbiw	r26, 0x02	; 2
    174c:	13 96       	adiw	r26, 0x03	; 3
    174e:	1c 93       	st	X, r17
    1750:	27 c0       	rjmp	.+78     	; 0x17a0 <malloc+0x98>
    1752:	00 93 9d 00 	sts	0x009D, r16	; 0x80009d <__flp>
    1756:	10 93 9e 00 	sts	0x009E, r17	; 0x80009e <__flp+0x1>
    175a:	22 c0       	rjmp	.+68     	; 0x17a0 <malloc+0x98>
    175c:	21 15       	cp	r18, r1
    175e:	31 05       	cpc	r19, r1
    1760:	19 f0       	breq	.+6      	; 0x1768 <malloc+0x60>
    1762:	42 17       	cp	r20, r18
    1764:	53 07       	cpc	r21, r19
    1766:	18 f4       	brcc	.+6      	; 0x176e <malloc+0x66>
    1768:	9a 01       	movw	r18, r20
    176a:	bd 01       	movw	r22, r26
    176c:	ef 01       	movw	r28, r30
    176e:	df 01       	movw	r26, r30
    1770:	f8 01       	movw	r30, r16
    1772:	db cf       	rjmp	.-74     	; 0x172a <malloc+0x22>
    1774:	21 15       	cp	r18, r1
    1776:	31 05       	cpc	r19, r1
    1778:	f9 f0       	breq	.+62     	; 0x17b8 <malloc+0xb0>
    177a:	28 1b       	sub	r18, r24
    177c:	39 0b       	sbc	r19, r25
    177e:	24 30       	cpi	r18, 0x04	; 4
    1780:	31 05       	cpc	r19, r1
    1782:	80 f4       	brcc	.+32     	; 0x17a4 <malloc+0x9c>
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	9b 81       	ldd	r25, Y+3	; 0x03
    1788:	61 15       	cp	r22, r1
    178a:	71 05       	cpc	r23, r1
    178c:	21 f0       	breq	.+8      	; 0x1796 <malloc+0x8e>
    178e:	fb 01       	movw	r30, r22
    1790:	93 83       	std	Z+3, r25	; 0x03
    1792:	82 83       	std	Z+2, r24	; 0x02
    1794:	04 c0       	rjmp	.+8      	; 0x179e <malloc+0x96>
    1796:	90 93 9e 00 	sts	0x009E, r25	; 0x80009e <__flp+0x1>
    179a:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__flp>
    179e:	fe 01       	movw	r30, r28
    17a0:	32 96       	adiw	r30, 0x02	; 2
    17a2:	44 c0       	rjmp	.+136    	; 0x182c <malloc+0x124>
    17a4:	fe 01       	movw	r30, r28
    17a6:	e2 0f       	add	r30, r18
    17a8:	f3 1f       	adc	r31, r19
    17aa:	81 93       	st	Z+, r24
    17ac:	91 93       	st	Z+, r25
    17ae:	22 50       	subi	r18, 0x02	; 2
    17b0:	31 09       	sbc	r19, r1
    17b2:	39 83       	std	Y+1, r19	; 0x01
    17b4:	28 83       	st	Y, r18
    17b6:	3a c0       	rjmp	.+116    	; 0x182c <malloc+0x124>
    17b8:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__brkval>
    17bc:	30 91 9c 00 	lds	r19, 0x009C	; 0x80009c <__brkval+0x1>
    17c0:	23 2b       	or	r18, r19
    17c2:	41 f4       	brne	.+16     	; 0x17d4 <malloc+0xcc>
    17c4:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    17c8:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    17cc:	30 93 9c 00 	sts	0x009C, r19	; 0x80009c <__brkval+0x1>
    17d0:	20 93 9b 00 	sts	0x009B, r18	; 0x80009b <__brkval>
    17d4:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    17d8:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    17dc:	21 15       	cp	r18, r1
    17de:	31 05       	cpc	r19, r1
    17e0:	41 f4       	brne	.+16     	; 0x17f2 <malloc+0xea>
    17e2:	2d b7       	in	r18, 0x3d	; 61
    17e4:	3e b7       	in	r19, 0x3e	; 62
    17e6:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    17ea:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    17ee:	24 1b       	sub	r18, r20
    17f0:	35 0b       	sbc	r19, r21
    17f2:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <__brkval>
    17f6:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <__brkval+0x1>
    17fa:	e2 17       	cp	r30, r18
    17fc:	f3 07       	cpc	r31, r19
    17fe:	a0 f4       	brcc	.+40     	; 0x1828 <malloc+0x120>
    1800:	2e 1b       	sub	r18, r30
    1802:	3f 0b       	sbc	r19, r31
    1804:	28 17       	cp	r18, r24
    1806:	39 07       	cpc	r19, r25
    1808:	78 f0       	brcs	.+30     	; 0x1828 <malloc+0x120>
    180a:	ac 01       	movw	r20, r24
    180c:	4e 5f       	subi	r20, 0xFE	; 254
    180e:	5f 4f       	sbci	r21, 0xFF	; 255
    1810:	24 17       	cp	r18, r20
    1812:	35 07       	cpc	r19, r21
    1814:	48 f0       	brcs	.+18     	; 0x1828 <malloc+0x120>
    1816:	4e 0f       	add	r20, r30
    1818:	5f 1f       	adc	r21, r31
    181a:	50 93 9c 00 	sts	0x009C, r21	; 0x80009c <__brkval+0x1>
    181e:	40 93 9b 00 	sts	0x009B, r20	; 0x80009b <__brkval>
    1822:	81 93       	st	Z+, r24
    1824:	91 93       	st	Z+, r25
    1826:	02 c0       	rjmp	.+4      	; 0x182c <malloc+0x124>
    1828:	e0 e0       	ldi	r30, 0x00	; 0
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	cf 01       	movw	r24, r30
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	08 95       	ret

00001838 <free>:
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	09 f4       	brne	.+2      	; 0x1842 <free+0xa>
    1840:	81 c0       	rjmp	.+258    	; 0x1944 <free+0x10c>
    1842:	fc 01       	movw	r30, r24
    1844:	32 97       	sbiw	r30, 0x02	; 2
    1846:	13 82       	std	Z+3, r1	; 0x03
    1848:	12 82       	std	Z+2, r1	; 0x02
    184a:	a0 91 9d 00 	lds	r26, 0x009D	; 0x80009d <__flp>
    184e:	b0 91 9e 00 	lds	r27, 0x009E	; 0x80009e <__flp+0x1>
    1852:	10 97       	sbiw	r26, 0x00	; 0
    1854:	81 f4       	brne	.+32     	; 0x1876 <free+0x3e>
    1856:	20 81       	ld	r18, Z
    1858:	31 81       	ldd	r19, Z+1	; 0x01
    185a:	82 0f       	add	r24, r18
    185c:	93 1f       	adc	r25, r19
    185e:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__brkval>
    1862:	30 91 9c 00 	lds	r19, 0x009C	; 0x80009c <__brkval+0x1>
    1866:	28 17       	cp	r18, r24
    1868:	39 07       	cpc	r19, r25
    186a:	51 f5       	brne	.+84     	; 0x18c0 <free+0x88>
    186c:	f0 93 9c 00 	sts	0x009C, r31	; 0x80009c <__brkval+0x1>
    1870:	e0 93 9b 00 	sts	0x009B, r30	; 0x80009b <__brkval>
    1874:	67 c0       	rjmp	.+206    	; 0x1944 <free+0x10c>
    1876:	ed 01       	movw	r28, r26
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	ce 17       	cp	r28, r30
    187e:	df 07       	cpc	r29, r31
    1880:	40 f4       	brcc	.+16     	; 0x1892 <free+0x5a>
    1882:	4a 81       	ldd	r20, Y+2	; 0x02
    1884:	5b 81       	ldd	r21, Y+3	; 0x03
    1886:	9e 01       	movw	r18, r28
    1888:	41 15       	cp	r20, r1
    188a:	51 05       	cpc	r21, r1
    188c:	f1 f0       	breq	.+60     	; 0x18ca <free+0x92>
    188e:	ea 01       	movw	r28, r20
    1890:	f5 cf       	rjmp	.-22     	; 0x187c <free+0x44>
    1892:	d3 83       	std	Z+3, r29	; 0x03
    1894:	c2 83       	std	Z+2, r28	; 0x02
    1896:	40 81       	ld	r20, Z
    1898:	51 81       	ldd	r21, Z+1	; 0x01
    189a:	84 0f       	add	r24, r20
    189c:	95 1f       	adc	r25, r21
    189e:	c8 17       	cp	r28, r24
    18a0:	d9 07       	cpc	r29, r25
    18a2:	59 f4       	brne	.+22     	; 0x18ba <free+0x82>
    18a4:	88 81       	ld	r24, Y
    18a6:	99 81       	ldd	r25, Y+1	; 0x01
    18a8:	84 0f       	add	r24, r20
    18aa:	95 1f       	adc	r25, r21
    18ac:	02 96       	adiw	r24, 0x02	; 2
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	80 83       	st	Z, r24
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	9b 81       	ldd	r25, Y+3	; 0x03
    18b6:	93 83       	std	Z+3, r25	; 0x03
    18b8:	82 83       	std	Z+2, r24	; 0x02
    18ba:	21 15       	cp	r18, r1
    18bc:	31 05       	cpc	r19, r1
    18be:	29 f4       	brne	.+10     	; 0x18ca <free+0x92>
    18c0:	f0 93 9e 00 	sts	0x009E, r31	; 0x80009e <__flp+0x1>
    18c4:	e0 93 9d 00 	sts	0x009D, r30	; 0x80009d <__flp>
    18c8:	3d c0       	rjmp	.+122    	; 0x1944 <free+0x10c>
    18ca:	e9 01       	movw	r28, r18
    18cc:	fb 83       	std	Y+3, r31	; 0x03
    18ce:	ea 83       	std	Y+2, r30	; 0x02
    18d0:	49 91       	ld	r20, Y+
    18d2:	59 91       	ld	r21, Y+
    18d4:	c4 0f       	add	r28, r20
    18d6:	d5 1f       	adc	r29, r21
    18d8:	ec 17       	cp	r30, r28
    18da:	fd 07       	cpc	r31, r29
    18dc:	61 f4       	brne	.+24     	; 0x18f6 <free+0xbe>
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	84 0f       	add	r24, r20
    18e4:	95 1f       	adc	r25, r21
    18e6:	02 96       	adiw	r24, 0x02	; 2
    18e8:	e9 01       	movw	r28, r18
    18ea:	99 83       	std	Y+1, r25	; 0x01
    18ec:	88 83       	st	Y, r24
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	9b 83       	std	Y+3, r25	; 0x03
    18f4:	8a 83       	std	Y+2, r24	; 0x02
    18f6:	e0 e0       	ldi	r30, 0x00	; 0
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	12 96       	adiw	r26, 0x02	; 2
    18fc:	8d 91       	ld	r24, X+
    18fe:	9c 91       	ld	r25, X
    1900:	13 97       	sbiw	r26, 0x03	; 3
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	19 f0       	breq	.+6      	; 0x190c <free+0xd4>
    1906:	fd 01       	movw	r30, r26
    1908:	dc 01       	movw	r26, r24
    190a:	f7 cf       	rjmp	.-18     	; 0x18fa <free+0xc2>
    190c:	8d 91       	ld	r24, X+
    190e:	9c 91       	ld	r25, X
    1910:	11 97       	sbiw	r26, 0x01	; 1
    1912:	9d 01       	movw	r18, r26
    1914:	2e 5f       	subi	r18, 0xFE	; 254
    1916:	3f 4f       	sbci	r19, 0xFF	; 255
    1918:	82 0f       	add	r24, r18
    191a:	93 1f       	adc	r25, r19
    191c:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__brkval>
    1920:	30 91 9c 00 	lds	r19, 0x009C	; 0x80009c <__brkval+0x1>
    1924:	28 17       	cp	r18, r24
    1926:	39 07       	cpc	r19, r25
    1928:	69 f4       	brne	.+26     	; 0x1944 <free+0x10c>
    192a:	30 97       	sbiw	r30, 0x00	; 0
    192c:	29 f4       	brne	.+10     	; 0x1938 <free+0x100>
    192e:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__flp+0x1>
    1932:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__flp>
    1936:	02 c0       	rjmp	.+4      	; 0x193c <free+0x104>
    1938:	13 82       	std	Z+3, r1	; 0x03
    193a:	12 82       	std	Z+2, r1	; 0x02
    193c:	b0 93 9c 00 	sts	0x009C, r27	; 0x80009c <__brkval+0x1>
    1940:	a0 93 9b 00 	sts	0x009B, r26	; 0x80009b <__brkval>
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <memcpy>:
    194a:	fb 01       	movw	r30, r22
    194c:	dc 01       	movw	r26, r24
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <memcpy+0xa>
    1950:	01 90       	ld	r0, Z+
    1952:	0d 92       	st	X+, r0
    1954:	41 50       	subi	r20, 0x01	; 1
    1956:	50 40       	sbci	r21, 0x00	; 0
    1958:	d8 f7       	brcc	.-10     	; 0x1950 <memcpy+0x6>
    195a:	08 95       	ret

0000195c <strlcat>:
    195c:	dc 01       	movw	r26, r24
    195e:	fb 01       	movw	r30, r22
    1960:	41 50       	subi	r20, 0x01	; 1
    1962:	50 40       	sbci	r21, 0x00	; 0
    1964:	70 f0       	brcs	.+28     	; 0x1982 <strlcat+0x26>
    1966:	0d 90       	ld	r0, X+
    1968:	00 20       	and	r0, r0
    196a:	d1 f7       	brne	.-12     	; 0x1960 <strlcat+0x4>
    196c:	11 97       	sbiw	r26, 0x01	; 1
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <strlcat+0x1c>
    1970:	01 90       	ld	r0, Z+
    1972:	0d 92       	st	X+, r0
    1974:	00 20       	and	r0, r0
    1976:	61 f0       	breq	.+24     	; 0x1990 <strlcat+0x34>
    1978:	41 50       	subi	r20, 0x01	; 1
    197a:	50 40       	sbci	r21, 0x00	; 0
    197c:	c8 f7       	brcc	.-14     	; 0x1970 <strlcat+0x14>
    197e:	1c 92       	st	X, r1
    1980:	bf 01       	movw	r22, r30
    1982:	01 90       	ld	r0, Z+
    1984:	00 20       	and	r0, r0
    1986:	e9 f7       	brne	.-6      	; 0x1982 <strlcat+0x26>
    1988:	e6 1b       	sub	r30, r22
    198a:	f7 0b       	sbc	r31, r23
    198c:	ae 0f       	add	r26, r30
    198e:	bf 1f       	adc	r27, r31
    1990:	08 94       	sec
    1992:	a8 0b       	sbc	r26, r24
    1994:	b9 0b       	sbc	r27, r25
    1996:	cd 01       	movw	r24, r26
    1998:	08 95       	ret

0000199a <strlcpy>:
    199a:	dc 01       	movw	r26, r24
    199c:	fb 01       	movw	r30, r22
    199e:	41 50       	subi	r20, 0x01	; 1
    19a0:	50 40       	sbci	r21, 0x00	; 0
    19a2:	58 f0       	brcs	.+22     	; 0x19ba <strlcpy+0x20>
    19a4:	49 f0       	breq	.+18     	; 0x19b8 <strlcpy+0x1e>
    19a6:	01 90       	ld	r0, Z+
    19a8:	0d 92       	st	X+, r0
    19aa:	00 20       	and	r0, r0
    19ac:	c1 f7       	brne	.-16     	; 0x199e <strlcpy+0x4>
    19ae:	e6 1b       	sub	r30, r22
    19b0:	f7 0b       	sbc	r31, r23
    19b2:	31 97       	sbiw	r30, 0x01	; 1
    19b4:	cf 01       	movw	r24, r30
    19b6:	08 95       	ret
    19b8:	1c 92       	st	X, r1
    19ba:	01 90       	ld	r0, Z+
    19bc:	00 20       	and	r0, r0
    19be:	e9 f7       	brne	.-6      	; 0x19ba <strlcpy+0x20>
    19c0:	f6 cf       	rjmp	.-20     	; 0x19ae <strlcpy+0x14>

000019c2 <_exit>:
    19c2:	f8 94       	cli

000019c4 <__stop_program>:
    19c4:	ff cf       	rjmp	.-2      	; 0x19c4 <__stop_program>
