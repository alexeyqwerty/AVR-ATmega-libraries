
MCP4921_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000e80  00000f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  0080007a  0080007a  00000f2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c54  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001133  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f46  00000000  00000000  00004f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  00005e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b34  00000000  00000000  000064bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000159b  00000000  00000000  00006ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000858b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	55 c1       	rjmp	.+682    	; 0x2bc <__vector_8>
  12:	97 c1       	rjmp	.+814    	; 0x342 <__vector_9>
  14:	bd c1       	rjmp	.+890    	; 0x390 <__vector_10>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
  26:	0c 02       	muls	r16, r28

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf e5       	ldi	r28, 0x5F	; 95
  2e:	d4 e0       	ldi	r29, 0x04	; 4
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a0 e6       	ldi	r26, 0x60	; 96
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	e0 e8       	ldi	r30, 0x80	; 128
  3c:	fe e0       	ldi	r31, 0x0E	; 14
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	aa 37       	cpi	r26, 0x7A	; 122
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	aa e7       	ldi	r26, 0x7A	; 122
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a4 39       	cpi	r26, 0x94	; 148
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	c4 e1       	ldi	r28, 0x14	; 20
  5e:	d0 e0       	ldi	r29, 0x00	; 0
  60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
  62:	21 97       	sbiw	r28, 0x01	; 1
  64:	fe 01       	movw	r30, r28
  66:	dd d4       	rcall	.+2490   	; 0xa22 <__tablejump2__>
  68:	c3 31       	cpi	r28, 0x13	; 19
  6a:	d1 07       	cpc	r29, r17
  6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
  6e:	b7 d1       	rcall	.+878    	; 0x3de <main>
  70:	05 c7       	rjmp	.+3594   	; 0xe7c <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_ZN6BufferC1Eh>:
		free((uint8_t*)this->buffer[i]);
	}
	
	free((uint8_t**)this->buffer);
	free((uint8_t*)this->dataSize);
}
  74:	ff 92       	push	r15
  76:	0f 93       	push	r16
  78:	1f 93       	push	r17
  7a:	cf 93       	push	r28
  7c:	df 93       	push	r29
  7e:	8c 01       	movw	r16, r24
  80:	f6 2e       	mov	r15, r22
  82:	fc 01       	movw	r30, r24
  84:	60 83       	st	Z, r22
  86:	15 82       	std	Z+5, r1	; 0x05
  88:	16 82       	std	Z+6, r1	; 0x06
  8a:	17 82       	std	Z+7, r1	; 0x07
  8c:	cf 2d       	mov	r28, r15
  8e:	d0 e0       	ldi	r29, 0x00	; 0
  90:	cc 0f       	add	r28, r28
  92:	dd 1f       	adc	r29, r29
  94:	ce 01       	movw	r24, r28
  96:	cb d4       	rcall	.+2454   	; 0xa2e <malloc>
  98:	f8 01       	movw	r30, r16
  9a:	92 83       	std	Z+2, r25	; 0x02
  9c:	81 83       	std	Z+1, r24	; 0x01
  9e:	00 97       	sbiw	r24, 0x00	; 0
  a0:	a9 f3       	breq	.-22     	; 0x8c <_ZN6BufferC1Eh+0x18>
  a2:	ae 01       	movw	r20, r28
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	ab d6       	rcall	.+3414   	; 0xe00 <memset>
  aa:	f8 01       	movw	r30, r16
  ac:	80 81       	ld	r24, Z
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	be d4       	rcall	.+2428   	; 0xa2e <malloc>
  b2:	f8 01       	movw	r30, r16
  b4:	94 83       	std	Z+4, r25	; 0x04
  b6:	83 83       	std	Z+3, r24	; 0x03
  b8:	89 2b       	or	r24, r25
  ba:	b9 f3       	breq	.-18     	; 0xaa <_ZN6BufferC1Eh+0x36>
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	1f 91       	pop	r17
  c2:	0f 91       	pop	r16
  c4:	ff 90       	pop	r15
  c6:	08 95       	ret

000000c8 <_ZN6Buffer4ReadEv>:
  c8:	fc 01       	movw	r30, r24
  ca:	21 81       	ldd	r18, Z+1	; 0x01
  cc:	32 81       	ldd	r19, Z+2	; 0x02
  ce:	87 81       	ldd	r24, Z+7	; 0x07
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	e2 0f       	add	r30, r18
  da:	f3 1f       	adc	r31, r19
  dc:	80 81       	ld	r24, Z
  de:	91 81       	ldd	r25, Z+1	; 0x01
  e0:	08 95       	ret

000000e2 <_ZN6Buffer9BlockSizeEv>:
  e2:	fc 01       	movw	r30, r24
  e4:	85 81       	ldd	r24, Z+5	; 0x05
  e6:	88 23       	and	r24, r24
  e8:	39 f0       	breq	.+14     	; 0xf8 <_ZN6Buffer9BlockSizeEv+0x16>
  ea:	83 81       	ldd	r24, Z+3	; 0x03
  ec:	94 81       	ldd	r25, Z+4	; 0x04
  ee:	27 81       	ldd	r18, Z+7	; 0x07
  f0:	fc 01       	movw	r30, r24
  f2:	e2 0f       	add	r30, r18
  f4:	f1 1d       	adc	r31, r1
  f6:	80 81       	ld	r24, Z
  f8:	08 95       	ret

000000fa <_ZN6Buffer10ClearBlockEv>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	ec 01       	movw	r28, r24
 100:	29 81       	ldd	r18, Y+1	; 0x01
 102:	3a 81       	ldd	r19, Y+2	; 0x02
 104:	8f 81       	ldd	r24, Y+7	; 0x07
 106:	e8 2f       	mov	r30, r24
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	e2 0f       	add	r30, r18
 110:	f3 1f       	adc	r31, r19
 112:	80 81       	ld	r24, Z
 114:	91 81       	ldd	r25, Z+1	; 0x01
 116:	23 d5       	rcall	.+2630   	; 0xb5e <free>
 118:	8f 81       	ldd	r24, Y+7	; 0x07
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	68 81       	ld	r22, Y
 11e:	75 d4       	rcall	.+2282   	; 0xa0a <__udivmodqi4>
 120:	9f 83       	std	Y+7, r25	; 0x07
 122:	8d 81       	ldd	r24, Y+5	; 0x05
 124:	81 50       	subi	r24, 0x01	; 1
 126:	8d 83       	std	Y+5, r24	; 0x05
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <_ZN6BuffernwEj>:

void* Buffer::operator new(size_t size)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
 134:	ce 01       	movw	r24, r28
 136:	7b d4       	rcall	.+2294   	; 0xa2e <malloc>
	}while(ptr == nullptr);
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	e1 f3       	breq	.-8      	; 0x134 <_ZN6BuffernwEj+0x6>
	
	return ptr;
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <_Z41__static_initialization_and_destruction_0ii>:
		
	while (1)
	{
		
	}
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	09 f0       	breq	.+2      	; 0x150 <_Z41__static_initialization_and_destruction_0ii+0xe>
 14e:	b1 c0       	rjmp	.+354    	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>
 150:	6f 3f       	cpi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	09 f0       	breq	.+2      	; 0x158 <_Z41__static_initialization_and_destruction_0ii+0x16>
 156:	ad c0       	rjmp	.+346    	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>

#include "Port.h"
#include "SPI_Master.h"
#include "MCP4921.h"

Port *sck = new Port(&PORTB, &DDRB, &PINB, 5);
 158:	87 e0       	ldi	r24, 0x07	; 7
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e d3       	rcall	.+1564   	; 0x77a <_ZN4PortnwEj>
 15e:	ec 01       	movw	r28, r24
 160:	05 e0       	ldi	r16, 0x05	; 5
 162:	26 e3       	ldi	r18, 0x36	; 54
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	47 e3       	ldi	r20, 0x37	; 55
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	68 e3       	ldi	r22, 0x38	; 56
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	f3 d2       	rcall	.+1510   	; 0x756 <_ZN4PortC1EPVhS1_S1_h>
 170:	d0 93 8f 00 	sts	0x008F, r29	; 0x80008f <sck+0x1>
 174:	c0 93 8e 00 	sts	0x008E, r28	; 0x80008e <sck>
Port *mosi = new Port(&PORTB, &DDRB, &PINB, 3);
 178:	87 e0       	ldi	r24, 0x07	; 7
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fe d2       	rcall	.+1532   	; 0x77a <_ZN4PortnwEj>
 17e:	ec 01       	movw	r28, r24
 180:	03 e0       	ldi	r16, 0x03	; 3
 182:	26 e3       	ldi	r18, 0x36	; 54
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	47 e3       	ldi	r20, 0x37	; 55
 188:	50 e0       	ldi	r21, 0x00	; 0
 18a:	68 e3       	ldi	r22, 0x38	; 56
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	e3 d2       	rcall	.+1478   	; 0x756 <_ZN4PortC1EPVhS1_S1_h>
 190:	d0 93 8d 00 	sts	0x008D, r29	; 0x80008d <mosi+0x1>
 194:	c0 93 8c 00 	sts	0x008C, r28	; 0x80008c <mosi>
Port *miso = new Port(&PORTB, &DDRB, &PINB, 4);
 198:	87 e0       	ldi	r24, 0x07	; 7
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	ee d2       	rcall	.+1500   	; 0x77a <_ZN4PortnwEj>
 19e:	ec 01       	movw	r28, r24
 1a0:	04 e0       	ldi	r16, 0x04	; 4
 1a2:	26 e3       	ldi	r18, 0x36	; 54
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	47 e3       	ldi	r20, 0x37	; 55
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	68 e3       	ldi	r22, 0x38	; 56
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	d3 d2       	rcall	.+1446   	; 0x756 <_ZN4PortC1EPVhS1_S1_h>
 1b0:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <miso+0x1>
 1b4:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <miso>
Port *ss = new Port(&PORTB, &DDRB, &PINB, 2);
 1b8:	87 e0       	ldi	r24, 0x07	; 7
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	de d2       	rcall	.+1468   	; 0x77a <_ZN4PortnwEj>
 1be:	ec 01       	movw	r28, r24
 1c0:	02 e0       	ldi	r16, 0x02	; 2
 1c2:	26 e3       	ldi	r18, 0x36	; 54
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	47 e3       	ldi	r20, 0x37	; 55
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	68 e3       	ldi	r22, 0x38	; 56
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	c3 d2       	rcall	.+1414   	; 0x756 <_ZN4PortC1EPVhS1_S1_h>
 1d0:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <ss+0x1>
 1d4:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <ss>
	
SPI_Master *spi = new SPI_Master(sck, mosi, miso, ss);
 1d8:	87 e0       	ldi	r24, 0x07	; 7
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	d8 d2       	rcall	.+1456   	; 0x78e <_ZN10SPI_MasternwEj>
 1de:	ec 01       	movw	r28, r24
 1e0:	00 91 88 00 	lds	r16, 0x0088	; 0x800088 <ss>
 1e4:	10 91 89 00 	lds	r17, 0x0089	; 0x800089 <ss+0x1>
 1e8:	20 91 8a 00 	lds	r18, 0x008A	; 0x80008a <miso>
 1ec:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <miso+0x1>
 1f0:	40 91 8c 00 	lds	r20, 0x008C	; 0x80008c <mosi>
 1f4:	50 91 8d 00 	lds	r21, 0x008D	; 0x80008d <mosi+0x1>
 1f8:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <sck>
 1fc:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <sck+0x1>
 200:	de d2       	rcall	.+1468   	; 0x7be <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>
 202:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <spi+0x1>
 206:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <spi>

Port *ldac = new Port(&PORTB, &DDRB, &PINB, 0);
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	b5 d2       	rcall	.+1386   	; 0x77a <_ZN4PortnwEj>
 210:	ec 01       	movw	r28, r24
 212:	00 e0       	ldi	r16, 0x00	; 0
 214:	26 e3       	ldi	r18, 0x36	; 54
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	47 e3       	ldi	r20, 0x37	; 55
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	68 e3       	ldi	r22, 0x38	; 56
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	9a d2       	rcall	.+1332   	; 0x756 <_ZN4PortC1EPVhS1_S1_h>
 222:	d0 93 85 00 	sts	0x0085, r29	; 0x800085 <ldac+0x1>
 226:	c0 93 84 00 	sts	0x0084, r28	; 0x800084 <ldac>
Port *cs_1 = new Port(&PORTB, &DDRB, &PINB, 1);
 22a:	87 e0       	ldi	r24, 0x07	; 7
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	a5 d2       	rcall	.+1354   	; 0x77a <_ZN4PortnwEj>
 230:	ec 01       	movw	r28, r24
 232:	01 e0       	ldi	r16, 0x01	; 1
 234:	26 e3       	ldi	r18, 0x36	; 54
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	47 e3       	ldi	r20, 0x37	; 55
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	68 e3       	ldi	r22, 0x38	; 56
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	8a d2       	rcall	.+1300   	; 0x756 <_ZN4PortC1EPVhS1_S1_h>
 242:	d0 93 83 00 	sts	0x0083, r29	; 0x800083 <cs_1+0x1>
 246:	c0 93 82 00 	sts	0x0082, r28	; 0x800082 <cs_1>
Port *cs_2 = new Port(&PORTB, &DDRB, &PINB, 2);
 24a:	87 e0       	ldi	r24, 0x07	; 7
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	95 d2       	rcall	.+1322   	; 0x77a <_ZN4PortnwEj>
 250:	ec 01       	movw	r28, r24
 252:	02 e0       	ldi	r16, 0x02	; 2
 254:	26 e3       	ldi	r18, 0x36	; 54
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	47 e3       	ldi	r20, 0x37	; 55
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	68 e3       	ldi	r22, 0x38	; 56
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	7a d2       	rcall	.+1268   	; 0x756 <_ZN4PortC1EPVhS1_S1_h>
 262:	d0 93 81 00 	sts	0x0081, r29	; 0x800081 <cs_2+0x1>
 266:	c0 93 80 00 	sts	0x0080, r28	; 0x800080 <cs_2>

MCP4921 *dac_1 = new MCP4921(cs_1, ldac, 5);
 26a:	88 e0       	ldi	r24, 0x08	; 8
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	32 d1       	rcall	.+612    	; 0x4d4 <_ZN7MCP4921nwEj>
 270:	ec 01       	movw	r28, r24
 272:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <ldac>
 276:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <ldac+0x1>
 27a:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <cs_1>
 27e:	70 91 83 00 	lds	r23, 0x0083	; 0x800083 <cs_1+0x1>
 282:	25 e0       	ldi	r18, 0x05	; 5
 284:	f6 d0       	rcall	.+492    	; 0x472 <_ZN7MCP4921C1EP4PortS1_h>
 286:	d0 93 7f 00 	sts	0x007F, r29	; 0x80007f <dac_1+0x1>
 28a:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <dac_1>
MCP4921 *dac_2 = new MCP4921(cs_2, ldac, 5);
 28e:	88 e0       	ldi	r24, 0x08	; 8
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	20 d1       	rcall	.+576    	; 0x4d4 <_ZN7MCP4921nwEj>
 294:	ec 01       	movw	r28, r24
 296:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <ldac>
 29a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <ldac+0x1>
 29e:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <cs_2>
 2a2:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <cs_2+0x1>
 2a6:	25 e0       	ldi	r18, 0x05	; 5
 2a8:	e4 d0       	rcall	.+456    	; 0x472 <_ZN7MCP4921C1EP4PortS1_h>
 2aa:	d0 93 7d 00 	sts	0x007D, r29	; 0x80007d <dac_2+0x1>
 2ae:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <dac_2>
		
	while (1)
	{
		
	}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	08 95       	ret

000002bc <__vector_8>:

uint16_t data_1 = 0;
uint16_t data_2 = 4096;

ISR(TIMER1_OVF_vect)
{
 2bc:	1f 92       	push	r1
 2be:	0f 92       	push	r0
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	0f 92       	push	r0
 2c4:	11 24       	eor	r1, r1
 2c6:	2f 93       	push	r18
 2c8:	3f 93       	push	r19
 2ca:	4f 93       	push	r20
 2cc:	5f 93       	push	r21
 2ce:	6f 93       	push	r22
 2d0:	7f 93       	push	r23
 2d2:	8f 93       	push	r24
 2d4:	9f 93       	push	r25
 2d6:	af 93       	push	r26
 2d8:	bf 93       	push	r27
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
	data_1++;
 2de:	60 91 7a 00 	lds	r22, 0x007A	; 0x80007a <__data_end>
 2e2:	70 91 7b 00 	lds	r23, 0x007B	; 0x80007b <__data_end+0x1>
 2e6:	6f 5f       	subi	r22, 0xFF	; 255
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	70 93 7b 00 	sts	0x007B, r23	; 0x80007b <__data_end+0x1>
 2ee:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__data_end>
	data_2--;
 2f2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <data_2>
 2f6:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <data_2+0x1>
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <data_2+0x1>
 300:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <data_2>
	
	dac_1->SetOutput(data_1);
 304:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <dac_1>
 308:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <dac_1+0x1>
 30c:	ae d1       	rcall	.+860    	; 0x66a <_ZN7MCP49219SetOutputEj>
	dac_2->SetOutput(data_2);
 30e:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <data_2>
 312:	70 91 67 00 	lds	r23, 0x0067	; 0x800067 <data_2+0x1>
 316:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <dac_2>
 31a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <dac_2+0x1>
 31e:	a5 d1       	rcall	.+842    	; 0x66a <_ZN7MCP49219SetOutputEj>
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	2f 93       	push	r18
 34e:	3f 93       	push	r19
 350:	4f 93       	push	r20
 352:	5f 93       	push	r21
 354:	6f 93       	push	r22
 356:	7f 93       	push	r23
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
 35c:	af 93       	push	r26
 35e:	bf 93       	push	r27
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	spi->CheckDevices();
 364:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <spi>
 368:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <spi+0x1>
 36c:	d3 d2       	rcall	.+1446   	; 0x914 <_ZN10SPI_Master12CheckDevicesEv>
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <__vector_10>:


ISR(SPI_STC_vect)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	3f 93       	push	r19
 39e:	4f 93       	push	r20
 3a0:	5f 93       	push	r21
 3a2:	6f 93       	push	r22
 3a4:	7f 93       	push	r23
 3a6:	8f 93       	push	r24
 3a8:	9f 93       	push	r25
 3aa:	af 93       	push	r26
 3ac:	bf 93       	push	r27
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
	spi->NextOperation();
 3b2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <spi>
 3b6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <spi+0x1>
 3ba:	81 d2       	rcall	.+1282   	; 0x8be <_ZN10SPI_Master13NextOperationEv>
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	bf 91       	pop	r27
 3c2:	af 91       	pop	r26
 3c4:	9f 91       	pop	r25
 3c6:	8f 91       	pop	r24
 3c8:	7f 91       	pop	r23
 3ca:	6f 91       	pop	r22
 3cc:	5f 91       	pop	r21
 3ce:	4f 91       	pop	r20
 3d0:	3f 91       	pop	r19
 3d2:	2f 91       	pop	r18
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <main>:

int main(void)
{	
	//T0
	TCCR0|=(1<<CS02)|(1<<CS00);	//prescaler 1024
 3de:	83 b7       	in	r24, 0x33	; 51
 3e0:	85 60       	ori	r24, 0x05	; 5
 3e2:	83 bf       	out	0x33, r24	; 51
	TCCR1B|=(1<<CS11)|(1<<CS10);
 3e4:	8e b5       	in	r24, 0x2e	; 46
 3e6:	83 60       	ori	r24, 0x03	; 3
 3e8:	8e bd       	out	0x2e, r24	; 46
	TIMSK|=(1<<TOIE0)|(1<<TOIE1);			//enable interrupt OVF
 3ea:	89 b7       	in	r24, 0x39	; 57
 3ec:	85 60       	ori	r24, 0x05	; 5
 3ee:	89 bf       	out	0x39, r24	; 57
		
	spi->AddDevice(dac_1);	
 3f0:	60 91 7e 00 	lds	r22, 0x007E	; 0x80007e <dac_1>
 3f4:	70 91 7f 00 	lds	r23, 0x007F	; 0x80007f <dac_1+0x1>
 3f8:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <spi>
 3fc:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <spi+0x1>
 400:	42 d2       	rcall	.+1156   	; 0x886 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	spi->AddDevice(dac_2);
 402:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <dac_2>
 406:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <dac_2+0x1>
 40a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <spi>
 40e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <spi+0x1>
 412:	39 d2       	rcall	.+1138   	; 0x886 <_ZN10SPI_Master9AddDeviceEP4ISPI>
	
	sei();	
 414:	78 94       	sei
 416:	ff cf       	rjmp	.-2      	; 0x416 <__DATA_REGION_LENGTH__+0x16>

00000418 <_GLOBAL__sub_I_sck>:
		
	while (1)
	{
		
	}
 418:	6f ef       	ldi	r22, 0xFF	; 255
 41a:	7f ef       	ldi	r23, 0xFF	; 255
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	90 de       	rcall	.-736    	; 0x142 <_Z41__static_initialization_and_destruction_0ii>
 422:	08 95       	ret

00000424 <_ZN7MCP49218PolarityEv>:
	return ptr;
}

void MCP4921::operator delete(void* ptr)
{
	free(ptr);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret

00000428 <_ZN7MCP49215PhaseEv>:
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	08 95       	ret

0000042c <_ZN7MCP49219DataOrderEv>:
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret

00000430 <_ZN7MCP49218DataSizeEv>:
 430:	fc 01       	movw	r30, r24
 432:	86 81       	ldd	r24, Z+6	; 0x06
 434:	97 81       	ldd	r25, Z+7	; 0x07
 436:	55 de       	rcall	.-854    	; 0xe2 <_ZN6Buffer9BlockSizeEv>
 438:	08 95       	ret

0000043a <_ZN7MCP49214DataEv>:
 43a:	fc 01       	movw	r30, r24
 43c:	86 81       	ldd	r24, Z+6	; 0x06
 43e:	97 81       	ldd	r25, Z+7	; 0x07
 440:	43 de       	rcall	.-890    	; 0xc8 <_ZN6Buffer4ReadEv>
 442:	08 95       	ret

00000444 <_ZN7MCP49215StartEv>:
 444:	fc 01       	movw	r30, r24
 446:	82 81       	ldd	r24, Z+2	; 0x02
 448:	93 81       	ldd	r25, Z+3	; 0x03
 44a:	71 d1       	rcall	.+738    	; 0x72e <_ZN4Port5ClearEv>
 44c:	08 95       	ret

0000044e <_ZN7MCP49216FinishEv>:
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ec 01       	movw	r28, r24
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	9b 81       	ldd	r25, Y+3	; 0x03
 458:	58 d1       	rcall	.+688    	; 0x70a <_ZN4Port3SetEv>
 45a:	8c 81       	ldd	r24, Y+4	; 0x04
 45c:	9d 81       	ldd	r25, Y+5	; 0x05
 45e:	67 d1       	rcall	.+718    	; 0x72e <_ZN4Port5ClearEv>
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	9d 81       	ldd	r25, Y+5	; 0x05
 464:	52 d1       	rcall	.+676    	; 0x70a <_ZN4Port3SetEv>
 466:	8e 81       	ldd	r24, Y+6	; 0x06
 468:	9f 81       	ldd	r25, Y+7	; 0x07
 46a:	47 de       	rcall	.-882    	; 0xfa <_ZN6Buffer10ClearBlockEv>
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <_ZN7MCP4921C1EP4PortS1_h>:
 472:	bf 92       	push	r11
 474:	cf 92       	push	r12
 476:	df 92       	push	r13
 478:	ef 92       	push	r14
 47a:	ff 92       	push	r15
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	ec 01       	movw	r28, r24
 486:	7b 01       	movw	r14, r22
 488:	8a 01       	movw	r16, r20
 48a:	b2 2e       	mov	r11, r18
 48c:	8c e6       	ldi	r24, 0x6C	; 108
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	99 83       	std	Y+1, r25	; 0x01
 492:	88 83       	st	Y, r24
 494:	88 e0       	ldi	r24, 0x08	; 8
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	4a de       	rcall	.-876    	; 0x12e <_ZN6BuffernwEj>
 49a:	6c 01       	movw	r12, r24
 49c:	6b 2d       	mov	r22, r11
 49e:	ea dd       	rcall	.-1068   	; 0x74 <_ZN6BufferC1Eh>
 4a0:	df 82       	std	Y+7, r13	; 0x07
 4a2:	ce 82       	std	Y+6, r12	; 0x06
 4a4:	fb 82       	std	Y+3, r15	; 0x03
 4a6:	ea 82       	std	Y+2, r14	; 0x02
 4a8:	c7 01       	movw	r24, r14
 4aa:	1c d1       	rcall	.+568    	; 0x6e4 <_ZN4Port11SetAsOutputEv>
 4ac:	8a 81       	ldd	r24, Y+2	; 0x02
 4ae:	9b 81       	ldd	r25, Y+3	; 0x03
 4b0:	2c d1       	rcall	.+600    	; 0x70a <_ZN4Port3SetEv>
 4b2:	1d 83       	std	Y+5, r17	; 0x05
 4b4:	0c 83       	std	Y+4, r16	; 0x04
 4b6:	c8 01       	movw	r24, r16
 4b8:	15 d1       	rcall	.+554    	; 0x6e4 <_ZN4Port11SetAsOutputEv>
 4ba:	8c 81       	ldd	r24, Y+4	; 0x04
 4bc:	9d 81       	ldd	r25, Y+5	; 0x05
 4be:	25 d1       	rcall	.+586    	; 0x70a <_ZN4Port3SetEv>
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	df 90       	pop	r13
 4ce:	cf 90       	pop	r12
 4d0:	bf 90       	pop	r11
 4d2:	08 95       	ret

000004d4 <_ZN7MCP4921nwEj>:
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	ec 01       	movw	r28, r24
 4da:	ce 01       	movw	r24, r28
 4dc:	a8 d2       	rcall	.+1360   	; 0xa2e <malloc>
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	e1 f3       	breq	.-8      	; 0x4da <_ZN7MCP4921nwEj+0x6>
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	08 95       	ret

000004e8 <_ZN6Buffer5WriteIhEEvRT_h>:
	uint8_t writePtr;
	uint8_t readPtr;
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
 4e8:	bf 92       	push	r11
 4ea:	cf 92       	push	r12
 4ec:	df 92       	push	r13
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	8c 01       	movw	r16, r24
 4fc:	7b 01       	movw	r14, r22
 4fe:	b4 2e       	mov	r11, r20
{	
	do 
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
 500:	d8 01       	movw	r26, r16
 502:	16 96       	adiw	r26, 0x06	; 6
 504:	cc 91       	ld	r28, X
 506:	16 97       	sbiw	r26, 0x06	; 6
 508:	d0 e0       	ldi	r29, 0x00	; 0
 50a:	cc 0f       	add	r28, r28
 50c:	dd 1f       	adc	r29, r29
 50e:	11 96       	adiw	r26, 0x01	; 1
 510:	8d 91       	ld	r24, X+
 512:	9c 91       	ld	r25, X
 514:	12 97       	sbiw	r26, 0x02	; 2
 516:	c8 0f       	add	r28, r24
 518:	d9 1f       	adc	r29, r25
 51a:	cb 2c       	mov	r12, r11
 51c:	d1 2c       	mov	r13, r1
 51e:	c6 01       	movw	r24, r12
 520:	86 d2       	rcall	.+1292   	; 0xa2e <malloc>
 522:	99 83       	std	Y+1, r25	; 0x01
 524:	88 83       	st	Y, r24
	} while (this->buffer[this->writePtr] == nullptr);
 526:	f8 01       	movw	r30, r16
 528:	86 81       	ldd	r24, Z+6	; 0x06
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	9c 01       	movw	r18, r24
 52e:	22 0f       	add	r18, r18
 530:	33 1f       	adc	r19, r19
 532:	01 80       	ldd	r0, Z+1	; 0x01
 534:	f2 81       	ldd	r31, Z+2	; 0x02
 536:	e0 2d       	mov	r30, r0
 538:	e2 0f       	add	r30, r18
 53a:	f3 1f       	adc	r31, r19
 53c:	20 81       	ld	r18, Z
 53e:	31 81       	ldd	r19, Z+1	; 0x01
}; 

template <typename T>
void Buffer::Write(T &data, uint8_t dataSize)
{	
	do 
 540:	23 2b       	or	r18, r19
 542:	f1 f2       	breq	.-68     	; 0x500 <_ZN6Buffer5WriteIhEEvRT_h+0x18>
	{
		this->buffer[this->writePtr] = (uint8_t *)malloc(dataSize);
	} while (this->buffer[this->writePtr] == nullptr);
	
	this->dataSize[this->writePtr] = dataSize;	
 544:	d8 01       	movw	r26, r16
 546:	13 96       	adiw	r26, 0x03	; 3
 548:	2d 91       	ld	r18, X+
 54a:	3c 91       	ld	r19, X
 54c:	14 97       	sbiw	r26, 0x04	; 4
 54e:	f9 01       	movw	r30, r18
 550:	e8 0f       	add	r30, r24
 552:	f9 1f       	adc	r31, r25
 554:	b0 82       	st	Z, r11
	
	memcpy(this->buffer[this->writePtr], &data, dataSize);
 556:	16 96       	adiw	r26, 0x06	; 6
 558:	ec 91       	ld	r30, X
 55a:	16 97       	sbiw	r26, 0x06	; 6
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	11 96       	adiw	r26, 0x01	; 1
 564:	8d 91       	ld	r24, X+
 566:	9c 91       	ld	r25, X
 568:	12 97       	sbiw	r26, 0x02	; 2
 56a:	e8 0f       	add	r30, r24
 56c:	f9 1f       	adc	r31, r25
 56e:	a6 01       	movw	r20, r12
 570:	b7 01       	movw	r22, r14
 572:	80 81       	ld	r24, Z
 574:	91 81       	ldd	r25, Z+1	; 0x01
 576:	3b d4       	rcall	.+2166   	; 0xdee <memcpy>
	
	++this->writePtr %= this->bufferSize;
 578:	f8 01       	movw	r30, r16
 57a:	86 81       	ldd	r24, Z+6	; 0x06
 57c:	8f 5f       	subi	r24, 0xFF	; 255
 57e:	60 81       	ld	r22, Z
 580:	44 d2       	rcall	.+1160   	; 0xa0a <__udivmodqi4>
 582:	96 83       	std	Z+6, r25	; 0x06
	this->bufferCounter++;
 584:	85 81       	ldd	r24, Z+5	; 0x05
 586:	8f 5f       	subi	r24, 0xFF	; 255
 588:	85 83       	std	Z+5, r24	; 0x05
}
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	1f 91       	pop	r17
 590:	0f 91       	pop	r16
 592:	ff 90       	pop	r15
 594:	ef 90       	pop	r14
 596:	df 90       	pop	r13
 598:	cf 90       	pop	r12
 59a:	bf 90       	pop	r11
 59c:	08 95       	ret

0000059e <_ZN6Buffer3AddIhEEvRT_h>:

template <typename T>
void Buffer::Add(T &data, uint8_t dataSize)
 59e:	ef 92       	push	r14
 5a0:	ff 92       	push	r15
 5a2:	0f 93       	push	r16
 5a4:	1f 93       	push	r17
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	ec 01       	movw	r28, r24
 5ac:	8b 01       	movw	r16, r22
 5ae:	e4 2e       	mov	r14, r20
{
	if(this->writePtr == 0) this->writePtr = this->bufferSize - 1;
 5b0:	8e 81       	ldd	r24, Y+6	; 0x06
 5b2:	81 11       	cpse	r24, r1
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <_ZN6Buffer3AddIhEEvRT_h+0x20>
 5b6:	88 81       	ld	r24, Y
 5b8:	81 50       	subi	r24, 0x01	; 1
 5ba:	8e 83       	std	Y+6, r24	; 0x06
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <_ZN6Buffer3AddIhEEvRT_h+0x24>
	else this->writePtr--;	
 5be:	81 50       	subi	r24, 0x01	; 1
 5c0:	8e 83       	std	Y+6, r24	; 0x06
		
	if(this->buffer[this->writePtr] != nullptr)
 5c2:	8e 81       	ldd	r24, Y+6	; 0x06
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	9c 01       	movw	r18, r24
 5c8:	22 0f       	add	r18, r18
 5ca:	33 1f       	adc	r19, r19
 5cc:	e9 81       	ldd	r30, Y+1	; 0x01
 5ce:	fa 81       	ldd	r31, Y+2	; 0x02
 5d0:	e2 0f       	add	r30, r18
 5d2:	f3 1f       	adc	r31, r19
 5d4:	20 81       	ld	r18, Z
 5d6:	31 81       	ldd	r19, Z+1	; 0x01
 5d8:	23 2b       	or	r18, r19
 5da:	d9 f1       	breq	.+118    	; 0x652 <_ZN6Buffer3AddIhEEvRT_h+0xb4>
	{
		uint8_t newDataSize = this->dataSize[this->writePtr] + dataSize;
 5dc:	2b 81       	ldd	r18, Y+3	; 0x03
 5de:	3c 81       	ldd	r19, Y+4	; 0x04
 5e0:	f9 01       	movw	r30, r18
 5e2:	e8 0f       	add	r30, r24
 5e4:	f9 1f       	adc	r31, r25
 5e6:	f0 80       	ld	r15, Z
 5e8:	fe 0c       	add	r15, r14
		
		uint8_t *ptr;
		do 
		{
			ptr = (uint8_t*)realloc(this->buffer[this->writePtr], newDataSize);
 5ea:	6f 2d       	mov	r22, r15
 5ec:	70 e0       	ldi	r23, 0x00	; 0
 5ee:	ee 81       	ldd	r30, Y+6	; 0x06
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	9a 81       	ldd	r25, Y+2	; 0x02
 5fa:	e8 0f       	add	r30, r24
 5fc:	f9 1f       	adc	r31, r25
 5fe:	80 81       	ld	r24, Z
 600:	91 81       	ldd	r25, Z+1	; 0x01
 602:	36 d3       	rcall	.+1644   	; 0xc70 <realloc>
	if(this->buffer[this->writePtr] != nullptr)
	{
		uint8_t newDataSize = this->dataSize[this->writePtr] + dataSize;
		
		uint8_t *ptr;
		do 
 604:	00 97       	sbiw	r24, 0x00	; 0
 606:	89 f3       	breq	.-30     	; 0x5ea <_ZN6Buffer3AddIhEEvRT_h+0x4c>
		{
			ptr = (uint8_t*)realloc(this->buffer[this->writePtr], newDataSize);
		}while(ptr == nullptr);
		
		this->buffer[this->writePtr] = ptr;
 608:	ee 81       	ldd	r30, Y+6	; 0x06
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	ee 0f       	add	r30, r30
 60e:	ff 1f       	adc	r31, r31
 610:	29 81       	ldd	r18, Y+1	; 0x01
 612:	3a 81       	ldd	r19, Y+2	; 0x02
 614:	e2 0f       	add	r30, r18
 616:	f3 1f       	adc	r31, r19
 618:	91 83       	std	Z+1, r25	; 0x01
 61a:	80 83       	st	Z, r24
		
		memcpy(this->buffer[this->writePtr] + this->dataSize[this->writePtr], &data, dataSize);
 61c:	4e 2d       	mov	r20, r14
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	8e 81       	ldd	r24, Y+6	; 0x06
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	eb 81       	ldd	r30, Y+3	; 0x03
 626:	fc 81       	ldd	r31, Y+4	; 0x04
 628:	e8 0f       	add	r30, r24
 62a:	f9 1f       	adc	r31, r25
 62c:	20 81       	ld	r18, Z
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	e9 81       	ldd	r30, Y+1	; 0x01
 634:	fa 81       	ldd	r31, Y+2	; 0x02
 636:	e8 0f       	add	r30, r24
 638:	f9 1f       	adc	r31, r25
 63a:	80 81       	ld	r24, Z
 63c:	91 81       	ldd	r25, Z+1	; 0x01
 63e:	b8 01       	movw	r22, r16
 640:	82 0f       	add	r24, r18
 642:	91 1d       	adc	r25, r1
 644:	d4 d3       	rcall	.+1960   	; 0xdee <memcpy>
		
		this->dataSize[this->writePtr] = newDataSize;
 646:	8e 81       	ldd	r24, Y+6	; 0x06
 648:	eb 81       	ldd	r30, Y+3	; 0x03
 64a:	fc 81       	ldd	r31, Y+4	; 0x04
 64c:	e8 0f       	add	r30, r24
 64e:	f1 1d       	adc	r31, r1
 650:	f0 82       	st	Z, r15
	}
	
	++this->writePtr %= this->bufferSize;
 652:	8e 81       	ldd	r24, Y+6	; 0x06
 654:	8f 5f       	subi	r24, 0xFF	; 255
 656:	68 81       	ld	r22, Y
 658:	d8 d1       	rcall	.+944    	; 0xa0a <__udivmodqi4>
 65a:	9e 83       	std	Y+6, r25	; 0x06
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	08 95       	ret

0000066a <_ZN7MCP49219SetOutputEj>:
	this->LDAC->SetAsOutput();
	this->LDAC->Set();	
}

void MCP4921 ::SetOutput(uint16_t data)
{
 66a:	ef 92       	push	r14
 66c:	ff 92       	push	r15
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	1f 92       	push	r1
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
 67c:	7c 01       	movw	r14, r24
	data &= 0xFFF;
 67e:	8b 01       	movw	r16, r22
 680:	1f 70       	andi	r17, 0x0F	; 15
	
	uint8_t _data = data >> 8;
	_data |= (AB<<7)|(BUF<<6)|(GA<<5)|(SHDN<<4);
 682:	81 2f       	mov	r24, r17
 684:	80 63       	ori	r24, 0x30	; 48
 686:	89 83       	std	Y+1, r24	; 0x01
	
	this->buffer->Write(_data, sizeof(uint8_t));
 688:	41 e0       	ldi	r20, 0x01	; 1
 68a:	be 01       	movw	r22, r28
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	f7 01       	movw	r30, r14
 692:	86 81       	ldd	r24, Z+6	; 0x06
 694:	97 81       	ldd	r25, Z+7	; 0x07
 696:	28 df       	rcall	.-432    	; 0x4e8 <_ZN6Buffer5WriteIhEEvRT_h>
	
	_data = data;
 698:	09 83       	std	Y+1, r16	; 0x01
	
	this->buffer->Add(_data, sizeof(uint8_t));
 69a:	41 e0       	ldi	r20, 0x01	; 1
 69c:	be 01       	movw	r22, r28
 69e:	6f 5f       	subi	r22, 0xFF	; 255
 6a0:	7f 4f       	sbci	r23, 0xFF	; 255
 6a2:	f7 01       	movw	r30, r14
 6a4:	86 81       	ldd	r24, Z+6	; 0x06
 6a6:	97 81       	ldd	r25, Z+7	; 0x07
 6a8:	7a df       	rcall	.-268    	; 0x59e <_ZN6Buffer3AddIhEEvRT_h>
}
 6aa:	0f 90       	pop	r0
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	ff 90       	pop	r15
 6b6:	ef 90       	pop	r14
 6b8:	08 95       	ret

000006ba <_ZN4Port10SetAsInputEv>:
bool Port::IsClear()
{
	return !(*this->PIN & (1<<this->pinNum));
}

Port::~Port(){}
 6ba:	dc 01       	movw	r26, r24
 6bc:	12 96       	adiw	r26, 0x02	; 2
 6be:	ed 91       	ld	r30, X+
 6c0:	fc 91       	ld	r31, X
 6c2:	13 97       	sbiw	r26, 0x03	; 3
 6c4:	40 81       	ld	r20, Z
 6c6:	21 e0       	ldi	r18, 0x01	; 1
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	b9 01       	movw	r22, r18
 6cc:	16 96       	adiw	r26, 0x06	; 6
 6ce:	0c 90       	ld	r0, X
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <_ZN4Port10SetAsInputEv+0x1c>
 6d2:	66 0f       	add	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	0a 94       	dec	r0
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <_ZN4Port10SetAsInputEv+0x18>
 6da:	cb 01       	movw	r24, r22
 6dc:	80 95       	com	r24
 6de:	84 23       	and	r24, r20
 6e0:	80 83       	st	Z, r24
 6e2:	08 95       	ret

000006e4 <_ZN4Port11SetAsOutputEv>:
 6e4:	dc 01       	movw	r26, r24
 6e6:	12 96       	adiw	r26, 0x02	; 2
 6e8:	ed 91       	ld	r30, X+
 6ea:	fc 91       	ld	r31, X
 6ec:	13 97       	sbiw	r26, 0x03	; 3
 6ee:	40 81       	ld	r20, Z
 6f0:	21 e0       	ldi	r18, 0x01	; 1
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	c9 01       	movw	r24, r18
 6f6:	16 96       	adiw	r26, 0x06	; 6
 6f8:	0c 90       	ld	r0, X
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <_ZN4Port11SetAsOutputEv+0x1c>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	0a 94       	dec	r0
 702:	e2 f7       	brpl	.-8      	; 0x6fc <_ZN4Port11SetAsOutputEv+0x18>
 704:	84 2b       	or	r24, r20
 706:	80 83       	st	Z, r24
 708:	08 95       	ret

0000070a <_ZN4Port3SetEv>:
 70a:	dc 01       	movw	r26, r24
 70c:	ed 91       	ld	r30, X+
 70e:	fc 91       	ld	r31, X
 710:	11 97       	sbiw	r26, 0x01	; 1
 712:	40 81       	ld	r20, Z
 714:	21 e0       	ldi	r18, 0x01	; 1
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	c9 01       	movw	r24, r18
 71a:	16 96       	adiw	r26, 0x06	; 6
 71c:	0c 90       	ld	r0, X
 71e:	02 c0       	rjmp	.+4      	; 0x724 <_ZN4Port3SetEv+0x1a>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	0a 94       	dec	r0
 726:	e2 f7       	brpl	.-8      	; 0x720 <_ZN4Port3SetEv+0x16>
 728:	84 2b       	or	r24, r20
 72a:	80 83       	st	Z, r24
 72c:	08 95       	ret

0000072e <_ZN4Port5ClearEv>:
 72e:	dc 01       	movw	r26, r24
 730:	ed 91       	ld	r30, X+
 732:	fc 91       	ld	r31, X
 734:	11 97       	sbiw	r26, 0x01	; 1
 736:	40 81       	ld	r20, Z
 738:	21 e0       	ldi	r18, 0x01	; 1
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	b9 01       	movw	r22, r18
 73e:	16 96       	adiw	r26, 0x06	; 6
 740:	0c 90       	ld	r0, X
 742:	02 c0       	rjmp	.+4      	; 0x748 <_ZN4Port5ClearEv+0x1a>
 744:	66 0f       	add	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	0a 94       	dec	r0
 74a:	e2 f7       	brpl	.-8      	; 0x744 <_ZN4Port5ClearEv+0x16>
 74c:	cb 01       	movw	r24, r22
 74e:	80 95       	com	r24
 750:	84 23       	and	r24, r20
 752:	80 83       	st	Z, r24
 754:	08 95       	ret

00000756 <_ZN4PortC1EPVhS1_S1_h>:
 756:	0f 93       	push	r16
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	ec 01       	movw	r28, r24
 75e:	79 83       	std	Y+1, r23	; 0x01
 760:	68 83       	st	Y, r22
 762:	5b 83       	std	Y+3, r21	; 0x03
 764:	4a 83       	std	Y+2, r20	; 0x02
 766:	3d 83       	std	Y+5, r19	; 0x05
 768:	2c 83       	std	Y+4, r18	; 0x04
 76a:	0e 83       	std	Y+6, r16	; 0x06
 76c:	a6 df       	rcall	.-180    	; 0x6ba <_ZN4Port10SetAsInputEv>
 76e:	ce 01       	movw	r24, r28
 770:	de df       	rcall	.-68     	; 0x72e <_ZN4Port5ClearEv>
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	0f 91       	pop	r16
 778:	08 95       	ret

0000077a <_ZN4PortnwEj>:

void* Port::operator new(size_t size)
{
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
 780:	ce 01       	movw	r24, r28
 782:	55 d1       	rcall	.+682    	; 0xa2e <malloc>
	}while(ptr == nullptr);
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	e1 f3       	breq	.-8      	; 0x780 <_ZN4PortnwEj+0x6>
	
	return ptr;
}
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <_ZN10SPI_MasternwEj>:
	return ptr;
}

void SPI_Master::operator delete(void* ptr)
{
	free(ptr);
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	ec 01       	movw	r28, r24
 794:	ce 01       	movw	r24, r28
 796:	4b d1       	rcall	.+662    	; 0xa2e <malloc>
 798:	00 97       	sbiw	r24, 0x00	; 0
 79a:	e1 f3       	breq	.-8      	; 0x794 <_ZN10SPI_MasternwEj+0x6>
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <_ZN7DevicesI4ISPIEnwEj>:
{
	free((T**)this->devicesList);
}

template <typename T>
void* Devices<T>::operator new(size_t size)
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	ec 01       	movw	r28, r24
{
	void* ptr;
	do
	{
		ptr = malloc(size);
 7a8:	ce 01       	movw	r24, r28
 7aa:	41 d1       	rcall	.+642    	; 0xa2e <malloc>

template <typename T>
void* Devices<T>::operator new(size_t size)
{
	void* ptr;
	do
 7ac:	00 97       	sbiw	r24, 0x00	; 0
 7ae:	e1 f3       	breq	.-8      	; 0x7a8 <_ZN7DevicesI4ISPIEnwEj+0x6>
	{
		ptr = malloc(size);
	}while(ptr == nullptr);
	
	return ptr;
}
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <_ZN7DevicesI4ISPIEC1Ev>:
};

template <typename T>
Devices<T>::Devices()
{
	this->selectedDevice = 0;
 7b6:	fc 01       	movw	r30, r24
 7b8:	12 82       	std	Z+2, r1	; 0x02
	this->devicesQuantity = 0;
 7ba:	13 82       	std	Z+3, r1	; 0x03
 7bc:	08 95       	ret

000007be <_ZN10SPI_MasterC1EP4PortS1_S1_S1_>:
﻿#include "SPI_Master.h"

SPI_Master :: SPI_Master(Port* SCK, Port* MOSI, Port* MISO, Port* SS)
 7be:	8f 92       	push	r8
 7c0:	9f 92       	push	r9
 7c2:	af 92       	push	r10
 7c4:	bf 92       	push	r11
 7c6:	cf 92       	push	r12
 7c8:	df 92       	push	r13
 7ca:	ef 92       	push	r14
 7cc:	ff 92       	push	r15
 7ce:	0f 93       	push	r16
 7d0:	1f 93       	push	r17
 7d2:	cf 93       	push	r28
 7d4:	df 93       	push	r29
 7d6:	ec 01       	movw	r28, r24
 7d8:	6b 01       	movw	r12, r22
 7da:	7a 01       	movw	r14, r20
 7dc:	59 01       	movw	r10, r18
 7de:	48 01       	movw	r8, r16
{	
	this->devices = new Devices<ISPI>();
 7e0:	84 e0       	ldi	r24, 0x04	; 4
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	de df       	rcall	.-68     	; 0x7a2 <_ZN7DevicesI4ISPIEnwEj>
 7e6:	8c 01       	movw	r16, r24
 7e8:	e6 df       	rcall	.-52     	; 0x7b6 <_ZN7DevicesI4ISPIEC1Ev>
 7ea:	1a 83       	std	Y+2, r17	; 0x02
 7ec:	09 83       	std	Y+1, r16	; 0x01
	
	this->spiBusy = false;
 7ee:	18 82       	st	Y, r1
		
	SCK->SetAsOutput();
 7f0:	c6 01       	movw	r24, r12
 7f2:	78 df       	rcall	.-272    	; 0x6e4 <_ZN4Port11SetAsOutputEv>
	SCK->Clear();
 7f4:	c6 01       	movw	r24, r12
 7f6:	9b df       	rcall	.-202    	; 0x72e <_ZN4Port5ClearEv>
	
	MOSI->SetAsOutput();
 7f8:	c7 01       	movw	r24, r14
 7fa:	74 df       	rcall	.-280    	; 0x6e4 <_ZN4Port11SetAsOutputEv>
	MOSI->Clear();
 7fc:	c7 01       	movw	r24, r14
 7fe:	97 df       	rcall	.-210    	; 0x72e <_ZN4Port5ClearEv>
	
	MISO->SetAsInput();
 800:	c5 01       	movw	r24, r10
 802:	5b df       	rcall	.-330    	; 0x6ba <_ZN4Port10SetAsInputEv>
	MISO->Set();	
 804:	c5 01       	movw	r24, r10
 806:	81 df       	rcall	.-254    	; 0x70a <_ZN4Port3SetEv>
	
	SS->SetAsOutput();
 808:	c4 01       	movw	r24, r8
 80a:	6c df       	rcall	.-296    	; 0x6e4 <_ZN4Port11SetAsOutputEv>
	SS->Set();	
 80c:	c4 01       	movw	r24, r8
 80e:	7d df       	rcall	.-262    	; 0x70a <_ZN4Port3SetEv>
	
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPIE)|(1<<SPR1);
 810:	8d b1       	in	r24, 0x0d	; 13
 812:	82 6d       	ori	r24, 0xD2	; 210
 814:	8d b9       	out	0x0d, r24	; 13
}
 816:	df 91       	pop	r29
 818:	cf 91       	pop	r28
 81a:	1f 91       	pop	r17
 81c:	0f 91       	pop	r16
 81e:	ff 90       	pop	r15
 820:	ef 90       	pop	r14
 822:	df 90       	pop	r13
 824:	cf 90       	pop	r12
 826:	bf 90       	pop	r11
 828:	af 90       	pop	r10
 82a:	9f 90       	pop	r9
 82c:	8f 90       	pop	r8
 82e:	08 95       	ret

00000830 <_ZN7DevicesI4ISPIE3AddEPS0_>:
}

template <typename T>
void Devices<T>::Add(T *device)
 830:	ef 92       	push	r14
 832:	ff 92       	push	r15
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	8c 01       	movw	r16, r24
 83e:	7b 01       	movw	r14, r22
{
	this->devicesQuantity++;
 840:	fc 01       	movw	r30, r24
 842:	c3 81       	ldd	r28, Z+3	; 0x03
 844:	cf 5f       	subi	r28, 0xFF	; 255
 846:	c3 83       	std	Z+3, r28	; 0x03
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
 848:	d0 e0       	ldi	r29, 0x00	; 0
 84a:	cc 0f       	add	r28, r28
 84c:	dd 1f       	adc	r29, r29
	
	T **ptr = nullptr;		
	do 
	{
		ptr = (T**)realloc(this->devicesList, newSize);
 84e:	be 01       	movw	r22, r28
 850:	f8 01       	movw	r30, r16
 852:	80 81       	ld	r24, Z
 854:	91 81       	ldd	r25, Z+1	; 0x01
 856:	0c d2       	rcall	.+1048   	; 0xc70 <realloc>
	this->devicesQuantity++;
		
	uint16_t newSize = this->devicesQuantity * sizeof(T*);
	
	T **ptr = nullptr;		
	do 
 858:	00 97       	sbiw	r24, 0x00	; 0
 85a:	c9 f3       	breq	.-14     	; 0x84e <_ZN7DevicesI4ISPIE3AddEPS0_+0x1e>
	{
		ptr = (T**)realloc(this->devicesList, newSize);
	}while (ptr == nullptr);
	
	this->devicesList = ptr;
 85c:	f8 01       	movw	r30, r16
 85e:	91 83       	std	Z+1, r25	; 0x01
 860:	80 83       	st	Z, r24
	
	this->devicesList[this->devicesQuantity - 1] = device;
 862:	23 81       	ldd	r18, Z+3	; 0x03
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	21 50       	subi	r18, 0x01	; 1
 868:	30 48       	sbci	r19, 0x80	; 128
 86a:	22 0f       	add	r18, r18
 86c:	33 1f       	adc	r19, r19
 86e:	fc 01       	movw	r30, r24
 870:	e2 0f       	add	r30, r18
 872:	f3 1f       	adc	r31, r19
 874:	f1 82       	std	Z+1, r15	; 0x01
 876:	e0 82       	st	Z, r14
}
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	1f 91       	pop	r17
 87e:	0f 91       	pop	r16
 880:	ff 90       	pop	r15
 882:	ef 90       	pop	r14
 884:	08 95       	ret

00000886 <_ZN10SPI_Master9AddDeviceEP4ISPI>:

void SPI_Master::AddDevice(ISPI *device)
{
	this->devices->Add(device);
 886:	fc 01       	movw	r30, r24
 888:	81 81       	ldd	r24, Z+1	; 0x01
 88a:	92 81       	ldd	r25, Z+2	; 0x02
 88c:	d1 df       	rcall	.-94     	; 0x830 <_ZN7DevicesI4ISPIE3AddEPS0_>
 88e:	08 95       	ret

00000890 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>:
}

template <typename T>
T* Devices<T>::CurrentDevice()
{
	return this->devicesList[this->selectedDevice];
 890:	dc 01       	movw	r26, r24
 892:	12 96       	adiw	r26, 0x02	; 2
 894:	ec 91       	ld	r30, X
 896:	12 97       	sbiw	r26, 0x02	; 2
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	ee 0f       	add	r30, r30
 89c:	ff 1f       	adc	r31, r31
 89e:	8d 91       	ld	r24, X+
 8a0:	9c 91       	ld	r25, X
 8a2:	e8 0f       	add	r30, r24
 8a4:	f9 1f       	adc	r31, r25
}
 8a6:	80 81       	ld	r24, Z
 8a8:	91 81       	ldd	r25, Z+1	; 0x01
 8aa:	08 95       	ret

000008ac <_ZN7DevicesI4ISPIE4NextEv>:
	
	this->devicesList[this->devicesQuantity - 1] = device;
}

template <typename T>
void Devices<T>::Next()
 8ac:	fc 01       	movw	r30, r24
{
	if(this->devicesQuantity > 0)
 8ae:	63 81       	ldd	r22, Z+3	; 0x03
 8b0:	66 23       	and	r22, r22
 8b2:	21 f0       	breq	.+8      	; 0x8bc <_ZN7DevicesI4ISPIE4NextEv+0x10>
	{
		++this->selectedDevice %= this->devicesQuantity;
 8b4:	82 81       	ldd	r24, Z+2	; 0x02
 8b6:	8f 5f       	subi	r24, 0xFF	; 255
 8b8:	a8 d0       	rcall	.+336    	; 0xa0a <__udivmodqi4>
 8ba:	92 83       	std	Z+2, r25	; 0x02
 8bc:	08 95       	ret

000008be <_ZN10SPI_Master13NextOperationEv>:
}

void SPI_Master::NextOperation()
{
 8be:	cf 93       	push	r28
 8c0:	df 93       	push	r29
 8c2:	fc 01       	movw	r30, r24
	this->data[this->dataCounter++] = SPDR;
 8c4:	a3 81       	ldd	r26, Z+3	; 0x03
 8c6:	b4 81       	ldd	r27, Z+4	; 0x04
 8c8:	86 81       	ldd	r24, Z+6	; 0x06
 8ca:	91 e0       	ldi	r25, 0x01	; 1
 8cc:	98 0f       	add	r25, r24
 8ce:	96 83       	std	Z+6, r25	; 0x06
 8d0:	a8 0f       	add	r26, r24
 8d2:	b1 1d       	adc	r27, r1
 8d4:	8f b1       	in	r24, 0x0f	; 15
 8d6:	8c 93       	st	X, r24
	
	if(this->dataCounter < this->dataSize)
 8d8:	86 81       	ldd	r24, Z+6	; 0x06
 8da:	95 81       	ldd	r25, Z+5	; 0x05
 8dc:	89 17       	cp	r24, r25
 8de:	40 f4       	brcc	.+16     	; 0x8f0 <_ZN10SPI_Master13NextOperationEv+0x32>
	{
		SPDR = this->data[this->dataCounter];
 8e0:	03 80       	ldd	r0, Z+3	; 0x03
 8e2:	f4 81       	ldd	r31, Z+4	; 0x04
 8e4:	e0 2d       	mov	r30, r0
 8e6:	e8 0f       	add	r30, r24
 8e8:	f1 1d       	adc	r31, r1
 8ea:	80 81       	ld	r24, Z
 8ec:	8f b9       	out	0x0f, r24	; 15
 8ee:	0f c0       	rjmp	.+30     	; 0x90e <_ZN10SPI_Master13NextOperationEv+0x50>
 8f0:	ef 01       	movw	r28, r30
	}
	
	else
	{
		this->devices->CurrentDevice()->Finish();
 8f2:	81 81       	ldd	r24, Z+1	; 0x01
 8f4:	92 81       	ldd	r25, Z+2	; 0x02
 8f6:	cc df       	rcall	.-104    	; 0x890 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 8f8:	dc 01       	movw	r26, r24
 8fa:	ed 91       	ld	r30, X+
 8fc:	fc 91       	ld	r31, X
 8fe:	04 84       	ldd	r0, Z+12	; 0x0c
 900:	f5 85       	ldd	r31, Z+13	; 0x0d
 902:	e0 2d       	mov	r30, r0
 904:	09 95       	icall
		
		this->spiBusy = false;
 906:	18 82       	st	Y, r1
		
		this->devices->Next();
 908:	89 81       	ldd	r24, Y+1	; 0x01
 90a:	9a 81       	ldd	r25, Y+2	; 0x02
 90c:	cf df       	rcall	.-98     	; 0x8ac <_ZN7DevicesI4ISPIE4NextEv>
	}
}
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	08 95       	ret

00000914 <_ZN10SPI_Master12CheckDevicesEv>:

void SPI_Master::CheckDevices()
{
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
	if(!this->spiBusy)
 918:	dc 01       	movw	r26, r24
 91a:	2c 91       	ld	r18, X
 91c:	21 11       	cpse	r18, r1
 91e:	72 c0       	rjmp	.+228    	; 0xa04 <_ZN10SPI_Master12CheckDevicesEv+0xf0>
 920:	ec 01       	movw	r28, r24
	{
		this->dataSize = this->devices->CurrentDevice()->DataSize();
 922:	89 81       	ldd	r24, Y+1	; 0x01
 924:	9a 81       	ldd	r25, Y+2	; 0x02
 926:	b4 df       	rcall	.-152    	; 0x890 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 928:	dc 01       	movw	r26, r24
 92a:	ed 91       	ld	r30, X+
 92c:	fc 91       	ld	r31, X
 92e:	06 80       	ldd	r0, Z+6	; 0x06
 930:	f7 81       	ldd	r31, Z+7	; 0x07
 932:	e0 2d       	mov	r30, r0
 934:	09 95       	icall
 936:	8d 83       	std	Y+5, r24	; 0x05
		
		if(this->dataSize > 0)
 938:	88 23       	and	r24, r24
 93a:	09 f4       	brne	.+2      	; 0x93e <_ZN10SPI_Master12CheckDevicesEv+0x2a>
 93c:	60 c0       	rjmp	.+192    	; 0x9fe <_ZN10SPI_Master12CheckDevicesEv+0xea>
		{			
			this->data = this->devices->CurrentDevice()->Data();
 93e:	89 81       	ldd	r24, Y+1	; 0x01
 940:	9a 81       	ldd	r25, Y+2	; 0x02
 942:	a6 df       	rcall	.-180    	; 0x890 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 944:	dc 01       	movw	r26, r24
 946:	ed 91       	ld	r30, X+
 948:	fc 91       	ld	r31, X
 94a:	00 84       	ldd	r0, Z+8	; 0x08
 94c:	f1 85       	ldd	r31, Z+9	; 0x09
 94e:	e0 2d       	mov	r30, r0
 950:	09 95       	icall
 952:	9c 83       	std	Y+4, r25	; 0x04
 954:	8b 83       	std	Y+3, r24	; 0x03
			this->dataCounter = 0;
 956:	1e 82       	std	Y+6, r1	; 0x06
			
			SPI_DataOrder dataOrder = this->devices->CurrentDevice()->DataOrder();
 958:	89 81       	ldd	r24, Y+1	; 0x01
 95a:	9a 81       	ldd	r25, Y+2	; 0x02
 95c:	99 df       	rcall	.-206    	; 0x890 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 95e:	dc 01       	movw	r26, r24
 960:	ed 91       	ld	r30, X+
 962:	fc 91       	ld	r31, X
 964:	04 80       	ldd	r0, Z+4	; 0x04
 966:	f5 81       	ldd	r31, Z+5	; 0x05
 968:	e0 2d       	mov	r30, r0
 96a:	09 95       	icall
			if(dataOrder == SPI_MBF) SPCR &= ~(1<<DORD);
 96c:	81 11       	cpse	r24, r1
 96e:	04 c0       	rjmp	.+8      	; 0x978 <_ZN10SPI_Master12CheckDevicesEv+0x64>
 970:	8d b1       	in	r24, 0x0d	; 13
 972:	8f 7d       	andi	r24, 0xDF	; 223
 974:	8d b9       	out	0x0d, r24	; 13
 976:	05 c0       	rjmp	.+10     	; 0x982 <_ZN10SPI_Master12CheckDevicesEv+0x6e>
			else if(dataOrder == SPI_LBF) SPCR |= (1<<DORD);
 978:	81 30       	cpi	r24, 0x01	; 1
 97a:	19 f4       	brne	.+6      	; 0x982 <_ZN10SPI_Master12CheckDevicesEv+0x6e>
 97c:	8d b1       	in	r24, 0x0d	; 13
 97e:	80 62       	ori	r24, 0x20	; 32
 980:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Phase phase = this->devices->CurrentDevice()->Phase();
 982:	89 81       	ldd	r24, Y+1	; 0x01
 984:	9a 81       	ldd	r25, Y+2	; 0x02
 986:	84 df       	rcall	.-248    	; 0x890 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 988:	dc 01       	movw	r26, r24
 98a:	ed 91       	ld	r30, X+
 98c:	fc 91       	ld	r31, X
 98e:	02 80       	ldd	r0, Z+2	; 0x02
 990:	f3 81       	ldd	r31, Z+3	; 0x03
 992:	e0 2d       	mov	r30, r0
 994:	09 95       	icall
			if(phase == SPI_START) SPCR &= ~(1<<CPHA);
 996:	81 11       	cpse	r24, r1
 998:	04 c0       	rjmp	.+8      	; 0x9a2 <_ZN10SPI_Master12CheckDevicesEv+0x8e>
 99a:	8d b1       	in	r24, 0x0d	; 13
 99c:	8b 7f       	andi	r24, 0xFB	; 251
 99e:	8d b9       	out	0x0d, r24	; 13
 9a0:	05 c0       	rjmp	.+10     	; 0x9ac <_ZN10SPI_Master12CheckDevicesEv+0x98>
			else if(phase == SPI_END) SPCR |= (1<<CPHA);
 9a2:	81 30       	cpi	r24, 0x01	; 1
 9a4:	19 f4       	brne	.+6      	; 0x9ac <_ZN10SPI_Master12CheckDevicesEv+0x98>
 9a6:	8d b1       	in	r24, 0x0d	; 13
 9a8:	84 60       	ori	r24, 0x04	; 4
 9aa:	8d b9       	out	0x0d, r24	; 13
			
			SPI_Polarity polarity = this->devices->CurrentDevice()->Polarity();
 9ac:	89 81       	ldd	r24, Y+1	; 0x01
 9ae:	9a 81       	ldd	r25, Y+2	; 0x02
 9b0:	6f df       	rcall	.-290    	; 0x890 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 9b2:	dc 01       	movw	r26, r24
 9b4:	ed 91       	ld	r30, X+
 9b6:	fc 91       	ld	r31, X
 9b8:	01 90       	ld	r0, Z+
 9ba:	f0 81       	ld	r31, Z
 9bc:	e0 2d       	mov	r30, r0
 9be:	09 95       	icall
			if(polarity == SPI_RISING) SPCR &= ~(1<<CPOL);
 9c0:	81 11       	cpse	r24, r1
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <_ZN10SPI_Master12CheckDevicesEv+0xb8>
 9c4:	8d b1       	in	r24, 0x0d	; 13
 9c6:	87 7f       	andi	r24, 0xF7	; 247
 9c8:	8d b9       	out	0x0d, r24	; 13
 9ca:	05 c0       	rjmp	.+10     	; 0x9d6 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
			else if(polarity == SPI_FALLING) SPCR |= (1<<CPOL);
 9cc:	81 30       	cpi	r24, 0x01	; 1
 9ce:	19 f4       	brne	.+6      	; 0x9d6 <_ZN10SPI_Master12CheckDevicesEv+0xc2>
 9d0:	8d b1       	in	r24, 0x0d	; 13
 9d2:	88 60       	ori	r24, 0x08	; 8
 9d4:	8d b9       	out	0x0d, r24	; 13
			
			this->devices->CurrentDevice()->Start();
 9d6:	89 81       	ldd	r24, Y+1	; 0x01
 9d8:	9a 81       	ldd	r25, Y+2	; 0x02
 9da:	5a df       	rcall	.-332    	; 0x890 <_ZN7DevicesI4ISPIE13CurrentDeviceEv>
 9dc:	dc 01       	movw	r26, r24
 9de:	ed 91       	ld	r30, X+
 9e0:	fc 91       	ld	r31, X
 9e2:	02 84       	ldd	r0, Z+10	; 0x0a
 9e4:	f3 85       	ldd	r31, Z+11	; 0x0b
 9e6:	e0 2d       	mov	r30, r0
 9e8:	09 95       	icall
			
			SPDR = this->data[this->dataCounter];
 9ea:	eb 81       	ldd	r30, Y+3	; 0x03
 9ec:	fc 81       	ldd	r31, Y+4	; 0x04
 9ee:	8e 81       	ldd	r24, Y+6	; 0x06
 9f0:	e8 0f       	add	r30, r24
 9f2:	f1 1d       	adc	r31, r1
 9f4:	80 81       	ld	r24, Z
 9f6:	8f b9       	out	0x0f, r24	; 15
			
			this->spiBusy = true;
 9f8:	81 e0       	ldi	r24, 0x01	; 1
 9fa:	88 83       	st	Y, r24
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <_ZN10SPI_Master12CheckDevicesEv+0xf0>
		}
		
		else this->devices->Next();
 9fe:	89 81       	ldd	r24, Y+1	; 0x01
 a00:	9a 81       	ldd	r25, Y+2	; 0x02
 a02:	54 df       	rcall	.-344    	; 0x8ac <_ZN7DevicesI4ISPIE4NextEv>
	}
}
 a04:	df 91       	pop	r29
 a06:	cf 91       	pop	r28
 a08:	08 95       	ret

00000a0a <__udivmodqi4>:
 a0a:	99 1b       	sub	r25, r25
 a0c:	79 e0       	ldi	r23, 0x09	; 9
 a0e:	04 c0       	rjmp	.+8      	; 0xa18 <__udivmodqi4_ep>

00000a10 <__udivmodqi4_loop>:
 a10:	99 1f       	adc	r25, r25
 a12:	96 17       	cp	r25, r22
 a14:	08 f0       	brcs	.+2      	; 0xa18 <__udivmodqi4_ep>
 a16:	96 1b       	sub	r25, r22

00000a18 <__udivmodqi4_ep>:
 a18:	88 1f       	adc	r24, r24
 a1a:	7a 95       	dec	r23
 a1c:	c9 f7       	brne	.-14     	; 0xa10 <__udivmodqi4_loop>
 a1e:	80 95       	com	r24
 a20:	08 95       	ret

00000a22 <__tablejump2__>:
 a22:	ee 0f       	add	r30, r30
 a24:	ff 1f       	adc	r31, r31
 a26:	05 90       	lpm	r0, Z+
 a28:	f4 91       	lpm	r31, Z
 a2a:	e0 2d       	mov	r30, r0
 a2c:	09 94       	ijmp

00000a2e <malloc>:
 a2e:	0f 93       	push	r16
 a30:	1f 93       	push	r17
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	82 30       	cpi	r24, 0x02	; 2
 a38:	91 05       	cpc	r25, r1
 a3a:	10 f4       	brcc	.+4      	; 0xa40 <malloc+0x12>
 a3c:	82 e0       	ldi	r24, 0x02	; 2
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__flp>
 a44:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <__flp+0x1>
 a48:	20 e0       	ldi	r18, 0x00	; 0
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	a0 e0       	ldi	r26, 0x00	; 0
 a4e:	b0 e0       	ldi	r27, 0x00	; 0
 a50:	30 97       	sbiw	r30, 0x00	; 0
 a52:	19 f1       	breq	.+70     	; 0xa9a <malloc+0x6c>
 a54:	40 81       	ld	r20, Z
 a56:	51 81       	ldd	r21, Z+1	; 0x01
 a58:	02 81       	ldd	r16, Z+2	; 0x02
 a5a:	13 81       	ldd	r17, Z+3	; 0x03
 a5c:	48 17       	cp	r20, r24
 a5e:	59 07       	cpc	r21, r25
 a60:	c8 f0       	brcs	.+50     	; 0xa94 <malloc+0x66>
 a62:	84 17       	cp	r24, r20
 a64:	95 07       	cpc	r25, r21
 a66:	69 f4       	brne	.+26     	; 0xa82 <malloc+0x54>
 a68:	10 97       	sbiw	r26, 0x00	; 0
 a6a:	31 f0       	breq	.+12     	; 0xa78 <malloc+0x4a>
 a6c:	12 96       	adiw	r26, 0x02	; 2
 a6e:	0c 93       	st	X, r16
 a70:	12 97       	sbiw	r26, 0x02	; 2
 a72:	13 96       	adiw	r26, 0x03	; 3
 a74:	1c 93       	st	X, r17
 a76:	27 c0       	rjmp	.+78     	; 0xac6 <malloc+0x98>
 a78:	00 93 92 00 	sts	0x0092, r16	; 0x800092 <__flp>
 a7c:	10 93 93 00 	sts	0x0093, r17	; 0x800093 <__flp+0x1>
 a80:	22 c0       	rjmp	.+68     	; 0xac6 <malloc+0x98>
 a82:	21 15       	cp	r18, r1
 a84:	31 05       	cpc	r19, r1
 a86:	19 f0       	breq	.+6      	; 0xa8e <malloc+0x60>
 a88:	42 17       	cp	r20, r18
 a8a:	53 07       	cpc	r21, r19
 a8c:	18 f4       	brcc	.+6      	; 0xa94 <malloc+0x66>
 a8e:	9a 01       	movw	r18, r20
 a90:	bd 01       	movw	r22, r26
 a92:	ef 01       	movw	r28, r30
 a94:	df 01       	movw	r26, r30
 a96:	f8 01       	movw	r30, r16
 a98:	db cf       	rjmp	.-74     	; 0xa50 <malloc+0x22>
 a9a:	21 15       	cp	r18, r1
 a9c:	31 05       	cpc	r19, r1
 a9e:	f9 f0       	breq	.+62     	; 0xade <malloc+0xb0>
 aa0:	28 1b       	sub	r18, r24
 aa2:	39 0b       	sbc	r19, r25
 aa4:	24 30       	cpi	r18, 0x04	; 4
 aa6:	31 05       	cpc	r19, r1
 aa8:	80 f4       	brcc	.+32     	; 0xaca <malloc+0x9c>
 aaa:	8a 81       	ldd	r24, Y+2	; 0x02
 aac:	9b 81       	ldd	r25, Y+3	; 0x03
 aae:	61 15       	cp	r22, r1
 ab0:	71 05       	cpc	r23, r1
 ab2:	21 f0       	breq	.+8      	; 0xabc <malloc+0x8e>
 ab4:	fb 01       	movw	r30, r22
 ab6:	93 83       	std	Z+3, r25	; 0x03
 ab8:	82 83       	std	Z+2, r24	; 0x02
 aba:	04 c0       	rjmp	.+8      	; 0xac4 <malloc+0x96>
 abc:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__flp+0x1>
 ac0:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__flp>
 ac4:	fe 01       	movw	r30, r28
 ac6:	32 96       	adiw	r30, 0x02	; 2
 ac8:	44 c0       	rjmp	.+136    	; 0xb52 <malloc+0x124>
 aca:	fe 01       	movw	r30, r28
 acc:	e2 0f       	add	r30, r18
 ace:	f3 1f       	adc	r31, r19
 ad0:	81 93       	st	Z+, r24
 ad2:	91 93       	st	Z+, r25
 ad4:	22 50       	subi	r18, 0x02	; 2
 ad6:	31 09       	sbc	r19, r1
 ad8:	39 83       	std	Y+1, r19	; 0x01
 ada:	28 83       	st	Y, r18
 adc:	3a c0       	rjmp	.+116    	; 0xb52 <malloc+0x124>
 ade:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__brkval>
 ae2:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <__brkval+0x1>
 ae6:	23 2b       	or	r18, r19
 ae8:	41 f4       	brne	.+16     	; 0xafa <malloc+0xcc>
 aea:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
 aee:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
 af2:	30 93 91 00 	sts	0x0091, r19	; 0x800091 <__brkval+0x1>
 af6:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__brkval>
 afa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 afe:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
 b02:	21 15       	cp	r18, r1
 b04:	31 05       	cpc	r19, r1
 b06:	41 f4       	brne	.+16     	; 0xb18 <malloc+0xea>
 b08:	2d b7       	in	r18, 0x3d	; 61
 b0a:	3e b7       	in	r19, 0x3e	; 62
 b0c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 b10:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 b14:	24 1b       	sub	r18, r20
 b16:	35 0b       	sbc	r19, r21
 b18:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__brkval>
 b1c:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <__brkval+0x1>
 b20:	e2 17       	cp	r30, r18
 b22:	f3 07       	cpc	r31, r19
 b24:	a0 f4       	brcc	.+40     	; 0xb4e <malloc+0x120>
 b26:	2e 1b       	sub	r18, r30
 b28:	3f 0b       	sbc	r19, r31
 b2a:	28 17       	cp	r18, r24
 b2c:	39 07       	cpc	r19, r25
 b2e:	78 f0       	brcs	.+30     	; 0xb4e <malloc+0x120>
 b30:	ac 01       	movw	r20, r24
 b32:	4e 5f       	subi	r20, 0xFE	; 254
 b34:	5f 4f       	sbci	r21, 0xFF	; 255
 b36:	24 17       	cp	r18, r20
 b38:	35 07       	cpc	r19, r21
 b3a:	48 f0       	brcs	.+18     	; 0xb4e <malloc+0x120>
 b3c:	4e 0f       	add	r20, r30
 b3e:	5f 1f       	adc	r21, r31
 b40:	50 93 91 00 	sts	0x0091, r21	; 0x800091 <__brkval+0x1>
 b44:	40 93 90 00 	sts	0x0090, r20	; 0x800090 <__brkval>
 b48:	81 93       	st	Z+, r24
 b4a:	91 93       	st	Z+, r25
 b4c:	02 c0       	rjmp	.+4      	; 0xb52 <malloc+0x124>
 b4e:	e0 e0       	ldi	r30, 0x00	; 0
 b50:	f0 e0       	ldi	r31, 0x00	; 0
 b52:	cf 01       	movw	r24, r30
 b54:	df 91       	pop	r29
 b56:	cf 91       	pop	r28
 b58:	1f 91       	pop	r17
 b5a:	0f 91       	pop	r16
 b5c:	08 95       	ret

00000b5e <free>:
 b5e:	cf 93       	push	r28
 b60:	df 93       	push	r29
 b62:	00 97       	sbiw	r24, 0x00	; 0
 b64:	09 f4       	brne	.+2      	; 0xb68 <free+0xa>
 b66:	81 c0       	rjmp	.+258    	; 0xc6a <free+0x10c>
 b68:	fc 01       	movw	r30, r24
 b6a:	32 97       	sbiw	r30, 0x02	; 2
 b6c:	13 82       	std	Z+3, r1	; 0x03
 b6e:	12 82       	std	Z+2, r1	; 0x02
 b70:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <__flp>
 b74:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <__flp+0x1>
 b78:	10 97       	sbiw	r26, 0x00	; 0
 b7a:	81 f4       	brne	.+32     	; 0xb9c <free+0x3e>
 b7c:	20 81       	ld	r18, Z
 b7e:	31 81       	ldd	r19, Z+1	; 0x01
 b80:	82 0f       	add	r24, r18
 b82:	93 1f       	adc	r25, r19
 b84:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__brkval>
 b88:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <__brkval+0x1>
 b8c:	28 17       	cp	r18, r24
 b8e:	39 07       	cpc	r19, r25
 b90:	51 f5       	brne	.+84     	; 0xbe6 <free+0x88>
 b92:	f0 93 91 00 	sts	0x0091, r31	; 0x800091 <__brkval+0x1>
 b96:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__brkval>
 b9a:	67 c0       	rjmp	.+206    	; 0xc6a <free+0x10c>
 b9c:	ed 01       	movw	r28, r26
 b9e:	20 e0       	ldi	r18, 0x00	; 0
 ba0:	30 e0       	ldi	r19, 0x00	; 0
 ba2:	ce 17       	cp	r28, r30
 ba4:	df 07       	cpc	r29, r31
 ba6:	40 f4       	brcc	.+16     	; 0xbb8 <free+0x5a>
 ba8:	4a 81       	ldd	r20, Y+2	; 0x02
 baa:	5b 81       	ldd	r21, Y+3	; 0x03
 bac:	9e 01       	movw	r18, r28
 bae:	41 15       	cp	r20, r1
 bb0:	51 05       	cpc	r21, r1
 bb2:	f1 f0       	breq	.+60     	; 0xbf0 <free+0x92>
 bb4:	ea 01       	movw	r28, r20
 bb6:	f5 cf       	rjmp	.-22     	; 0xba2 <free+0x44>
 bb8:	d3 83       	std	Z+3, r29	; 0x03
 bba:	c2 83       	std	Z+2, r28	; 0x02
 bbc:	40 81       	ld	r20, Z
 bbe:	51 81       	ldd	r21, Z+1	; 0x01
 bc0:	84 0f       	add	r24, r20
 bc2:	95 1f       	adc	r25, r21
 bc4:	c8 17       	cp	r28, r24
 bc6:	d9 07       	cpc	r29, r25
 bc8:	59 f4       	brne	.+22     	; 0xbe0 <free+0x82>
 bca:	88 81       	ld	r24, Y
 bcc:	99 81       	ldd	r25, Y+1	; 0x01
 bce:	84 0f       	add	r24, r20
 bd0:	95 1f       	adc	r25, r21
 bd2:	02 96       	adiw	r24, 0x02	; 2
 bd4:	91 83       	std	Z+1, r25	; 0x01
 bd6:	80 83       	st	Z, r24
 bd8:	8a 81       	ldd	r24, Y+2	; 0x02
 bda:	9b 81       	ldd	r25, Y+3	; 0x03
 bdc:	93 83       	std	Z+3, r25	; 0x03
 bde:	82 83       	std	Z+2, r24	; 0x02
 be0:	21 15       	cp	r18, r1
 be2:	31 05       	cpc	r19, r1
 be4:	29 f4       	brne	.+10     	; 0xbf0 <free+0x92>
 be6:	f0 93 93 00 	sts	0x0093, r31	; 0x800093 <__flp+0x1>
 bea:	e0 93 92 00 	sts	0x0092, r30	; 0x800092 <__flp>
 bee:	3d c0       	rjmp	.+122    	; 0xc6a <free+0x10c>
 bf0:	e9 01       	movw	r28, r18
 bf2:	fb 83       	std	Y+3, r31	; 0x03
 bf4:	ea 83       	std	Y+2, r30	; 0x02
 bf6:	49 91       	ld	r20, Y+
 bf8:	59 91       	ld	r21, Y+
 bfa:	c4 0f       	add	r28, r20
 bfc:	d5 1f       	adc	r29, r21
 bfe:	ec 17       	cp	r30, r28
 c00:	fd 07       	cpc	r31, r29
 c02:	61 f4       	brne	.+24     	; 0xc1c <free+0xbe>
 c04:	80 81       	ld	r24, Z
 c06:	91 81       	ldd	r25, Z+1	; 0x01
 c08:	84 0f       	add	r24, r20
 c0a:	95 1f       	adc	r25, r21
 c0c:	02 96       	adiw	r24, 0x02	; 2
 c0e:	e9 01       	movw	r28, r18
 c10:	99 83       	std	Y+1, r25	; 0x01
 c12:	88 83       	st	Y, r24
 c14:	82 81       	ldd	r24, Z+2	; 0x02
 c16:	93 81       	ldd	r25, Z+3	; 0x03
 c18:	9b 83       	std	Y+3, r25	; 0x03
 c1a:	8a 83       	std	Y+2, r24	; 0x02
 c1c:	e0 e0       	ldi	r30, 0x00	; 0
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	12 96       	adiw	r26, 0x02	; 2
 c22:	8d 91       	ld	r24, X+
 c24:	9c 91       	ld	r25, X
 c26:	13 97       	sbiw	r26, 0x03	; 3
 c28:	00 97       	sbiw	r24, 0x00	; 0
 c2a:	19 f0       	breq	.+6      	; 0xc32 <free+0xd4>
 c2c:	fd 01       	movw	r30, r26
 c2e:	dc 01       	movw	r26, r24
 c30:	f7 cf       	rjmp	.-18     	; 0xc20 <free+0xc2>
 c32:	8d 91       	ld	r24, X+
 c34:	9c 91       	ld	r25, X
 c36:	11 97       	sbiw	r26, 0x01	; 1
 c38:	9d 01       	movw	r18, r26
 c3a:	2e 5f       	subi	r18, 0xFE	; 254
 c3c:	3f 4f       	sbci	r19, 0xFF	; 255
 c3e:	82 0f       	add	r24, r18
 c40:	93 1f       	adc	r25, r19
 c42:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__brkval>
 c46:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <__brkval+0x1>
 c4a:	28 17       	cp	r18, r24
 c4c:	39 07       	cpc	r19, r25
 c4e:	69 f4       	brne	.+26     	; 0xc6a <free+0x10c>
 c50:	30 97       	sbiw	r30, 0x00	; 0
 c52:	29 f4       	brne	.+10     	; 0xc5e <free+0x100>
 c54:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__flp+0x1>
 c58:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__flp>
 c5c:	02 c0       	rjmp	.+4      	; 0xc62 <free+0x104>
 c5e:	13 82       	std	Z+3, r1	; 0x03
 c60:	12 82       	std	Z+2, r1	; 0x02
 c62:	b0 93 91 00 	sts	0x0091, r27	; 0x800091 <__brkval+0x1>
 c66:	a0 93 90 00 	sts	0x0090, r26	; 0x800090 <__brkval>
 c6a:	df 91       	pop	r29
 c6c:	cf 91       	pop	r28
 c6e:	08 95       	ret

00000c70 <realloc>:
 c70:	a0 e0       	ldi	r26, 0x00	; 0
 c72:	b0 e0       	ldi	r27, 0x00	; 0
 c74:	ed e3       	ldi	r30, 0x3D	; 61
 c76:	f6 e0       	ldi	r31, 0x06	; 6
 c78:	ce c0       	rjmp	.+412    	; 0xe16 <__prologue_saves__+0x8>
 c7a:	ec 01       	movw	r28, r24
 c7c:	00 97       	sbiw	r24, 0x00	; 0
 c7e:	19 f4       	brne	.+6      	; 0xc86 <realloc+0x16>
 c80:	cb 01       	movw	r24, r22
 c82:	d5 de       	rcall	.-598    	; 0xa2e <malloc>
 c84:	b0 c0       	rjmp	.+352    	; 0xde6 <realloc+0x176>
 c86:	fc 01       	movw	r30, r24
 c88:	e6 0f       	add	r30, r22
 c8a:	f7 1f       	adc	r31, r23
 c8c:	9c 01       	movw	r18, r24
 c8e:	22 50       	subi	r18, 0x02	; 2
 c90:	31 09       	sbc	r19, r1
 c92:	e2 17       	cp	r30, r18
 c94:	f3 07       	cpc	r31, r19
 c96:	08 f4       	brcc	.+2      	; 0xc9a <realloc+0x2a>
 c98:	a4 c0       	rjmp	.+328    	; 0xde2 <realloc+0x172>
 c9a:	d9 01       	movw	r26, r18
 c9c:	0d 91       	ld	r16, X+
 c9e:	1c 91       	ld	r17, X
 ca0:	11 97       	sbiw	r26, 0x01	; 1
 ca2:	06 17       	cp	r16, r22
 ca4:	17 07       	cpc	r17, r23
 ca6:	a8 f0       	brcs	.+42     	; 0xcd2 <realloc+0x62>
 ca8:	05 30       	cpi	r16, 0x05	; 5
 caa:	11 05       	cpc	r17, r1
 cac:	08 f4       	brcc	.+2      	; 0xcb0 <realloc+0x40>
 cae:	97 c0       	rjmp	.+302    	; 0xdde <realloc+0x16e>
 cb0:	c8 01       	movw	r24, r16
 cb2:	04 97       	sbiw	r24, 0x04	; 4
 cb4:	86 17       	cp	r24, r22
 cb6:	97 07       	cpc	r25, r23
 cb8:	08 f4       	brcc	.+2      	; 0xcbc <realloc+0x4c>
 cba:	91 c0       	rjmp	.+290    	; 0xdde <realloc+0x16e>
 cbc:	02 50       	subi	r16, 0x02	; 2
 cbe:	11 09       	sbc	r17, r1
 cc0:	06 1b       	sub	r16, r22
 cc2:	17 0b       	sbc	r17, r23
 cc4:	01 93       	st	Z+, r16
 cc6:	11 93       	st	Z+, r17
 cc8:	6d 93       	st	X+, r22
 cca:	7c 93       	st	X, r23
 ccc:	cf 01       	movw	r24, r30
 cce:	47 df       	rcall	.-370    	; 0xb5e <free>
 cd0:	86 c0       	rjmp	.+268    	; 0xdde <realloc+0x16e>
 cd2:	5b 01       	movw	r10, r22
 cd4:	a0 1a       	sub	r10, r16
 cd6:	b1 0a       	sbc	r11, r17
 cd8:	4c 01       	movw	r8, r24
 cda:	80 0e       	add	r8, r16
 cdc:	91 1e       	adc	r9, r17
 cde:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <__flp>
 ce2:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <__flp+0x1>
 ce6:	61 2c       	mov	r6, r1
 ce8:	71 2c       	mov	r7, r1
 cea:	e1 2c       	mov	r14, r1
 cec:	f1 2c       	mov	r15, r1
 cee:	10 97       	sbiw	r26, 0x00	; 0
 cf0:	09 f4       	brne	.+2      	; 0xcf4 <realloc+0x84>
 cf2:	46 c0       	rjmp	.+140    	; 0xd80 <realloc+0x110>
 cf4:	8d 91       	ld	r24, X+
 cf6:	9c 91       	ld	r25, X
 cf8:	11 97       	sbiw	r26, 0x01	; 1
 cfa:	a8 15       	cp	r26, r8
 cfc:	b9 05       	cpc	r27, r9
 cfe:	b1 f5       	brne	.+108    	; 0xd6c <realloc+0xfc>
 d00:	6c 01       	movw	r12, r24
 d02:	42 e0       	ldi	r20, 0x02	; 2
 d04:	c4 0e       	add	r12, r20
 d06:	d1 1c       	adc	r13, r1
 d08:	ca 14       	cp	r12, r10
 d0a:	db 04       	cpc	r13, r11
 d0c:	78 f1       	brcs	.+94     	; 0xd6c <realloc+0xfc>
 d0e:	4c 01       	movw	r8, r24
 d10:	8a 18       	sub	r8, r10
 d12:	9b 08       	sbc	r9, r11
 d14:	64 01       	movw	r12, r8
 d16:	42 e0       	ldi	r20, 0x02	; 2
 d18:	c4 0e       	add	r12, r20
 d1a:	d1 1c       	adc	r13, r1
 d1c:	12 96       	adiw	r26, 0x02	; 2
 d1e:	bc 90       	ld	r11, X
 d20:	12 97       	sbiw	r26, 0x02	; 2
 d22:	13 96       	adiw	r26, 0x03	; 3
 d24:	ac 91       	ld	r26, X
 d26:	b5 e0       	ldi	r27, 0x05	; 5
 d28:	cb 16       	cp	r12, r27
 d2a:	d1 04       	cpc	r13, r1
 d2c:	40 f0       	brcs	.+16     	; 0xd3e <realloc+0xce>
 d2e:	b2 82       	std	Z+2, r11	; 0x02
 d30:	a3 83       	std	Z+3, r26	; 0x03
 d32:	91 82       	std	Z+1, r9	; 0x01
 d34:	80 82       	st	Z, r8
 d36:	d9 01       	movw	r26, r18
 d38:	6d 93       	st	X+, r22
 d3a:	7c 93       	st	X, r23
 d3c:	09 c0       	rjmp	.+18     	; 0xd50 <realloc+0xe0>
 d3e:	0e 5f       	subi	r16, 0xFE	; 254
 d40:	1f 4f       	sbci	r17, 0xFF	; 255
 d42:	80 0f       	add	r24, r16
 d44:	91 1f       	adc	r25, r17
 d46:	f9 01       	movw	r30, r18
 d48:	91 83       	std	Z+1, r25	; 0x01
 d4a:	80 83       	st	Z, r24
 d4c:	eb 2d       	mov	r30, r11
 d4e:	fa 2f       	mov	r31, r26
 d50:	e1 14       	cp	r14, r1
 d52:	f1 04       	cpc	r15, r1
 d54:	31 f0       	breq	.+12     	; 0xd62 <realloc+0xf2>
 d56:	d7 01       	movw	r26, r14
 d58:	13 96       	adiw	r26, 0x03	; 3
 d5a:	fc 93       	st	X, r31
 d5c:	ee 93       	st	-X, r30
 d5e:	12 97       	sbiw	r26, 0x02	; 2
 d60:	3e c0       	rjmp	.+124    	; 0xdde <realloc+0x16e>
 d62:	f0 93 93 00 	sts	0x0093, r31	; 0x800093 <__flp+0x1>
 d66:	e0 93 92 00 	sts	0x0092, r30	; 0x800092 <__flp>
 d6a:	39 c0       	rjmp	.+114    	; 0xdde <realloc+0x16e>
 d6c:	68 16       	cp	r6, r24
 d6e:	79 06       	cpc	r7, r25
 d70:	08 f4       	brcc	.+2      	; 0xd74 <realloc+0x104>
 d72:	3c 01       	movw	r6, r24
 d74:	7d 01       	movw	r14, r26
 d76:	12 96       	adiw	r26, 0x02	; 2
 d78:	0d 90       	ld	r0, X+
 d7a:	bc 91       	ld	r27, X
 d7c:	a0 2d       	mov	r26, r0
 d7e:	b7 cf       	rjmp	.-146    	; 0xcee <realloc+0x7e>
 d80:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__brkval>
 d84:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <__brkval+0x1>
 d88:	88 16       	cp	r8, r24
 d8a:	99 06       	cpc	r9, r25
 d8c:	e1 f4       	brne	.+56     	; 0xdc6 <realloc+0x156>
 d8e:	66 16       	cp	r6, r22
 d90:	77 06       	cpc	r7, r23
 d92:	c8 f4       	brcc	.+50     	; 0xdc6 <realloc+0x156>
 d94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 d98:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 d9c:	00 97       	sbiw	r24, 0x00	; 0
 d9e:	41 f4       	brne	.+16     	; 0xdb0 <realloc+0x140>
 da0:	8d b7       	in	r24, 0x3d	; 61
 da2:	9e b7       	in	r25, 0x3e	; 62
 da4:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
 da8:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
 dac:	84 1b       	sub	r24, r20
 dae:	95 0b       	sbc	r25, r21
 db0:	e8 17       	cp	r30, r24
 db2:	f9 07       	cpc	r31, r25
 db4:	b0 f4       	brcc	.+44     	; 0xde2 <realloc+0x172>
 db6:	f0 93 91 00 	sts	0x0091, r31	; 0x800091 <__brkval+0x1>
 dba:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__brkval>
 dbe:	f9 01       	movw	r30, r18
 dc0:	71 83       	std	Z+1, r23	; 0x01
 dc2:	60 83       	st	Z, r22
 dc4:	0c c0       	rjmp	.+24     	; 0xdde <realloc+0x16e>
 dc6:	cb 01       	movw	r24, r22
 dc8:	32 de       	rcall	.-924    	; 0xa2e <malloc>
 dca:	7c 01       	movw	r14, r24
 dcc:	00 97       	sbiw	r24, 0x00	; 0
 dce:	49 f0       	breq	.+18     	; 0xde2 <realloc+0x172>
 dd0:	a8 01       	movw	r20, r16
 dd2:	be 01       	movw	r22, r28
 dd4:	0c d0       	rcall	.+24     	; 0xdee <memcpy>
 dd6:	ce 01       	movw	r24, r28
 dd8:	c2 de       	rcall	.-636    	; 0xb5e <free>
 dda:	c7 01       	movw	r24, r14
 ddc:	04 c0       	rjmp	.+8      	; 0xde6 <realloc+0x176>
 dde:	ce 01       	movw	r24, r28
 de0:	02 c0       	rjmp	.+4      	; 0xde6 <realloc+0x176>
 de2:	80 e0       	ldi	r24, 0x00	; 0
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	cd b7       	in	r28, 0x3d	; 61
 de8:	de b7       	in	r29, 0x3e	; 62
 dea:	ee e0       	ldi	r30, 0x0E	; 14
 dec:	30 c0       	rjmp	.+96     	; 0xe4e <__epilogue_restores__+0x8>

00000dee <memcpy>:
 dee:	fb 01       	movw	r30, r22
 df0:	dc 01       	movw	r26, r24
 df2:	02 c0       	rjmp	.+4      	; 0xdf8 <memcpy+0xa>
 df4:	01 90       	ld	r0, Z+
 df6:	0d 92       	st	X+, r0
 df8:	41 50       	subi	r20, 0x01	; 1
 dfa:	50 40       	sbci	r21, 0x00	; 0
 dfc:	d8 f7       	brcc	.-10     	; 0xdf4 <memcpy+0x6>
 dfe:	08 95       	ret

00000e00 <memset>:
 e00:	dc 01       	movw	r26, r24
 e02:	01 c0       	rjmp	.+2      	; 0xe06 <memset+0x6>
 e04:	6d 93       	st	X+, r22
 e06:	41 50       	subi	r20, 0x01	; 1
 e08:	50 40       	sbci	r21, 0x00	; 0
 e0a:	e0 f7       	brcc	.-8      	; 0xe04 <memset+0x4>
 e0c:	08 95       	ret

00000e0e <__prologue_saves__>:
 e0e:	2f 92       	push	r2
 e10:	3f 92       	push	r3
 e12:	4f 92       	push	r4
 e14:	5f 92       	push	r5
 e16:	6f 92       	push	r6
 e18:	7f 92       	push	r7
 e1a:	8f 92       	push	r8
 e1c:	9f 92       	push	r9
 e1e:	af 92       	push	r10
 e20:	bf 92       	push	r11
 e22:	cf 92       	push	r12
 e24:	df 92       	push	r13
 e26:	ef 92       	push	r14
 e28:	ff 92       	push	r15
 e2a:	0f 93       	push	r16
 e2c:	1f 93       	push	r17
 e2e:	cf 93       	push	r28
 e30:	df 93       	push	r29
 e32:	cd b7       	in	r28, 0x3d	; 61
 e34:	de b7       	in	r29, 0x3e	; 62
 e36:	ca 1b       	sub	r28, r26
 e38:	db 0b       	sbc	r29, r27
 e3a:	0f b6       	in	r0, 0x3f	; 63
 e3c:	f8 94       	cli
 e3e:	de bf       	out	0x3e, r29	; 62
 e40:	0f be       	out	0x3f, r0	; 63
 e42:	cd bf       	out	0x3d, r28	; 61
 e44:	09 94       	ijmp

00000e46 <__epilogue_restores__>:
 e46:	2a 88       	ldd	r2, Y+18	; 0x12
 e48:	39 88       	ldd	r3, Y+17	; 0x11
 e4a:	48 88       	ldd	r4, Y+16	; 0x10
 e4c:	5f 84       	ldd	r5, Y+15	; 0x0f
 e4e:	6e 84       	ldd	r6, Y+14	; 0x0e
 e50:	7d 84       	ldd	r7, Y+13	; 0x0d
 e52:	8c 84       	ldd	r8, Y+12	; 0x0c
 e54:	9b 84       	ldd	r9, Y+11	; 0x0b
 e56:	aa 84       	ldd	r10, Y+10	; 0x0a
 e58:	b9 84       	ldd	r11, Y+9	; 0x09
 e5a:	c8 84       	ldd	r12, Y+8	; 0x08
 e5c:	df 80       	ldd	r13, Y+7	; 0x07
 e5e:	ee 80       	ldd	r14, Y+6	; 0x06
 e60:	fd 80       	ldd	r15, Y+5	; 0x05
 e62:	0c 81       	ldd	r16, Y+4	; 0x04
 e64:	1b 81       	ldd	r17, Y+3	; 0x03
 e66:	aa 81       	ldd	r26, Y+2	; 0x02
 e68:	b9 81       	ldd	r27, Y+1	; 0x01
 e6a:	ce 0f       	add	r28, r30
 e6c:	d1 1d       	adc	r29, r1
 e6e:	0f b6       	in	r0, 0x3f	; 63
 e70:	f8 94       	cli
 e72:	de bf       	out	0x3e, r29	; 62
 e74:	0f be       	out	0x3f, r0	; 63
 e76:	cd bf       	out	0x3d, r28	; 61
 e78:	ed 01       	movw	r28, r26
 e7a:	08 95       	ret

00000e7c <_exit>:
 e7c:	f8 94       	cli

00000e7e <__stop_program>:
 e7e:	ff cf       	rjmp	.-2      	; 0xe7e <__stop_program>
