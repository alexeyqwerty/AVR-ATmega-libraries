
AT24C256_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ab8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00001ab8  00001b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800086  00800086  00001b72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ba4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004337  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001495  00000000  00000000  0000619f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000166e  00000000  00000000  00007634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00008ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011b6  00000000  00000000  00009420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000216c  00000000  00000000  0000a5d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000c742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	78 c0       	rjmp	.+240    	; 0xf4 <__bad_interrupt>
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	76 c0       	rjmp	.+236    	; 0xf4 <__bad_interrupt>
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	74 c0       	rjmp	.+232    	; 0xf4 <__bad_interrupt>
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	72 c0       	rjmp	.+228    	; 0xf4 <__bad_interrupt>
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	3c c4       	rjmp	.+2168   	; 0x88c <__vector_9>
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	6e c0       	rjmp	.+220    	; 0xf4 <__bad_interrupt>
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	6c c0       	rjmp	.+216    	; 0xf4 <__bad_interrupt>
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	6a c0       	rjmp	.+212    	; 0xf4 <__bad_interrupt>
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	0d c4       	rjmp	.+2074   	; 0x83e <__vector_17>
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	07 63       	ori	r16, 0x37	; 55
      28:	42 36       	cpi	r20, 0x62	; 98
      2a:	b7 9b       	sbis	0x16, 7	; 22
      2c:	d8 a7       	std	Y+40, r29	; 0x28
      2e:	1a 39       	cpi	r17, 0x9A	; 154
      30:	68 56       	subi	r22, 0x68	; 104
      32:	18 ae       	std	Y+56, r1	; 0x38
      34:	ba ab       	std	Y+50, r27	; 0x32
      36:	55 8c       	ldd	r5, Z+29	; 0x1d
      38:	1d 3c       	cpi	r17, 0xCD	; 205
      3a:	b7 cc       	rjmp	.-1682   	; 0xfffff9aa <__eeprom_end+0xff7ef9aa>
      3c:	57 63       	ori	r21, 0x37	; 55
      3e:	bd 6d       	ori	r27, 0xDD	; 221
      40:	ed fd       	.word	0xfded	; ????
      42:	75 3e       	cpi	r23, 0xE5	; 229
      44:	f6 17       	cp	r31, r22
      46:	72 31       	cpi	r23, 0x12	; 18
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	08 00       	.word	0x0008	; ????
      50:	00 00       	nop
      52:	be 92       	st	-X, r11
      54:	24 49       	sbci	r18, 0x94	; 148
      56:	12 3e       	cpi	r17, 0xE2	; 226
      58:	ab aa       	std	Y+51, r10	; 0x33
      5a:	aa 2a       	or	r10, r26
      5c:	be cd       	rjmp	.-1156   	; 0xfffffbda <__eeprom_end+0xff7efbda>
      5e:	cc cc       	rjmp	.-1640   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      60:	4c 3e       	cpi	r20, 0xEC	; 236
      62:	00 00       	nop
      64:	00 80       	ld	r0, Z
      66:	be ab       	std	Y+54, r27	; 0x36
      68:	aa aa       	std	Y+50, r10	; 0x32
      6a:	aa 3e       	cpi	r26, 0xEA	; 234
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	bf 00       	.word	0x00bf	; ????
      72:	00 00       	nop
      74:	80 3f       	cpi	r24, 0xF0	; 240
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	41 78       	andi	r20, 0x81	; 129
      7e:	d3 bb       	out	0x13, r29	; 19
      80:	43 87       	std	Z+11, r20	; 0x0b
      82:	d1 13       	cpse	r29, r17
      84:	3d 19       	sub	r19, r13
      86:	0e 3c       	cpi	r16, 0xCE	; 206
      88:	c3 bd       	out	0x23, r28	; 35
      8a:	42 82       	std	Z+2, r4	; 0x02
      8c:	ad 2b       	or	r26, r29
      8e:	3e 68       	ori	r19, 0x8E	; 142
      90:	ec 82       	std	Y+4, r14	; 0x04
      92:	76 be       	out	0x36, r7	; 54
      94:	d9 8f       	std	Y+25, r29	; 0x19
      96:	e1 a9       	ldd	r30, Z+49	; 0x31
      98:	3e 4c       	sbci	r19, 0xCE	; 206
      9a:	80 ef       	ldi	r24, 0xF0	; 240
      9c:	ff be       	out	0x3f, r15	; 63
      9e:	01 c4       	rjmp	.+2050   	; 0x8a2 <__vector_9+0x16>
      a0:	ff 7f       	andi	r31, 0xFF	; 255
      a2:	3f 00       	.word	0x003f	; ????
      a4:	00 00       	nop
	...

000000a8 <__ctors_start>:
      a8:	ad 05       	cpc	r26, r13

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d4 e0       	ldi	r29, 0x04	; 4
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	10 e0       	ldi	r17, 0x00	; 0
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	e8 eb       	ldi	r30, 0xB8	; 184
      be:	fa e1       	ldi	r31, 0x1A	; 26
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	a6 38       	cpi	r26, 0x86	; 134
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	a6 e8       	ldi	r26, 0x86	; 134
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	ac 3a       	cpi	r26, 0xAC	; 172
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c5 e5       	ldi	r28, 0x55	; 85
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	03 c0       	rjmp	.+6      	; 0xea <__do_global_ctors+0xe>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	8b db       	rcall	.-2282   	; 0xfffff800 <__eeprom_end+0xff7ef800>
      ea:	c4 35       	cpi	r28, 0x54	; 84
      ec:	d1 07       	cpc	r29, r17
      ee:	d1 f7       	brne	.-12     	; 0xe4 <__do_global_ctors+0x8>
      f0:	f3 d4       	rcall	.+2534   	; 0xad8 <main>
      f2:	e0 cc       	rjmp	.-1600   	; 0xfffffab4 <__eeprom_end+0xff7efab4>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <_ZN8AT24C25614ClockFrequencyEv>:
	return ptr;
}

void AT24C256::operator delete(void* ptr)
{
	if(ptr != nullptr) free(ptr);
      f6:	fc 01       	movw	r30, r24
      f8:	65 81       	ldd	r22, Z+5	; 0x05
      fa:	76 81       	ldd	r23, Z+6	; 0x06
      fc:	87 81       	ldd	r24, Z+7	; 0x07
      fe:	90 85       	ldd	r25, Z+8	; 0x08
     100:	08 95       	ret

00000102 <_ZN8AT24C25620GetTransactionStatusEv>:
     102:	fc 01       	movw	r30, r24
     104:	84 89       	ldd	r24, Z+20	; 0x14
     106:	81 30       	cpi	r24, 0x01	; 1
     108:	09 f0       	breq	.+2      	; 0x10c <_ZN8AT24C25620GetTransactionStatusEv+0xa>
     10a:	14 8a       	std	Z+20, r1	; 0x14
     10c:	08 95       	ret

0000010e <_ZN8AT24C256C1EP3TWIhhhm>:
     10e:	cf 92       	push	r12
     110:	df 92       	push	r13
     112:	ef 92       	push	r14
     114:	ff 92       	push	r15
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
     11a:	fc 01       	movw	r30, r24
     11c:	8d e6       	ldi	r24, 0x6D	; 109
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	91 83       	std	Z+1, r25	; 0x01
     122:	80 83       	st	Z, r24
     124:	73 83       	std	Z+3, r23	; 0x03
     126:	62 83       	std	Z+2, r22	; 0x02
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	44 0f       	add	r20, r20
     12c:	55 1f       	adc	r21, r21
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	44 0f       	add	r20, r20
     134:	55 1f       	adc	r21, r21
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	22 0f       	add	r18, r18
     13a:	33 1f       	adc	r19, r19
     13c:	22 0f       	add	r18, r18
     13e:	33 1f       	adc	r19, r19
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	00 0f       	add	r16, r16
     144:	11 1f       	adc	r17, r17
     146:	40 6a       	ori	r20, 0xA0	; 160
     148:	24 2b       	or	r18, r20
     14a:	02 2b       	or	r16, r18
     14c:	04 83       	std	Z+4, r16	; 0x04
     14e:	c5 82       	std	Z+5, r12	; 0x05
     150:	d6 82       	std	Z+6, r13	; 0x06
     152:	e7 82       	std	Z+7, r14	; 0x07
     154:	f0 86       	std	Z+8, r15	; 0x08
     156:	88 ef       	ldi	r24, 0xF8	; 248
     158:	82 8b       	std	Z+18, r24	; 0x12
     15a:	13 8a       	std	Z+19, r1	; 0x13
     15c:	14 8a       	std	Z+20, r1	; 0x14
     15e:	1f 91       	pop	r17
     160:	0f 91       	pop	r16
     162:	ff 90       	pop	r15
     164:	ef 90       	pop	r14
     166:	df 90       	pop	r13
     168:	cf 90       	pop	r12
     16a:	08 95       	ret

0000016c <_ZN8AT24C256nwEj>:
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	ec 01       	movw	r28, r24
     172:	ce 01       	movw	r24, r28
     174:	4b db       	rcall	.-2410   	; 0xfffff80c <__eeprom_end+0xff7ef80c>
     176:	00 97       	sbiw	r24, 0x00	; 0
     178:	e1 f3       	breq	.-8      	; 0x172 <_ZN8AT24C256nwEj+0x6>
     17a:	df 91       	pop	r29
     17c:	cf 91       	pop	r28
     17e:	08 95       	ret

00000180 <_ZN8AT24C25613ClearCountersEv>:
}

void AT24C256::ClearCounters()
{
	this->dataAddressCounter = sizeof(this->dataAddress);
     180:	22 e0       	ldi	r18, 0x02	; 2
     182:	fc 01       	movw	r30, r24
     184:	25 87       	std	Z+13, r18	; 0x0d
	this->dataCounter = 0;
     186:	11 8a       	std	Z+17, r1	; 0x11
     188:	08 95       	ret

0000018a <_ZN8AT24C25618NormaliseDataRangeEv>:
}

void AT24C256::NormaliseDataRange()
{
     18a:	fc 01       	movw	r30, r24
	if((this->dataAddress + this->dataSize) > fieldSize)
     18c:	21 85       	ldd	r18, Z+9	; 0x09
     18e:	32 85       	ldd	r19, Z+10	; 0x0a
     190:	80 89       	ldd	r24, Z+16	; 0x10
     192:	a9 01       	movw	r20, r18
     194:	48 0f       	add	r20, r24
     196:	51 1d       	adc	r21, r1
     198:	ca 01       	movw	r24, r20
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	90 48       	sbci	r25, 0x80	; 128
     19e:	10 f0       	brcs	.+4      	; 0x1a4 <_ZN8AT24C25618NormaliseDataRangeEv+0x1a>
	{
		this->dataSize = fieldSize - this->dataAddress;
     1a0:	21 95       	neg	r18
     1a2:	20 8b       	std	Z+16, r18	; 0x10
     1a4:	08 95       	ret

000001a6 <_ZN8AT24C25620HandleWriteOperationEv>:
	}
}

void AT24C256::HandleWriteOperation()
{
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	ec 01       	movw	r28, r24
	switch(this->status)
     1ac:	8a 89       	ldd	r24, Y+18	; 0x12
     1ae:	88 31       	cpi	r24, 0x18	; 24
     1b0:	49 f0       	breq	.+18     	; 0x1c4 <_ZN8AT24C25620HandleWriteOperationEv+0x1e>
     1b2:	88 32       	cpi	r24, 0x28	; 40
     1b4:	39 f0       	breq	.+14     	; 0x1c4 <_ZN8AT24C25620HandleWriteOperationEv+0x1e>
     1b6:	88 30       	cpi	r24, 0x08	; 8
     1b8:	81 f5       	brne	.+96     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		case TWI_Start:
		{						
			this->twi->WriteToTWDR(this->address);			
     1ba:	6c 81       	ldd	r22, Y+4	; 0x04
     1bc:	8a 81       	ldd	r24, Y+2	; 0x02
     1be:	9b 81       	ldd	r25, Y+3	; 0x03
     1c0:	02 d7       	rcall	.+3588   	; 0xfc6 <_ZN3TWI11WriteToTWDREh>
		}break;
     1c2:	2b c0       	rjmp	.+86     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
		
		case TWI_MasterAddressWriteACK:		
		case TWI_MasterDataWriteACK:
		{
			if(this->dataAddressCounter > 0)
     1c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1c6:	88 23       	and	r24, r24
     1c8:	79 f0       	breq	.+30     	; 0x1e8 <_ZN8AT24C25620HandleWriteOperationEv+0x42>
			{
				this->twi->WriteToTWDR(this->dataAddressPtr[this->dataAddressCounter - 1]);
     1ca:	2b 85       	ldd	r18, Y+11	; 0x0b
     1cc:	3c 85       	ldd	r19, Y+12	; 0x0c
     1ce:	e8 2f       	mov	r30, r24
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	e2 0f       	add	r30, r18
     1d6:	f3 1f       	adc	r31, r19
     1d8:	60 81       	ld	r22, Z
     1da:	8a 81       	ldd	r24, Y+2	; 0x02
     1dc:	9b 81       	ldd	r25, Y+3	; 0x03
     1de:	f3 d6       	rcall	.+3558   	; 0xfc6 <_ZN3TWI11WriteToTWDREh>
				
				this->dataAddressCounter--;
     1e0:	8d 85       	ldd	r24, Y+13	; 0x0d
     1e2:	81 50       	subi	r24, 0x01	; 1
     1e4:	8d 87       	std	Y+13, r24	; 0x0d
     1e6:	19 c0       	rjmp	.+50     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
			}
			
			else
			{
				if(this->dataCounter < this->dataSize)
     1e8:	89 89       	ldd	r24, Y+17	; 0x11
     1ea:	98 89       	ldd	r25, Y+16	; 0x10
     1ec:	89 17       	cp	r24, r25
     1ee:	60 f4       	brcc	.+24     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
				{
					this->twi->WriteToTWDR(this->data[this->dataCounter]);
     1f0:	ee 85       	ldd	r30, Y+14	; 0x0e
     1f2:	ff 85       	ldd	r31, Y+15	; 0x0f
     1f4:	e8 0f       	add	r30, r24
     1f6:	f1 1d       	adc	r31, r1
     1f8:	60 81       	ld	r22, Z
     1fa:	8a 81       	ldd	r24, Y+2	; 0x02
     1fc:	9b 81       	ldd	r25, Y+3	; 0x03
     1fe:	e3 d6       	rcall	.+3526   	; 0xfc6 <_ZN3TWI11WriteToTWDREh>
					this->dataCounter++;
     200:	89 89       	ldd	r24, Y+17	; 0x11
     202:	8f 5f       	subi	r24, 0xFF	; 255
     204:	89 8b       	std	Y+17, r24	; 0x11
     206:	09 c0       	rjmp	.+18     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
				}
				
				else
				{
					this->twi->Stop();
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	9b 81       	ldd	r25, Y+3	; 0x03
     20c:	e8 d6       	rcall	.+3536   	; 0xfde <_ZN3TWI4StopEv>
					
					this->operation = TWI_NoOperation;					
     20e:	1b 8a       	std	Y+19, r1	; 0x13
					
					free((uint8_t*)this->data);
     210:	8e 85       	ldd	r24, Y+14	; 0x0e
     212:	9f 85       	ldd	r25, Y+15	; 0x0f
     214:	93 db       	rcall	.-2266   	; 0xfffff93c <__eeprom_end+0xff7ef93c>
					
					this->transactionStatus = TWI_Ok;
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	8c 8b       	std	Y+20, r24	; 0x14
			}
		}break;
		
		default: break;
	}
}
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <_ZN8AT24C25619HandleReadOperationEv>:

void AT24C256::HandleReadOperation()
{
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ec 01       	movw	r28, r24
	switch(this->status)
     22a:	8a 89       	ldd	r24, Y+18	; 0x12
     22c:	88 32       	cpi	r24, 0x28	; 40
     22e:	b1 f0       	breq	.+44     	; 0x25c <_ZN8AT24C25619HandleReadOperationEv+0x3c>
     230:	38 f4       	brcc	.+14     	; 0x240 <_ZN8AT24C25619HandleReadOperationEv+0x20>
     232:	80 31       	cpi	r24, 0x10	; 16
     234:	49 f1       	breq	.+82     	; 0x288 <_ZN8AT24C25619HandleReadOperationEv+0x68>
     236:	88 31       	cpi	r24, 0x18	; 24
     238:	89 f0       	breq	.+34     	; 0x25c <_ZN8AT24C25619HandleReadOperationEv+0x3c>
     23a:	88 30       	cpi	r24, 0x08	; 8
     23c:	51 f0       	breq	.+20     	; 0x252 <_ZN8AT24C25619HandleReadOperationEv+0x32>
     23e:	59 c0       	rjmp	.+178    	; 0x2f2 <_ZN8AT24C25619HandleReadOperationEv+0xd2>
     240:	80 35       	cpi	r24, 0x50	; 80
     242:	41 f1       	breq	.+80     	; 0x294 <_ZN8AT24C25619HandleReadOperationEv+0x74>
     244:	88 35       	cpi	r24, 0x58	; 88
     246:	09 f4       	brne	.+2      	; 0x24a <_ZN8AT24C25619HandleReadOperationEv+0x2a>
     248:	42 c0       	rjmp	.+132    	; 0x2ce <_ZN8AT24C25619HandleReadOperationEv+0xae>
     24a:	80 34       	cpi	r24, 0x40	; 64
     24c:	09 f0       	breq	.+2      	; 0x250 <_ZN8AT24C25619HandleReadOperationEv+0x30>
     24e:	51 c0       	rjmp	.+162    	; 0x2f2 <_ZN8AT24C25619HandleReadOperationEv+0xd2>
     250:	2e c0       	rjmp	.+92     	; 0x2ae <_ZN8AT24C25619HandleReadOperationEv+0x8e>
	{
		case TWI_Start:
		{
			this->twi->WriteToTWDR(this->address);
     252:	6c 81       	ldd	r22, Y+4	; 0x04
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	9b 81       	ldd	r25, Y+3	; 0x03
     258:	b6 d6       	rcall	.+3436   	; 0xfc6 <_ZN3TWI11WriteToTWDREh>
		}break;
     25a:	4b c0       	rjmp	.+150    	; 0x2f2 <_ZN8AT24C25619HandleReadOperationEv+0xd2>
		
		case TWI_MasterAddressWriteACK:
		case TWI_MasterDataWriteACK:
		{
			if(this->dataAddressCounter > 0)
     25c:	8d 85       	ldd	r24, Y+13	; 0x0d
     25e:	88 23       	and	r24, r24
     260:	79 f0       	breq	.+30     	; 0x280 <_ZN8AT24C25619HandleReadOperationEv+0x60>
			{
				this->twi->WriteToTWDR(this->dataAddressPtr[this->dataAddressCounter - 1]);
     262:	2b 85       	ldd	r18, Y+11	; 0x0b
     264:	3c 85       	ldd	r19, Y+12	; 0x0c
     266:	e8 2f       	mov	r30, r24
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	e2 0f       	add	r30, r18
     26e:	f3 1f       	adc	r31, r19
     270:	60 81       	ld	r22, Z
     272:	8a 81       	ldd	r24, Y+2	; 0x02
     274:	9b 81       	ldd	r25, Y+3	; 0x03
     276:	a7 d6       	rcall	.+3406   	; 0xfc6 <_ZN3TWI11WriteToTWDREh>
				
				this->dataAddressCounter--;
     278:	8d 85       	ldd	r24, Y+13	; 0x0d
     27a:	81 50       	subi	r24, 0x01	; 1
     27c:	8d 87       	std	Y+13, r24	; 0x0d
     27e:	39 c0       	rjmp	.+114    	; 0x2f2 <_ZN8AT24C25619HandleReadOperationEv+0xd2>
			}
			
			else
			{
				this->twi->Start();
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	9b 81       	ldd	r25, Y+3	; 0x03
     284:	66 d6       	rcall	.+3276   	; 0xf52 <_ZN3TWI5StartEv>
     286:	35 c0       	rjmp	.+106    	; 0x2f2 <_ZN8AT24C25619HandleReadOperationEv+0xd2>
			}
		}break;
		
		case TWI_Restart:
		{
			this->twi->WriteToTWDR(this->address | 1);
     288:	6c 81       	ldd	r22, Y+4	; 0x04
     28a:	61 60       	ori	r22, 0x01	; 1
     28c:	8a 81       	ldd	r24, Y+2	; 0x02
     28e:	9b 81       	ldd	r25, Y+3	; 0x03
     290:	9a d6       	rcall	.+3380   	; 0xfc6 <_ZN3TWI11WriteToTWDREh>
		}break;
     292:	2f c0       	rjmp	.+94     	; 0x2f2 <_ZN8AT24C25619HandleReadOperationEv+0xd2>
				
		case TWI_MasterDataReadACK:
		{
			this->data[this->dataCounter] = this->twi->ReadFromTWDR();
     294:	0e 85       	ldd	r16, Y+14	; 0x0e
     296:	1f 85       	ldd	r17, Y+15	; 0x0f
     298:	89 89       	ldd	r24, Y+17	; 0x11
     29a:	08 0f       	add	r16, r24
     29c:	11 1d       	adc	r17, r1
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	9b 81       	ldd	r25, Y+3	; 0x03
     2a2:	9b d6       	rcall	.+3382   	; 0xfda <_ZN3TWI12ReadFromTWDREv>
     2a4:	f8 01       	movw	r30, r16
     2a6:	80 83       	st	Z, r24
			this->dataCounter++;
     2a8:	89 89       	ldd	r24, Y+17	; 0x11
     2aa:	8f 5f       	subi	r24, 0xFF	; 255
     2ac:	89 8b       	std	Y+17, r24	; 0x11
		}
		case TWI_MasterAddressReadACK:
		{
			if(this->dataCounter < this->dataSize - 1)
     2ae:	29 89       	ldd	r18, Y+17	; 0x11
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	88 89       	ldd	r24, Y+16	; 0x10
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	01 97       	sbiw	r24, 0x01	; 1
     2b8:	28 17       	cp	r18, r24
     2ba:	39 07       	cpc	r19, r25
     2bc:	24 f4       	brge	.+8      	; 0x2c6 <_ZN8AT24C25619HandleReadOperationEv+0xa6>
			{
				this->twi->ACK();
     2be:	8a 81       	ldd	r24, Y+2	; 0x02
     2c0:	9b 81       	ldd	r25, Y+3	; 0x03
     2c2:	85 d6       	rcall	.+3338   	; 0xfce <_ZN3TWI3ACKEv>
     2c4:	16 c0       	rjmp	.+44     	; 0x2f2 <_ZN8AT24C25619HandleReadOperationEv+0xd2>
			} 
			else
			{
				this->twi->NACK();
     2c6:	8a 81       	ldd	r24, Y+2	; 0x02
     2c8:	9b 81       	ldd	r25, Y+3	; 0x03
     2ca:	84 d6       	rcall	.+3336   	; 0xfd4 <_ZN3TWI4NACKEv>
     2cc:	12 c0       	rjmp	.+36     	; 0x2f2 <_ZN8AT24C25619HandleReadOperationEv+0xd2>
								
		}break;
		
		case TWI_MasterDataReadNACK:
		{
			this->data[this->dataCounter] = this->twi->ReadFromTWDR();
     2ce:	0e 85       	ldd	r16, Y+14	; 0x0e
     2d0:	1f 85       	ldd	r17, Y+15	; 0x0f
     2d2:	89 89       	ldd	r24, Y+17	; 0x11
     2d4:	08 0f       	add	r16, r24
     2d6:	11 1d       	adc	r17, r1
     2d8:	8a 81       	ldd	r24, Y+2	; 0x02
     2da:	9b 81       	ldd	r25, Y+3	; 0x03
     2dc:	7e d6       	rcall	.+3324   	; 0xfda <_ZN3TWI12ReadFromTWDREv>
     2de:	f8 01       	movw	r30, r16
     2e0:	80 83       	st	Z, r24
			
			this->data = nullptr;
     2e2:	1f 86       	std	Y+15, r1	; 0x0f
     2e4:	1e 86       	std	Y+14, r1	; 0x0e
			
			this->twi->Stop();		
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	9b 81       	ldd	r25, Y+3	; 0x03
     2ea:	79 d6       	rcall	.+3314   	; 0xfde <_ZN3TWI4StopEv>
			
			this->operation = TWI_NoOperation;	
     2ec:	1b 8a       	std	Y+19, r1	; 0x13
			
			this->transactionStatus = TWI_Ok;
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	8c 8b       	std	Y+20, r24	; 0x14
		}break;
		
		default: break;
	}
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	1f 91       	pop	r17
     2f8:	0f 91       	pop	r16
     2fa:	08 95       	ret

000002fc <_ZN8AT24C25613NextOperationE10TWI_Status>:
{
	return this->clockFrequency;
}

void AT24C256::NextOperation(TWI_Status status)
{	
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
	this->status = status;
     302:	6a 8b       	std	Y+18, r22	; 0x12
	
	switch(this->status)
     304:	60 33       	cpi	r22, 0x30	; 48
     306:	a9 f0       	breq	.+42     	; 0x332 <_ZN8AT24C25613NextOperationE10TWI_Status+0x36>
     308:	28 f4       	brcc	.+10     	; 0x314 <_ZN8AT24C25613NextOperationE10TWI_Status+0x18>
     30a:	66 23       	and	r22, r22
     30c:	91 f0       	breq	.+36     	; 0x332 <_ZN8AT24C25613NextOperationE10TWI_Status+0x36>
     30e:	60 32       	cpi	r22, 0x20	; 32
     310:	b1 f4       	brne	.+44     	; 0x33e <_ZN8AT24C25613NextOperationE10TWI_Status+0x42>
     312:	0f c0       	rjmp	.+30     	; 0x332 <_ZN8AT24C25613NextOperationE10TWI_Status+0x36>
     314:	68 34       	cpi	r22, 0x48	; 72
     316:	69 f0       	breq	.+26     	; 0x332 <_ZN8AT24C25613NextOperationE10TWI_Status+0x36>
     318:	68 3f       	cpi	r22, 0xF8	; 248
     31a:	d9 f0       	breq	.+54     	; 0x352 <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
     31c:	68 33       	cpi	r22, 0x38	; 56
     31e:	79 f4       	brne	.+30     	; 0x33e <_ZN8AT24C25613NextOperationE10TWI_Status+0x42>
	{
		case TWI_NoActions: return;
		
		case TWI_ArbitrationLost:		
		{
			this->twi->Stop();
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	9b 81       	ldd	r25, Y+3	; 0x03
     324:	5c d6       	rcall	.+3256   	; 0xfde <_ZN3TWI4StopEv>
			
			ClearCounters();
     326:	ce 01       	movw	r24, r28
     328:	2b df       	rcall	.-426    	; 0x180 <_ZN8AT24C25613ClearCountersEv>
			
			this->twi->Start();		
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	11 d6       	rcall	.+3106   	; 0xf52 <_ZN3TWI5StartEv>
		}return;
     330:	10 c0       	rjmp	.+32     	; 0x352 <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
		case TWI_BusError:
		case TWI_MasterAddressWriteNACK:
		case TWI_MasterDataWriteNACK:
		case TWI_MasterAddressReadNACK:
		{
			this->transactionStatus = TWI_Error;
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	8c 8b       	std	Y+20, r24	; 0x14
			
			this->twi->DisableInterrupt();
     336:	8a 81       	ldd	r24, Y+2	; 0x02
     338:	9b 81       	ldd	r25, Y+3	; 0x03
     33a:	6f d6       	rcall	.+3294   	; 0x101a <_ZN3TWI16DisableInterruptEv>
		}return;
     33c:	0a c0       	rjmp	.+20     	; 0x352 <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
		
		default: break;
	}
	
	if(this->operation == TWI_Write) HandleWriteOperation();
     33e:	8b 89       	ldd	r24, Y+19	; 0x13
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	19 f4       	brne	.+6      	; 0x34a <_ZN8AT24C25613NextOperationE10TWI_Status+0x4e>
     344:	ce 01       	movw	r24, r28
     346:	2f df       	rcall	.-418    	; 0x1a6 <_ZN8AT24C25620HandleWriteOperationEv>
     348:	04 c0       	rjmp	.+8      	; 0x352 <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
	else if(this->operation == TWI_Read) HandleReadOperation();
     34a:	82 30       	cpi	r24, 0x02	; 2
     34c:	11 f4       	brne	.+4      	; 0x352 <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
     34e:	ce 01       	movw	r24, r28
     350:	67 df       	rcall	.-306    	; 0x220 <_ZN8AT24C25619HandleReadOperationEv>
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <_ZN7HD4478012SelectDeviceEv>:
	}
	
	PrintText(text, slot, line);
}

HD44780::~HD44780(){}
     358:	fc 01       	movw	r30, r24
     35a:	84 81       	ldd	r24, Z+4	; 0x04
     35c:	95 81       	ldd	r25, Z+5	; 0x05
     35e:	2b d4       	rcall	.+2134   	; 0xbb6 <_ZN4Port3SetEv>
     360:	08 95       	ret

00000362 <_ZN7HD447809LatchDataEv>:
     362:	fc 01       	movw	r30, r24
     364:	84 81       	ldd	r24, Z+4	; 0x04
     366:	95 81       	ldd	r25, Z+5	; 0x05
     368:	38 d4       	rcall	.+2160   	; 0xbda <_ZN4Port5ClearEv>
     36a:	08 95       	ret

0000036c <_ZN7HD447804WaitEv>:
     36c:	ff 92       	push	r15
     36e:	0f 93       	push	r16
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	ec 01       	movw	r28, r24
     378:	f1 2c       	mov	r15, r1
     37a:	83 e0       	ldi	r24, 0x03	; 3
     37c:	8f 15       	cp	r24, r15
     37e:	90 f0       	brcs	.+36     	; 0x3a4 <_ZN7HD447804WaitEv+0x38>
     380:	0f 2d       	mov	r16, r15
     382:	10 e0       	ldi	r17, 0x00	; 0
     384:	0d 5f       	subi	r16, 0xFD	; 253
     386:	1f 4f       	sbci	r17, 0xFF	; 255
     388:	00 0f       	add	r16, r16
     38a:	11 1f       	adc	r17, r17
     38c:	0c 0f       	add	r16, r28
     38e:	1d 1f       	adc	r17, r29
     390:	f8 01       	movw	r30, r16
     392:	80 81       	ld	r24, Z
     394:	91 81       	ldd	r25, Z+1	; 0x01
     396:	0f d4       	rcall	.+2078   	; 0xbb6 <_ZN4Port3SetEv>
     398:	f8 01       	movw	r30, r16
     39a:	80 81       	ld	r24, Z
     39c:	91 81       	ldd	r25, Z+1	; 0x01
     39e:	e3 d3       	rcall	.+1990   	; 0xb66 <_ZN4Port10SetAsInputEv>
     3a0:	f3 94       	inc	r15
     3a2:	eb cf       	rjmp	.-42     	; 0x37a <_ZN7HD447804WaitEv+0xe>
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	9b 81       	ldd	r25, Y+3	; 0x03
     3a8:	06 d4       	rcall	.+2060   	; 0xbb6 <_ZN4Port3SetEv>
     3aa:	88 81       	ld	r24, Y
     3ac:	99 81       	ldd	r25, Y+1	; 0x01
     3ae:	15 d4       	rcall	.+2090   	; 0xbda <_ZN4Port5ClearEv>
     3b0:	ce 01       	movw	r24, r28
     3b2:	d2 df       	rcall	.-92     	; 0x358 <_ZN7HD4478012SelectDeviceEv>
     3b4:	8c 85       	ldd	r24, Y+12	; 0x0c
     3b6:	9d 85       	ldd	r25, Y+13	; 0x0d
     3b8:	36 d4       	rcall	.+2156   	; 0xc26 <_ZN4Port5IsSetEv>
     3ba:	18 2f       	mov	r17, r24
     3bc:	ce 01       	movw	r24, r28
     3be:	d1 df       	rcall	.-94     	; 0x362 <_ZN7HD447809LatchDataEv>
     3c0:	ce 01       	movw	r24, r28
     3c2:	ca df       	rcall	.-108    	; 0x358 <_ZN7HD4478012SelectDeviceEv>
     3c4:	ce 01       	movw	r24, r28
     3c6:	cd df       	rcall	.-102    	; 0x362 <_ZN7HD447809LatchDataEv>
     3c8:	11 11       	cpse	r17, r1
     3ca:	f2 cf       	rjmp	.-28     	; 0x3b0 <_ZN7HD447804WaitEv+0x44>
     3cc:	f1 2c       	mov	r15, r1
     3ce:	f3 e0       	ldi	r31, 0x03	; 3
     3d0:	ff 15       	cp	r31, r15
     3d2:	90 f0       	brcs	.+36     	; 0x3f8 <_ZN7HD447804WaitEv+0x8c>
     3d4:	0f 2d       	mov	r16, r15
     3d6:	10 e0       	ldi	r17, 0x00	; 0
     3d8:	0d 5f       	subi	r16, 0xFD	; 253
     3da:	1f 4f       	sbci	r17, 0xFF	; 255
     3dc:	00 0f       	add	r16, r16
     3de:	11 1f       	adc	r17, r17
     3e0:	0c 0f       	add	r16, r28
     3e2:	1d 1f       	adc	r17, r29
     3e4:	f8 01       	movw	r30, r16
     3e6:	80 81       	ld	r24, Z
     3e8:	91 81       	ldd	r25, Z+1	; 0x01
     3ea:	d2 d3       	rcall	.+1956   	; 0xb90 <_ZN4Port11SetAsOutputEv>
     3ec:	f8 01       	movw	r30, r16
     3ee:	80 81       	ld	r24, Z
     3f0:	91 81       	ldd	r25, Z+1	; 0x01
     3f2:	f3 d3       	rcall	.+2022   	; 0xbda <_ZN4Port5ClearEv>
     3f4:	f3 94       	inc	r15
     3f6:	eb cf       	rjmp	.-42     	; 0x3ce <_ZN7HD447804WaitEv+0x62>
     3f8:	8a 81       	ldd	r24, Y+2	; 0x02
     3fa:	9b 81       	ldd	r25, Y+3	; 0x03
     3fc:	ee d3       	rcall	.+2012   	; 0xbda <_ZN4Port5ClearEv>
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	08 95       	ret

0000040a <_ZN7HD447808SendByteEc8DataType>:
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ec 01       	movw	r28, r24
     418:	e6 2e       	mov	r14, r22
     41a:	14 2f       	mov	r17, r20
     41c:	a7 df       	rcall	.-178    	; 0x36c <_ZN7HD447804WaitEv>
     41e:	11 30       	cpi	r17, 0x01	; 1
     420:	21 f4       	brne	.+8      	; 0x42a <_ZN7HD447808SendByteEc8DataType+0x20>
     422:	88 81       	ld	r24, Y
     424:	99 81       	ldd	r25, Y+1	; 0x01
     426:	d9 d3       	rcall	.+1970   	; 0xbda <_ZN4Port5ClearEv>
     428:	05 c0       	rjmp	.+10     	; 0x434 <_ZN7HD447808SendByteEc8DataType+0x2a>
     42a:	11 11       	cpse	r17, r1
     42c:	03 c0       	rjmp	.+6      	; 0x434 <_ZN7HD447808SendByteEc8DataType+0x2a>
     42e:	88 81       	ld	r24, Y
     430:	99 81       	ldd	r25, Y+1	; 0x01
     432:	c1 d3       	rcall	.+1922   	; 0xbb6 <_ZN4Port3SetEv>
     434:	0e 2d       	mov	r16, r14
     436:	10 e0       	ldi	r17, 0x00	; 0
     438:	15 95       	asr	r17
     43a:	07 95       	ror	r16
     43c:	15 95       	asr	r17
     43e:	07 95       	ror	r16
     440:	15 95       	asr	r17
     442:	07 95       	ror	r16
     444:	15 95       	asr	r17
     446:	07 95       	ror	r16
     448:	f1 2c       	mov	r15, r1
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	8f 15       	cp	r24, r15
     44e:	58 f1       	brcs	.+86     	; 0x4a6 <__stack+0x47>
     450:	ce 01       	movw	r24, r28
     452:	82 df       	rcall	.-252    	; 0x358 <_ZN7HD4478012SelectDeviceEv>
     454:	10 e0       	ldi	r17, 0x00	; 0
     456:	14 30       	cpi	r17, 0x04	; 4
     458:	08 f5       	brcc	.+66     	; 0x49c <__stack+0x3d>
     45a:	81 2f       	mov	r24, r17
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	20 2f       	mov	r18, r16
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	01 2e       	mov	r0, r17
     464:	02 c0       	rjmp	.+4      	; 0x46a <__stack+0xb>
     466:	35 95       	asr	r19
     468:	27 95       	ror	r18
     46a:	0a 94       	dec	r0
     46c:	e2 f7       	brpl	.-8      	; 0x466 <__stack+0x7>
     46e:	20 ff       	sbrs	r18, 0
     470:	0a c0       	rjmp	.+20     	; 0x486 <__stack+0x27>
     472:	fc 01       	movw	r30, r24
     474:	33 96       	adiw	r30, 0x03	; 3
     476:	ee 0f       	add	r30, r30
     478:	ff 1f       	adc	r31, r31
     47a:	ec 0f       	add	r30, r28
     47c:	fd 1f       	adc	r31, r29
     47e:	80 81       	ld	r24, Z
     480:	91 81       	ldd	r25, Z+1	; 0x01
     482:	99 d3       	rcall	.+1842   	; 0xbb6 <_ZN4Port3SetEv>
     484:	09 c0       	rjmp	.+18     	; 0x498 <__stack+0x39>
     486:	fc 01       	movw	r30, r24
     488:	33 96       	adiw	r30, 0x03	; 3
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	ec 0f       	add	r30, r28
     490:	fd 1f       	adc	r31, r29
     492:	80 81       	ld	r24, Z
     494:	91 81       	ldd	r25, Z+1	; 0x01
     496:	a1 d3       	rcall	.+1858   	; 0xbda <_ZN4Port5ClearEv>
     498:	1f 5f       	subi	r17, 0xFF	; 255
     49a:	dd cf       	rjmp	.-70     	; 0x456 <_ZN7HD447808SendByteEc8DataType+0x4c>
     49c:	ce 01       	movw	r24, r28
     49e:	61 df       	rcall	.-318    	; 0x362 <_ZN7HD447809LatchDataEv>
     4a0:	f3 94       	inc	r15
     4a2:	0e 2d       	mov	r16, r14
     4a4:	d2 cf       	rjmp	.-92     	; 0x44a <_ZN7HD447808SendByteEc8DataType+0x40>
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	08 95       	ret

000004b4 <_ZN7HD4478017SetCursorPositionEhh>:
     4b4:	42 30       	cpi	r20, 0x02	; 2
     4b6:	20 f0       	brcs	.+8      	; 0x4c0 <_ZN7HD4478017SetCursorPositionEhh+0xc>
     4b8:	41 70       	andi	r20, 0x01	; 1
     4ba:	fc 01       	movw	r30, r24
     4bc:	26 85       	ldd	r18, Z+14	; 0x0e
     4be:	62 0f       	add	r22, r18
     4c0:	f0 e4       	ldi	r31, 0x40	; 64
     4c2:	4f 9f       	mul	r20, r31
     4c4:	60 0d       	add	r22, r0
     4c6:	11 24       	eor	r1, r1
     4c8:	60 68       	ori	r22, 0x80	; 128
     4ca:	41 e0       	ldi	r20, 0x01	; 1
     4cc:	9e df       	rcall	.-196    	; 0x40a <_ZN7HD447808SendByteEc8DataType>
     4ce:	08 95       	ret

000004d0 <_ZN7HD447802OnEv>:
     4d0:	41 e0       	ldi	r20, 0x01	; 1
     4d2:	6c e0       	ldi	r22, 0x0C	; 12
     4d4:	9a df       	rcall	.-204    	; 0x40a <_ZN7HD447808SendByteEc8DataType>
     4d6:	08 95       	ret

000004d8 <_ZN7HD447803OffEv>:
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	68 e0       	ldi	r22, 0x08	; 8
     4dc:	96 df       	rcall	.-212    	; 0x40a <_ZN7HD447808SendByteEc8DataType>
     4de:	08 95       	ret

000004e0 <_ZN7HD447805ClearEv>:
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	92 df       	rcall	.-220    	; 0x40a <_ZN7HD447808SendByteEc8DataType>
     4e6:	08 95       	ret

000004e8 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h>:
     4e8:	6f 92       	push	r6
     4ea:	7f 92       	push	r7
     4ec:	8f 92       	push	r8
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	3c 01       	movw	r6, r24
     508:	cb 01       	movw	r24, r22
     50a:	f3 01       	movw	r30, r6
     50c:	86 86       	std	Z+14, r8	; 0x0e
     50e:	71 83       	std	Z+1, r23	; 0x01
     510:	60 83       	st	Z, r22
     512:	53 83       	std	Z+3, r21	; 0x03
     514:	42 83       	std	Z+2, r20	; 0x02
     516:	35 83       	std	Z+5, r19	; 0x05
     518:	24 83       	std	Z+4, r18	; 0x04
     51a:	17 83       	std	Z+7, r17	; 0x07
     51c:	06 83       	std	Z+6, r16	; 0x06
     51e:	f1 86       	std	Z+9, r15	; 0x09
     520:	e0 86       	std	Z+8, r14	; 0x08
     522:	d3 86       	std	Z+11, r13	; 0x0b
     524:	c2 86       	std	Z+10, r12	; 0x0a
     526:	b5 86       	std	Z+13, r11	; 0x0d
     528:	a4 86       	std	Z+12, r10	; 0x0c
     52a:	32 d3       	rcall	.+1636   	; 0xb90 <_ZN4Port11SetAsOutputEv>
     52c:	f3 01       	movw	r30, r6
     52e:	82 81       	ldd	r24, Z+2	; 0x02
     530:	93 81       	ldd	r25, Z+3	; 0x03
     532:	2e d3       	rcall	.+1628   	; 0xb90 <_ZN4Port11SetAsOutputEv>
     534:	f3 01       	movw	r30, r6
     536:	84 81       	ldd	r24, Z+4	; 0x04
     538:	95 81       	ldd	r25, Z+5	; 0x05
     53a:	2a d3       	rcall	.+1620   	; 0xb90 <_ZN4Port11SetAsOutputEv>
     53c:	f3 01       	movw	r30, r6
     53e:	82 81       	ldd	r24, Z+2	; 0x02
     540:	93 81       	ldd	r25, Z+3	; 0x03
     542:	4b d3       	rcall	.+1686   	; 0xbda <_ZN4Port5ClearEv>
     544:	f1 2c       	mov	r15, r1
     546:	f3 e0       	ldi	r31, 0x03	; 3
     548:	ff 15       	cp	r31, r15
     54a:	90 f0       	brcs	.+36     	; 0x570 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0x88>
     54c:	0f 2d       	mov	r16, r15
     54e:	10 e0       	ldi	r17, 0x00	; 0
     550:	0d 5f       	subi	r16, 0xFD	; 253
     552:	1f 4f       	sbci	r17, 0xFF	; 255
     554:	00 0f       	add	r16, r16
     556:	11 1f       	adc	r17, r17
     558:	06 0d       	add	r16, r6
     55a:	17 1d       	adc	r17, r7
     55c:	f8 01       	movw	r30, r16
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	16 d3       	rcall	.+1580   	; 0xb90 <_ZN4Port11SetAsOutputEv>
     564:	f8 01       	movw	r30, r16
     566:	80 81       	ld	r24, Z
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	37 d3       	rcall	.+1646   	; 0xbda <_ZN4Port5ClearEv>
     56c:	f3 94       	inc	r15
     56e:	eb cf       	rjmp	.-42     	; 0x546 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0x5e>
     570:	f3 01       	movw	r30, r6
     572:	86 81       	ldd	r24, Z+6	; 0x06
     574:	97 81       	ldd	r25, Z+7	; 0x07
     576:	1f d3       	rcall	.+1598   	; 0xbb6 <_ZN4Port3SetEv>
     578:	f3 01       	movw	r30, r6
     57a:	80 85       	ldd	r24, Z+8	; 0x08
     57c:	91 85       	ldd	r25, Z+9	; 0x09
     57e:	1b d3       	rcall	.+1590   	; 0xbb6 <_ZN4Port3SetEv>
     580:	10 e0       	ldi	r17, 0x00	; 0
     582:	12 30       	cpi	r17, 0x02	; 2
     584:	90 f4       	brcc	.+36     	; 0x5aa <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xc2>
     586:	c3 01       	movw	r24, r6
     588:	e7 de       	rcall	.-562    	; 0x358 <_ZN7HD4478012SelectDeviceEv>
     58a:	8f e9       	ldi	r24, 0x9F	; 159
     58c:	9f e0       	ldi	r25, 0x0F	; 15
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xa6>
     592:	00 c0       	rjmp	.+0      	; 0x594 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xac>
     594:	00 00       	nop
     596:	c3 01       	movw	r24, r6
     598:	e4 de       	rcall	.-568    	; 0x362 <_ZN7HD447809LatchDataEv>
     59a:	ef e9       	ldi	r30, 0x9F	; 159
     59c:	ff e0       	ldi	r31, 0x0F	; 15
     59e:	31 97       	sbiw	r30, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xb6>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xbc>
     5a4:	00 00       	nop
     5a6:	1f 5f       	subi	r17, 0xFF	; 255
     5a8:	ec cf       	rjmp	.-40     	; 0x582 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0x9a>
     5aa:	f3 01       	movw	r30, r6
     5ac:	86 81       	ldd	r24, Z+6	; 0x06
     5ae:	97 81       	ldd	r25, Z+7	; 0x07
     5b0:	14 d3       	rcall	.+1576   	; 0xbda <_ZN4Port5ClearEv>
     5b2:	c3 01       	movw	r24, r6
     5b4:	d1 de       	rcall	.-606    	; 0x358 <_ZN7HD4478012SelectDeviceEv>
     5b6:	8f e9       	ldi	r24, 0x9F	; 159
     5b8:	9f e0       	ldi	r25, 0x0F	; 15
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	f1 f7       	brne	.-4      	; 0x5ba <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xd2>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xd8>
     5c0:	00 00       	nop
     5c2:	c3 01       	movw	r24, r6
     5c4:	ce de       	rcall	.-612    	; 0x362 <_ZN7HD447809LatchDataEv>
     5c6:	ef e9       	ldi	r30, 0x9F	; 159
     5c8:	ff e0       	ldi	r31, 0x0F	; 15
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xe2>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xe8>
     5d0:	00 00       	nop
     5d2:	41 e0       	ldi	r20, 0x01	; 1
     5d4:	68 e2       	ldi	r22, 0x28	; 40
     5d6:	c3 01       	movw	r24, r6
     5d8:	18 df       	rcall	.-464    	; 0x40a <_ZN7HD447808SendByteEc8DataType>
     5da:	c3 01       	movw	r24, r6
     5dc:	7d df       	rcall	.-262    	; 0x4d8 <_ZN7HD447803OffEv>
     5de:	c3 01       	movw	r24, r6
     5e0:	7f df       	rcall	.-258    	; 0x4e0 <_ZN7HD447805ClearEv>
     5e2:	41 e0       	ldi	r20, 0x01	; 1
     5e4:	66 e0       	ldi	r22, 0x06	; 6
     5e6:	c3 01       	movw	r24, r6
     5e8:	10 df       	rcall	.-480    	; 0x40a <_ZN7HD447808SendByteEc8DataType>
     5ea:	c3 01       	movw	r24, r6
     5ec:	71 df       	rcall	.-286    	; 0x4d0 <_ZN7HD447802OnEv>
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	8f 90       	pop	r8
     604:	7f 90       	pop	r7
     606:	6f 90       	pop	r6
     608:	08 95       	ret

0000060a <_ZN7HD447809PrintTextEPKchh>:
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	8c 01       	movw	r16, r24
     614:	eb 01       	movw	r28, r22
     616:	64 2f       	mov	r22, r20
     618:	42 2f       	mov	r20, r18
     61a:	4c df       	rcall	.-360    	; 0x4b4 <_ZN7HD4478017SetCursorPositionEhh>
     61c:	68 81       	ld	r22, Y
     61e:	66 23       	and	r22, r22
     620:	29 f0       	breq	.+10     	; 0x62c <_ZN7HD447809PrintTextEPKchh+0x22>
     622:	21 96       	adiw	r28, 0x01	; 1
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	c8 01       	movw	r24, r16
     628:	f0 de       	rcall	.-544    	; 0x40a <_ZN7HD447808SendByteEc8DataType>
     62a:	f8 cf       	rjmp	.-16     	; 0x61c <_ZN7HD447809PrintTextEPKchh+0x12>
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	1f 91       	pop	r17
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <_ZN7HD44780nwEj>:

void* HD44780::operator new(size_t size)
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     63c:	ce 01       	movw	r24, r28
     63e:	e6 d8       	rcall	.-3636   	; 0xfffff80c <__eeprom_end+0xff7ef80c>
	}while(ptr == nullptr);
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	e1 f3       	breq	.-8      	; 0x63c <_ZN7HD44780nwEj+0x6>
	
	return ptr;
}
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <_Z41__static_initialization_and_destruction_0ii>:
	
	/* Replace with your application code */
	while (1)
	{
	}
     64a:	8f 92       	push	r8
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	09 f0       	breq	.+2      	; 0x666 <_Z41__static_initialization_and_destruction_0ii+0x1c>
     664:	e0 c0       	rjmp	.+448    	; 0x826 <_Z41__static_initialization_and_destruction_0ii+0x1dc>
     666:	6f 3f       	cpi	r22, 0xFF	; 255
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	09 f0       	breq	.+2      	; 0x66e <_Z41__static_initialization_and_destruction_0ii+0x24>
     66c:	dc c0       	rjmp	.+440    	; 0x826 <_Z41__static_initialization_and_destruction_0ii+0x1dc>
#include "HD44780.h"
#include "StringHandler.h"
#include "AT24C256.h"
#include "TWI.h"

Port *rs = new Port(&PORTB, &DDRB, &PINB, 0);
     66e:	87 e0       	ldi	r24, 0x07	; 7
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	eb d2       	rcall	.+1494   	; 0xc4a <_ZN4PortnwEj>
     674:	ec 01       	movw	r28, r24
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	26 e3       	ldi	r18, 0x36	; 54
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	47 e3       	ldi	r20, 0x37	; 55
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	68 e3       	ldi	r22, 0x38	; 56
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	be d2       	rcall	.+1404   	; 0xc02 <_ZN4PortC1EPVhS1_S1_h>
     686:	d0 93 a7 00 	sts	0x00A7, r29	; 0x8000a7 <rs+0x1>
     68a:	c0 93 a6 00 	sts	0x00A6, r28	; 0x8000a6 <rs>
Port *rw = new Port(&PORTB, &DDRB, &PINB, 1);
     68e:	87 e0       	ldi	r24, 0x07	; 7
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	db d2       	rcall	.+1462   	; 0xc4a <_ZN4PortnwEj>
     694:	ec 01       	movw	r28, r24
     696:	01 e0       	ldi	r16, 0x01	; 1
     698:	26 e3       	ldi	r18, 0x36	; 54
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	47 e3       	ldi	r20, 0x37	; 55
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	68 e3       	ldi	r22, 0x38	; 56
     6a2:	70 e0       	ldi	r23, 0x00	; 0
     6a4:	ae d2       	rcall	.+1372   	; 0xc02 <_ZN4PortC1EPVhS1_S1_h>
     6a6:	d0 93 a5 00 	sts	0x00A5, r29	; 0x8000a5 <rw+0x1>
     6aa:	c0 93 a4 00 	sts	0x00A4, r28	; 0x8000a4 <rw>
Port *e = new Port(&PORTB, &DDRB, &PINB, 2);
     6ae:	87 e0       	ldi	r24, 0x07	; 7
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	cb d2       	rcall	.+1430   	; 0xc4a <_ZN4PortnwEj>
     6b4:	ec 01       	movw	r28, r24
     6b6:	02 e0       	ldi	r16, 0x02	; 2
     6b8:	26 e3       	ldi	r18, 0x36	; 54
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	47 e3       	ldi	r20, 0x37	; 55
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	68 e3       	ldi	r22, 0x38	; 56
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	9e d2       	rcall	.+1340   	; 0xc02 <_ZN4PortC1EPVhS1_S1_h>
     6c6:	d0 93 a3 00 	sts	0x00A3, r29	; 0x8000a3 <e+0x1>
     6ca:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <e>
Port *d4 = new Port(&PORTB, &DDRB, &PINB, 3);
     6ce:	87 e0       	ldi	r24, 0x07	; 7
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	bb d2       	rcall	.+1398   	; 0xc4a <_ZN4PortnwEj>
     6d4:	ec 01       	movw	r28, r24
     6d6:	03 e0       	ldi	r16, 0x03	; 3
     6d8:	26 e3       	ldi	r18, 0x36	; 54
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	47 e3       	ldi	r20, 0x37	; 55
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	68 e3       	ldi	r22, 0x38	; 56
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	8e d2       	rcall	.+1308   	; 0xc02 <_ZN4PortC1EPVhS1_S1_h>
     6e6:	d0 93 a1 00 	sts	0x00A1, r29	; 0x8000a1 <d4+0x1>
     6ea:	c0 93 a0 00 	sts	0x00A0, r28	; 0x8000a0 <d4>
Port *d5 = new Port(&PORTB, &DDRB, &PINB, 4);
     6ee:	87 e0       	ldi	r24, 0x07	; 7
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	ab d2       	rcall	.+1366   	; 0xc4a <_ZN4PortnwEj>
     6f4:	ec 01       	movw	r28, r24
     6f6:	04 e0       	ldi	r16, 0x04	; 4
     6f8:	26 e3       	ldi	r18, 0x36	; 54
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	47 e3       	ldi	r20, 0x37	; 55
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	68 e3       	ldi	r22, 0x38	; 56
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	7e d2       	rcall	.+1276   	; 0xc02 <_ZN4PortC1EPVhS1_S1_h>
     706:	d0 93 9f 00 	sts	0x009F, r29	; 0x80009f <d5+0x1>
     70a:	c0 93 9e 00 	sts	0x009E, r28	; 0x80009e <d5>
Port *d6 = new Port(&PORTB, &DDRB, &PINB, 5);
     70e:	87 e0       	ldi	r24, 0x07	; 7
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	9b d2       	rcall	.+1334   	; 0xc4a <_ZN4PortnwEj>
     714:	ec 01       	movw	r28, r24
     716:	05 e0       	ldi	r16, 0x05	; 5
     718:	26 e3       	ldi	r18, 0x36	; 54
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	47 e3       	ldi	r20, 0x37	; 55
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	68 e3       	ldi	r22, 0x38	; 56
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	6e d2       	rcall	.+1244   	; 0xc02 <_ZN4PortC1EPVhS1_S1_h>
     726:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <d6+0x1>
     72a:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <d6>
Port *d7 = new Port(&PORTB, &DDRB, &PINB, 6);
     72e:	87 e0       	ldi	r24, 0x07	; 7
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	8b d2       	rcall	.+1302   	; 0xc4a <_ZN4PortnwEj>
     734:	ec 01       	movw	r28, r24
     736:	06 e0       	ldi	r16, 0x06	; 6
     738:	26 e3       	ldi	r18, 0x36	; 54
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	47 e3       	ldi	r20, 0x37	; 55
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	68 e3       	ldi	r22, 0x38	; 56
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	5e d2       	rcall	.+1212   	; 0xc02 <_ZN4PortC1EPVhS1_S1_h>
     746:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <d7+0x1>
     74a:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <d7>
 	
HD44780 *lcd = new HD44780(rs, rw, e, d4, d5, d6, d7, 16);
     74e:	8f e0       	ldi	r24, 0x0F	; 15
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	71 df       	rcall	.-286    	; 0x636 <_ZN7HD44780nwEj>
     754:	ec 01       	movw	r28, r24
     756:	a0 90 9a 00 	lds	r10, 0x009A	; 0x80009a <d7>
     75a:	b0 90 9b 00 	lds	r11, 0x009B	; 0x80009b <d7+0x1>
     75e:	c0 90 9c 00 	lds	r12, 0x009C	; 0x80009c <d6>
     762:	d0 90 9d 00 	lds	r13, 0x009D	; 0x80009d <d6+0x1>
     766:	e0 90 9e 00 	lds	r14, 0x009E	; 0x80009e <d5>
     76a:	f0 90 9f 00 	lds	r15, 0x009F	; 0x80009f <d5+0x1>
     76e:	00 91 a0 00 	lds	r16, 0x00A0	; 0x8000a0 <d4>
     772:	10 91 a1 00 	lds	r17, 0x00A1	; 0x8000a1 <d4+0x1>
     776:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <e>
     77a:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <e+0x1>
     77e:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <rw>
     782:	50 91 a5 00 	lds	r21, 0x00A5	; 0x8000a5 <rw+0x1>
     786:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <rs>
     78a:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <rs+0x1>
     78e:	68 94       	set
     790:	88 24       	eor	r8, r8
     792:	84 f8       	bld	r8, 4
     794:	a9 de       	rcall	.-686    	; 0x4e8 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h>
     796:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <lcd+0x1>
     79a:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <lcd>

TWI *twi = new TWI(F_CPU);
     79e:	80 e1       	ldi	r24, 0x10	; 16
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	44 d4       	rcall	.+2184   	; 0x102c <_ZN3TWInwEj>
     7a4:	ec 01       	movw	r28, r24
     7a6:	40 e0       	ldi	r20, 0x00	; 0
     7a8:	52 e1       	ldi	r21, 0x12	; 18
     7aa:	6a e7       	ldi	r22, 0x7A	; 122
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	71 d3       	rcall	.+1762   	; 0xe92 <_ZN3TWIC1Em>
     7b0:	d0 93 97 00 	sts	0x0097, r29	; 0x800097 <twi+0x1>
     7b4:	c0 93 96 00 	sts	0x0096, r28	; 0x800096 <twi>
AT24C256 *eep1 = new AT24C256(twi, 1, 1, 1, 50000);
     7b8:	85 e1       	ldi	r24, 0x15	; 21
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	d7 dc       	rcall	.-1618   	; 0x16c <_ZN8AT24C256nwEj>
     7be:	ec 01       	movw	r28, r24
     7c0:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <twi>
     7c4:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <twi+0x1>
     7c8:	0f 2e       	mov	r0, r31
     7ca:	f0 e5       	ldi	r31, 0x50	; 80
     7cc:	cf 2e       	mov	r12, r31
     7ce:	f3 ec       	ldi	r31, 0xC3	; 195
     7d0:	df 2e       	mov	r13, r31
     7d2:	e1 2c       	mov	r14, r1
     7d4:	f1 2c       	mov	r15, r1
     7d6:	f0 2d       	mov	r31, r0
     7d8:	01 e0       	ldi	r16, 0x01	; 1
     7da:	21 e0       	ldi	r18, 0x01	; 1
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	97 dc       	rcall	.-1746   	; 0x10e <_ZN8AT24C256C1EP3TWIhhhm>
     7e0:	d0 93 95 00 	sts	0x0095, r29	; 0x800095 <eep1+0x1>
     7e4:	c0 93 94 00 	sts	0x0094, r28	; 0x800094 <eep1>
AT24C256 *eep2 = new AT24C256(twi, 0, 1, 1, 50000);
     7e8:	85 e1       	ldi	r24, 0x15	; 21
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	bf dc       	rcall	.-1666   	; 0x16c <_ZN8AT24C256nwEj>
     7ee:	ec 01       	movw	r28, r24
     7f0:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <twi>
     7f4:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <twi+0x1>
     7f8:	21 e0       	ldi	r18, 0x01	; 1
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	88 dc       	rcall	.-1776   	; 0x10e <_ZN8AT24C256C1EP3TWIhhhm>
     7fe:	d0 93 93 00 	sts	0x0093, r29	; 0x800093 <eep2+0x1>
     802:	c0 93 92 00 	sts	0x0092, r28	; 0x800092 <eep2>
AT24C256 *eep3 = new AT24C256(twi, 0, 0, 0, 50000);
     806:	85 e1       	ldi	r24, 0x15	; 21
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	b0 dc       	rcall	.-1696   	; 0x16c <_ZN8AT24C256nwEj>
     80c:	ec 01       	movw	r28, r24
     80e:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <twi>
     812:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <twi+0x1>
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	78 dc       	rcall	.-1808   	; 0x10e <_ZN8AT24C256C1EP3TWIhhhm>
     81e:	d0 93 91 00 	sts	0x0091, r29	; 0x800091 <eep3+0x1>
     822:	c0 93 90 00 	sts	0x0090, r28	; 0x800090 <eep3>
	
	/* Replace with your application code */
	while (1)
	{
	}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ff 90       	pop	r15
     830:	ef 90       	pop	r14
     832:	df 90       	pop	r13
     834:	cf 90       	pop	r12
     836:	bf 90       	pop	r11
     838:	af 90       	pop	r10
     83a:	8f 90       	pop	r8
     83c:	08 95       	ret

0000083e <__vector_17>:
uint16_t e1 = 0;
float e2 = 0;
long e3 = 0;

ISR(TWI_vect)
{
     83e:	1f 92       	push	r1
     840:	0f 92       	push	r0
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	0f 92       	push	r0
     846:	11 24       	eor	r1, r1
     848:	2f 93       	push	r18
     84a:	3f 93       	push	r19
     84c:	4f 93       	push	r20
     84e:	5f 93       	push	r21
     850:	6f 93       	push	r22
     852:	7f 93       	push	r23
     854:	8f 93       	push	r24
     856:	9f 93       	push	r25
     858:	af 93       	push	r26
     85a:	bf 93       	push	r27
     85c:	ef 93       	push	r30
     85e:	ff 93       	push	r31
	twi->HandleDataChange();
     860:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     864:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     868:	5d d3       	rcall	.+1722   	; 0xf24 <_ZN3TWI16HandleDataChangeEv>
}
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	bf 91       	pop	r27
     870:	af 91       	pop	r26
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	7f 91       	pop	r23
     878:	6f 91       	pop	r22
     87a:	5f 91       	pop	r21
     87c:	4f 91       	pop	r20
     87e:	3f 91       	pop	r19
     880:	2f 91       	pop	r18
     882:	0f 90       	pop	r0
     884:	0f be       	out	0x3f, r0	; 63
     886:	0f 90       	pop	r0
     888:	1f 90       	pop	r1
     88a:	18 95       	reti

0000088c <__vector_9>:

ISR(TIMER0_OVF_vect)
{
     88c:	1f 92       	push	r1
     88e:	0f 92       	push	r0
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	0f 92       	push	r0
     894:	11 24       	eor	r1, r1
     896:	2f 93       	push	r18
     898:	3f 93       	push	r19
     89a:	4f 93       	push	r20
     89c:	5f 93       	push	r21
     89e:	6f 93       	push	r22
     8a0:	7f 93       	push	r23
     8a2:	8f 93       	push	r24
     8a4:	9f 93       	push	r25
     8a6:	af 93       	push	r26
     8a8:	bf 93       	push	r27
     8aa:	ef 93       	push	r30
     8ac:	ff 93       	push	r31
	twi->CheckDevices();
     8ae:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     8b2:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     8b6:	50 d3       	rcall	.+1696   	; 0xf58 <_ZN3TWI12CheckDevicesEv>
	
	if(allowPrintE1)
     8b8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <allowPrintE1>
     8bc:	88 23       	and	r24, r24
     8be:	71 f1       	breq	.+92     	; 0x91c <__vector_9+0x90>
	{
		TWI_TransactionStatus ts1 = eep1->GetTransactionStatus();
     8c0:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <eep1>
     8c4:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <eep1+0x1>
     8c8:	dc 01       	movw	r26, r24
     8ca:	ed 91       	ld	r30, X+
     8cc:	fc 91       	ld	r31, X
     8ce:	02 80       	ldd	r0, Z+2	; 0x02
     8d0:	f3 81       	ldd	r31, Z+3	; 0x03
     8d2:	e0 2d       	mov	r30, r0
     8d4:	09 95       	icall
		if(ts1 == TWI_Ok)
     8d6:	82 30       	cpi	r24, 0x02	; 2
     8d8:	a1 f4       	brne	.+40     	; 0x902 <__vector_9+0x76>
		{
			allowPrintE1 = false;
     8da:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <allowPrintE1>
			lcd->PrintText(StringHandler::FloatToString(e1, 0), 0, 0);			
     8de:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <e1>
     8e2:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <e1+0x1>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	3f d4       	rcall	.+2174   	; 0x116a <__floatunsisf>
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	b7 d1       	rcall	.+878    	; 0xc5e <_ZN13StringHandler13FloatToStringEfh>
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	bc 01       	movw	r22, r24
     8f6:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     8fa:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     8fe:	85 de       	rcall	.-758    	; 0x60a <_ZN7HD447809PrintTextEPKchh>
     900:	0d c0       	rjmp	.+26     	; 0x91c <__vector_9+0x90>
		}
		else if(ts1 == TWI_Error)
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	59 f4       	brne	.+22     	; 0x91c <__vector_9+0x90>
		{
			allowPrintE1 = false;
     906:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <allowPrintE1>
			lcd->PrintText("err1", 0, 0);	
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	63 e7       	ldi	r22, 0x73	; 115
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     916:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     91a:	77 de       	rcall	.-786    	; 0x60a <_ZN7HD447809PrintTextEPKchh>
		}
	}
	
	if(allowPrintE2)
     91c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <allowPrintE2>
     920:	88 23       	and	r24, r24
     922:	79 f1       	breq	.+94     	; 0x982 <__vector_9+0xf6>
	{
		TWI_TransactionStatus ts2 = eep2->GetTransactionStatus();
     924:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <eep2>
     928:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <eep2+0x1>
     92c:	dc 01       	movw	r26, r24
     92e:	ed 91       	ld	r30, X+
     930:	fc 91       	ld	r31, X
     932:	02 80       	ldd	r0, Z+2	; 0x02
     934:	f3 81       	ldd	r31, Z+3	; 0x03
     936:	e0 2d       	mov	r30, r0
     938:	09 95       	icall
		if(ts2 == TWI_Ok)
     93a:	82 30       	cpi	r24, 0x02	; 2
     93c:	a9 f4       	brne	.+42     	; 0x968 <__vector_9+0xdc>
		{
			allowPrintE2 = false;
     93e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <allowPrintE2>
			lcd->PrintText(StringHandler::FloatToString(e2, 5), 0, 1);
     942:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <e2>
     946:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <e2+0x1>
     94a:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <e2+0x2>
     94e:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <e2+0x3>
     952:	45 e0       	ldi	r20, 0x05	; 5
     954:	84 d1       	rcall	.+776    	; 0xc5e <_ZN13StringHandler13FloatToStringEfh>
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	bc 01       	movw	r22, r24
     95c:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     960:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     964:	52 de       	rcall	.-860    	; 0x60a <_ZN7HD447809PrintTextEPKchh>
     966:	0d c0       	rjmp	.+26     	; 0x982 <__vector_9+0xf6>
		}
		else if(ts2 == TWI_Error)
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	59 f4       	brne	.+22     	; 0x982 <__vector_9+0xf6>
		{
			allowPrintE2 = false;
     96c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <allowPrintE2>
			lcd->PrintText("err2", 0, 1);
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	68 e7       	ldi	r22, 0x78	; 120
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     97c:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     980:	44 de       	rcall	.-888    	; 0x60a <_ZN7HD447809PrintTextEPKchh>
		}
	}
	
	if(allowPrintE3)
     982:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <allowPrintE3>
     986:	88 23       	and	r24, r24
     988:	81 f1       	breq	.+96     	; 0x9ea <__vector_9+0x15e>
	{
		TWI_TransactionStatus ts3 = eep3->GetTransactionStatus();
     98a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <eep3>
     98e:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <eep3+0x1>
     992:	dc 01       	movw	r26, r24
     994:	ed 91       	ld	r30, X+
     996:	fc 91       	ld	r31, X
     998:	02 80       	ldd	r0, Z+2	; 0x02
     99a:	f3 81       	ldd	r31, Z+3	; 0x03
     99c:	e0 2d       	mov	r30, r0
     99e:	09 95       	icall
		if(ts3 == TWI_Ok)
     9a0:	82 30       	cpi	r24, 0x02	; 2
     9a2:	b1 f4       	brne	.+44     	; 0x9d0 <__vector_9+0x144>
		{
			allowPrintE3 = false;
     9a4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <allowPrintE3>
			lcd->PrintText(StringHandler::FloatToString(e3, 0), 10, 0);
     9a8:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__data_end>
     9ac:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__data_end+0x1>
     9b0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end+0x2>
     9b4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x3>
     9b8:	da d3       	rcall	.+1972   	; 0x116e <__floatsisf>
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 d1       	rcall	.+672    	; 0xc5e <_ZN13StringHandler13FloatToStringEfh>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	4a e0       	ldi	r20, 0x0A	; 10
     9c2:	bc 01       	movw	r22, r24
     9c4:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     9c8:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     9cc:	1e de       	rcall	.-964    	; 0x60a <_ZN7HD447809PrintTextEPKchh>
     9ce:	0d c0       	rjmp	.+26     	; 0x9ea <__vector_9+0x15e>
		}
		else if(ts3 == TWI_Error)
     9d0:	83 30       	cpi	r24, 0x03	; 3
     9d2:	59 f4       	brne	.+22     	; 0x9ea <__vector_9+0x15e>
		{
			allowPrintE3 = false;
     9d4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <allowPrintE3>
			lcd->PrintText("err3", 10, 0);
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	4a e0       	ldi	r20, 0x0A	; 10
     9dc:	6d e7       	ldi	r22, 0x7D	; 125
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     9e4:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     9e8:	10 de       	rcall	.-992    	; 0x60a <_ZN7HD447809PrintTextEPKchh>
		}
	}
}
     9ea:	ff 91       	pop	r31
     9ec:	ef 91       	pop	r30
     9ee:	bf 91       	pop	r27
     9f0:	af 91       	pop	r26
     9f2:	9f 91       	pop	r25
     9f4:	8f 91       	pop	r24
     9f6:	7f 91       	pop	r23
     9f8:	6f 91       	pop	r22
     9fa:	5f 91       	pop	r21
     9fc:	4f 91       	pop	r20
     9fe:	3f 91       	pop	r19
     a00:	2f 91       	pop	r18
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti

00000a0c <_ZN8AT24C25613SetDataToReadIjEEvjRT_h>:
	
	TWI_TransactionStatus transactionStatus;
}; 

template <typename T>
void AT24C256::SetDataToRead(uint16_t dataAddress, T &data, uint8_t dataSize)
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
{
	if(dataAddress >= fieldSize) return;
     a14:	77 23       	and	r23, r23
     a16:	bc f0       	brlt	.+46     	; 0xa46 <_ZN8AT24C25613SetDataToReadIjEEvjRT_h+0x3a>
	
	if(this->transactionStatus == TWI_InProcess) return;
     a18:	fc 01       	movw	r30, r24
     a1a:	34 89       	ldd	r19, Z+20	; 0x14
     a1c:	31 30       	cpi	r19, 0x01	; 1
     a1e:	99 f0       	breq	.+38     	; 0xa46 <_ZN8AT24C25613SetDataToReadIjEEvjRT_h+0x3a>
     a20:	8a 01       	movw	r16, r20
     a22:	ec 01       	movw	r28, r24
	
	this->transactionStatus = TWI_InProcess;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	84 8b       	std	Z+20, r24	; 0x14
	this->operation = TWI_Read;
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	83 8b       	std	Z+19, r24	; 0x13
	
	this->dataAddress = dataAddress;
     a2c:	72 87       	std	Z+10, r23	; 0x0a
     a2e:	61 87       	std	Z+9, r22	; 0x09
	this->dataAddressPtr = (uint8_t*)&this->dataAddress;
     a30:	cf 01       	movw	r24, r30
     a32:	09 96       	adiw	r24, 0x09	; 9
     a34:	94 87       	std	Z+12, r25	; 0x0c
     a36:	83 87       	std	Z+11, r24	; 0x0b
		
	this->dataSize = dataSize;
     a38:	20 8b       	std	Z+16, r18	; 0x10
	
	ClearCounters();
     a3a:	cf 01       	movw	r24, r30
     a3c:	a1 db       	rcall	.-2238   	; 0x180 <_ZN8AT24C25613ClearCountersEv>
	
	NormaliseDataRange();	
     a3e:	ce 01       	movw	r24, r28
     a40:	a4 db       	rcall	.-2232   	; 0x18a <_ZN8AT24C25618NormaliseDataRangeEv>
	
	this->data = (uint8_t*)&data;
     a42:	1f 87       	std	Y+15, r17	; 0x0f
     a44:	0e 87       	std	Y+14, r16	; 0x0e
}
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	08 95       	ret

00000a50 <_ZN8AT24C25613SetDataToReadIfEEvjRT_h>:
	
	TWI_TransactionStatus transactionStatus;
}; 

template <typename T>
void AT24C256::SetDataToRead(uint16_t dataAddress, T &data, uint8_t dataSize)
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
{
	if(dataAddress >= fieldSize) return;
     a58:	77 23       	and	r23, r23
     a5a:	bc f0       	brlt	.+46     	; 0xa8a <_ZN8AT24C25613SetDataToReadIfEEvjRT_h+0x3a>
	
	if(this->transactionStatus == TWI_InProcess) return;
     a5c:	fc 01       	movw	r30, r24
     a5e:	34 89       	ldd	r19, Z+20	; 0x14
     a60:	31 30       	cpi	r19, 0x01	; 1
     a62:	99 f0       	breq	.+38     	; 0xa8a <_ZN8AT24C25613SetDataToReadIfEEvjRT_h+0x3a>
     a64:	8a 01       	movw	r16, r20
     a66:	ec 01       	movw	r28, r24
	
	this->transactionStatus = TWI_InProcess;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	84 8b       	std	Z+20, r24	; 0x14
	this->operation = TWI_Read;
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	83 8b       	std	Z+19, r24	; 0x13
	
	this->dataAddress = dataAddress;
     a70:	72 87       	std	Z+10, r23	; 0x0a
     a72:	61 87       	std	Z+9, r22	; 0x09
	this->dataAddressPtr = (uint8_t*)&this->dataAddress;
     a74:	cf 01       	movw	r24, r30
     a76:	09 96       	adiw	r24, 0x09	; 9
     a78:	94 87       	std	Z+12, r25	; 0x0c
     a7a:	83 87       	std	Z+11, r24	; 0x0b
		
	this->dataSize = dataSize;
     a7c:	20 8b       	std	Z+16, r18	; 0x10
	
	ClearCounters();
     a7e:	cf 01       	movw	r24, r30
     a80:	7f db       	rcall	.-2306   	; 0x180 <_ZN8AT24C25613ClearCountersEv>
	
	NormaliseDataRange();	
     a82:	ce 01       	movw	r24, r28
     a84:	82 db       	rcall	.-2300   	; 0x18a <_ZN8AT24C25618NormaliseDataRangeEv>
	
	this->data = (uint8_t*)&data;
     a86:	1f 87       	std	Y+15, r17	; 0x0f
     a88:	0e 87       	std	Y+14, r16	; 0x0e
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <_ZN8AT24C25613SetDataToReadIlEEvjRT_h>:
	
	TWI_TransactionStatus transactionStatus;
}; 

template <typename T>
void AT24C256::SetDataToRead(uint16_t dataAddress, T &data, uint8_t dataSize)
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
{
	if(dataAddress >= fieldSize) return;
     a9c:	77 23       	and	r23, r23
     a9e:	bc f0       	brlt	.+46     	; 0xace <_ZN8AT24C25613SetDataToReadIlEEvjRT_h+0x3a>
	
	if(this->transactionStatus == TWI_InProcess) return;
     aa0:	fc 01       	movw	r30, r24
     aa2:	34 89       	ldd	r19, Z+20	; 0x14
     aa4:	31 30       	cpi	r19, 0x01	; 1
     aa6:	99 f0       	breq	.+38     	; 0xace <_ZN8AT24C25613SetDataToReadIlEEvjRT_h+0x3a>
     aa8:	8a 01       	movw	r16, r20
     aaa:	ec 01       	movw	r28, r24
	
	this->transactionStatus = TWI_InProcess;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	84 8b       	std	Z+20, r24	; 0x14
	this->operation = TWI_Read;
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	83 8b       	std	Z+19, r24	; 0x13
	
	this->dataAddress = dataAddress;
     ab4:	72 87       	std	Z+10, r23	; 0x0a
     ab6:	61 87       	std	Z+9, r22	; 0x09
	this->dataAddressPtr = (uint8_t*)&this->dataAddress;
     ab8:	cf 01       	movw	r24, r30
     aba:	09 96       	adiw	r24, 0x09	; 9
     abc:	94 87       	std	Z+12, r25	; 0x0c
     abe:	83 87       	std	Z+11, r24	; 0x0b
		
	this->dataSize = dataSize;
     ac0:	20 8b       	std	Z+16, r18	; 0x10
	
	ClearCounters();
     ac2:	cf 01       	movw	r24, r30
     ac4:	5d db       	rcall	.-2374   	; 0x180 <_ZN8AT24C25613ClearCountersEv>
	
	NormaliseDataRange();	
     ac6:	ce 01       	movw	r24, r28
     ac8:	60 db       	rcall	.-2368   	; 0x18a <_ZN8AT24C25618NormaliseDataRangeEv>
	
	this->data = (uint8_t*)&data;
     aca:	1f 87       	std	Y+15, r17	; 0x0f
     acc:	0e 87       	std	Y+14, r16	; 0x0e
}
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	08 95       	ret

00000ad8 <main>:

int main(void)
{
	
	//T0
	TCCR0|=(1<<CS02)|(1<<CS00);	//prescaler 1024
     ad8:	83 b7       	in	r24, 0x33	; 51
     ada:	85 60       	ori	r24, 0x05	; 5
     adc:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0);			//enable interrupt OVF
     ade:	89 b7       	in	r24, 0x39	; 57
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	89 bf       	out	0x39, r24	; 57
		
	sei();
     ae4:	78 94       	sei
	
	twi->AddDevice(eep1);
     ae6:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <eep1>
     aea:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <eep1+0x1>
     aee:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     af2:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     af6:	d5 d1       	rcall	.+938    	; 0xea2 <_ZN3TWI9AddDeviceEP4ITWI>
	twi->AddDevice(eep2);
     af8:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <eep2>
     afc:	70 91 93 00 	lds	r23, 0x0093	; 0x800093 <eep2+0x1>
     b00:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     b04:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     b08:	cc d1       	rcall	.+920    	; 0xea2 <_ZN3TWI9AddDeviceEP4ITWI>
	twi->AddDevice(eep3);
     b0a:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <eep3>
     b0e:	70 91 91 00 	lds	r23, 0x0091	; 0x800091 <eep3+0x1>
     b12:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     b16:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     b1a:	c3 d1       	rcall	.+902    	; 0xea2 <_ZN3TWI9AddDeviceEP4ITWI>
  	//eep2->SetDataToWrite(50, e2, sizeof(e2));
	//
  	//e3 = 198523;
  	//eep3->SetDataToWrite(8150, e3, sizeof(e3));
	
 	eep1->SetDataToRead(0, e1, sizeof(e1));
     b1c:	22 e0       	ldi	r18, 0x02	; 2
     b1e:	4e e8       	ldi	r20, 0x8E	; 142
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <eep1>
     b2a:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <eep1+0x1>
     b2e:	6e df       	rcall	.-292    	; 0xa0c <_ZN8AT24C25613SetDataToReadIjEEvjRT_h>
 	eep2->SetDataToRead(50, e2, sizeof(e2));
     b30:	24 e0       	ldi	r18, 0x04	; 4
     b32:	4a e8       	ldi	r20, 0x8A	; 138
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	62 e3       	ldi	r22, 0x32	; 50
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <eep2>
     b3e:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <eep2+0x1>
     b42:	86 df       	rcall	.-244    	; 0xa50 <_ZN8AT24C25613SetDataToReadIfEEvjRT_h>
 	eep3->SetDataToRead(8150, e3, sizeof(e3));
     b44:	24 e0       	ldi	r18, 0x04	; 4
     b46:	46 e8       	ldi	r20, 0x86	; 134
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	66 ed       	ldi	r22, 0xD6	; 214
     b4c:	7f e1       	ldi	r23, 0x1F	; 31
     b4e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <eep3>
     b52:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <eep3+0x1>
     b56:	9e df       	rcall	.-196    	; 0xa94 <_ZN8AT24C25613SetDataToReadIlEEvjRT_h>
     b58:	ff cf       	rjmp	.-2      	; 0xb58 <main+0x80>

00000b5a <_GLOBAL__sub_I_rs>:
	
	/* Replace with your application code */
	while (1)
	{
	}
     b5a:	6f ef       	ldi	r22, 0xFF	; 255
     b5c:	7f ef       	ldi	r23, 0xFF	; 255
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	73 dd       	rcall	.-1306   	; 0x64a <_Z41__static_initialization_and_destruction_0ii>
     b64:	08 95       	ret

00000b66 <_ZN4Port10SetAsInputEv>:
bool Port::IsClear()
{
	return !(*this->PIN & (1<<this->pinNum));
}

Port::~Port(){}
     b66:	dc 01       	movw	r26, r24
     b68:	12 96       	adiw	r26, 0x02	; 2
     b6a:	ed 91       	ld	r30, X+
     b6c:	fc 91       	ld	r31, X
     b6e:	13 97       	sbiw	r26, 0x03	; 3
     b70:	40 81       	ld	r20, Z
     b72:	21 e0       	ldi	r18, 0x01	; 1
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	b9 01       	movw	r22, r18
     b78:	16 96       	adiw	r26, 0x06	; 6
     b7a:	0c 90       	ld	r0, X
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <_ZN4Port10SetAsInputEv+0x1c>
     b7e:	66 0f       	add	r22, r22
     b80:	77 1f       	adc	r23, r23
     b82:	0a 94       	dec	r0
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <_ZN4Port10SetAsInputEv+0x18>
     b86:	cb 01       	movw	r24, r22
     b88:	80 95       	com	r24
     b8a:	84 23       	and	r24, r20
     b8c:	80 83       	st	Z, r24
     b8e:	08 95       	ret

00000b90 <_ZN4Port11SetAsOutputEv>:
     b90:	dc 01       	movw	r26, r24
     b92:	12 96       	adiw	r26, 0x02	; 2
     b94:	ed 91       	ld	r30, X+
     b96:	fc 91       	ld	r31, X
     b98:	13 97       	sbiw	r26, 0x03	; 3
     b9a:	40 81       	ld	r20, Z
     b9c:	21 e0       	ldi	r18, 0x01	; 1
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	c9 01       	movw	r24, r18
     ba2:	16 96       	adiw	r26, 0x06	; 6
     ba4:	0c 90       	ld	r0, X
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <_ZN4Port11SetAsOutputEv+0x1c>
     ba8:	88 0f       	add	r24, r24
     baa:	99 1f       	adc	r25, r25
     bac:	0a 94       	dec	r0
     bae:	e2 f7       	brpl	.-8      	; 0xba8 <_ZN4Port11SetAsOutputEv+0x18>
     bb0:	84 2b       	or	r24, r20
     bb2:	80 83       	st	Z, r24
     bb4:	08 95       	ret

00000bb6 <_ZN4Port3SetEv>:
     bb6:	dc 01       	movw	r26, r24
     bb8:	ed 91       	ld	r30, X+
     bba:	fc 91       	ld	r31, X
     bbc:	11 97       	sbiw	r26, 0x01	; 1
     bbe:	40 81       	ld	r20, Z
     bc0:	21 e0       	ldi	r18, 0x01	; 1
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	c9 01       	movw	r24, r18
     bc6:	16 96       	adiw	r26, 0x06	; 6
     bc8:	0c 90       	ld	r0, X
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <_ZN4Port3SetEv+0x1a>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <_ZN4Port3SetEv+0x16>
     bd4:	84 2b       	or	r24, r20
     bd6:	80 83       	st	Z, r24
     bd8:	08 95       	ret

00000bda <_ZN4Port5ClearEv>:
     bda:	dc 01       	movw	r26, r24
     bdc:	ed 91       	ld	r30, X+
     bde:	fc 91       	ld	r31, X
     be0:	11 97       	sbiw	r26, 0x01	; 1
     be2:	40 81       	ld	r20, Z
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	b9 01       	movw	r22, r18
     bea:	16 96       	adiw	r26, 0x06	; 6
     bec:	0c 90       	ld	r0, X
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <_ZN4Port5ClearEv+0x1a>
     bf0:	66 0f       	add	r22, r22
     bf2:	77 1f       	adc	r23, r23
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <_ZN4Port5ClearEv+0x16>
     bf8:	cb 01       	movw	r24, r22
     bfa:	80 95       	com	r24
     bfc:	84 23       	and	r24, r20
     bfe:	80 83       	st	Z, r24
     c00:	08 95       	ret

00000c02 <_ZN4PortC1EPVhS1_S1_h>:
     c02:	0f 93       	push	r16
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ec 01       	movw	r28, r24
     c0a:	79 83       	std	Y+1, r23	; 0x01
     c0c:	68 83       	st	Y, r22
     c0e:	5b 83       	std	Y+3, r21	; 0x03
     c10:	4a 83       	std	Y+2, r20	; 0x02
     c12:	3d 83       	std	Y+5, r19	; 0x05
     c14:	2c 83       	std	Y+4, r18	; 0x04
     c16:	0e 83       	std	Y+6, r16	; 0x06
     c18:	a6 df       	rcall	.-180    	; 0xb66 <_ZN4Port10SetAsInputEv>
     c1a:	ce 01       	movw	r24, r28
     c1c:	de df       	rcall	.-68     	; 0xbda <_ZN4Port5ClearEv>
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <_ZN4Port5IsSetEv>:
     c26:	dc 01       	movw	r26, r24
     c28:	14 96       	adiw	r26, 0x04	; 4
     c2a:	ed 91       	ld	r30, X+
     c2c:	fc 91       	ld	r31, X
     c2e:	15 97       	sbiw	r26, 0x05	; 5
     c30:	20 81       	ld	r18, Z
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	f9 01       	movw	r30, r18
     c36:	16 96       	adiw	r26, 0x06	; 6
     c38:	0c 90       	ld	r0, X
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <_ZN4Port5IsSetEv+0x1a>
     c3c:	f5 95       	asr	r31
     c3e:	e7 95       	ror	r30
     c40:	0a 94       	dec	r0
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <_ZN4Port5IsSetEv+0x16>
     c44:	cf 01       	movw	r24, r30
     c46:	81 70       	andi	r24, 0x01	; 1
     c48:	08 95       	ret

00000c4a <_ZN4PortnwEj>:

void* Port::operator new(size_t size)
{
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     c50:	ce 01       	movw	r24, r28
     c52:	dc d5       	rcall	.+3000   	; 0x180c <malloc>
	}while(ptr == nullptr);
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	e1 f3       	breq	.-8      	; 0xc50 <_ZN4PortnwEj+0x6>
	
	return ptr;
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <_ZN13StringHandler13FloatToStringEfh>:
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
     c5e:	2f 92       	push	r2
     c60:	3f 92       	push	r3
     c62:	4f 92       	push	r4
     c64:	5f 92       	push	r5
     c66:	6f 92       	push	r6
     c68:	7f 92       	push	r7
     c6a:	8f 92       	push	r8
     c6c:	9f 92       	push	r9
     c6e:	af 92       	push	r10
     c70:	bf 92       	push	r11
     c72:	cf 92       	push	r12
     c74:	df 92       	push	r13
     c76:	ef 92       	push	r14
     c78:	ff 92       	push	r15
     c7a:	0f 93       	push	r16
     c7c:	1f 93       	push	r17
     c7e:	cf 93       	push	r28
     c80:	df 93       	push	r29
     c82:	00 d0       	rcall	.+0      	; 0xc84 <_ZN13StringHandler13FloatToStringEfh+0x26>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <_ZN13StringHandler13FloatToStringEfh+0x28>
     c86:	00 d0       	rcall	.+0      	; 0xc88 <_ZN13StringHandler13FloatToStringEfh+0x2a>
     c88:	cd b7       	in	r28, 0x3d	; 61
     c8a:	de b7       	in	r29, 0x3e	; 62
     c8c:	2b 01       	movw	r4, r22
     c8e:	3c 01       	movw	r6, r24
     c90:	94 2e       	mov	r9, r20
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
	
	return resultString;
}
     c92:	2d b6       	in	r2, 0x3d	; 61
     c94:	3e b6       	in	r3, 0x3e	; 62
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
	uint32_t integerPart = fabs(value);
     c96:	9f 77       	andi	r25, 0x7F	; 127
     c98:	6b 83       	std	Y+3, r22	; 0x03
     c9a:	7c 83       	std	Y+4, r23	; 0x04
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	9e 83       	std	Y+6, r25	; 0x06
     ca0:	38 d2       	rcall	.+1136   	; 0x1112 <__fixunssfsi>
     ca2:	a6 2e       	mov	r10, r22
     ca4:	b7 2e       	mov	r11, r23
     ca6:	c8 2e       	mov	r12, r24
     ca8:	d9 2e       	mov	r13, r25
     caa:	26 2f       	mov	r18, r22
     cac:	37 2f       	mov	r19, r23
     cae:	48 2f       	mov	r20, r24
     cb0:	59 2f       	mov	r21, r25
	
	uint8_t stringLength = 0;	
     cb2:	81 2c       	mov	r8, r1
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <_ZN13StringHandler13FloatToStringEfh+0x5a>
	do
	{
		integerPart /= 10;
		stringLength++;
     cb6:	8f 2c       	mov	r8, r15
	uint32_t integerPart = fabs(value);
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
     cb8:	ca 01       	movw	r24, r20
     cba:	b9 01       	movw	r22, r18
     cbc:	2a e0       	ldi	r18, 0x0A	; 10
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	7b d5       	rcall	.+2806   	; 0x17bc <__udivmodsi4>
		stringLength++;
     cc6:	ff 24       	eor	r15, r15
     cc8:	f3 94       	inc	r15
     cca:	f8 0c       	add	r15, r8
	}
	while(integerPart > 0);
     ccc:	21 15       	cp	r18, r1
     cce:	31 05       	cpc	r19, r1
     cd0:	41 05       	cpc	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	81 f7       	brne	.-32     	; 0xcb6 <_ZN13StringHandler13FloatToStringEfh+0x58>
	
	integerPart = fabs(value);
	
	uint8_t integerPartLength = stringLength;
	
	if(digitsAfterDot > 0)
     cd6:	99 20       	and	r9, r9
     cd8:	21 f0       	breq	.+8      	; 0xce2 <_ZN13StringHandler13FloatToStringEfh+0x84>
	{
		stringLength++;										//for '.'
     cda:	83 94       	inc	r8
     cdc:	83 94       	inc	r8
		stringLength += digitsAfterDot;						//for .xxxxx
     cde:	89 0c       	add	r8, r9
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <_ZN13StringHandler13FloatToStringEfh+0x86>
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
		stringLength++;
     ce2:	8f 2c       	mov	r8, r15
	{
		stringLength++;										//for '.'
		stringLength += digitsAfterDot;						//for .xxxxx
	}
	
	if(value < 0) stringLength++;							//for '-'
     ce4:	20 e0       	ldi	r18, 0x00	; 0
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	a9 01       	movw	r20, r18
     cea:	c3 01       	movw	r24, r6
     cec:	b2 01       	movw	r22, r4
     cee:	0d d2       	rcall	.+1050   	; 0x110a <__cmpsf2>
     cf0:	88 23       	and	r24, r24
     cf2:	0c f4       	brge	.+2      	; 0xcf6 <_ZN13StringHandler13FloatToStringEfh+0x98>
     cf4:	83 94       	inc	r8
	
	stringLength++;											//for '\0'	
     cf6:	83 94       	inc	r8
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
     cf8:	8f 2d       	mov	r24, r15
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	ad b7       	in	r26, 0x3d	; 61
     d00:	be b7       	in	r27, 0x3e	; 62
     d02:	a8 1b       	sub	r26, r24
     d04:	b9 0b       	sbc	r27, r25
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	be bf       	out	0x3e, r27	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	ad bf       	out	0x3d, r26	; 61
     d10:	2d b7       	in	r18, 0x3d	; 61
     d12:	3e b7       	in	r19, 0x3e	; 62
     d14:	2f 5f       	subi	r18, 0xFF	; 255
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	3a 83       	std	Y+2, r19	; 0x02
     d1a:	29 83       	std	Y+1, r18	; 0x01
     d1c:	89 01       	movw	r16, r18
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     d1e:	ee 24       	eor	r14, r14
     d20:	e3 94       	inc	r14
     d22:	fe 14       	cp	r15, r14
     d24:	b8 f0       	brcs	.+46     	; 0xd54 <_ZN13StringHandler13FloatToStringEfh+0xf6>
	{
		uint8_t dig = integerPart % 10;
				
		integerPart /= 10;
     d26:	6a 2d       	mov	r22, r10
     d28:	7b 2d       	mov	r23, r11
     d2a:	8c 2d       	mov	r24, r12
     d2c:	9d 2d       	mov	r25, r13
     d2e:	2a e0       	ldi	r18, 0x0A	; 10
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	42 d5       	rcall	.+2692   	; 0x17bc <__udivmodsi4>
     d38:	a2 2e       	mov	r10, r18
     d3a:	b3 2e       	mov	r11, r19
     d3c:	c4 2e       	mov	r12, r20
     d3e:	d5 2e       	mov	r13, r21
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
     d40:	ef 2d       	mov	r30, r15
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	ee 19       	sub	r30, r14
     d46:	f1 09       	sbc	r31, r1
     d48:	e0 0f       	add	r30, r16
     d4a:	f1 1f       	adc	r31, r17
     d4c:	60 5d       	subi	r22, 0xD0	; 208
     d4e:	60 83       	st	Z, r22
	
	stringLength++;											//for '\0'	
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     d50:	e3 94       	inc	r14
     d52:	e7 cf       	rjmp	.-50     	; 0xd22 <_ZN13StringHandler13FloatToStringEfh+0xc4>
		integerPart /= 10;
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
	}
	
	integerPartDigitsArray[integerPartLength] = '\0';
     d54:	e9 81       	ldd	r30, Y+1	; 0x01
     d56:	fa 81       	ldd	r31, Y+2	; 0x02
     d58:	ef 0d       	add	r30, r15
     d5a:	f1 1d       	adc	r31, r1
     d5c:	10 82       	st	Z, r1
				
	char* resultString;
	do 
	{
		resultString = (char*)malloc(stringLength);
     d5e:	e8 2c       	mov	r14, r8
     d60:	f1 2c       	mov	r15, r1
     d62:	c7 01       	movw	r24, r14
     d64:	53 d5       	rcall	.+2726   	; 0x180c <malloc>
     d66:	8c 01       	movw	r16, r24
	}while(resultString == NULL);
     d68:	89 2b       	or	r24, r25
     d6a:	c9 f3       	breq	.-14     	; 0xd5e <_ZN13StringHandler13FloatToStringEfh+0x100>
	 
			
	if(value < 0)
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	a9 01       	movw	r20, r18
     d72:	c3 01       	movw	r24, r6
     d74:	b2 01       	movw	r22, r4
     d76:	c9 d1       	rcall	.+914    	; 0x110a <__cmpsf2>
     d78:	88 23       	and	r24, r24
     d7a:	5c f4       	brge	.+22     	; 0xd92 <_ZN13StringHandler13FloatToStringEfh+0x134>
	{
		strlcpy(resultString, "-", stringLength);
     d7c:	a7 01       	movw	r20, r14
     d7e:	62 e8       	ldi	r22, 0x82	; 130
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	c8 01       	movw	r24, r16
     d84:	83 d6       	rcall	.+3334   	; 0x1a8c <strlcpy>
		strlcat(resultString, integerPartDigitsArray, stringLength);
     d86:	a7 01       	movw	r20, r14
     d88:	69 81       	ldd	r22, Y+1	; 0x01
     d8a:	7a 81       	ldd	r23, Y+2	; 0x02
     d8c:	c8 01       	movw	r24, r16
     d8e:	5f d6       	rcall	.+3262   	; 0x1a4e <strlcat>
     d90:	05 c0       	rjmp	.+10     	; 0xd9c <_ZN13StringHandler13FloatToStringEfh+0x13e>
	}
	else strlcpy(resultString, integerPartDigitsArray, stringLength);
     d92:	a7 01       	movw	r20, r14
     d94:	69 81       	ldd	r22, Y+1	; 0x01
     d96:	7a 81       	ldd	r23, Y+2	; 0x02
     d98:	c8 01       	movw	r24, r16
     d9a:	78 d6       	rcall	.+3312   	; 0x1a8c <strlcpy>
	
	if(digitsAfterDot == 0)
     d9c:	99 20       	and	r9, r9
     d9e:	09 f4       	brne	.+2      	; 0xda2 <_ZN13StringHandler13FloatToStringEfh+0x144>
     da0:	59 c0       	rjmp	.+178    	; 0xe54 <_ZN13StringHandler13FloatToStringEfh+0x1f6>
	{		
		return resultString;
	}
		
	strlcat(resultString, ".", stringLength);
     da2:	a7 01       	movw	r20, r14
     da4:	64 e8       	ldi	r22, 0x84	; 132
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	c8 01       	movw	r24, r16
     daa:	51 d6       	rcall	.+3234   	; 0x1a4e <strlcat>
		
	value = fabs(value) - integerPart;	
     dac:	6a 2d       	mov	r22, r10
     dae:	7b 2d       	mov	r23, r11
     db0:	8c 2d       	mov	r24, r12
     db2:	9d 2d       	mov	r25, r13
     db4:	da d1       	rcall	.+948    	; 0x116a <__floatunsisf>
     db6:	9b 01       	movw	r18, r22
     db8:	ac 01       	movw	r20, r24
     dba:	6b 81       	ldd	r22, Y+3	; 0x03
     dbc:	7c 81       	ldd	r23, Y+4	; 0x04
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	3e d1       	rcall	.+636    	; 0x1040 <__subsf3>
     dc4:	2b 01       	movw	r4, r22
     dc6:	3c 01       	movw	r6, r24
			
	uint32_t mult = (uint32_t)round(pow(10, digitsAfterDot));
     dc8:	69 2d       	mov	r22, r9
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	cc d1       	rcall	.+920    	; 0x116a <__floatunsisf>
     dd2:	9b 01       	movw	r18, r22
     dd4:	ac 01       	movw	r20, r24
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 e2       	ldi	r24, 0x20	; 32
     ddc:	91 e4       	ldi	r25, 0x41	; 65
     dde:	da d2       	rcall	.+1460   	; 0x1394 <pow>
     de0:	25 d3       	rcall	.+1610   	; 0x142c <round>
     de2:	97 d1       	rcall	.+814    	; 0x1112 <__fixunssfsi>
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
     de4:	c2 d1       	rcall	.+900    	; 0x116a <__floatunsisf>
     de6:	9b 01       	movw	r18, r22
     de8:	ac 01       	movw	r20, r24
     dea:	c3 01       	movw	r24, r6
     dec:	b2 01       	movw	r22, r4
     dee:	6f d2       	rcall	.+1246   	; 0x12ce <__mulsf3>
     df0:	1d d3       	rcall	.+1594   	; 0x142c <round>
     df2:	8f d1       	rcall	.+798    	; 0x1112 <__fixunssfsi>
     df4:	9b 01       	movw	r18, r22
     df6:	ac 01       	movw	r20, r24
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
     df8:	89 2d       	mov	r24, r9
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	6d b7       	in	r22, 0x3d	; 61
     e00:	7e b7       	in	r23, 0x3e	; 62
     e02:	68 1b       	sub	r22, r24
     e04:	79 0b       	sbc	r23, r25
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	7e bf       	out	0x3e, r23	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	6d bf       	out	0x3d, r22	; 61
     e10:	8d b7       	in	r24, 0x3d	; 61
     e12:	9e b7       	in	r25, 0x3e	; 62
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	5c 01       	movw	r10, r24
     e18:	6c 01       	movw	r12, r24
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     e1a:	88 24       	eor	r8, r8
     e1c:	83 94       	inc	r8
     e1e:	98 14       	cp	r9, r8
     e20:	88 f0       	brcs	.+34     	; 0xe44 <_ZN13StringHandler13FloatToStringEfh+0x1e6>
	{
		uint8_t dig = fractionalPart % 10;
				
		fractionalPart /= 10;
     e22:	ca 01       	movw	r24, r20
     e24:	b9 01       	movw	r22, r18
     e26:	2a e0       	ldi	r18, 0x0A	; 10
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e0       	ldi	r20, 0x00	; 0
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	c6 d4       	rcall	.+2444   	; 0x17bc <__udivmodsi4>
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
     e30:	e9 2d       	mov	r30, r9
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	e8 19       	sub	r30, r8
     e36:	f1 09       	sbc	r31, r1
     e38:	ec 0d       	add	r30, r12
     e3a:	fd 1d       	adc	r31, r13
     e3c:	60 5d       	subi	r22, 0xD0	; 208
     e3e:	60 83       	st	Z, r22
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     e40:	83 94       	inc	r8
     e42:	ed cf       	rjmp	.-38     	; 0xe1e <_ZN13StringHandler13FloatToStringEfh+0x1c0>
				
		fractionalPart /= 10;
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
	}			
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
     e44:	f5 01       	movw	r30, r10
     e46:	e9 0d       	add	r30, r9
     e48:	f1 1d       	adc	r31, r1
     e4a:	10 82       	st	Z, r1
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
     e4c:	a7 01       	movw	r20, r14
     e4e:	b5 01       	movw	r22, r10
     e50:	c8 01       	movw	r24, r16
     e52:	fd d5       	rcall	.+3066   	; 0x1a4e <strlcat>
	
	return resultString;
}
     e54:	c8 01       	movw	r24, r16
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	3e be       	out	0x3e, r3	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	2d be       	out	0x3d, r2	; 61
     e60:	26 96       	adiw	r28, 0x06	; 6
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	bf 90       	pop	r11
     e7e:	af 90       	pop	r10
     e80:	9f 90       	pop	r9
     e82:	8f 90       	pop	r8
     e84:	7f 90       	pop	r7
     e86:	6f 90       	pop	r6
     e88:	5f 90       	pop	r5
     e8a:	4f 90       	pop	r4
     e8c:	3f 90       	pop	r3
     e8e:	2f 90       	pop	r2
     e90:	08 95       	ret

00000e92 <_ZN3TWIC1Em>:
	TWCR = (1<<TWEN)|(0<<TWIE)|(0<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|(0<<TWWC);
	
	++selectedDevice %= devicesQuantiy;
}

TWI::~TWI()
     e92:	fc 01       	movw	r30, r24
     e94:	40 83       	st	Z, r20
     e96:	51 83       	std	Z+1, r21	; 0x01
     e98:	62 83       	std	Z+2, r22	; 0x02
     e9a:	73 83       	std	Z+3, r23	; 0x03
     e9c:	16 86       	std	Z+14, r1	; 0x0e
     e9e:	17 86       	std	Z+15, r1	; 0x0f
     ea0:	08 95       	ret

00000ea2 <_ZN3TWI9AddDeviceEP4ITWI>:
     ea2:	dc 01       	movw	r26, r24
     ea4:	1e 96       	adiw	r26, 0x0e	; 14
     ea6:	9c 91       	ld	r25, X
     ea8:	1e 97       	sbiw	r26, 0x0e	; 14
     eaa:	93 30       	cpi	r25, 0x03	; 3
     eac:	60 f4       	brcc	.+24     	; 0xec6 <_ZN3TWI9AddDeviceEP4ITWI+0x24>
     eae:	e9 2f       	mov	r30, r25
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	34 96       	adiw	r30, 0x04	; 4
     eb4:	ee 0f       	add	r30, r30
     eb6:	ff 1f       	adc	r31, r31
     eb8:	ea 0f       	add	r30, r26
     eba:	fb 1f       	adc	r31, r27
     ebc:	71 83       	std	Z+1, r23	; 0x01
     ebe:	60 83       	st	Z, r22
     ec0:	9f 5f       	subi	r25, 0xFF	; 255
     ec2:	1e 96       	adiw	r26, 0x0e	; 14
     ec4:	9c 93       	st	X, r25
     ec6:	08 95       	ret

00000ec8 <_ZN3TWI17SetClockFrequencyEm>:
     ec8:	cf 92       	push	r12
     eca:	df 92       	push	r13
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ec 01       	movw	r28, r24
     ed6:	6a 01       	movw	r12, r20
     ed8:	7b 01       	movw	r14, r22
     eda:	8c 81       	ldd	r24, Y+4	; 0x04
     edc:	9d 81       	ldd	r25, Y+5	; 0x05
     ede:	ae 81       	ldd	r26, Y+6	; 0x06
     ee0:	bf 81       	ldd	r27, Y+7	; 0x07
     ee2:	84 17       	cp	r24, r20
     ee4:	95 07       	cpc	r25, r21
     ee6:	a6 07       	cpc	r26, r22
     ee8:	b7 07       	cpc	r27, r23
     eea:	a9 f0       	breq	.+42     	; 0xf16 <_ZN3TWI17SetClockFrequencyEm+0x4e>
     eec:	68 81       	ld	r22, Y
     eee:	79 81       	ldd	r23, Y+1	; 0x01
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	9b 81       	ldd	r25, Y+3	; 0x03
     ef4:	a7 01       	movw	r20, r14
     ef6:	96 01       	movw	r18, r12
     ef8:	61 d4       	rcall	.+2242   	; 0x17bc <__udivmodsi4>
     efa:	da 01       	movw	r26, r20
     efc:	c9 01       	movw	r24, r18
     efe:	40 97       	sbiw	r24, 0x10	; 16
     f00:	a1 09       	sbc	r26, r1
     f02:	b1 09       	sbc	r27, r1
     f04:	b6 95       	lsr	r27
     f06:	a7 95       	ror	r26
     f08:	97 95       	ror	r25
     f0a:	87 95       	ror	r24
     f0c:	80 b9       	out	0x00, r24	; 0
     f0e:	cc 82       	std	Y+4, r12	; 0x04
     f10:	dd 82       	std	Y+5, r13	; 0x05
     f12:	ee 82       	std	Y+6, r14	; 0x06
     f14:	ff 82       	std	Y+7, r15	; 0x07
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	08 95       	ret

00000f24 <_ZN3TWI16HandleDataChangeEv>:
     f24:	dc 01       	movw	r26, r24
     f26:	1f 96       	adiw	r26, 0x0f	; 15
     f28:	9c 91       	ld	r25, X
     f2a:	1f 97       	sbiw	r26, 0x0f	; 15
     f2c:	e9 2f       	mov	r30, r25
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	34 96       	adiw	r30, 0x04	; 4
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	ea 0f       	add	r30, r26
     f38:	fb 1f       	adc	r31, r27
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	dc 01       	movw	r26, r24
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	04 80       	ldd	r0, Z+4	; 0x04
     f46:	f5 81       	ldd	r31, Z+5	; 0x05
     f48:	e0 2d       	mov	r30, r0
     f4a:	61 b1       	in	r22, 0x01	; 1
     f4c:	68 7f       	andi	r22, 0xF8	; 248
     f4e:	09 95       	icall
     f50:	08 95       	ret

00000f52 <_ZN3TWI5StartEv>:
     f52:	85 ea       	ldi	r24, 0xA5	; 165
     f54:	86 bf       	out	0x36, r24	; 54
     f56:	08 95       	ret

00000f58 <_ZN3TWI12CheckDevicesEv>:
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	06 b6       	in	r0, 0x36	; 54
     f5e:	00 fc       	sbrc	r0, 0
     f60:	2f c0       	rjmp	.+94     	; 0xfc0 <_ZN3TWI12CheckDevicesEv+0x68>
     f62:	ec 01       	movw	r28, r24
     f64:	ef 85       	ldd	r30, Y+15	; 0x0f
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	34 96       	adiw	r30, 0x04	; 4
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	e8 0f       	add	r30, r24
     f70:	f9 1f       	adc	r31, r25
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	dc 01       	movw	r26, r24
     f78:	ed 91       	ld	r30, X+
     f7a:	fc 91       	ld	r31, X
     f7c:	02 80       	ldd	r0, Z+2	; 0x02
     f7e:	f3 81       	ldd	r31, Z+3	; 0x03
     f80:	e0 2d       	mov	r30, r0
     f82:	09 95       	icall
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	b9 f4       	brne	.+46     	; 0xfb6 <_ZN3TWI12CheckDevicesEv+0x5e>
     f88:	ef 85       	ldd	r30, Y+15	; 0x0f
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	34 96       	adiw	r30, 0x04	; 4
     f8e:	ee 0f       	add	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	ec 0f       	add	r30, r28
     f94:	fd 1f       	adc	r31, r29
     f96:	80 81       	ld	r24, Z
     f98:	91 81       	ldd	r25, Z+1	; 0x01
     f9a:	dc 01       	movw	r26, r24
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	01 90       	ld	r0, Z+
     fa2:	f0 81       	ld	r31, Z
     fa4:	e0 2d       	mov	r30, r0
     fa6:	09 95       	icall
     fa8:	ab 01       	movw	r20, r22
     faa:	bc 01       	movw	r22, r24
     fac:	ce 01       	movw	r24, r28
     fae:	8c df       	rcall	.-232    	; 0xec8 <_ZN3TWI17SetClockFrequencyEm>
     fb0:	ce 01       	movw	r24, r28
     fb2:	cf df       	rcall	.-98     	; 0xf52 <_ZN3TWI5StartEv>
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <_ZN3TWI12CheckDevicesEv+0x68>
     fb6:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb8:	8f 5f       	subi	r24, 0xFF	; 255
     fba:	6e 85       	ldd	r22, Y+14	; 0x0e
     fbc:	f3 d3       	rcall	.+2022   	; 0x17a4 <__udivmodqi4>
     fbe:	9f 87       	std	Y+15, r25	; 0x0f
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <_ZN3TWI11WriteToTWDREh>:
     fc6:	63 b9       	out	0x03, r22	; 3
     fc8:	85 e8       	ldi	r24, 0x85	; 133
     fca:	86 bf       	out	0x36, r24	; 54
     fcc:	08 95       	ret

00000fce <_ZN3TWI3ACKEv>:
     fce:	85 ec       	ldi	r24, 0xC5	; 197
     fd0:	86 bf       	out	0x36, r24	; 54
     fd2:	08 95       	ret

00000fd4 <_ZN3TWI4NACKEv>:
     fd4:	85 e8       	ldi	r24, 0x85	; 133
     fd6:	86 bf       	out	0x36, r24	; 54
     fd8:	08 95       	ret

00000fda <_ZN3TWI12ReadFromTWDREv>:
     fda:	83 b1       	in	r24, 0x03	; 3
     fdc:	08 95       	ret

00000fde <_ZN3TWI4StopEv>:
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	ec 01       	movw	r28, r24
     fe4:	84 e9       	ldi	r24, 0x94	; 148
     fe6:	86 bf       	out	0x36, r24	; 54
     fe8:	ef 85       	ldd	r30, Y+15	; 0x0f
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	34 96       	adiw	r30, 0x04	; 4
     fee:	ee 0f       	add	r30, r30
     ff0:	ff 1f       	adc	r31, r31
     ff2:	ec 0f       	add	r30, r28
     ff4:	fd 1f       	adc	r31, r29
     ff6:	80 81       	ld	r24, Z
     ff8:	91 81       	ldd	r25, Z+1	; 0x01
     ffa:	dc 01       	movw	r26, r24
     ffc:	ed 91       	ld	r30, X+
     ffe:	fc 91       	ld	r31, X
    1000:	04 80       	ldd	r0, Z+4	; 0x04
    1002:	f5 81       	ldd	r31, Z+5	; 0x05
    1004:	e0 2d       	mov	r30, r0
    1006:	68 ef       	ldi	r22, 0xF8	; 248
    1008:	09 95       	icall
    100a:	8f 85       	ldd	r24, Y+15	; 0x0f
    100c:	8f 5f       	subi	r24, 0xFF	; 255
    100e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1010:	c9 d3       	rcall	.+1938   	; 0x17a4 <__udivmodqi4>
    1012:	9f 87       	std	Y+15, r25	; 0x0f
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <_ZN3TWI16DisableInterruptEv>:
    101a:	fc 01       	movw	r30, r24
    101c:	84 e1       	ldi	r24, 0x14	; 20
    101e:	86 bf       	out	0x36, r24	; 54
    1020:	87 85       	ldd	r24, Z+15	; 0x0f
    1022:	8f 5f       	subi	r24, 0xFF	; 255
    1024:	66 85       	ldd	r22, Z+14	; 0x0e
    1026:	be d3       	rcall	.+1916   	; 0x17a4 <__udivmodqi4>
    1028:	97 87       	std	Z+15, r25	; 0x0f
    102a:	08 95       	ret

0000102c <_ZN3TWInwEj>:
{

}

void* TWI::operator new(size_t size)
{
    102c:	cf 93       	push	r28
    102e:	df 93       	push	r29
    1030:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
    1032:	ce 01       	movw	r24, r28
    1034:	eb d3       	rcall	.+2006   	; 0x180c <malloc>
	}while(ptr == nullptr);
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	e1 f3       	breq	.-8      	; 0x1032 <_ZN3TWInwEj+0x6>
	
	return ptr;
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <__subsf3>:
    1040:	50 58       	subi	r21, 0x80	; 128

00001042 <__addsf3>:
    1042:	bb 27       	eor	r27, r27
    1044:	aa 27       	eor	r26, r26
    1046:	0e d0       	rcall	.+28     	; 0x1064 <__addsf3x>
    1048:	08 c1       	rjmp	.+528    	; 0x125a <__fp_round>
    104a:	f9 d0       	rcall	.+498    	; 0x123e <__fp_pscA>
    104c:	30 f0       	brcs	.+12     	; 0x105a <__addsf3+0x18>
    104e:	fe d0       	rcall	.+508    	; 0x124c <__fp_pscB>
    1050:	20 f0       	brcs	.+8      	; 0x105a <__addsf3+0x18>
    1052:	31 f4       	brne	.+12     	; 0x1060 <__addsf3+0x1e>
    1054:	9f 3f       	cpi	r25, 0xFF	; 255
    1056:	11 f4       	brne	.+4      	; 0x105c <__addsf3+0x1a>
    1058:	1e f4       	brtc	.+6      	; 0x1060 <__addsf3+0x1e>
    105a:	ee c0       	rjmp	.+476    	; 0x1238 <__fp_nan>
    105c:	0e f4       	brtc	.+2      	; 0x1060 <__addsf3+0x1e>
    105e:	e0 95       	com	r30
    1060:	e7 fb       	bst	r30, 7
    1062:	e4 c0       	rjmp	.+456    	; 0x122c <__fp_inf>

00001064 <__addsf3x>:
    1064:	e9 2f       	mov	r30, r25
    1066:	0a d1       	rcall	.+532    	; 0x127c <__fp_split3>
    1068:	80 f3       	brcs	.-32     	; 0x104a <__addsf3+0x8>
    106a:	ba 17       	cp	r27, r26
    106c:	62 07       	cpc	r22, r18
    106e:	73 07       	cpc	r23, r19
    1070:	84 07       	cpc	r24, r20
    1072:	95 07       	cpc	r25, r21
    1074:	18 f0       	brcs	.+6      	; 0x107c <__addsf3x+0x18>
    1076:	71 f4       	brne	.+28     	; 0x1094 <__addsf3x+0x30>
    1078:	9e f5       	brtc	.+102    	; 0x10e0 <__addsf3x+0x7c>
    107a:	22 c1       	rjmp	.+580    	; 0x12c0 <__fp_zero>
    107c:	0e f4       	brtc	.+2      	; 0x1080 <__addsf3x+0x1c>
    107e:	e0 95       	com	r30
    1080:	0b 2e       	mov	r0, r27
    1082:	ba 2f       	mov	r27, r26
    1084:	a0 2d       	mov	r26, r0
    1086:	0b 01       	movw	r0, r22
    1088:	b9 01       	movw	r22, r18
    108a:	90 01       	movw	r18, r0
    108c:	0c 01       	movw	r0, r24
    108e:	ca 01       	movw	r24, r20
    1090:	a0 01       	movw	r20, r0
    1092:	11 24       	eor	r1, r1
    1094:	ff 27       	eor	r31, r31
    1096:	59 1b       	sub	r21, r25
    1098:	99 f0       	breq	.+38     	; 0x10c0 <__addsf3x+0x5c>
    109a:	59 3f       	cpi	r21, 0xF9	; 249
    109c:	50 f4       	brcc	.+20     	; 0x10b2 <__addsf3x+0x4e>
    109e:	50 3e       	cpi	r21, 0xE0	; 224
    10a0:	68 f1       	brcs	.+90     	; 0x10fc <__addsf3x+0x98>
    10a2:	1a 16       	cp	r1, r26
    10a4:	f0 40       	sbci	r31, 0x00	; 0
    10a6:	a2 2f       	mov	r26, r18
    10a8:	23 2f       	mov	r18, r19
    10aa:	34 2f       	mov	r19, r20
    10ac:	44 27       	eor	r20, r20
    10ae:	58 5f       	subi	r21, 0xF8	; 248
    10b0:	f3 cf       	rjmp	.-26     	; 0x1098 <__addsf3x+0x34>
    10b2:	46 95       	lsr	r20
    10b4:	37 95       	ror	r19
    10b6:	27 95       	ror	r18
    10b8:	a7 95       	ror	r26
    10ba:	f0 40       	sbci	r31, 0x00	; 0
    10bc:	53 95       	inc	r21
    10be:	c9 f7       	brne	.-14     	; 0x10b2 <__addsf3x+0x4e>
    10c0:	7e f4       	brtc	.+30     	; 0x10e0 <__addsf3x+0x7c>
    10c2:	1f 16       	cp	r1, r31
    10c4:	ba 0b       	sbc	r27, r26
    10c6:	62 0b       	sbc	r22, r18
    10c8:	73 0b       	sbc	r23, r19
    10ca:	84 0b       	sbc	r24, r20
    10cc:	ba f0       	brmi	.+46     	; 0x10fc <__addsf3x+0x98>
    10ce:	91 50       	subi	r25, 0x01	; 1
    10d0:	a1 f0       	breq	.+40     	; 0x10fa <__addsf3x+0x96>
    10d2:	ff 0f       	add	r31, r31
    10d4:	bb 1f       	adc	r27, r27
    10d6:	66 1f       	adc	r22, r22
    10d8:	77 1f       	adc	r23, r23
    10da:	88 1f       	adc	r24, r24
    10dc:	c2 f7       	brpl	.-16     	; 0x10ce <__addsf3x+0x6a>
    10de:	0e c0       	rjmp	.+28     	; 0x10fc <__addsf3x+0x98>
    10e0:	ba 0f       	add	r27, r26
    10e2:	62 1f       	adc	r22, r18
    10e4:	73 1f       	adc	r23, r19
    10e6:	84 1f       	adc	r24, r20
    10e8:	48 f4       	brcc	.+18     	; 0x10fc <__addsf3x+0x98>
    10ea:	87 95       	ror	r24
    10ec:	77 95       	ror	r23
    10ee:	67 95       	ror	r22
    10f0:	b7 95       	ror	r27
    10f2:	f7 95       	ror	r31
    10f4:	9e 3f       	cpi	r25, 0xFE	; 254
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <__addsf3x+0x96>
    10f8:	b3 cf       	rjmp	.-154    	; 0x1060 <__addsf3+0x1e>
    10fa:	93 95       	inc	r25
    10fc:	88 0f       	add	r24, r24
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__addsf3x+0x9e>
    1100:	99 27       	eor	r25, r25
    1102:	ee 0f       	add	r30, r30
    1104:	97 95       	ror	r25
    1106:	87 95       	ror	r24
    1108:	08 95       	ret

0000110a <__cmpsf2>:
    110a:	6c d0       	rcall	.+216    	; 0x11e4 <__fp_cmp>
    110c:	08 f4       	brcc	.+2      	; 0x1110 <__cmpsf2+0x6>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	08 95       	ret

00001112 <__fixunssfsi>:
    1112:	bc d0       	rcall	.+376    	; 0x128c <__fp_splitA>
    1114:	88 f0       	brcs	.+34     	; 0x1138 <__fixunssfsi+0x26>
    1116:	9f 57       	subi	r25, 0x7F	; 127
    1118:	90 f0       	brcs	.+36     	; 0x113e <__fixunssfsi+0x2c>
    111a:	b9 2f       	mov	r27, r25
    111c:	99 27       	eor	r25, r25
    111e:	b7 51       	subi	r27, 0x17	; 23
    1120:	a0 f0       	brcs	.+40     	; 0x114a <__fixunssfsi+0x38>
    1122:	d1 f0       	breq	.+52     	; 0x1158 <__fixunssfsi+0x46>
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	1a f0       	brmi	.+6      	; 0x1134 <__fixunssfsi+0x22>
    112e:	ba 95       	dec	r27
    1130:	c9 f7       	brne	.-14     	; 0x1124 <__fixunssfsi+0x12>
    1132:	12 c0       	rjmp	.+36     	; 0x1158 <__fixunssfsi+0x46>
    1134:	b1 30       	cpi	r27, 0x01	; 1
    1136:	81 f0       	breq	.+32     	; 0x1158 <__fixunssfsi+0x46>
    1138:	c3 d0       	rcall	.+390    	; 0x12c0 <__fp_zero>
    113a:	b1 e0       	ldi	r27, 0x01	; 1
    113c:	08 95       	ret
    113e:	c0 c0       	rjmp	.+384    	; 0x12c0 <__fp_zero>
    1140:	67 2f       	mov	r22, r23
    1142:	78 2f       	mov	r23, r24
    1144:	88 27       	eor	r24, r24
    1146:	b8 5f       	subi	r27, 0xF8	; 248
    1148:	39 f0       	breq	.+14     	; 0x1158 <__fixunssfsi+0x46>
    114a:	b9 3f       	cpi	r27, 0xF9	; 249
    114c:	cc f3       	brlt	.-14     	; 0x1140 <__fixunssfsi+0x2e>
    114e:	86 95       	lsr	r24
    1150:	77 95       	ror	r23
    1152:	67 95       	ror	r22
    1154:	b3 95       	inc	r27
    1156:	d9 f7       	brne	.-10     	; 0x114e <__fixunssfsi+0x3c>
    1158:	3e f4       	brtc	.+14     	; 0x1168 <__fixunssfsi+0x56>
    115a:	90 95       	com	r25
    115c:	80 95       	com	r24
    115e:	70 95       	com	r23
    1160:	61 95       	neg	r22
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	08 95       	ret

0000116a <__floatunsisf>:
    116a:	e8 94       	clt
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <__floatsisf+0x12>

0000116e <__floatsisf>:
    116e:	97 fb       	bst	r25, 7
    1170:	3e f4       	brtc	.+14     	; 0x1180 <__floatsisf+0x12>
    1172:	90 95       	com	r25
    1174:	80 95       	com	r24
    1176:	70 95       	com	r23
    1178:	61 95       	neg	r22
    117a:	7f 4f       	sbci	r23, 0xFF	; 255
    117c:	8f 4f       	sbci	r24, 0xFF	; 255
    117e:	9f 4f       	sbci	r25, 0xFF	; 255
    1180:	99 23       	and	r25, r25
    1182:	a9 f0       	breq	.+42     	; 0x11ae <__floatsisf+0x40>
    1184:	f9 2f       	mov	r31, r25
    1186:	96 e9       	ldi	r25, 0x96	; 150
    1188:	bb 27       	eor	r27, r27
    118a:	93 95       	inc	r25
    118c:	f6 95       	lsr	r31
    118e:	87 95       	ror	r24
    1190:	77 95       	ror	r23
    1192:	67 95       	ror	r22
    1194:	b7 95       	ror	r27
    1196:	f1 11       	cpse	r31, r1
    1198:	f8 cf       	rjmp	.-16     	; 0x118a <__floatsisf+0x1c>
    119a:	fa f4       	brpl	.+62     	; 0x11da <__floatsisf+0x6c>
    119c:	bb 0f       	add	r27, r27
    119e:	11 f4       	brne	.+4      	; 0x11a4 <__floatsisf+0x36>
    11a0:	60 ff       	sbrs	r22, 0
    11a2:	1b c0       	rjmp	.+54     	; 0x11da <__floatsisf+0x6c>
    11a4:	6f 5f       	subi	r22, 0xFF	; 255
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	8f 4f       	sbci	r24, 0xFF	; 255
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255
    11ac:	16 c0       	rjmp	.+44     	; 0x11da <__floatsisf+0x6c>
    11ae:	88 23       	and	r24, r24
    11b0:	11 f0       	breq	.+4      	; 0x11b6 <__floatsisf+0x48>
    11b2:	96 e9       	ldi	r25, 0x96	; 150
    11b4:	11 c0       	rjmp	.+34     	; 0x11d8 <__floatsisf+0x6a>
    11b6:	77 23       	and	r23, r23
    11b8:	21 f0       	breq	.+8      	; 0x11c2 <__floatsisf+0x54>
    11ba:	9e e8       	ldi	r25, 0x8E	; 142
    11bc:	87 2f       	mov	r24, r23
    11be:	76 2f       	mov	r23, r22
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <__floatsisf+0x5e>
    11c2:	66 23       	and	r22, r22
    11c4:	71 f0       	breq	.+28     	; 0x11e2 <__floatsisf+0x74>
    11c6:	96 e8       	ldi	r25, 0x86	; 134
    11c8:	86 2f       	mov	r24, r22
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	2a f0       	brmi	.+10     	; 0x11da <__floatsisf+0x6c>
    11d0:	9a 95       	dec	r25
    11d2:	66 0f       	add	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	88 1f       	adc	r24, r24
    11d8:	da f7       	brpl	.-10     	; 0x11d0 <__floatsisf+0x62>
    11da:	88 0f       	add	r24, r24
    11dc:	96 95       	lsr	r25
    11de:	87 95       	ror	r24
    11e0:	97 f9       	bld	r25, 7
    11e2:	08 95       	ret

000011e4 <__fp_cmp>:
    11e4:	99 0f       	add	r25, r25
    11e6:	00 08       	sbc	r0, r0
    11e8:	55 0f       	add	r21, r21
    11ea:	aa 0b       	sbc	r26, r26
    11ec:	e0 e8       	ldi	r30, 0x80	; 128
    11ee:	fe ef       	ldi	r31, 0xFE	; 254
    11f0:	16 16       	cp	r1, r22
    11f2:	17 06       	cpc	r1, r23
    11f4:	e8 07       	cpc	r30, r24
    11f6:	f9 07       	cpc	r31, r25
    11f8:	c0 f0       	brcs	.+48     	; 0x122a <__fp_cmp+0x46>
    11fa:	12 16       	cp	r1, r18
    11fc:	13 06       	cpc	r1, r19
    11fe:	e4 07       	cpc	r30, r20
    1200:	f5 07       	cpc	r31, r21
    1202:	98 f0       	brcs	.+38     	; 0x122a <__fp_cmp+0x46>
    1204:	62 1b       	sub	r22, r18
    1206:	73 0b       	sbc	r23, r19
    1208:	84 0b       	sbc	r24, r20
    120a:	95 0b       	sbc	r25, r21
    120c:	39 f4       	brne	.+14     	; 0x121c <__fp_cmp+0x38>
    120e:	0a 26       	eor	r0, r26
    1210:	61 f0       	breq	.+24     	; 0x122a <__fp_cmp+0x46>
    1212:	23 2b       	or	r18, r19
    1214:	24 2b       	or	r18, r20
    1216:	25 2b       	or	r18, r21
    1218:	21 f4       	brne	.+8      	; 0x1222 <__fp_cmp+0x3e>
    121a:	08 95       	ret
    121c:	0a 26       	eor	r0, r26
    121e:	09 f4       	brne	.+2      	; 0x1222 <__fp_cmp+0x3e>
    1220:	a1 40       	sbci	r26, 0x01	; 1
    1222:	a6 95       	lsr	r26
    1224:	8f ef       	ldi	r24, 0xFF	; 255
    1226:	81 1d       	adc	r24, r1
    1228:	81 1d       	adc	r24, r1
    122a:	08 95       	ret

0000122c <__fp_inf>:
    122c:	97 f9       	bld	r25, 7
    122e:	9f 67       	ori	r25, 0x7F	; 127
    1230:	80 e8       	ldi	r24, 0x80	; 128
    1232:	70 e0       	ldi	r23, 0x00	; 0
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	08 95       	ret

00001238 <__fp_nan>:
    1238:	9f ef       	ldi	r25, 0xFF	; 255
    123a:	80 ec       	ldi	r24, 0xC0	; 192
    123c:	08 95       	ret

0000123e <__fp_pscA>:
    123e:	00 24       	eor	r0, r0
    1240:	0a 94       	dec	r0
    1242:	16 16       	cp	r1, r22
    1244:	17 06       	cpc	r1, r23
    1246:	18 06       	cpc	r1, r24
    1248:	09 06       	cpc	r0, r25
    124a:	08 95       	ret

0000124c <__fp_pscB>:
    124c:	00 24       	eor	r0, r0
    124e:	0a 94       	dec	r0
    1250:	12 16       	cp	r1, r18
    1252:	13 06       	cpc	r1, r19
    1254:	14 06       	cpc	r1, r20
    1256:	05 06       	cpc	r0, r21
    1258:	08 95       	ret

0000125a <__fp_round>:
    125a:	09 2e       	mov	r0, r25
    125c:	03 94       	inc	r0
    125e:	00 0c       	add	r0, r0
    1260:	11 f4       	brne	.+4      	; 0x1266 <__fp_round+0xc>
    1262:	88 23       	and	r24, r24
    1264:	52 f0       	brmi	.+20     	; 0x127a <__fp_round+0x20>
    1266:	bb 0f       	add	r27, r27
    1268:	40 f4       	brcc	.+16     	; 0x127a <__fp_round+0x20>
    126a:	bf 2b       	or	r27, r31
    126c:	11 f4       	brne	.+4      	; 0x1272 <__fp_round+0x18>
    126e:	60 ff       	sbrs	r22, 0
    1270:	04 c0       	rjmp	.+8      	; 0x127a <__fp_round+0x20>
    1272:	6f 5f       	subi	r22, 0xFF	; 255
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	8f 4f       	sbci	r24, 0xFF	; 255
    1278:	9f 4f       	sbci	r25, 0xFF	; 255
    127a:	08 95       	ret

0000127c <__fp_split3>:
    127c:	57 fd       	sbrc	r21, 7
    127e:	90 58       	subi	r25, 0x80	; 128
    1280:	44 0f       	add	r20, r20
    1282:	55 1f       	adc	r21, r21
    1284:	59 f0       	breq	.+22     	; 0x129c <__fp_splitA+0x10>
    1286:	5f 3f       	cpi	r21, 0xFF	; 255
    1288:	71 f0       	breq	.+28     	; 0x12a6 <__fp_splitA+0x1a>
    128a:	47 95       	ror	r20

0000128c <__fp_splitA>:
    128c:	88 0f       	add	r24, r24
    128e:	97 fb       	bst	r25, 7
    1290:	99 1f       	adc	r25, r25
    1292:	61 f0       	breq	.+24     	; 0x12ac <__fp_splitA+0x20>
    1294:	9f 3f       	cpi	r25, 0xFF	; 255
    1296:	79 f0       	breq	.+30     	; 0x12b6 <__fp_splitA+0x2a>
    1298:	87 95       	ror	r24
    129a:	08 95       	ret
    129c:	12 16       	cp	r1, r18
    129e:	13 06       	cpc	r1, r19
    12a0:	14 06       	cpc	r1, r20
    12a2:	55 1f       	adc	r21, r21
    12a4:	f2 cf       	rjmp	.-28     	; 0x128a <__fp_split3+0xe>
    12a6:	46 95       	lsr	r20
    12a8:	f1 df       	rcall	.-30     	; 0x128c <__fp_splitA>
    12aa:	08 c0       	rjmp	.+16     	; 0x12bc <__fp_splitA+0x30>
    12ac:	16 16       	cp	r1, r22
    12ae:	17 06       	cpc	r1, r23
    12b0:	18 06       	cpc	r1, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	f1 cf       	rjmp	.-30     	; 0x1298 <__fp_splitA+0xc>
    12b6:	86 95       	lsr	r24
    12b8:	71 05       	cpc	r23, r1
    12ba:	61 05       	cpc	r22, r1
    12bc:	08 94       	sec
    12be:	08 95       	ret

000012c0 <__fp_zero>:
    12c0:	e8 94       	clt

000012c2 <__fp_szero>:
    12c2:	bb 27       	eor	r27, r27
    12c4:	66 27       	eor	r22, r22
    12c6:	77 27       	eor	r23, r23
    12c8:	cb 01       	movw	r24, r22
    12ca:	97 f9       	bld	r25, 7
    12cc:	08 95       	ret

000012ce <__mulsf3>:
    12ce:	0b d0       	rcall	.+22     	; 0x12e6 <__mulsf3x>
    12d0:	c4 cf       	rjmp	.-120    	; 0x125a <__fp_round>
    12d2:	b5 df       	rcall	.-150    	; 0x123e <__fp_pscA>
    12d4:	28 f0       	brcs	.+10     	; 0x12e0 <__mulsf3+0x12>
    12d6:	ba df       	rcall	.-140    	; 0x124c <__fp_pscB>
    12d8:	18 f0       	brcs	.+6      	; 0x12e0 <__mulsf3+0x12>
    12da:	95 23       	and	r25, r21
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__mulsf3+0x12>
    12de:	a6 cf       	rjmp	.-180    	; 0x122c <__fp_inf>
    12e0:	ab cf       	rjmp	.-170    	; 0x1238 <__fp_nan>
    12e2:	11 24       	eor	r1, r1
    12e4:	ee cf       	rjmp	.-36     	; 0x12c2 <__fp_szero>

000012e6 <__mulsf3x>:
    12e6:	ca df       	rcall	.-108    	; 0x127c <__fp_split3>
    12e8:	a0 f3       	brcs	.-24     	; 0x12d2 <__mulsf3+0x4>

000012ea <__mulsf3_pse>:
    12ea:	95 9f       	mul	r25, r21
    12ec:	d1 f3       	breq	.-12     	; 0x12e2 <__mulsf3+0x14>
    12ee:	95 0f       	add	r25, r21
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	55 1f       	adc	r21, r21
    12f4:	62 9f       	mul	r22, r18
    12f6:	f0 01       	movw	r30, r0
    12f8:	72 9f       	mul	r23, r18
    12fa:	bb 27       	eor	r27, r27
    12fc:	f0 0d       	add	r31, r0
    12fe:	b1 1d       	adc	r27, r1
    1300:	63 9f       	mul	r22, r19
    1302:	aa 27       	eor	r26, r26
    1304:	f0 0d       	add	r31, r0
    1306:	b1 1d       	adc	r27, r1
    1308:	aa 1f       	adc	r26, r26
    130a:	64 9f       	mul	r22, r20
    130c:	66 27       	eor	r22, r22
    130e:	b0 0d       	add	r27, r0
    1310:	a1 1d       	adc	r26, r1
    1312:	66 1f       	adc	r22, r22
    1314:	82 9f       	mul	r24, r18
    1316:	22 27       	eor	r18, r18
    1318:	b0 0d       	add	r27, r0
    131a:	a1 1d       	adc	r26, r1
    131c:	62 1f       	adc	r22, r18
    131e:	73 9f       	mul	r23, r19
    1320:	b0 0d       	add	r27, r0
    1322:	a1 1d       	adc	r26, r1
    1324:	62 1f       	adc	r22, r18
    1326:	83 9f       	mul	r24, r19
    1328:	a0 0d       	add	r26, r0
    132a:	61 1d       	adc	r22, r1
    132c:	22 1f       	adc	r18, r18
    132e:	74 9f       	mul	r23, r20
    1330:	33 27       	eor	r19, r19
    1332:	a0 0d       	add	r26, r0
    1334:	61 1d       	adc	r22, r1
    1336:	23 1f       	adc	r18, r19
    1338:	84 9f       	mul	r24, r20
    133a:	60 0d       	add	r22, r0
    133c:	21 1d       	adc	r18, r1
    133e:	82 2f       	mov	r24, r18
    1340:	76 2f       	mov	r23, r22
    1342:	6a 2f       	mov	r22, r26
    1344:	11 24       	eor	r1, r1
    1346:	9f 57       	subi	r25, 0x7F	; 127
    1348:	50 40       	sbci	r21, 0x00	; 0
    134a:	8a f0       	brmi	.+34     	; 0x136e <__mulsf3_pse+0x84>
    134c:	e1 f0       	breq	.+56     	; 0x1386 <__mulsf3_pse+0x9c>
    134e:	88 23       	and	r24, r24
    1350:	4a f0       	brmi	.+18     	; 0x1364 <__mulsf3_pse+0x7a>
    1352:	ee 0f       	add	r30, r30
    1354:	ff 1f       	adc	r31, r31
    1356:	bb 1f       	adc	r27, r27
    1358:	66 1f       	adc	r22, r22
    135a:	77 1f       	adc	r23, r23
    135c:	88 1f       	adc	r24, r24
    135e:	91 50       	subi	r25, 0x01	; 1
    1360:	50 40       	sbci	r21, 0x00	; 0
    1362:	a9 f7       	brne	.-22     	; 0x134e <__mulsf3_pse+0x64>
    1364:	9e 3f       	cpi	r25, 0xFE	; 254
    1366:	51 05       	cpc	r21, r1
    1368:	70 f0       	brcs	.+28     	; 0x1386 <__mulsf3_pse+0x9c>
    136a:	60 cf       	rjmp	.-320    	; 0x122c <__fp_inf>
    136c:	aa cf       	rjmp	.-172    	; 0x12c2 <__fp_szero>
    136e:	5f 3f       	cpi	r21, 0xFF	; 255
    1370:	ec f3       	brlt	.-6      	; 0x136c <__mulsf3_pse+0x82>
    1372:	98 3e       	cpi	r25, 0xE8	; 232
    1374:	dc f3       	brlt	.-10     	; 0x136c <__mulsf3_pse+0x82>
    1376:	86 95       	lsr	r24
    1378:	77 95       	ror	r23
    137a:	67 95       	ror	r22
    137c:	b7 95       	ror	r27
    137e:	f7 95       	ror	r31
    1380:	e7 95       	ror	r30
    1382:	9f 5f       	subi	r25, 0xFF	; 255
    1384:	c1 f7       	brne	.-16     	; 0x1376 <__mulsf3_pse+0x8c>
    1386:	fe 2b       	or	r31, r30
    1388:	88 0f       	add	r24, r24
    138a:	91 1d       	adc	r25, r1
    138c:	96 95       	lsr	r25
    138e:	87 95       	ror	r24
    1390:	97 f9       	bld	r25, 7
    1392:	08 95       	ret

00001394 <pow>:
    1394:	fa 01       	movw	r30, r20
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	30 96       	adiw	r30, 0x00	; 0
    139c:	21 05       	cpc	r18, r1
    139e:	31 05       	cpc	r19, r1
    13a0:	99 f1       	breq	.+102    	; 0x1408 <pow+0x74>
    13a2:	61 15       	cp	r22, r1
    13a4:	71 05       	cpc	r23, r1
    13a6:	61 f4       	brne	.+24     	; 0x13c0 <pow+0x2c>
    13a8:	80 38       	cpi	r24, 0x80	; 128
    13aa:	bf e3       	ldi	r27, 0x3F	; 63
    13ac:	9b 07       	cpc	r25, r27
    13ae:	49 f1       	breq	.+82     	; 0x1402 <pow+0x6e>
    13b0:	68 94       	set
    13b2:	90 38       	cpi	r25, 0x80	; 128
    13b4:	81 05       	cpc	r24, r1
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <pow+0x3c>
    13b8:	80 38       	cpi	r24, 0x80	; 128
    13ba:	bf ef       	ldi	r27, 0xFF	; 255
    13bc:	9b 07       	cpc	r25, r27
    13be:	41 f0       	breq	.+16     	; 0x13d0 <pow+0x3c>
    13c0:	99 23       	and	r25, r25
    13c2:	42 f5       	brpl	.+80     	; 0x1414 <pow+0x80>
    13c4:	ff 3f       	cpi	r31, 0xFF	; 255
    13c6:	e1 05       	cpc	r30, r1
    13c8:	31 05       	cpc	r19, r1
    13ca:	21 05       	cpc	r18, r1
    13cc:	11 f1       	breq	.+68     	; 0x1412 <pow+0x7e>
    13ce:	e8 94       	clt
    13d0:	08 94       	sec
    13d2:	e7 95       	ror	r30
    13d4:	d9 01       	movw	r26, r18
    13d6:	aa 23       	and	r26, r26
    13d8:	29 f4       	brne	.+10     	; 0x13e4 <pow+0x50>
    13da:	ab 2f       	mov	r26, r27
    13dc:	be 2f       	mov	r27, r30
    13de:	f8 5f       	subi	r31, 0xF8	; 248
    13e0:	d0 f3       	brcs	.-12     	; 0x13d6 <pow+0x42>
    13e2:	10 c0       	rjmp	.+32     	; 0x1404 <pow+0x70>
    13e4:	ff 5f       	subi	r31, 0xFF	; 255
    13e6:	70 f4       	brcc	.+28     	; 0x1404 <pow+0x70>
    13e8:	a6 95       	lsr	r26
    13ea:	e0 f7       	brcc	.-8      	; 0x13e4 <pow+0x50>
    13ec:	f7 39       	cpi	r31, 0x97	; 151
    13ee:	50 f0       	brcs	.+20     	; 0x1404 <pow+0x70>
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <pow+0x64>
    13f2:	ff 3a       	cpi	r31, 0xAF	; 175
    13f4:	38 f4       	brcc	.+14     	; 0x1404 <pow+0x70>
    13f6:	9f 77       	andi	r25, 0x7F	; 127
    13f8:	9f 93       	push	r25
    13fa:	0c d0       	rcall	.+24     	; 0x1414 <pow+0x80>
    13fc:	0f 90       	pop	r0
    13fe:	07 fc       	sbrc	r0, 7
    1400:	90 58       	subi	r25, 0x80	; 128
    1402:	08 95       	ret
    1404:	3e f0       	brts	.+14     	; 0x1414 <pow+0x80>
    1406:	18 cf       	rjmp	.-464    	; 0x1238 <__fp_nan>
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	80 e8       	ldi	r24, 0x80	; 128
    140e:	9f e3       	ldi	r25, 0x3F	; 63
    1410:	08 95       	ret
    1412:	4f e7       	ldi	r20, 0x7F	; 127
    1414:	9f 77       	andi	r25, 0x7F	; 127
    1416:	5f 93       	push	r21
    1418:	4f 93       	push	r20
    141a:	3f 93       	push	r19
    141c:	2f 93       	push	r18
    141e:	e7 d0       	rcall	.+462    	; 0x15ee <log>
    1420:	2f 91       	pop	r18
    1422:	3f 91       	pop	r19
    1424:	4f 91       	pop	r20
    1426:	5f 91       	pop	r21
    1428:	52 df       	rcall	.-348    	; 0x12ce <__mulsf3>
    142a:	25 c0       	rjmp	.+74     	; 0x1476 <exp>

0000142c <round>:
    142c:	2f df       	rcall	.-418    	; 0x128c <__fp_splitA>
    142e:	e0 f0       	brcs	.+56     	; 0x1468 <round+0x3c>
    1430:	9e 37       	cpi	r25, 0x7E	; 126
    1432:	d8 f0       	brcs	.+54     	; 0x146a <round+0x3e>
    1434:	96 39       	cpi	r25, 0x96	; 150
    1436:	b8 f4       	brcc	.+46     	; 0x1466 <round+0x3a>
    1438:	9e 38       	cpi	r25, 0x8E	; 142
    143a:	48 f4       	brcc	.+18     	; 0x144e <round+0x22>
    143c:	67 2f       	mov	r22, r23
    143e:	78 2f       	mov	r23, r24
    1440:	88 27       	eor	r24, r24
    1442:	98 5f       	subi	r25, 0xF8	; 248
    1444:	f9 cf       	rjmp	.-14     	; 0x1438 <round+0xc>
    1446:	86 95       	lsr	r24
    1448:	77 95       	ror	r23
    144a:	67 95       	ror	r22
    144c:	93 95       	inc	r25
    144e:	95 39       	cpi	r25, 0x95	; 149
    1450:	d0 f3       	brcs	.-12     	; 0x1446 <round+0x1a>
    1452:	b6 2f       	mov	r27, r22
    1454:	b1 70       	andi	r27, 0x01	; 1
    1456:	6b 0f       	add	r22, r27
    1458:	71 1d       	adc	r23, r1
    145a:	81 1d       	adc	r24, r1
    145c:	20 f4       	brcc	.+8      	; 0x1466 <round+0x3a>
    145e:	87 95       	ror	r24
    1460:	77 95       	ror	r23
    1462:	67 95       	ror	r22
    1464:	93 95       	inc	r25
    1466:	33 c0       	rjmp	.+102    	; 0x14ce <__fp_mintl>
    1468:	4d c0       	rjmp	.+154    	; 0x1504 <__fp_mpack>
    146a:	2b cf       	rjmp	.-426    	; 0x12c2 <__fp_szero>
    146c:	19 f4       	brne	.+6      	; 0x1474 <round+0x48>
    146e:	0e f0       	brts	.+2      	; 0x1472 <round+0x46>
    1470:	dd ce       	rjmp	.-582    	; 0x122c <__fp_inf>
    1472:	26 cf       	rjmp	.-436    	; 0x12c0 <__fp_zero>
    1474:	e1 ce       	rjmp	.-574    	; 0x1238 <__fp_nan>

00001476 <exp>:
    1476:	0a df       	rcall	.-492    	; 0x128c <__fp_splitA>
    1478:	c8 f3       	brcs	.-14     	; 0x146c <round+0x40>
    147a:	96 38       	cpi	r25, 0x86	; 134
    147c:	c0 f7       	brcc	.-16     	; 0x146e <round+0x42>
    147e:	07 f8       	bld	r0, 7
    1480:	0f 92       	push	r0
    1482:	e8 94       	clt
    1484:	2b e3       	ldi	r18, 0x3B	; 59
    1486:	3a ea       	ldi	r19, 0xAA	; 170
    1488:	48 eb       	ldi	r20, 0xB8	; 184
    148a:	5f e7       	ldi	r21, 0x7F	; 127
    148c:	2e df       	rcall	.-420    	; 0x12ea <__mulsf3_pse>
    148e:	0f 92       	push	r0
    1490:	0f 92       	push	r0
    1492:	0f 92       	push	r0
    1494:	4d b7       	in	r20, 0x3d	; 61
    1496:	5e b7       	in	r21, 0x3e	; 62
    1498:	0f 92       	push	r0
    149a:	e9 d0       	rcall	.+466    	; 0x166e <modf>
    149c:	e6 e2       	ldi	r30, 0x26	; 38
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	3f d0       	rcall	.+126    	; 0x1520 <__fp_powser>
    14a2:	4f 91       	pop	r20
    14a4:	5f 91       	pop	r21
    14a6:	ef 91       	pop	r30
    14a8:	ff 91       	pop	r31
    14aa:	e5 95       	asr	r30
    14ac:	ee 1f       	adc	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	49 f0       	breq	.+18     	; 0x14c4 <exp+0x4e>
    14b2:	fe 57       	subi	r31, 0x7E	; 126
    14b4:	e0 68       	ori	r30, 0x80	; 128
    14b6:	44 27       	eor	r20, r20
    14b8:	ee 0f       	add	r30, r30
    14ba:	44 1f       	adc	r20, r20
    14bc:	fa 95       	dec	r31
    14be:	e1 f7       	brne	.-8      	; 0x14b8 <exp+0x42>
    14c0:	41 95       	neg	r20
    14c2:	55 0b       	sbc	r21, r21
    14c4:	5b d0       	rcall	.+182    	; 0x157c <ldexp>
    14c6:	0f 90       	pop	r0
    14c8:	07 fe       	sbrs	r0, 7
    14ca:	4f c0       	rjmp	.+158    	; 0x156a <inverse>
    14cc:	08 95       	ret

000014ce <__fp_mintl>:
    14ce:	88 23       	and	r24, r24
    14d0:	71 f4       	brne	.+28     	; 0x14ee <__fp_mintl+0x20>
    14d2:	77 23       	and	r23, r23
    14d4:	21 f0       	breq	.+8      	; 0x14de <__fp_mintl+0x10>
    14d6:	98 50       	subi	r25, 0x08	; 8
    14d8:	87 2b       	or	r24, r23
    14da:	76 2f       	mov	r23, r22
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <__fp_mintl+0x1e>
    14de:	66 23       	and	r22, r22
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <__fp_mintl+0x18>
    14e2:	99 27       	eor	r25, r25
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <__fp_mintl+0x32>
    14e6:	90 51       	subi	r25, 0x10	; 16
    14e8:	86 2b       	or	r24, r22
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	2a f0       	brmi	.+10     	; 0x14fa <__fp_mintl+0x2c>
    14f0:	9a 95       	dec	r25
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	da f7       	brpl	.-10     	; 0x14f0 <__fp_mintl+0x22>
    14fa:	88 0f       	add	r24, r24
    14fc:	96 95       	lsr	r25
    14fe:	87 95       	ror	r24
    1500:	97 f9       	bld	r25, 7
    1502:	08 95       	ret

00001504 <__fp_mpack>:
    1504:	9f 3f       	cpi	r25, 0xFF	; 255
    1506:	31 f0       	breq	.+12     	; 0x1514 <__fp_mpack_finite+0xc>

00001508 <__fp_mpack_finite>:
    1508:	91 50       	subi	r25, 0x01	; 1
    150a:	20 f4       	brcc	.+8      	; 0x1514 <__fp_mpack_finite+0xc>
    150c:	87 95       	ror	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	b7 95       	ror	r27
    1514:	88 0f       	add	r24, r24
    1516:	91 1d       	adc	r25, r1
    1518:	96 95       	lsr	r25
    151a:	87 95       	ror	r24
    151c:	97 f9       	bld	r25, 7
    151e:	08 95       	ret

00001520 <__fp_powser>:
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	1f 93       	push	r17
    1526:	0f 93       	push	r16
    1528:	ff 92       	push	r15
    152a:	ef 92       	push	r14
    152c:	df 92       	push	r13
    152e:	7b 01       	movw	r14, r22
    1530:	8c 01       	movw	r16, r24
    1532:	68 94       	set
    1534:	05 c0       	rjmp	.+10     	; 0x1540 <__fp_powser+0x20>
    1536:	da 2e       	mov	r13, r26
    1538:	ef 01       	movw	r28, r30
    153a:	d5 de       	rcall	.-598    	; 0x12e6 <__mulsf3x>
    153c:	fe 01       	movw	r30, r28
    153e:	e8 94       	clt
    1540:	a5 91       	lpm	r26, Z+
    1542:	25 91       	lpm	r18, Z+
    1544:	35 91       	lpm	r19, Z+
    1546:	45 91       	lpm	r20, Z+
    1548:	55 91       	lpm	r21, Z+
    154a:	ae f3       	brts	.-22     	; 0x1536 <__fp_powser+0x16>
    154c:	ef 01       	movw	r28, r30
    154e:	8a dd       	rcall	.-1260   	; 0x1064 <__addsf3x>
    1550:	fe 01       	movw	r30, r28
    1552:	97 01       	movw	r18, r14
    1554:	a8 01       	movw	r20, r16
    1556:	da 94       	dec	r13
    1558:	79 f7       	brne	.-34     	; 0x1538 <__fp_powser+0x18>
    155a:	df 90       	pop	r13
    155c:	ef 90       	pop	r14
    155e:	ff 90       	pop	r15
    1560:	0f 91       	pop	r16
    1562:	1f 91       	pop	r17
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <inverse>:
    156a:	9b 01       	movw	r18, r22
    156c:	ac 01       	movw	r20, r24
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	80 e8       	ldi	r24, 0x80	; 128
    1574:	9f e3       	ldi	r25, 0x3F	; 63
    1576:	ae c0       	rjmp	.+348    	; 0x16d4 <__divsf3>
    1578:	59 ce       	rjmp	.-846    	; 0x122c <__fp_inf>
    157a:	c4 cf       	rjmp	.-120    	; 0x1504 <__fp_mpack>

0000157c <ldexp>:
    157c:	87 de       	rcall	.-754    	; 0x128c <__fp_splitA>
    157e:	e8 f3       	brcs	.-6      	; 0x157a <inverse+0x10>
    1580:	99 23       	and	r25, r25
    1582:	d9 f3       	breq	.-10     	; 0x157a <inverse+0x10>
    1584:	94 0f       	add	r25, r20
    1586:	51 1d       	adc	r21, r1
    1588:	bb f3       	brvs	.-18     	; 0x1578 <inverse+0xe>
    158a:	91 50       	subi	r25, 0x01	; 1
    158c:	50 40       	sbci	r21, 0x00	; 0
    158e:	94 f0       	brlt	.+36     	; 0x15b4 <ldexp+0x38>
    1590:	59 f0       	breq	.+22     	; 0x15a8 <ldexp+0x2c>
    1592:	88 23       	and	r24, r24
    1594:	32 f0       	brmi	.+12     	; 0x15a2 <ldexp+0x26>
    1596:	66 0f       	add	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	91 50       	subi	r25, 0x01	; 1
    159e:	50 40       	sbci	r21, 0x00	; 0
    15a0:	c1 f7       	brne	.-16     	; 0x1592 <ldexp+0x16>
    15a2:	9e 3f       	cpi	r25, 0xFE	; 254
    15a4:	51 05       	cpc	r21, r1
    15a6:	44 f7       	brge	.-48     	; 0x1578 <inverse+0xe>
    15a8:	88 0f       	add	r24, r24
    15aa:	91 1d       	adc	r25, r1
    15ac:	96 95       	lsr	r25
    15ae:	87 95       	ror	r24
    15b0:	97 f9       	bld	r25, 7
    15b2:	08 95       	ret
    15b4:	5f 3f       	cpi	r21, 0xFF	; 255
    15b6:	ac f0       	brlt	.+42     	; 0x15e2 <ldexp+0x66>
    15b8:	98 3e       	cpi	r25, 0xE8	; 232
    15ba:	9c f0       	brlt	.+38     	; 0x15e2 <ldexp+0x66>
    15bc:	bb 27       	eor	r27, r27
    15be:	86 95       	lsr	r24
    15c0:	77 95       	ror	r23
    15c2:	67 95       	ror	r22
    15c4:	b7 95       	ror	r27
    15c6:	08 f4       	brcc	.+2      	; 0x15ca <ldexp+0x4e>
    15c8:	b1 60       	ori	r27, 0x01	; 1
    15ca:	93 95       	inc	r25
    15cc:	c1 f7       	brne	.-16     	; 0x15be <ldexp+0x42>
    15ce:	bb 0f       	add	r27, r27
    15d0:	58 f7       	brcc	.-42     	; 0x15a8 <ldexp+0x2c>
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <ldexp+0x5c>
    15d4:	60 ff       	sbrs	r22, 0
    15d6:	e8 cf       	rjmp	.-48     	; 0x15a8 <ldexp+0x2c>
    15d8:	6f 5f       	subi	r22, 0xFF	; 255
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	8f 4f       	sbci	r24, 0xFF	; 255
    15de:	9f 4f       	sbci	r25, 0xFF	; 255
    15e0:	e3 cf       	rjmp	.-58     	; 0x15a8 <ldexp+0x2c>
    15e2:	6f ce       	rjmp	.-802    	; 0x12c2 <__fp_szero>
    15e4:	0e f0       	brts	.+2      	; 0x15e8 <ldexp+0x6c>
    15e6:	8e cf       	rjmp	.-228    	; 0x1504 <__fp_mpack>
    15e8:	27 ce       	rjmp	.-946    	; 0x1238 <__fp_nan>
    15ea:	68 94       	set
    15ec:	1f ce       	rjmp	.-962    	; 0x122c <__fp_inf>

000015ee <log>:
    15ee:	4e de       	rcall	.-868    	; 0x128c <__fp_splitA>
    15f0:	c8 f3       	brcs	.-14     	; 0x15e4 <ldexp+0x68>
    15f2:	99 23       	and	r25, r25
    15f4:	d1 f3       	breq	.-12     	; 0x15ea <ldexp+0x6e>
    15f6:	c6 f3       	brts	.-16     	; 0x15e8 <ldexp+0x6c>
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	1f 93       	push	r17
    15fe:	0f 93       	push	r16
    1600:	ff 92       	push	r15
    1602:	c9 2f       	mov	r28, r25
    1604:	dd 27       	eor	r29, r29
    1606:	88 23       	and	r24, r24
    1608:	2a f0       	brmi	.+10     	; 0x1614 <log+0x26>
    160a:	21 97       	sbiw	r28, 0x01	; 1
    160c:	66 0f       	add	r22, r22
    160e:	77 1f       	adc	r23, r23
    1610:	88 1f       	adc	r24, r24
    1612:	da f7       	brpl	.-10     	; 0x160a <log+0x1c>
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e8       	ldi	r20, 0x80	; 128
    161a:	5f eb       	ldi	r21, 0xBF	; 191
    161c:	9f e3       	ldi	r25, 0x3F	; 63
    161e:	88 39       	cpi	r24, 0x98	; 152
    1620:	20 f0       	brcs	.+8      	; 0x162a <log+0x3c>
    1622:	80 3e       	cpi	r24, 0xE0	; 224
    1624:	30 f0       	brcs	.+12     	; 0x1632 <log+0x44>
    1626:	21 96       	adiw	r28, 0x01	; 1
    1628:	8f 77       	andi	r24, 0x7F	; 127
    162a:	0b dd       	rcall	.-1514   	; 0x1042 <__addsf3>
    162c:	ee e4       	ldi	r30, 0x4E	; 78
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <log+0x4a>
    1632:	07 dd       	rcall	.-1522   	; 0x1042 <__addsf3>
    1634:	eb e7       	ldi	r30, 0x7B	; 123
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	73 df       	rcall	.-282    	; 0x1520 <__fp_powser>
    163a:	8b 01       	movw	r16, r22
    163c:	be 01       	movw	r22, r28
    163e:	ec 01       	movw	r28, r24
    1640:	fb 2e       	mov	r15, r27
    1642:	6f 57       	subi	r22, 0x7F	; 127
    1644:	71 09       	sbc	r23, r1
    1646:	75 95       	asr	r23
    1648:	77 1f       	adc	r23, r23
    164a:	88 0b       	sbc	r24, r24
    164c:	99 0b       	sbc	r25, r25
    164e:	8f dd       	rcall	.-1250   	; 0x116e <__floatsisf>
    1650:	28 e1       	ldi	r18, 0x18	; 24
    1652:	32 e7       	ldi	r19, 0x72	; 114
    1654:	41 e3       	ldi	r20, 0x31	; 49
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	46 de       	rcall	.-884    	; 0x12e6 <__mulsf3x>
    165a:	af 2d       	mov	r26, r15
    165c:	98 01       	movw	r18, r16
    165e:	ae 01       	movw	r20, r28
    1660:	ff 90       	pop	r15
    1662:	0f 91       	pop	r16
    1664:	1f 91       	pop	r17
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	fc dc       	rcall	.-1544   	; 0x1064 <__addsf3x>
    166c:	f6 cd       	rjmp	.-1044   	; 0x125a <__fp_round>

0000166e <modf>:
    166e:	fa 01       	movw	r30, r20
    1670:	dc 01       	movw	r26, r24
    1672:	aa 0f       	add	r26, r26
    1674:	bb 1f       	adc	r27, r27
    1676:	9b 01       	movw	r18, r22
    1678:	ac 01       	movw	r20, r24
    167a:	bf 57       	subi	r27, 0x7F	; 127
    167c:	28 f4       	brcc	.+10     	; 0x1688 <modf+0x1a>
    167e:	22 27       	eor	r18, r18
    1680:	33 27       	eor	r19, r19
    1682:	44 27       	eor	r20, r20
    1684:	50 78       	andi	r21, 0x80	; 128
    1686:	1f c0       	rjmp	.+62     	; 0x16c6 <modf+0x58>
    1688:	b7 51       	subi	r27, 0x17	; 23
    168a:	88 f4       	brcc	.+34     	; 0x16ae <modf+0x40>
    168c:	ab 2f       	mov	r26, r27
    168e:	00 24       	eor	r0, r0
    1690:	46 95       	lsr	r20
    1692:	37 95       	ror	r19
    1694:	27 95       	ror	r18
    1696:	01 1c       	adc	r0, r1
    1698:	a3 95       	inc	r26
    169a:	d2 f3       	brmi	.-12     	; 0x1690 <modf+0x22>
    169c:	00 20       	and	r0, r0
    169e:	69 f0       	breq	.+26     	; 0x16ba <modf+0x4c>
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	44 1f       	adc	r20, r20
    16a6:	b3 95       	inc	r27
    16a8:	da f3       	brmi	.-10     	; 0x16a0 <modf+0x32>
    16aa:	0d d0       	rcall	.+26     	; 0x16c6 <modf+0x58>
    16ac:	c9 cc       	rjmp	.-1646   	; 0x1040 <__subsf3>
    16ae:	61 30       	cpi	r22, 0x01	; 1
    16b0:	71 05       	cpc	r23, r1
    16b2:	a0 e8       	ldi	r26, 0x80	; 128
    16b4:	8a 07       	cpc	r24, r26
    16b6:	b9 46       	sbci	r27, 0x69	; 105
    16b8:	30 f4       	brcc	.+12     	; 0x16c6 <modf+0x58>
    16ba:	9b 01       	movw	r18, r22
    16bc:	ac 01       	movw	r20, r24
    16be:	66 27       	eor	r22, r22
    16c0:	77 27       	eor	r23, r23
    16c2:	88 27       	eor	r24, r24
    16c4:	90 78       	andi	r25, 0x80	; 128
    16c6:	30 96       	adiw	r30, 0x00	; 0
    16c8:	21 f0       	breq	.+8      	; 0x16d2 <modf+0x64>
    16ca:	20 83       	st	Z, r18
    16cc:	31 83       	std	Z+1, r19	; 0x01
    16ce:	42 83       	std	Z+2, r20	; 0x02
    16d0:	53 83       	std	Z+3, r21	; 0x03
    16d2:	08 95       	ret

000016d4 <__divsf3>:
    16d4:	0c d0       	rcall	.+24     	; 0x16ee <__divsf3x>
    16d6:	c1 cd       	rjmp	.-1150   	; 0x125a <__fp_round>
    16d8:	b9 dd       	rcall	.-1166   	; 0x124c <__fp_pscB>
    16da:	40 f0       	brcs	.+16     	; 0x16ec <__divsf3+0x18>
    16dc:	b0 dd       	rcall	.-1184   	; 0x123e <__fp_pscA>
    16de:	30 f0       	brcs	.+12     	; 0x16ec <__divsf3+0x18>
    16e0:	21 f4       	brne	.+8      	; 0x16ea <__divsf3+0x16>
    16e2:	5f 3f       	cpi	r21, 0xFF	; 255
    16e4:	19 f0       	breq	.+6      	; 0x16ec <__divsf3+0x18>
    16e6:	a2 cd       	rjmp	.-1212   	; 0x122c <__fp_inf>
    16e8:	51 11       	cpse	r21, r1
    16ea:	eb cd       	rjmp	.-1066   	; 0x12c2 <__fp_szero>
    16ec:	a5 cd       	rjmp	.-1206   	; 0x1238 <__fp_nan>

000016ee <__divsf3x>:
    16ee:	c6 dd       	rcall	.-1140   	; 0x127c <__fp_split3>
    16f0:	98 f3       	brcs	.-26     	; 0x16d8 <__divsf3+0x4>

000016f2 <__divsf3_pse>:
    16f2:	99 23       	and	r25, r25
    16f4:	c9 f3       	breq	.-14     	; 0x16e8 <__divsf3+0x14>
    16f6:	55 23       	and	r21, r21
    16f8:	b1 f3       	breq	.-20     	; 0x16e6 <__divsf3+0x12>
    16fa:	95 1b       	sub	r25, r21
    16fc:	55 0b       	sbc	r21, r21
    16fe:	bb 27       	eor	r27, r27
    1700:	aa 27       	eor	r26, r26
    1702:	62 17       	cp	r22, r18
    1704:	73 07       	cpc	r23, r19
    1706:	84 07       	cpc	r24, r20
    1708:	38 f0       	brcs	.+14     	; 0x1718 <__divsf3_pse+0x26>
    170a:	9f 5f       	subi	r25, 0xFF	; 255
    170c:	5f 4f       	sbci	r21, 0xFF	; 255
    170e:	22 0f       	add	r18, r18
    1710:	33 1f       	adc	r19, r19
    1712:	44 1f       	adc	r20, r20
    1714:	aa 1f       	adc	r26, r26
    1716:	a9 f3       	breq	.-22     	; 0x1702 <__divsf3_pse+0x10>
    1718:	33 d0       	rcall	.+102    	; 0x1780 <__divsf3_pse+0x8e>
    171a:	0e 2e       	mov	r0, r30
    171c:	3a f0       	brmi	.+14     	; 0x172c <__divsf3_pse+0x3a>
    171e:	e0 e8       	ldi	r30, 0x80	; 128
    1720:	30 d0       	rcall	.+96     	; 0x1782 <__divsf3_pse+0x90>
    1722:	91 50       	subi	r25, 0x01	; 1
    1724:	50 40       	sbci	r21, 0x00	; 0
    1726:	e6 95       	lsr	r30
    1728:	00 1c       	adc	r0, r0
    172a:	ca f7       	brpl	.-14     	; 0x171e <__divsf3_pse+0x2c>
    172c:	29 d0       	rcall	.+82     	; 0x1780 <__divsf3_pse+0x8e>
    172e:	fe 2f       	mov	r31, r30
    1730:	27 d0       	rcall	.+78     	; 0x1780 <__divsf3_pse+0x8e>
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	88 1f       	adc	r24, r24
    1738:	bb 1f       	adc	r27, r27
    173a:	26 17       	cp	r18, r22
    173c:	37 07       	cpc	r19, r23
    173e:	48 07       	cpc	r20, r24
    1740:	ab 07       	cpc	r26, r27
    1742:	b0 e8       	ldi	r27, 0x80	; 128
    1744:	09 f0       	breq	.+2      	; 0x1748 <__divsf3_pse+0x56>
    1746:	bb 0b       	sbc	r27, r27
    1748:	80 2d       	mov	r24, r0
    174a:	bf 01       	movw	r22, r30
    174c:	ff 27       	eor	r31, r31
    174e:	93 58       	subi	r25, 0x83	; 131
    1750:	5f 4f       	sbci	r21, 0xFF	; 255
    1752:	2a f0       	brmi	.+10     	; 0x175e <__divsf3_pse+0x6c>
    1754:	9e 3f       	cpi	r25, 0xFE	; 254
    1756:	51 05       	cpc	r21, r1
    1758:	68 f0       	brcs	.+26     	; 0x1774 <__divsf3_pse+0x82>
    175a:	68 cd       	rjmp	.-1328   	; 0x122c <__fp_inf>
    175c:	b2 cd       	rjmp	.-1180   	; 0x12c2 <__fp_szero>
    175e:	5f 3f       	cpi	r21, 0xFF	; 255
    1760:	ec f3       	brlt	.-6      	; 0x175c <__divsf3_pse+0x6a>
    1762:	98 3e       	cpi	r25, 0xE8	; 232
    1764:	dc f3       	brlt	.-10     	; 0x175c <__divsf3_pse+0x6a>
    1766:	86 95       	lsr	r24
    1768:	77 95       	ror	r23
    176a:	67 95       	ror	r22
    176c:	b7 95       	ror	r27
    176e:	f7 95       	ror	r31
    1770:	9f 5f       	subi	r25, 0xFF	; 255
    1772:	c9 f7       	brne	.-14     	; 0x1766 <__divsf3_pse+0x74>
    1774:	88 0f       	add	r24, r24
    1776:	91 1d       	adc	r25, r1
    1778:	96 95       	lsr	r25
    177a:	87 95       	ror	r24
    177c:	97 f9       	bld	r25, 7
    177e:	08 95       	ret
    1780:	e1 e0       	ldi	r30, 0x01	; 1
    1782:	66 0f       	add	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	bb 1f       	adc	r27, r27
    178a:	62 17       	cp	r22, r18
    178c:	73 07       	cpc	r23, r19
    178e:	84 07       	cpc	r24, r20
    1790:	ba 07       	cpc	r27, r26
    1792:	20 f0       	brcs	.+8      	; 0x179c <__divsf3_pse+0xaa>
    1794:	62 1b       	sub	r22, r18
    1796:	73 0b       	sbc	r23, r19
    1798:	84 0b       	sbc	r24, r20
    179a:	ba 0b       	sbc	r27, r26
    179c:	ee 1f       	adc	r30, r30
    179e:	88 f7       	brcc	.-30     	; 0x1782 <__divsf3_pse+0x90>
    17a0:	e0 95       	com	r30
    17a2:	08 95       	ret

000017a4 <__udivmodqi4>:
    17a4:	99 1b       	sub	r25, r25
    17a6:	79 e0       	ldi	r23, 0x09	; 9
    17a8:	04 c0       	rjmp	.+8      	; 0x17b2 <__udivmodqi4_ep>

000017aa <__udivmodqi4_loop>:
    17aa:	99 1f       	adc	r25, r25
    17ac:	96 17       	cp	r25, r22
    17ae:	08 f0       	brcs	.+2      	; 0x17b2 <__udivmodqi4_ep>
    17b0:	96 1b       	sub	r25, r22

000017b2 <__udivmodqi4_ep>:
    17b2:	88 1f       	adc	r24, r24
    17b4:	7a 95       	dec	r23
    17b6:	c9 f7       	brne	.-14     	; 0x17aa <__udivmodqi4_loop>
    17b8:	80 95       	com	r24
    17ba:	08 95       	ret

000017bc <__udivmodsi4>:
    17bc:	a1 e2       	ldi	r26, 0x21	; 33
    17be:	1a 2e       	mov	r1, r26
    17c0:	aa 1b       	sub	r26, r26
    17c2:	bb 1b       	sub	r27, r27
    17c4:	fd 01       	movw	r30, r26
    17c6:	0d c0       	rjmp	.+26     	; 0x17e2 <__udivmodsi4_ep>

000017c8 <__udivmodsi4_loop>:
    17c8:	aa 1f       	adc	r26, r26
    17ca:	bb 1f       	adc	r27, r27
    17cc:	ee 1f       	adc	r30, r30
    17ce:	ff 1f       	adc	r31, r31
    17d0:	a2 17       	cp	r26, r18
    17d2:	b3 07       	cpc	r27, r19
    17d4:	e4 07       	cpc	r30, r20
    17d6:	f5 07       	cpc	r31, r21
    17d8:	20 f0       	brcs	.+8      	; 0x17e2 <__udivmodsi4_ep>
    17da:	a2 1b       	sub	r26, r18
    17dc:	b3 0b       	sbc	r27, r19
    17de:	e4 0b       	sbc	r30, r20
    17e0:	f5 0b       	sbc	r31, r21

000017e2 <__udivmodsi4_ep>:
    17e2:	66 1f       	adc	r22, r22
    17e4:	77 1f       	adc	r23, r23
    17e6:	88 1f       	adc	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	1a 94       	dec	r1
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <__udivmodsi4_loop>
    17ee:	60 95       	com	r22
    17f0:	70 95       	com	r23
    17f2:	80 95       	com	r24
    17f4:	90 95       	com	r25
    17f6:	9b 01       	movw	r18, r22
    17f8:	ac 01       	movw	r20, r24
    17fa:	bd 01       	movw	r22, r26
    17fc:	cf 01       	movw	r24, r30
    17fe:	08 95       	ret

00001800 <__tablejump2__>:
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	05 90       	lpm	r0, Z+
    1806:	f4 91       	lpm	r31, Z
    1808:	e0 2d       	mov	r30, r0
    180a:	09 94       	ijmp

0000180c <malloc>:
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	82 30       	cpi	r24, 0x02	; 2
    1816:	91 05       	cpc	r25, r1
    1818:	10 f4       	brcc	.+4      	; 0x181e <malloc+0x12>
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__flp>
    1822:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <__flp+0x1>
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	a0 e0       	ldi	r26, 0x00	; 0
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	30 97       	sbiw	r30, 0x00	; 0
    1830:	19 f1       	breq	.+70     	; 0x1878 <malloc+0x6c>
    1832:	40 81       	ld	r20, Z
    1834:	51 81       	ldd	r21, Z+1	; 0x01
    1836:	02 81       	ldd	r16, Z+2	; 0x02
    1838:	13 81       	ldd	r17, Z+3	; 0x03
    183a:	48 17       	cp	r20, r24
    183c:	59 07       	cpc	r21, r25
    183e:	c8 f0       	brcs	.+50     	; 0x1872 <malloc+0x66>
    1840:	84 17       	cp	r24, r20
    1842:	95 07       	cpc	r25, r21
    1844:	69 f4       	brne	.+26     	; 0x1860 <malloc+0x54>
    1846:	10 97       	sbiw	r26, 0x00	; 0
    1848:	31 f0       	breq	.+12     	; 0x1856 <malloc+0x4a>
    184a:	12 96       	adiw	r26, 0x02	; 2
    184c:	0c 93       	st	X, r16
    184e:	12 97       	sbiw	r26, 0x02	; 2
    1850:	13 96       	adiw	r26, 0x03	; 3
    1852:	1c 93       	st	X, r17
    1854:	27 c0       	rjmp	.+78     	; 0x18a4 <malloc+0x98>
    1856:	00 93 aa 00 	sts	0x00AA, r16	; 0x8000aa <__flp>
    185a:	10 93 ab 00 	sts	0x00AB, r17	; 0x8000ab <__flp+0x1>
    185e:	22 c0       	rjmp	.+68     	; 0x18a4 <malloc+0x98>
    1860:	21 15       	cp	r18, r1
    1862:	31 05       	cpc	r19, r1
    1864:	19 f0       	breq	.+6      	; 0x186c <malloc+0x60>
    1866:	42 17       	cp	r20, r18
    1868:	53 07       	cpc	r21, r19
    186a:	18 f4       	brcc	.+6      	; 0x1872 <malloc+0x66>
    186c:	9a 01       	movw	r18, r20
    186e:	bd 01       	movw	r22, r26
    1870:	ef 01       	movw	r28, r30
    1872:	df 01       	movw	r26, r30
    1874:	f8 01       	movw	r30, r16
    1876:	db cf       	rjmp	.-74     	; 0x182e <malloc+0x22>
    1878:	21 15       	cp	r18, r1
    187a:	31 05       	cpc	r19, r1
    187c:	f9 f0       	breq	.+62     	; 0x18bc <malloc+0xb0>
    187e:	28 1b       	sub	r18, r24
    1880:	39 0b       	sbc	r19, r25
    1882:	24 30       	cpi	r18, 0x04	; 4
    1884:	31 05       	cpc	r19, r1
    1886:	80 f4       	brcc	.+32     	; 0x18a8 <malloc+0x9c>
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	61 15       	cp	r22, r1
    188e:	71 05       	cpc	r23, r1
    1890:	21 f0       	breq	.+8      	; 0x189a <malloc+0x8e>
    1892:	fb 01       	movw	r30, r22
    1894:	93 83       	std	Z+3, r25	; 0x03
    1896:	82 83       	std	Z+2, r24	; 0x02
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <malloc+0x96>
    189a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__flp+0x1>
    189e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__flp>
    18a2:	fe 01       	movw	r30, r28
    18a4:	32 96       	adiw	r30, 0x02	; 2
    18a6:	44 c0       	rjmp	.+136    	; 0x1930 <malloc+0x124>
    18a8:	fe 01       	movw	r30, r28
    18aa:	e2 0f       	add	r30, r18
    18ac:	f3 1f       	adc	r31, r19
    18ae:	81 93       	st	Z+, r24
    18b0:	91 93       	st	Z+, r25
    18b2:	22 50       	subi	r18, 0x02	; 2
    18b4:	31 09       	sbc	r19, r1
    18b6:	39 83       	std	Y+1, r19	; 0x01
    18b8:	28 83       	st	Y, r18
    18ba:	3a c0       	rjmp	.+116    	; 0x1930 <malloc+0x124>
    18bc:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__brkval>
    18c0:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__brkval+0x1>
    18c4:	23 2b       	or	r18, r19
    18c6:	41 f4       	brne	.+16     	; 0x18d8 <malloc+0xcc>
    18c8:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    18cc:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    18d0:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__brkval+0x1>
    18d4:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__brkval>
    18d8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    18dc:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    18e0:	21 15       	cp	r18, r1
    18e2:	31 05       	cpc	r19, r1
    18e4:	41 f4       	brne	.+16     	; 0x18f6 <malloc+0xea>
    18e6:	2d b7       	in	r18, 0x3d	; 61
    18e8:	3e b7       	in	r19, 0x3e	; 62
    18ea:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    18ee:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    18f2:	24 1b       	sub	r18, r20
    18f4:	35 0b       	sbc	r19, r21
    18f6:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <__brkval>
    18fa:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <__brkval+0x1>
    18fe:	e2 17       	cp	r30, r18
    1900:	f3 07       	cpc	r31, r19
    1902:	a0 f4       	brcc	.+40     	; 0x192c <malloc+0x120>
    1904:	2e 1b       	sub	r18, r30
    1906:	3f 0b       	sbc	r19, r31
    1908:	28 17       	cp	r18, r24
    190a:	39 07       	cpc	r19, r25
    190c:	78 f0       	brcs	.+30     	; 0x192c <malloc+0x120>
    190e:	ac 01       	movw	r20, r24
    1910:	4e 5f       	subi	r20, 0xFE	; 254
    1912:	5f 4f       	sbci	r21, 0xFF	; 255
    1914:	24 17       	cp	r18, r20
    1916:	35 07       	cpc	r19, r21
    1918:	48 f0       	brcs	.+18     	; 0x192c <malloc+0x120>
    191a:	4e 0f       	add	r20, r30
    191c:	5f 1f       	adc	r21, r31
    191e:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <__brkval+0x1>
    1922:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <__brkval>
    1926:	81 93       	st	Z+, r24
    1928:	91 93       	st	Z+, r25
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <malloc+0x124>
    192c:	e0 e0       	ldi	r30, 0x00	; 0
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	cf 01       	movw	r24, r30
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	08 95       	ret

0000193c <free>:
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	09 f4       	brne	.+2      	; 0x1946 <free+0xa>
    1944:	81 c0       	rjmp	.+258    	; 0x1a48 <free+0x10c>
    1946:	fc 01       	movw	r30, r24
    1948:	32 97       	sbiw	r30, 0x02	; 2
    194a:	13 82       	std	Z+3, r1	; 0x03
    194c:	12 82       	std	Z+2, r1	; 0x02
    194e:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <__flp>
    1952:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <__flp+0x1>
    1956:	10 97       	sbiw	r26, 0x00	; 0
    1958:	81 f4       	brne	.+32     	; 0x197a <free+0x3e>
    195a:	20 81       	ld	r18, Z
    195c:	31 81       	ldd	r19, Z+1	; 0x01
    195e:	82 0f       	add	r24, r18
    1960:	93 1f       	adc	r25, r19
    1962:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__brkval>
    1966:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__brkval+0x1>
    196a:	28 17       	cp	r18, r24
    196c:	39 07       	cpc	r19, r25
    196e:	51 f5       	brne	.+84     	; 0x19c4 <free+0x88>
    1970:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__brkval+0x1>
    1974:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__brkval>
    1978:	67 c0       	rjmp	.+206    	; 0x1a48 <free+0x10c>
    197a:	ed 01       	movw	r28, r26
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	ce 17       	cp	r28, r30
    1982:	df 07       	cpc	r29, r31
    1984:	40 f4       	brcc	.+16     	; 0x1996 <free+0x5a>
    1986:	4a 81       	ldd	r20, Y+2	; 0x02
    1988:	5b 81       	ldd	r21, Y+3	; 0x03
    198a:	9e 01       	movw	r18, r28
    198c:	41 15       	cp	r20, r1
    198e:	51 05       	cpc	r21, r1
    1990:	f1 f0       	breq	.+60     	; 0x19ce <free+0x92>
    1992:	ea 01       	movw	r28, r20
    1994:	f5 cf       	rjmp	.-22     	; 0x1980 <free+0x44>
    1996:	d3 83       	std	Z+3, r29	; 0x03
    1998:	c2 83       	std	Z+2, r28	; 0x02
    199a:	40 81       	ld	r20, Z
    199c:	51 81       	ldd	r21, Z+1	; 0x01
    199e:	84 0f       	add	r24, r20
    19a0:	95 1f       	adc	r25, r21
    19a2:	c8 17       	cp	r28, r24
    19a4:	d9 07       	cpc	r29, r25
    19a6:	59 f4       	brne	.+22     	; 0x19be <free+0x82>
    19a8:	88 81       	ld	r24, Y
    19aa:	99 81       	ldd	r25, Y+1	; 0x01
    19ac:	84 0f       	add	r24, r20
    19ae:	95 1f       	adc	r25, r21
    19b0:	02 96       	adiw	r24, 0x02	; 2
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ba:	93 83       	std	Z+3, r25	; 0x03
    19bc:	82 83       	std	Z+2, r24	; 0x02
    19be:	21 15       	cp	r18, r1
    19c0:	31 05       	cpc	r19, r1
    19c2:	29 f4       	brne	.+10     	; 0x19ce <free+0x92>
    19c4:	f0 93 ab 00 	sts	0x00AB, r31	; 0x8000ab <__flp+0x1>
    19c8:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__flp>
    19cc:	3d c0       	rjmp	.+122    	; 0x1a48 <free+0x10c>
    19ce:	e9 01       	movw	r28, r18
    19d0:	fb 83       	std	Y+3, r31	; 0x03
    19d2:	ea 83       	std	Y+2, r30	; 0x02
    19d4:	49 91       	ld	r20, Y+
    19d6:	59 91       	ld	r21, Y+
    19d8:	c4 0f       	add	r28, r20
    19da:	d5 1f       	adc	r29, r21
    19dc:	ec 17       	cp	r30, r28
    19de:	fd 07       	cpc	r31, r29
    19e0:	61 f4       	brne	.+24     	; 0x19fa <free+0xbe>
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	84 0f       	add	r24, r20
    19e8:	95 1f       	adc	r25, r21
    19ea:	02 96       	adiw	r24, 0x02	; 2
    19ec:	e9 01       	movw	r28, r18
    19ee:	99 83       	std	Y+1, r25	; 0x01
    19f0:	88 83       	st	Y, r24
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	9b 83       	std	Y+3, r25	; 0x03
    19f8:	8a 83       	std	Y+2, r24	; 0x02
    19fa:	e0 e0       	ldi	r30, 0x00	; 0
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	12 96       	adiw	r26, 0x02	; 2
    1a00:	8d 91       	ld	r24, X+
    1a02:	9c 91       	ld	r25, X
    1a04:	13 97       	sbiw	r26, 0x03	; 3
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <free+0xd4>
    1a0a:	fd 01       	movw	r30, r26
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	f7 cf       	rjmp	.-18     	; 0x19fe <free+0xc2>
    1a10:	8d 91       	ld	r24, X+
    1a12:	9c 91       	ld	r25, X
    1a14:	11 97       	sbiw	r26, 0x01	; 1
    1a16:	9d 01       	movw	r18, r26
    1a18:	2e 5f       	subi	r18, 0xFE	; 254
    1a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1c:	82 0f       	add	r24, r18
    1a1e:	93 1f       	adc	r25, r19
    1a20:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__brkval>
    1a24:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__brkval+0x1>
    1a28:	28 17       	cp	r18, r24
    1a2a:	39 07       	cpc	r19, r25
    1a2c:	69 f4       	brne	.+26     	; 0x1a48 <free+0x10c>
    1a2e:	30 97       	sbiw	r30, 0x00	; 0
    1a30:	29 f4       	brne	.+10     	; 0x1a3c <free+0x100>
    1a32:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__flp+0x1>
    1a36:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__flp>
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <free+0x104>
    1a3c:	13 82       	std	Z+3, r1	; 0x03
    1a3e:	12 82       	std	Z+2, r1	; 0x02
    1a40:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <__brkval+0x1>
    1a44:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <__brkval>
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	08 95       	ret

00001a4e <strlcat>:
    1a4e:	dc 01       	movw	r26, r24
    1a50:	fb 01       	movw	r30, r22
    1a52:	41 50       	subi	r20, 0x01	; 1
    1a54:	50 40       	sbci	r21, 0x00	; 0
    1a56:	70 f0       	brcs	.+28     	; 0x1a74 <strlcat+0x26>
    1a58:	0d 90       	ld	r0, X+
    1a5a:	00 20       	and	r0, r0
    1a5c:	d1 f7       	brne	.-12     	; 0x1a52 <strlcat+0x4>
    1a5e:	11 97       	sbiw	r26, 0x01	; 1
    1a60:	04 c0       	rjmp	.+8      	; 0x1a6a <strlcat+0x1c>
    1a62:	01 90       	ld	r0, Z+
    1a64:	0d 92       	st	X+, r0
    1a66:	00 20       	and	r0, r0
    1a68:	61 f0       	breq	.+24     	; 0x1a82 <strlcat+0x34>
    1a6a:	41 50       	subi	r20, 0x01	; 1
    1a6c:	50 40       	sbci	r21, 0x00	; 0
    1a6e:	c8 f7       	brcc	.-14     	; 0x1a62 <strlcat+0x14>
    1a70:	1c 92       	st	X, r1
    1a72:	bf 01       	movw	r22, r30
    1a74:	01 90       	ld	r0, Z+
    1a76:	00 20       	and	r0, r0
    1a78:	e9 f7       	brne	.-6      	; 0x1a74 <strlcat+0x26>
    1a7a:	e6 1b       	sub	r30, r22
    1a7c:	f7 0b       	sbc	r31, r23
    1a7e:	ae 0f       	add	r26, r30
    1a80:	bf 1f       	adc	r27, r31
    1a82:	08 94       	sec
    1a84:	a8 0b       	sbc	r26, r24
    1a86:	b9 0b       	sbc	r27, r25
    1a88:	cd 01       	movw	r24, r26
    1a8a:	08 95       	ret

00001a8c <strlcpy>:
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	fb 01       	movw	r30, r22
    1a90:	41 50       	subi	r20, 0x01	; 1
    1a92:	50 40       	sbci	r21, 0x00	; 0
    1a94:	58 f0       	brcs	.+22     	; 0x1aac <strlcpy+0x20>
    1a96:	49 f0       	breq	.+18     	; 0x1aaa <strlcpy+0x1e>
    1a98:	01 90       	ld	r0, Z+
    1a9a:	0d 92       	st	X+, r0
    1a9c:	00 20       	and	r0, r0
    1a9e:	c1 f7       	brne	.-16     	; 0x1a90 <strlcpy+0x4>
    1aa0:	e6 1b       	sub	r30, r22
    1aa2:	f7 0b       	sbc	r31, r23
    1aa4:	31 97       	sbiw	r30, 0x01	; 1
    1aa6:	cf 01       	movw	r24, r30
    1aa8:	08 95       	ret
    1aaa:	1c 92       	st	X, r1
    1aac:	01 90       	ld	r0, Z+
    1aae:	00 20       	and	r0, r0
    1ab0:	e9 f7       	brne	.-6      	; 0x1aac <strlcpy+0x20>
    1ab2:	f6 cf       	rjmp	.-20     	; 0x1aa0 <strlcpy+0x14>

00001ab4 <_exit>:
    1ab4:	f8 94       	cli

00001ab6 <__stop_program>:
    1ab6:	ff cf       	rjmp	.-2      	; 0x1ab6 <__stop_program>
