
AT24C256_Example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00001aac  00001b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800086  00800086  00001b66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004337  00000000  00000000  00001e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001495  00000000  00000000  00006193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001668  00000000  00000000  00007628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000077c  00000000  00000000  00008c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011b6  00000000  00000000  0000940c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000216c  00000000  00000000  0000a5c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000c72e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
       2:	78 c0       	rjmp	.+240    	; 0xf4 <__bad_interrupt>
       4:	77 c0       	rjmp	.+238    	; 0xf4 <__bad_interrupt>
       6:	76 c0       	rjmp	.+236    	; 0xf4 <__bad_interrupt>
       8:	75 c0       	rjmp	.+234    	; 0xf4 <__bad_interrupt>
       a:	74 c0       	rjmp	.+232    	; 0xf4 <__bad_interrupt>
       c:	73 c0       	rjmp	.+230    	; 0xf4 <__bad_interrupt>
       e:	72 c0       	rjmp	.+228    	; 0xf4 <__bad_interrupt>
      10:	71 c0       	rjmp	.+226    	; 0xf4 <__bad_interrupt>
      12:	42 c4       	rjmp	.+2180   	; 0x898 <__vector_9>
      14:	6f c0       	rjmp	.+222    	; 0xf4 <__bad_interrupt>
      16:	6e c0       	rjmp	.+220    	; 0xf4 <__bad_interrupt>
      18:	6d c0       	rjmp	.+218    	; 0xf4 <__bad_interrupt>
      1a:	6c c0       	rjmp	.+216    	; 0xf4 <__bad_interrupt>
      1c:	6b c0       	rjmp	.+214    	; 0xf4 <__bad_interrupt>
      1e:	6a c0       	rjmp	.+212    	; 0xf4 <__bad_interrupt>
      20:	69 c0       	rjmp	.+210    	; 0xf4 <__bad_interrupt>
      22:	13 c4       	rjmp	.+2086   	; 0x84a <__vector_17>
      24:	67 c0       	rjmp	.+206    	; 0xf4 <__bad_interrupt>
      26:	07 63       	ori	r16, 0x37	; 55
      28:	42 36       	cpi	r20, 0x62	; 98
      2a:	b7 9b       	sbis	0x16, 7	; 22
      2c:	d8 a7       	std	Y+40, r29	; 0x28
      2e:	1a 39       	cpi	r17, 0x9A	; 154
      30:	68 56       	subi	r22, 0x68	; 104
      32:	18 ae       	std	Y+56, r1	; 0x38
      34:	ba ab       	std	Y+50, r27	; 0x32
      36:	55 8c       	ldd	r5, Z+29	; 0x1d
      38:	1d 3c       	cpi	r17, 0xCD	; 205
      3a:	b7 cc       	rjmp	.-1682   	; 0xfffff9aa <__eeprom_end+0xff7ef9aa>
      3c:	57 63       	ori	r21, 0x37	; 55
      3e:	bd 6d       	ori	r27, 0xDD	; 221
      40:	ed fd       	.word	0xfded	; ????
      42:	75 3e       	cpi	r23, 0xE5	; 229
      44:	f6 17       	cp	r31, r22
      46:	72 31       	cpi	r23, 0x12	; 18
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	08 00       	.word	0x0008	; ????
      50:	00 00       	nop
      52:	be 92       	st	-X, r11
      54:	24 49       	sbci	r18, 0x94	; 148
      56:	12 3e       	cpi	r17, 0xE2	; 226
      58:	ab aa       	std	Y+51, r10	; 0x33
      5a:	aa 2a       	or	r10, r26
      5c:	be cd       	rjmp	.-1156   	; 0xfffffbda <__eeprom_end+0xff7efbda>
      5e:	cc cc       	rjmp	.-1640   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      60:	4c 3e       	cpi	r20, 0xEC	; 236
      62:	00 00       	nop
      64:	00 80       	ld	r0, Z
      66:	be ab       	std	Y+54, r27	; 0x36
      68:	aa aa       	std	Y+50, r10	; 0x32
      6a:	aa 3e       	cpi	r26, 0xEA	; 234
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	bf 00       	.word	0x00bf	; ????
      72:	00 00       	nop
      74:	80 3f       	cpi	r24, 0xF0	; 240
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	41 78       	andi	r20, 0x81	; 129
      7e:	d3 bb       	out	0x13, r29	; 19
      80:	43 87       	std	Z+11, r20	; 0x0b
      82:	d1 13       	cpse	r29, r17
      84:	3d 19       	sub	r19, r13
      86:	0e 3c       	cpi	r16, 0xCE	; 206
      88:	c3 bd       	out	0x23, r28	; 35
      8a:	42 82       	std	Z+2, r4	; 0x02
      8c:	ad 2b       	or	r26, r29
      8e:	3e 68       	ori	r19, 0x8E	; 142
      90:	ec 82       	std	Y+4, r14	; 0x04
      92:	76 be       	out	0x36, r7	; 54
      94:	d9 8f       	std	Y+25, r29	; 0x19
      96:	e1 a9       	ldd	r30, Z+49	; 0x31
      98:	3e 4c       	sbci	r19, 0xCE	; 206
      9a:	80 ef       	ldi	r24, 0xF0	; 240
      9c:	ff be       	out	0x3f, r15	; 63
      9e:	01 c4       	rjmp	.+2050   	; 0x8a2 <__vector_9+0xa>
      a0:	ff 7f       	andi	r31, 0xFF	; 255
      a2:	3f 00       	.word	0x003f	; ????
      a4:	00 00       	nop
	...

000000a8 <__ctors_start>:
      a8:	a7 05       	cpc	r26, r7

000000aa <__ctors_end>:
      aa:	11 24       	eor	r1, r1
      ac:	1f be       	out	0x3f, r1	; 63
      ae:	cf e5       	ldi	r28, 0x5F	; 95
      b0:	d4 e0       	ldi	r29, 0x04	; 4
      b2:	de bf       	out	0x3e, r29	; 62
      b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
      b6:	10 e0       	ldi	r17, 0x00	; 0
      b8:	a0 e6       	ldi	r26, 0x60	; 96
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	ec ea       	ldi	r30, 0xAC	; 172
      be:	fa e1       	ldi	r31, 0x1A	; 26
      c0:	02 c0       	rjmp	.+4      	; 0xc6 <__do_copy_data+0x10>
      c2:	05 90       	lpm	r0, Z+
      c4:	0d 92       	st	X+, r0
      c6:	a6 38       	cpi	r26, 0x86	; 134
      c8:	b1 07       	cpc	r27, r17
      ca:	d9 f7       	brne	.-10     	; 0xc2 <__do_copy_data+0xc>

000000cc <__do_clear_bss>:
      cc:	20 e0       	ldi	r18, 0x00	; 0
      ce:	a6 e8       	ldi	r26, 0x86	; 134
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	01 c0       	rjmp	.+2      	; 0xd6 <.do_clear_bss_start>

000000d4 <.do_clear_bss_loop>:
      d4:	1d 92       	st	X+, r1

000000d6 <.do_clear_bss_start>:
      d6:	ac 3a       	cpi	r26, 0xAC	; 172
      d8:	b2 07       	cpc	r27, r18
      da:	e1 f7       	brne	.-8      	; 0xd4 <.do_clear_bss_loop>

000000dc <__do_global_ctors>:
      dc:	10 e0       	ldi	r17, 0x00	; 0
      de:	c5 e5       	ldi	r28, 0x55	; 85
      e0:	d0 e0       	ldi	r29, 0x00	; 0
      e2:	03 c0       	rjmp	.+6      	; 0xea <__do_global_ctors+0xe>
      e4:	21 97       	sbiw	r28, 0x01	; 1
      e6:	fe 01       	movw	r30, r28
      e8:	85 db       	rcall	.-2294   	; 0xfffff7f4 <__eeprom_end+0xff7ef7f4>
      ea:	c4 35       	cpi	r28, 0x54	; 84
      ec:	d1 07       	cpc	r29, r17
      ee:	d1 f7       	brne	.-12     	; 0xe4 <__do_global_ctors+0x8>
      f0:	ed d4       	rcall	.+2522   	; 0xacc <main>
      f2:	da cc       	rjmp	.-1612   	; 0xfffffaa8 <__eeprom_end+0xff7efaa8>

000000f4 <__bad_interrupt>:
      f4:	85 cf       	rjmp	.-246    	; 0x0 <__vectors>

000000f6 <_ZN8AT24C25614ClockFrequencyEv>:
	return ptr;
}

void AT24C256::operator delete(void* ptr)
{
	if(ptr != nullptr) free(ptr);
      f6:	fc 01       	movw	r30, r24
      f8:	65 81       	ldd	r22, Z+5	; 0x05
      fa:	76 81       	ldd	r23, Z+6	; 0x06
      fc:	87 81       	ldd	r24, Z+7	; 0x07
      fe:	90 85       	ldd	r25, Z+8	; 0x08
     100:	08 95       	ret

00000102 <_ZN8AT24C25620GetTransactionStatusEv>:
     102:	fc 01       	movw	r30, r24
     104:	84 89       	ldd	r24, Z+20	; 0x14
     106:	81 30       	cpi	r24, 0x01	; 1
     108:	09 f0       	breq	.+2      	; 0x10c <_ZN8AT24C25620GetTransactionStatusEv+0xa>
     10a:	14 8a       	std	Z+20, r1	; 0x14
     10c:	08 95       	ret

0000010e <_ZN8AT24C256C1EP3TWIhhhm>:
     10e:	cf 92       	push	r12
     110:	df 92       	push	r13
     112:	ef 92       	push	r14
     114:	ff 92       	push	r15
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
     11a:	fc 01       	movw	r30, r24
     11c:	8d e6       	ldi	r24, 0x6D	; 109
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	91 83       	std	Z+1, r25	; 0x01
     122:	80 83       	st	Z, r24
     124:	73 83       	std	Z+3, r23	; 0x03
     126:	62 83       	std	Z+2, r22	; 0x02
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	44 0f       	add	r20, r20
     12c:	55 1f       	adc	r21, r21
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	44 0f       	add	r20, r20
     134:	55 1f       	adc	r21, r21
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	22 0f       	add	r18, r18
     13a:	33 1f       	adc	r19, r19
     13c:	22 0f       	add	r18, r18
     13e:	33 1f       	adc	r19, r19
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	00 0f       	add	r16, r16
     144:	11 1f       	adc	r17, r17
     146:	40 6a       	ori	r20, 0xA0	; 160
     148:	24 2b       	or	r18, r20
     14a:	02 2b       	or	r16, r18
     14c:	04 83       	std	Z+4, r16	; 0x04
     14e:	c5 82       	std	Z+5, r12	; 0x05
     150:	d6 82       	std	Z+6, r13	; 0x06
     152:	e7 82       	std	Z+7, r14	; 0x07
     154:	f0 86       	std	Z+8, r15	; 0x08
     156:	cf 01       	movw	r24, r30
     158:	09 96       	adiw	r24, 0x09	; 9
     15a:	94 87       	std	Z+12, r25	; 0x0c
     15c:	83 87       	std	Z+11, r24	; 0x0b
     15e:	17 86       	std	Z+15, r1	; 0x0f
     160:	16 86       	std	Z+14, r1	; 0x0e
     162:	88 ef       	ldi	r24, 0xF8	; 248
     164:	82 8b       	std	Z+18, r24	; 0x12
     166:	13 8a       	std	Z+19, r1	; 0x13
     168:	14 8a       	std	Z+20, r1	; 0x14
     16a:	1f 91       	pop	r17
     16c:	0f 91       	pop	r16
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	df 90       	pop	r13
     174:	cf 90       	pop	r12
     176:	08 95       	ret

00000178 <_ZN8AT24C256nwEj>:
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	ec 01       	movw	r28, r24
     17e:	ce 01       	movw	r24, r28
     180:	3f db       	rcall	.-2434   	; 0xfffff800 <__eeprom_end+0xff7ef800>
     182:	00 97       	sbiw	r24, 0x00	; 0
     184:	e1 f3       	breq	.-8      	; 0x17e <_ZN8AT24C256nwEj+0x6>
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <_ZN8AT24C25613ClearCountersEv>:
}

void AT24C256::ClearCounters()
{
	this->dataAddressCounter = sizeof(this->dataAddress);
     18c:	22 e0       	ldi	r18, 0x02	; 2
     18e:	fc 01       	movw	r30, r24
     190:	25 87       	std	Z+13, r18	; 0x0d
	this->dataCounter = 0;
     192:	11 8a       	std	Z+17, r1	; 0x11
     194:	08 95       	ret

00000196 <_ZN8AT24C25618NormaliseDataRangeEv>:
}

void AT24C256::NormaliseDataRange()
{
     196:	fc 01       	movw	r30, r24
	if((this->dataAddress + this->dataSize) > fieldSize)
     198:	21 85       	ldd	r18, Z+9	; 0x09
     19a:	32 85       	ldd	r19, Z+10	; 0x0a
     19c:	80 89       	ldd	r24, Z+16	; 0x10
     19e:	a9 01       	movw	r20, r18
     1a0:	48 0f       	add	r20, r24
     1a2:	51 1d       	adc	r21, r1
     1a4:	ca 01       	movw	r24, r20
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	90 48       	sbci	r25, 0x80	; 128
     1aa:	10 f0       	brcs	.+4      	; 0x1b0 <_ZN8AT24C25618NormaliseDataRangeEv+0x1a>
	{
		this->dataSize = fieldSize - this->dataAddress;
     1ac:	21 95       	neg	r18
     1ae:	20 8b       	std	Z+16, r18	; 0x10
     1b0:	08 95       	ret

000001b2 <_ZN8AT24C25620HandleWriteOperationEv>:
	}
}

void AT24C256::HandleWriteOperation()
{
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	ec 01       	movw	r28, r24
	switch(this->status)
     1b8:	8a 89       	ldd	r24, Y+18	; 0x12
     1ba:	88 31       	cpi	r24, 0x18	; 24
     1bc:	49 f0       	breq	.+18     	; 0x1d0 <_ZN8AT24C25620HandleWriteOperationEv+0x1e>
     1be:	88 32       	cpi	r24, 0x28	; 40
     1c0:	39 f0       	breq	.+14     	; 0x1d0 <_ZN8AT24C25620HandleWriteOperationEv+0x1e>
     1c2:	88 30       	cpi	r24, 0x08	; 8
     1c4:	81 f5       	brne	.+96     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
	{
		case TWI_Start:
		{						
			this->twi->WriteToTWDR(this->address);			
     1c6:	6c 81       	ldd	r22, Y+4	; 0x04
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	9b 81       	ldd	r25, Y+3	; 0x03
     1cc:	f6 d6       	rcall	.+3564   	; 0xfba <_ZN3TWI11WriteToTWDREh>
		}break;
     1ce:	2b c0       	rjmp	.+86     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		
		case TWI_MasterAddressWriteACK:		
		case TWI_MasterDataWriteACK:
		{
			if(this->dataAddressCounter > 0)
     1d0:	8d 85       	ldd	r24, Y+13	; 0x0d
     1d2:	88 23       	and	r24, r24
     1d4:	79 f0       	breq	.+30     	; 0x1f4 <_ZN8AT24C25620HandleWriteOperationEv+0x42>
			{
				this->twi->WriteToTWDR(this->dataAddressPtr[this->dataAddressCounter - 1]);
     1d6:	2b 85       	ldd	r18, Y+11	; 0x0b
     1d8:	3c 85       	ldd	r19, Y+12	; 0x0c
     1da:	e8 2f       	mov	r30, r24
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	31 97       	sbiw	r30, 0x01	; 1
     1e0:	e2 0f       	add	r30, r18
     1e2:	f3 1f       	adc	r31, r19
     1e4:	60 81       	ld	r22, Z
     1e6:	8a 81       	ldd	r24, Y+2	; 0x02
     1e8:	9b 81       	ldd	r25, Y+3	; 0x03
     1ea:	e7 d6       	rcall	.+3534   	; 0xfba <_ZN3TWI11WriteToTWDREh>
				
				this->dataAddressCounter--;
     1ec:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ee:	81 50       	subi	r24, 0x01	; 1
     1f0:	8d 87       	std	Y+13, r24	; 0x0d
     1f2:	19 c0       	rjmp	.+50     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
			}
			
			else
			{
				if(this->dataCounter < this->dataSize)
     1f4:	89 89       	ldd	r24, Y+17	; 0x11
     1f6:	98 89       	ldd	r25, Y+16	; 0x10
     1f8:	89 17       	cp	r24, r25
     1fa:	60 f4       	brcc	.+24     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
				{
					this->twi->WriteToTWDR(this->data[this->dataCounter]);
     1fc:	ee 85       	ldd	r30, Y+14	; 0x0e
     1fe:	ff 85       	ldd	r31, Y+15	; 0x0f
     200:	e8 0f       	add	r30, r24
     202:	f1 1d       	adc	r31, r1
     204:	60 81       	ld	r22, Z
     206:	8a 81       	ldd	r24, Y+2	; 0x02
     208:	9b 81       	ldd	r25, Y+3	; 0x03
     20a:	d7 d6       	rcall	.+3502   	; 0xfba <_ZN3TWI11WriteToTWDREh>
					this->dataCounter++;
     20c:	89 89       	ldd	r24, Y+17	; 0x11
     20e:	8f 5f       	subi	r24, 0xFF	; 255
     210:	89 8b       	std	Y+17, r24	; 0x11
     212:	09 c0       	rjmp	.+18     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
				}
				
				else
				{
					this->twi->Stop();
     214:	8a 81       	ldd	r24, Y+2	; 0x02
     216:	9b 81       	ldd	r25, Y+3	; 0x03
     218:	dc d6       	rcall	.+3512   	; 0xfd2 <_ZN3TWI4StopEv>
					
					this->operation = TWI_NoOperation;					
     21a:	1b 8a       	std	Y+19, r1	; 0x13
					
					free((uint8_t*)this->data);
     21c:	8e 85       	ldd	r24, Y+14	; 0x0e
     21e:	9f 85       	ldd	r25, Y+15	; 0x0f
     220:	87 db       	rcall	.-2290   	; 0xfffff930 <__eeprom_end+0xff7ef930>
					
					this->transactionStatus = TWI_Ok;
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	8c 8b       	std	Y+20, r24	; 0x14
			}
		}break;
		
		default: break;
	}
}
     226:	df 91       	pop	r29
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <_ZN8AT24C25619HandleReadOperationEv>:

void AT24C256::HandleReadOperation()
{
     22c:	0f 93       	push	r16
     22e:	1f 93       	push	r17
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	ec 01       	movw	r28, r24
	switch(this->status)
     236:	8a 89       	ldd	r24, Y+18	; 0x12
     238:	88 32       	cpi	r24, 0x28	; 40
     23a:	b1 f0       	breq	.+44     	; 0x268 <_ZN8AT24C25619HandleReadOperationEv+0x3c>
     23c:	38 f4       	brcc	.+14     	; 0x24c <_ZN8AT24C25619HandleReadOperationEv+0x20>
     23e:	80 31       	cpi	r24, 0x10	; 16
     240:	49 f1       	breq	.+82     	; 0x294 <_ZN8AT24C25619HandleReadOperationEv+0x68>
     242:	88 31       	cpi	r24, 0x18	; 24
     244:	89 f0       	breq	.+34     	; 0x268 <_ZN8AT24C25619HandleReadOperationEv+0x3c>
     246:	88 30       	cpi	r24, 0x08	; 8
     248:	51 f0       	breq	.+20     	; 0x25e <_ZN8AT24C25619HandleReadOperationEv+0x32>
     24a:	59 c0       	rjmp	.+178    	; 0x2fe <_ZN8AT24C25619HandleReadOperationEv+0xd2>
     24c:	80 35       	cpi	r24, 0x50	; 80
     24e:	41 f1       	breq	.+80     	; 0x2a0 <_ZN8AT24C25619HandleReadOperationEv+0x74>
     250:	88 35       	cpi	r24, 0x58	; 88
     252:	09 f4       	brne	.+2      	; 0x256 <_ZN8AT24C25619HandleReadOperationEv+0x2a>
     254:	42 c0       	rjmp	.+132    	; 0x2da <_ZN8AT24C25619HandleReadOperationEv+0xae>
     256:	80 34       	cpi	r24, 0x40	; 64
     258:	09 f0       	breq	.+2      	; 0x25c <_ZN8AT24C25619HandleReadOperationEv+0x30>
     25a:	51 c0       	rjmp	.+162    	; 0x2fe <_ZN8AT24C25619HandleReadOperationEv+0xd2>
     25c:	2e c0       	rjmp	.+92     	; 0x2ba <_ZN8AT24C25619HandleReadOperationEv+0x8e>
	{
		case TWI_Start:
		{
			this->twi->WriteToTWDR(this->address);
     25e:	6c 81       	ldd	r22, Y+4	; 0x04
     260:	8a 81       	ldd	r24, Y+2	; 0x02
     262:	9b 81       	ldd	r25, Y+3	; 0x03
     264:	aa d6       	rcall	.+3412   	; 0xfba <_ZN3TWI11WriteToTWDREh>
		}break;
     266:	4b c0       	rjmp	.+150    	; 0x2fe <_ZN8AT24C25619HandleReadOperationEv+0xd2>
		
		case TWI_MasterAddressWriteACK:
		case TWI_MasterDataWriteACK:
		{
			if(this->dataAddressCounter > 0)
     268:	8d 85       	ldd	r24, Y+13	; 0x0d
     26a:	88 23       	and	r24, r24
     26c:	79 f0       	breq	.+30     	; 0x28c <_ZN8AT24C25619HandleReadOperationEv+0x60>
			{
				this->twi->WriteToTWDR(this->dataAddressPtr[this->dataAddressCounter - 1]);
     26e:	2b 85       	ldd	r18, Y+11	; 0x0b
     270:	3c 85       	ldd	r19, Y+12	; 0x0c
     272:	e8 2f       	mov	r30, r24
     274:	f0 e0       	ldi	r31, 0x00	; 0
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	e2 0f       	add	r30, r18
     27a:	f3 1f       	adc	r31, r19
     27c:	60 81       	ld	r22, Z
     27e:	8a 81       	ldd	r24, Y+2	; 0x02
     280:	9b 81       	ldd	r25, Y+3	; 0x03
     282:	9b d6       	rcall	.+3382   	; 0xfba <_ZN3TWI11WriteToTWDREh>
				
				this->dataAddressCounter--;
     284:	8d 85       	ldd	r24, Y+13	; 0x0d
     286:	81 50       	subi	r24, 0x01	; 1
     288:	8d 87       	std	Y+13, r24	; 0x0d
     28a:	39 c0       	rjmp	.+114    	; 0x2fe <_ZN8AT24C25619HandleReadOperationEv+0xd2>
			}
			
			else
			{
				this->twi->Start();
     28c:	8a 81       	ldd	r24, Y+2	; 0x02
     28e:	9b 81       	ldd	r25, Y+3	; 0x03
     290:	5a d6       	rcall	.+3252   	; 0xf46 <_ZN3TWI5StartEv>
     292:	35 c0       	rjmp	.+106    	; 0x2fe <_ZN8AT24C25619HandleReadOperationEv+0xd2>
			}
		}break;
		
		case TWI_Restart:
		{
			this->twi->WriteToTWDR(this->address | 1);
     294:	6c 81       	ldd	r22, Y+4	; 0x04
     296:	61 60       	ori	r22, 0x01	; 1
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	9b 81       	ldd	r25, Y+3	; 0x03
     29c:	8e d6       	rcall	.+3356   	; 0xfba <_ZN3TWI11WriteToTWDREh>
		}break;
     29e:	2f c0       	rjmp	.+94     	; 0x2fe <_ZN8AT24C25619HandleReadOperationEv+0xd2>
				
		case TWI_MasterDataReadACK:
		{
			this->data[this->dataCounter] = this->twi->ReadFromTWDR();
     2a0:	0e 85       	ldd	r16, Y+14	; 0x0e
     2a2:	1f 85       	ldd	r17, Y+15	; 0x0f
     2a4:	89 89       	ldd	r24, Y+17	; 0x11
     2a6:	08 0f       	add	r16, r24
     2a8:	11 1d       	adc	r17, r1
     2aa:	8a 81       	ldd	r24, Y+2	; 0x02
     2ac:	9b 81       	ldd	r25, Y+3	; 0x03
     2ae:	8f d6       	rcall	.+3358   	; 0xfce <_ZN3TWI12ReadFromTWDREv>
     2b0:	f8 01       	movw	r30, r16
     2b2:	80 83       	st	Z, r24
			this->dataCounter++;
     2b4:	89 89       	ldd	r24, Y+17	; 0x11
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
     2b8:	89 8b       	std	Y+17, r24	; 0x11
		}
		case TWI_MasterAddressReadACK:
		{
			if(this->dataCounter < this->dataSize - 1)
     2ba:	29 89       	ldd	r18, Y+17	; 0x11
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	88 89       	ldd	r24, Y+16	; 0x10
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	28 17       	cp	r18, r24
     2c6:	39 07       	cpc	r19, r25
     2c8:	24 f4       	brge	.+8      	; 0x2d2 <_ZN8AT24C25619HandleReadOperationEv+0xa6>
			{
				this->twi->ACK();
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	9b 81       	ldd	r25, Y+3	; 0x03
     2ce:	79 d6       	rcall	.+3314   	; 0xfc2 <_ZN3TWI3ACKEv>
     2d0:	16 c0       	rjmp	.+44     	; 0x2fe <_ZN8AT24C25619HandleReadOperationEv+0xd2>
			} 
			else
			{
				this->twi->NACK();
     2d2:	8a 81       	ldd	r24, Y+2	; 0x02
     2d4:	9b 81       	ldd	r25, Y+3	; 0x03
     2d6:	78 d6       	rcall	.+3312   	; 0xfc8 <_ZN3TWI4NACKEv>
     2d8:	12 c0       	rjmp	.+36     	; 0x2fe <_ZN8AT24C25619HandleReadOperationEv+0xd2>
								
		}break;
		
		case TWI_MasterDataReadNACK:
		{
			this->data[this->dataCounter] = this->twi->ReadFromTWDR();
     2da:	0e 85       	ldd	r16, Y+14	; 0x0e
     2dc:	1f 85       	ldd	r17, Y+15	; 0x0f
     2de:	89 89       	ldd	r24, Y+17	; 0x11
     2e0:	08 0f       	add	r16, r24
     2e2:	11 1d       	adc	r17, r1
     2e4:	8a 81       	ldd	r24, Y+2	; 0x02
     2e6:	9b 81       	ldd	r25, Y+3	; 0x03
     2e8:	72 d6       	rcall	.+3300   	; 0xfce <_ZN3TWI12ReadFromTWDREv>
     2ea:	f8 01       	movw	r30, r16
     2ec:	80 83       	st	Z, r24
			
			this->data = nullptr;
     2ee:	1f 86       	std	Y+15, r1	; 0x0f
     2f0:	1e 86       	std	Y+14, r1	; 0x0e
			
			this->twi->Stop();		
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	9b 81       	ldd	r25, Y+3	; 0x03
     2f6:	6d d6       	rcall	.+3290   	; 0xfd2 <_ZN3TWI4StopEv>
			
			this->operation = TWI_NoOperation;	
     2f8:	1b 8a       	std	Y+19, r1	; 0x13
			
			this->transactionStatus = TWI_Ok;
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	8c 8b       	std	Y+20, r24	; 0x14
		}break;
		
		default: break;
	}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	1f 91       	pop	r17
     304:	0f 91       	pop	r16
     306:	08 95       	ret

00000308 <_ZN8AT24C25613NextOperationE10TWI_Status>:
{
	return this->clockFrequency;
}

void AT24C256::NextOperation(TWI_Status status)
{	
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	ec 01       	movw	r28, r24
	this->status = status;
     30e:	6a 8b       	std	Y+18, r22	; 0x12
	
	switch(this->status)
     310:	60 33       	cpi	r22, 0x30	; 48
     312:	a9 f0       	breq	.+42     	; 0x33e <_ZN8AT24C25613NextOperationE10TWI_Status+0x36>
     314:	28 f4       	brcc	.+10     	; 0x320 <_ZN8AT24C25613NextOperationE10TWI_Status+0x18>
     316:	66 23       	and	r22, r22
     318:	91 f0       	breq	.+36     	; 0x33e <_ZN8AT24C25613NextOperationE10TWI_Status+0x36>
     31a:	60 32       	cpi	r22, 0x20	; 32
     31c:	b1 f4       	brne	.+44     	; 0x34a <_ZN8AT24C25613NextOperationE10TWI_Status+0x42>
     31e:	0f c0       	rjmp	.+30     	; 0x33e <_ZN8AT24C25613NextOperationE10TWI_Status+0x36>
     320:	68 34       	cpi	r22, 0x48	; 72
     322:	69 f0       	breq	.+26     	; 0x33e <_ZN8AT24C25613NextOperationE10TWI_Status+0x36>
     324:	68 3f       	cpi	r22, 0xF8	; 248
     326:	d9 f0       	breq	.+54     	; 0x35e <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
     328:	68 33       	cpi	r22, 0x38	; 56
     32a:	79 f4       	brne	.+30     	; 0x34a <_ZN8AT24C25613NextOperationE10TWI_Status+0x42>
	{
		case TWI_NoActions: return;
		
		case TWI_ArbitrationLost:		
		{
			this->twi->Stop();
     32c:	8a 81       	ldd	r24, Y+2	; 0x02
     32e:	9b 81       	ldd	r25, Y+3	; 0x03
     330:	50 d6       	rcall	.+3232   	; 0xfd2 <_ZN3TWI4StopEv>
			
			ClearCounters();
     332:	ce 01       	movw	r24, r28
     334:	2b df       	rcall	.-426    	; 0x18c <_ZN8AT24C25613ClearCountersEv>
			
			this->twi->Start();		
     336:	8a 81       	ldd	r24, Y+2	; 0x02
     338:	9b 81       	ldd	r25, Y+3	; 0x03
     33a:	05 d6       	rcall	.+3082   	; 0xf46 <_ZN3TWI5StartEv>
		}return;
     33c:	10 c0       	rjmp	.+32     	; 0x35e <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
		case TWI_BusError:
		case TWI_MasterAddressWriteNACK:
		case TWI_MasterDataWriteNACK:
		case TWI_MasterAddressReadNACK:
		{
			this->transactionStatus = TWI_Error;
     33e:	83 e0       	ldi	r24, 0x03	; 3
     340:	8c 8b       	std	Y+20, r24	; 0x14
			
			this->twi->DisableInterrupt();
     342:	8a 81       	ldd	r24, Y+2	; 0x02
     344:	9b 81       	ldd	r25, Y+3	; 0x03
     346:	63 d6       	rcall	.+3270   	; 0x100e <_ZN3TWI16DisableInterruptEv>
		}return;
     348:	0a c0       	rjmp	.+20     	; 0x35e <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
		
		default: break;
	}
	
	if(this->operation == TWI_Write) HandleWriteOperation();
     34a:	8b 89       	ldd	r24, Y+19	; 0x13
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	19 f4       	brne	.+6      	; 0x356 <_ZN8AT24C25613NextOperationE10TWI_Status+0x4e>
     350:	ce 01       	movw	r24, r28
     352:	2f df       	rcall	.-418    	; 0x1b2 <_ZN8AT24C25620HandleWriteOperationEv>
     354:	04 c0       	rjmp	.+8      	; 0x35e <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
	else if(this->operation == TWI_Read) HandleReadOperation();
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	11 f4       	brne	.+4      	; 0x35e <_ZN8AT24C25613NextOperationE10TWI_Status+0x56>
     35a:	ce 01       	movw	r24, r28
     35c:	67 df       	rcall	.-306    	; 0x22c <_ZN8AT24C25619HandleReadOperationEv>
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <_ZN7HD4478012SelectDeviceEv>:
	}
	
	PrintText(text, slot, line);
}

HD44780::~HD44780(){}
     364:	fc 01       	movw	r30, r24
     366:	84 81       	ldd	r24, Z+4	; 0x04
     368:	95 81       	ldd	r25, Z+5	; 0x05
     36a:	1f d4       	rcall	.+2110   	; 0xbaa <_ZN4Port3SetEv>
     36c:	08 95       	ret

0000036e <_ZN7HD447809LatchDataEv>:
     36e:	fc 01       	movw	r30, r24
     370:	84 81       	ldd	r24, Z+4	; 0x04
     372:	95 81       	ldd	r25, Z+5	; 0x05
     374:	2c d4       	rcall	.+2136   	; 0xbce <_ZN4Port5ClearEv>
     376:	08 95       	ret

00000378 <_ZN7HD447804WaitEv>:
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	ec 01       	movw	r28, r24
     384:	f1 2c       	mov	r15, r1
     386:	83 e0       	ldi	r24, 0x03	; 3
     388:	8f 15       	cp	r24, r15
     38a:	90 f0       	brcs	.+36     	; 0x3b0 <_ZN7HD447804WaitEv+0x38>
     38c:	0f 2d       	mov	r16, r15
     38e:	10 e0       	ldi	r17, 0x00	; 0
     390:	0d 5f       	subi	r16, 0xFD	; 253
     392:	1f 4f       	sbci	r17, 0xFF	; 255
     394:	00 0f       	add	r16, r16
     396:	11 1f       	adc	r17, r17
     398:	0c 0f       	add	r16, r28
     39a:	1d 1f       	adc	r17, r29
     39c:	f8 01       	movw	r30, r16
     39e:	80 81       	ld	r24, Z
     3a0:	91 81       	ldd	r25, Z+1	; 0x01
     3a2:	03 d4       	rcall	.+2054   	; 0xbaa <_ZN4Port3SetEv>
     3a4:	f8 01       	movw	r30, r16
     3a6:	80 81       	ld	r24, Z
     3a8:	91 81       	ldd	r25, Z+1	; 0x01
     3aa:	d7 d3       	rcall	.+1966   	; 0xb5a <_ZN4Port10SetAsInputEv>
     3ac:	f3 94       	inc	r15
     3ae:	eb cf       	rjmp	.-42     	; 0x386 <_ZN7HD447804WaitEv+0xe>
     3b0:	8a 81       	ldd	r24, Y+2	; 0x02
     3b2:	9b 81       	ldd	r25, Y+3	; 0x03
     3b4:	fa d3       	rcall	.+2036   	; 0xbaa <_ZN4Port3SetEv>
     3b6:	88 81       	ld	r24, Y
     3b8:	99 81       	ldd	r25, Y+1	; 0x01
     3ba:	09 d4       	rcall	.+2066   	; 0xbce <_ZN4Port5ClearEv>
     3bc:	ce 01       	movw	r24, r28
     3be:	d2 df       	rcall	.-92     	; 0x364 <_ZN7HD4478012SelectDeviceEv>
     3c0:	8c 85       	ldd	r24, Y+12	; 0x0c
     3c2:	9d 85       	ldd	r25, Y+13	; 0x0d
     3c4:	2a d4       	rcall	.+2132   	; 0xc1a <_ZN4Port5IsSetEv>
     3c6:	18 2f       	mov	r17, r24
     3c8:	ce 01       	movw	r24, r28
     3ca:	d1 df       	rcall	.-94     	; 0x36e <_ZN7HD447809LatchDataEv>
     3cc:	ce 01       	movw	r24, r28
     3ce:	ca df       	rcall	.-108    	; 0x364 <_ZN7HD4478012SelectDeviceEv>
     3d0:	ce 01       	movw	r24, r28
     3d2:	cd df       	rcall	.-102    	; 0x36e <_ZN7HD447809LatchDataEv>
     3d4:	11 11       	cpse	r17, r1
     3d6:	f2 cf       	rjmp	.-28     	; 0x3bc <_ZN7HD447804WaitEv+0x44>
     3d8:	f1 2c       	mov	r15, r1
     3da:	f3 e0       	ldi	r31, 0x03	; 3
     3dc:	ff 15       	cp	r31, r15
     3de:	90 f0       	brcs	.+36     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
     3e0:	0f 2d       	mov	r16, r15
     3e2:	10 e0       	ldi	r17, 0x00	; 0
     3e4:	0d 5f       	subi	r16, 0xFD	; 253
     3e6:	1f 4f       	sbci	r17, 0xFF	; 255
     3e8:	00 0f       	add	r16, r16
     3ea:	11 1f       	adc	r17, r17
     3ec:	0c 0f       	add	r16, r28
     3ee:	1d 1f       	adc	r17, r29
     3f0:	f8 01       	movw	r30, r16
     3f2:	80 81       	ld	r24, Z
     3f4:	91 81       	ldd	r25, Z+1	; 0x01
     3f6:	c6 d3       	rcall	.+1932   	; 0xb84 <_ZN4Port11SetAsOutputEv>
     3f8:	f8 01       	movw	r30, r16
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	e7 d3       	rcall	.+1998   	; 0xbce <_ZN4Port5ClearEv>
     400:	f3 94       	inc	r15
     402:	eb cf       	rjmp	.-42     	; 0x3da <_ZN7HD447804WaitEv+0x62>
     404:	8a 81       	ldd	r24, Y+2	; 0x02
     406:	9b 81       	ldd	r25, Y+3	; 0x03
     408:	e2 d3       	rcall	.+1988   	; 0xbce <_ZN4Port5ClearEv>
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	08 95       	ret

00000416 <_ZN7HD447808SendByteEc8DataType>:
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	ec 01       	movw	r28, r24
     424:	e6 2e       	mov	r14, r22
     426:	14 2f       	mov	r17, r20
     428:	a7 df       	rcall	.-178    	; 0x378 <_ZN7HD447804WaitEv>
     42a:	11 30       	cpi	r17, 0x01	; 1
     42c:	21 f4       	brne	.+8      	; 0x436 <_ZN7HD447808SendByteEc8DataType+0x20>
     42e:	88 81       	ld	r24, Y
     430:	99 81       	ldd	r25, Y+1	; 0x01
     432:	cd d3       	rcall	.+1946   	; 0xbce <_ZN4Port5ClearEv>
     434:	05 c0       	rjmp	.+10     	; 0x440 <_ZN7HD447808SendByteEc8DataType+0x2a>
     436:	11 11       	cpse	r17, r1
     438:	03 c0       	rjmp	.+6      	; 0x440 <_ZN7HD447808SendByteEc8DataType+0x2a>
     43a:	88 81       	ld	r24, Y
     43c:	99 81       	ldd	r25, Y+1	; 0x01
     43e:	b5 d3       	rcall	.+1898   	; 0xbaa <_ZN4Port3SetEv>
     440:	0e 2d       	mov	r16, r14
     442:	10 e0       	ldi	r17, 0x00	; 0
     444:	15 95       	asr	r17
     446:	07 95       	ror	r16
     448:	15 95       	asr	r17
     44a:	07 95       	ror	r16
     44c:	15 95       	asr	r17
     44e:	07 95       	ror	r16
     450:	15 95       	asr	r17
     452:	07 95       	ror	r16
     454:	f1 2c       	mov	r15, r1
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	8f 15       	cp	r24, r15
     45a:	58 f1       	brcs	.+86     	; 0x4b2 <__stack+0x53>
     45c:	ce 01       	movw	r24, r28
     45e:	82 df       	rcall	.-252    	; 0x364 <_ZN7HD4478012SelectDeviceEv>
     460:	10 e0       	ldi	r17, 0x00	; 0
     462:	14 30       	cpi	r17, 0x04	; 4
     464:	08 f5       	brcc	.+66     	; 0x4a8 <__stack+0x49>
     466:	81 2f       	mov	r24, r17
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	20 2f       	mov	r18, r16
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	01 2e       	mov	r0, r17
     470:	02 c0       	rjmp	.+4      	; 0x476 <__stack+0x17>
     472:	35 95       	asr	r19
     474:	27 95       	ror	r18
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <__stack+0x13>
     47a:	20 ff       	sbrs	r18, 0
     47c:	0a c0       	rjmp	.+20     	; 0x492 <__stack+0x33>
     47e:	fc 01       	movw	r30, r24
     480:	33 96       	adiw	r30, 0x03	; 3
     482:	ee 0f       	add	r30, r30
     484:	ff 1f       	adc	r31, r31
     486:	ec 0f       	add	r30, r28
     488:	fd 1f       	adc	r31, r29
     48a:	80 81       	ld	r24, Z
     48c:	91 81       	ldd	r25, Z+1	; 0x01
     48e:	8d d3       	rcall	.+1818   	; 0xbaa <_ZN4Port3SetEv>
     490:	09 c0       	rjmp	.+18     	; 0x4a4 <__stack+0x45>
     492:	fc 01       	movw	r30, r24
     494:	33 96       	adiw	r30, 0x03	; 3
     496:	ee 0f       	add	r30, r30
     498:	ff 1f       	adc	r31, r31
     49a:	ec 0f       	add	r30, r28
     49c:	fd 1f       	adc	r31, r29
     49e:	80 81       	ld	r24, Z
     4a0:	91 81       	ldd	r25, Z+1	; 0x01
     4a2:	95 d3       	rcall	.+1834   	; 0xbce <_ZN4Port5ClearEv>
     4a4:	1f 5f       	subi	r17, 0xFF	; 255
     4a6:	dd cf       	rjmp	.-70     	; 0x462 <__stack+0x3>
     4a8:	ce 01       	movw	r24, r28
     4aa:	61 df       	rcall	.-318    	; 0x36e <_ZN7HD447809LatchDataEv>
     4ac:	f3 94       	inc	r15
     4ae:	0e 2d       	mov	r16, r14
     4b0:	d2 cf       	rjmp	.-92     	; 0x456 <_ZN7HD447808SendByteEc8DataType+0x40>
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	08 95       	ret

000004c0 <_ZN7HD4478017SetCursorPositionEhh>:
     4c0:	42 30       	cpi	r20, 0x02	; 2
     4c2:	20 f0       	brcs	.+8      	; 0x4cc <_ZN7HD4478017SetCursorPositionEhh+0xc>
     4c4:	41 70       	andi	r20, 0x01	; 1
     4c6:	fc 01       	movw	r30, r24
     4c8:	26 85       	ldd	r18, Z+14	; 0x0e
     4ca:	62 0f       	add	r22, r18
     4cc:	f0 e4       	ldi	r31, 0x40	; 64
     4ce:	4f 9f       	mul	r20, r31
     4d0:	60 0d       	add	r22, r0
     4d2:	11 24       	eor	r1, r1
     4d4:	60 68       	ori	r22, 0x80	; 128
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	9e df       	rcall	.-196    	; 0x416 <_ZN7HD447808SendByteEc8DataType>
     4da:	08 95       	ret

000004dc <_ZN7HD447802OnEv>:
     4dc:	41 e0       	ldi	r20, 0x01	; 1
     4de:	6c e0       	ldi	r22, 0x0C	; 12
     4e0:	9a df       	rcall	.-204    	; 0x416 <_ZN7HD447808SendByteEc8DataType>
     4e2:	08 95       	ret

000004e4 <_ZN7HD447803OffEv>:
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	68 e0       	ldi	r22, 0x08	; 8
     4e8:	96 df       	rcall	.-212    	; 0x416 <_ZN7HD447808SendByteEc8DataType>
     4ea:	08 95       	ret

000004ec <_ZN7HD447805ClearEv>:
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	92 df       	rcall	.-220    	; 0x416 <_ZN7HD447808SendByteEc8DataType>
     4f2:	08 95       	ret

000004f4 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h>:
     4f4:	6f 92       	push	r6
     4f6:	7f 92       	push	r7
     4f8:	8f 92       	push	r8
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	3c 01       	movw	r6, r24
     514:	cb 01       	movw	r24, r22
     516:	f3 01       	movw	r30, r6
     518:	86 86       	std	Z+14, r8	; 0x0e
     51a:	71 83       	std	Z+1, r23	; 0x01
     51c:	60 83       	st	Z, r22
     51e:	53 83       	std	Z+3, r21	; 0x03
     520:	42 83       	std	Z+2, r20	; 0x02
     522:	35 83       	std	Z+5, r19	; 0x05
     524:	24 83       	std	Z+4, r18	; 0x04
     526:	17 83       	std	Z+7, r17	; 0x07
     528:	06 83       	std	Z+6, r16	; 0x06
     52a:	f1 86       	std	Z+9, r15	; 0x09
     52c:	e0 86       	std	Z+8, r14	; 0x08
     52e:	d3 86       	std	Z+11, r13	; 0x0b
     530:	c2 86       	std	Z+10, r12	; 0x0a
     532:	b5 86       	std	Z+13, r11	; 0x0d
     534:	a4 86       	std	Z+12, r10	; 0x0c
     536:	26 d3       	rcall	.+1612   	; 0xb84 <_ZN4Port11SetAsOutputEv>
     538:	f3 01       	movw	r30, r6
     53a:	82 81       	ldd	r24, Z+2	; 0x02
     53c:	93 81       	ldd	r25, Z+3	; 0x03
     53e:	22 d3       	rcall	.+1604   	; 0xb84 <_ZN4Port11SetAsOutputEv>
     540:	f3 01       	movw	r30, r6
     542:	84 81       	ldd	r24, Z+4	; 0x04
     544:	95 81       	ldd	r25, Z+5	; 0x05
     546:	1e d3       	rcall	.+1596   	; 0xb84 <_ZN4Port11SetAsOutputEv>
     548:	f3 01       	movw	r30, r6
     54a:	82 81       	ldd	r24, Z+2	; 0x02
     54c:	93 81       	ldd	r25, Z+3	; 0x03
     54e:	3f d3       	rcall	.+1662   	; 0xbce <_ZN4Port5ClearEv>
     550:	f1 2c       	mov	r15, r1
     552:	f3 e0       	ldi	r31, 0x03	; 3
     554:	ff 15       	cp	r31, r15
     556:	90 f0       	brcs	.+36     	; 0x57c <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0x88>
     558:	0f 2d       	mov	r16, r15
     55a:	10 e0       	ldi	r17, 0x00	; 0
     55c:	0d 5f       	subi	r16, 0xFD	; 253
     55e:	1f 4f       	sbci	r17, 0xFF	; 255
     560:	00 0f       	add	r16, r16
     562:	11 1f       	adc	r17, r17
     564:	06 0d       	add	r16, r6
     566:	17 1d       	adc	r17, r7
     568:	f8 01       	movw	r30, r16
     56a:	80 81       	ld	r24, Z
     56c:	91 81       	ldd	r25, Z+1	; 0x01
     56e:	0a d3       	rcall	.+1556   	; 0xb84 <_ZN4Port11SetAsOutputEv>
     570:	f8 01       	movw	r30, r16
     572:	80 81       	ld	r24, Z
     574:	91 81       	ldd	r25, Z+1	; 0x01
     576:	2b d3       	rcall	.+1622   	; 0xbce <_ZN4Port5ClearEv>
     578:	f3 94       	inc	r15
     57a:	eb cf       	rjmp	.-42     	; 0x552 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0x5e>
     57c:	f3 01       	movw	r30, r6
     57e:	86 81       	ldd	r24, Z+6	; 0x06
     580:	97 81       	ldd	r25, Z+7	; 0x07
     582:	13 d3       	rcall	.+1574   	; 0xbaa <_ZN4Port3SetEv>
     584:	f3 01       	movw	r30, r6
     586:	80 85       	ldd	r24, Z+8	; 0x08
     588:	91 85       	ldd	r25, Z+9	; 0x09
     58a:	0f d3       	rcall	.+1566   	; 0xbaa <_ZN4Port3SetEv>
     58c:	10 e0       	ldi	r17, 0x00	; 0
     58e:	12 30       	cpi	r17, 0x02	; 2
     590:	90 f4       	brcc	.+36     	; 0x5b6 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xc2>
     592:	c3 01       	movw	r24, r6
     594:	e7 de       	rcall	.-562    	; 0x364 <_ZN7HD4478012SelectDeviceEv>
     596:	8f e9       	ldi	r24, 0x9F	; 159
     598:	9f e0       	ldi	r25, 0x0F	; 15
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xa6>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xac>
     5a0:	00 00       	nop
     5a2:	c3 01       	movw	r24, r6
     5a4:	e4 de       	rcall	.-568    	; 0x36e <_ZN7HD447809LatchDataEv>
     5a6:	ef e9       	ldi	r30, 0x9F	; 159
     5a8:	ff e0       	ldi	r31, 0x0F	; 15
     5aa:	31 97       	sbiw	r30, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xb6>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xbc>
     5b0:	00 00       	nop
     5b2:	1f 5f       	subi	r17, 0xFF	; 255
     5b4:	ec cf       	rjmp	.-40     	; 0x58e <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0x9a>
     5b6:	f3 01       	movw	r30, r6
     5b8:	86 81       	ldd	r24, Z+6	; 0x06
     5ba:	97 81       	ldd	r25, Z+7	; 0x07
     5bc:	08 d3       	rcall	.+1552   	; 0xbce <_ZN4Port5ClearEv>
     5be:	c3 01       	movw	r24, r6
     5c0:	d1 de       	rcall	.-606    	; 0x364 <_ZN7HD4478012SelectDeviceEv>
     5c2:	8f e9       	ldi	r24, 0x9F	; 159
     5c4:	9f e0       	ldi	r25, 0x0F	; 15
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xd2>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xd8>
     5cc:	00 00       	nop
     5ce:	c3 01       	movw	r24, r6
     5d0:	ce de       	rcall	.-612    	; 0x36e <_ZN7HD447809LatchDataEv>
     5d2:	ef e9       	ldi	r30, 0x9F	; 159
     5d4:	ff e0       	ldi	r31, 0x0F	; 15
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xe2>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h+0xe8>
     5dc:	00 00       	nop
     5de:	41 e0       	ldi	r20, 0x01	; 1
     5e0:	68 e2       	ldi	r22, 0x28	; 40
     5e2:	c3 01       	movw	r24, r6
     5e4:	18 df       	rcall	.-464    	; 0x416 <_ZN7HD447808SendByteEc8DataType>
     5e6:	c3 01       	movw	r24, r6
     5e8:	7d df       	rcall	.-262    	; 0x4e4 <_ZN7HD447803OffEv>
     5ea:	c3 01       	movw	r24, r6
     5ec:	7f df       	rcall	.-258    	; 0x4ec <_ZN7HD447805ClearEv>
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	66 e0       	ldi	r22, 0x06	; 6
     5f2:	c3 01       	movw	r24, r6
     5f4:	10 df       	rcall	.-480    	; 0x416 <_ZN7HD447808SendByteEc8DataType>
     5f6:	c3 01       	movw	r24, r6
     5f8:	71 df       	rcall	.-286    	; 0x4dc <_ZN7HD447802OnEv>
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	8f 90       	pop	r8
     610:	7f 90       	pop	r7
     612:	6f 90       	pop	r6
     614:	08 95       	ret

00000616 <_ZN7HD447809PrintTextEPKchh>:
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	8c 01       	movw	r16, r24
     620:	eb 01       	movw	r28, r22
     622:	64 2f       	mov	r22, r20
     624:	42 2f       	mov	r20, r18
     626:	4c df       	rcall	.-360    	; 0x4c0 <_ZN7HD4478017SetCursorPositionEhh>
     628:	68 81       	ld	r22, Y
     62a:	66 23       	and	r22, r22
     62c:	29 f0       	breq	.+10     	; 0x638 <_ZN7HD447809PrintTextEPKchh+0x22>
     62e:	21 96       	adiw	r28, 0x01	; 1
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	c8 01       	movw	r24, r16
     634:	f0 de       	rcall	.-544    	; 0x416 <_ZN7HD447808SendByteEc8DataType>
     636:	f8 cf       	rjmp	.-16     	; 0x628 <_ZN7HD447809PrintTextEPKchh+0x12>
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	08 95       	ret

00000642 <_ZN7HD44780nwEj>:

void* HD44780::operator new(size_t size)
{
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     648:	ce 01       	movw	r24, r28
     64a:	da d8       	rcall	.-3660   	; 0xfffff800 <__eeprom_end+0xff7ef800>
	}while(ptr == nullptr);
     64c:	00 97       	sbiw	r24, 0x00	; 0
     64e:	e1 f3       	breq	.-8      	; 0x648 <_ZN7HD44780nwEj+0x6>
	
	return ptr;
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <_Z41__static_initialization_and_destruction_0ii>:
	
	/* Replace with your application code */
	while (1)
	{
	}
     656:	8f 92       	push	r8
     658:	af 92       	push	r10
     65a:	bf 92       	push	r11
     65c:	cf 92       	push	r12
     65e:	df 92       	push	r13
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	09 f0       	breq	.+2      	; 0x672 <_Z41__static_initialization_and_destruction_0ii+0x1c>
     670:	e0 c0       	rjmp	.+448    	; 0x832 <_Z41__static_initialization_and_destruction_0ii+0x1dc>
     672:	6f 3f       	cpi	r22, 0xFF	; 255
     674:	7f 4f       	sbci	r23, 0xFF	; 255
     676:	09 f0       	breq	.+2      	; 0x67a <_Z41__static_initialization_and_destruction_0ii+0x24>
     678:	dc c0       	rjmp	.+440    	; 0x832 <_Z41__static_initialization_and_destruction_0ii+0x1dc>
#include "HD44780.h"
#include "StringHandler.h"
#include "AT24C256.h"
#include "TWI.h"

Port *rs = new Port(&PORTB, &DDRB, &PINB, 0);
     67a:	87 e0       	ldi	r24, 0x07	; 7
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	df d2       	rcall	.+1470   	; 0xc3e <_ZN4PortnwEj>
     680:	ec 01       	movw	r28, r24
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	26 e3       	ldi	r18, 0x36	; 54
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	47 e3       	ldi	r20, 0x37	; 55
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	68 e3       	ldi	r22, 0x38	; 56
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	b2 d2       	rcall	.+1380   	; 0xbf6 <_ZN4PortC1EPVhS1_S1_h>
     692:	d0 93 a7 00 	sts	0x00A7, r29	; 0x8000a7 <rs+0x1>
     696:	c0 93 a6 00 	sts	0x00A6, r28	; 0x8000a6 <rs>
Port *rw = new Port(&PORTB, &DDRB, &PINB, 1);
     69a:	87 e0       	ldi	r24, 0x07	; 7
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	cf d2       	rcall	.+1438   	; 0xc3e <_ZN4PortnwEj>
     6a0:	ec 01       	movw	r28, r24
     6a2:	01 e0       	ldi	r16, 0x01	; 1
     6a4:	26 e3       	ldi	r18, 0x36	; 54
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	47 e3       	ldi	r20, 0x37	; 55
     6aa:	50 e0       	ldi	r21, 0x00	; 0
     6ac:	68 e3       	ldi	r22, 0x38	; 56
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	a2 d2       	rcall	.+1348   	; 0xbf6 <_ZN4PortC1EPVhS1_S1_h>
     6b2:	d0 93 a5 00 	sts	0x00A5, r29	; 0x8000a5 <rw+0x1>
     6b6:	c0 93 a4 00 	sts	0x00A4, r28	; 0x8000a4 <rw>
Port *e = new Port(&PORTB, &DDRB, &PINB, 2);
     6ba:	87 e0       	ldi	r24, 0x07	; 7
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	bf d2       	rcall	.+1406   	; 0xc3e <_ZN4PortnwEj>
     6c0:	ec 01       	movw	r28, r24
     6c2:	02 e0       	ldi	r16, 0x02	; 2
     6c4:	26 e3       	ldi	r18, 0x36	; 54
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	47 e3       	ldi	r20, 0x37	; 55
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	68 e3       	ldi	r22, 0x38	; 56
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	92 d2       	rcall	.+1316   	; 0xbf6 <_ZN4PortC1EPVhS1_S1_h>
     6d2:	d0 93 a3 00 	sts	0x00A3, r29	; 0x8000a3 <e+0x1>
     6d6:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <e>
Port *d4 = new Port(&PORTB, &DDRB, &PINB, 3);
     6da:	87 e0       	ldi	r24, 0x07	; 7
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	af d2       	rcall	.+1374   	; 0xc3e <_ZN4PortnwEj>
     6e0:	ec 01       	movw	r28, r24
     6e2:	03 e0       	ldi	r16, 0x03	; 3
     6e4:	26 e3       	ldi	r18, 0x36	; 54
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	47 e3       	ldi	r20, 0x37	; 55
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	68 e3       	ldi	r22, 0x38	; 56
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	82 d2       	rcall	.+1284   	; 0xbf6 <_ZN4PortC1EPVhS1_S1_h>
     6f2:	d0 93 a1 00 	sts	0x00A1, r29	; 0x8000a1 <d4+0x1>
     6f6:	c0 93 a0 00 	sts	0x00A0, r28	; 0x8000a0 <d4>
Port *d5 = new Port(&PORTB, &DDRB, &PINB, 4);
     6fa:	87 e0       	ldi	r24, 0x07	; 7
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	9f d2       	rcall	.+1342   	; 0xc3e <_ZN4PortnwEj>
     700:	ec 01       	movw	r28, r24
     702:	04 e0       	ldi	r16, 0x04	; 4
     704:	26 e3       	ldi	r18, 0x36	; 54
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	47 e3       	ldi	r20, 0x37	; 55
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	68 e3       	ldi	r22, 0x38	; 56
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	72 d2       	rcall	.+1252   	; 0xbf6 <_ZN4PortC1EPVhS1_S1_h>
     712:	d0 93 9f 00 	sts	0x009F, r29	; 0x80009f <d5+0x1>
     716:	c0 93 9e 00 	sts	0x009E, r28	; 0x80009e <d5>
Port *d6 = new Port(&PORTB, &DDRB, &PINB, 5);
     71a:	87 e0       	ldi	r24, 0x07	; 7
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	8f d2       	rcall	.+1310   	; 0xc3e <_ZN4PortnwEj>
     720:	ec 01       	movw	r28, r24
     722:	05 e0       	ldi	r16, 0x05	; 5
     724:	26 e3       	ldi	r18, 0x36	; 54
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	47 e3       	ldi	r20, 0x37	; 55
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	68 e3       	ldi	r22, 0x38	; 56
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	62 d2       	rcall	.+1220   	; 0xbf6 <_ZN4PortC1EPVhS1_S1_h>
     732:	d0 93 9d 00 	sts	0x009D, r29	; 0x80009d <d6+0x1>
     736:	c0 93 9c 00 	sts	0x009C, r28	; 0x80009c <d6>
Port *d7 = new Port(&PORTB, &DDRB, &PINB, 6);
     73a:	87 e0       	ldi	r24, 0x07	; 7
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	7f d2       	rcall	.+1278   	; 0xc3e <_ZN4PortnwEj>
     740:	ec 01       	movw	r28, r24
     742:	06 e0       	ldi	r16, 0x06	; 6
     744:	26 e3       	ldi	r18, 0x36	; 54
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	47 e3       	ldi	r20, 0x37	; 55
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	68 e3       	ldi	r22, 0x38	; 56
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	52 d2       	rcall	.+1188   	; 0xbf6 <_ZN4PortC1EPVhS1_S1_h>
     752:	d0 93 9b 00 	sts	0x009B, r29	; 0x80009b <d7+0x1>
     756:	c0 93 9a 00 	sts	0x009A, r28	; 0x80009a <d7>
 	
HD44780 *lcd = new HD44780(rs, rw, e, d4, d5, d6, d7, 16);
     75a:	8f e0       	ldi	r24, 0x0F	; 15
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	71 df       	rcall	.-286    	; 0x642 <_ZN7HD44780nwEj>
     760:	ec 01       	movw	r28, r24
     762:	a0 90 9a 00 	lds	r10, 0x009A	; 0x80009a <d7>
     766:	b0 90 9b 00 	lds	r11, 0x009B	; 0x80009b <d7+0x1>
     76a:	c0 90 9c 00 	lds	r12, 0x009C	; 0x80009c <d6>
     76e:	d0 90 9d 00 	lds	r13, 0x009D	; 0x80009d <d6+0x1>
     772:	e0 90 9e 00 	lds	r14, 0x009E	; 0x80009e <d5>
     776:	f0 90 9f 00 	lds	r15, 0x009F	; 0x80009f <d5+0x1>
     77a:	00 91 a0 00 	lds	r16, 0x00A0	; 0x8000a0 <d4>
     77e:	10 91 a1 00 	lds	r17, 0x00A1	; 0x8000a1 <d4+0x1>
     782:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <e>
     786:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <e+0x1>
     78a:	40 91 a4 00 	lds	r20, 0x00A4	; 0x8000a4 <rw>
     78e:	50 91 a5 00 	lds	r21, 0x00A5	; 0x8000a5 <rw+0x1>
     792:	60 91 a6 00 	lds	r22, 0x00A6	; 0x8000a6 <rs>
     796:	70 91 a7 00 	lds	r23, 0x00A7	; 0x8000a7 <rs+0x1>
     79a:	68 94       	set
     79c:	88 24       	eor	r8, r8
     79e:	84 f8       	bld	r8, 4
     7a0:	a9 de       	rcall	.-686    	; 0x4f4 <_ZN7HD44780C1EP4PortS1_S1_S1_S1_S1_S1_h>
     7a2:	d0 93 99 00 	sts	0x0099, r29	; 0x800099 <lcd+0x1>
     7a6:	c0 93 98 00 	sts	0x0098, r28	; 0x800098 <lcd>

TWI *twi = new TWI(F_CPU);
     7aa:	80 e1       	ldi	r24, 0x10	; 16
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	38 d4       	rcall	.+2160   	; 0x1020 <_ZN3TWInwEj>
     7b0:	ec 01       	movw	r28, r24
     7b2:	40 e0       	ldi	r20, 0x00	; 0
     7b4:	52 e1       	ldi	r21, 0x12	; 18
     7b6:	6a e7       	ldi	r22, 0x7A	; 122
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	65 d3       	rcall	.+1738   	; 0xe86 <_ZN3TWIC1Em>
     7bc:	d0 93 97 00 	sts	0x0097, r29	; 0x800097 <twi+0x1>
     7c0:	c0 93 96 00 	sts	0x0096, r28	; 0x800096 <twi>
AT24C256 *eep1 = new AT24C256(twi, 1, 1, 1, 50000);
     7c4:	85 e1       	ldi	r24, 0x15	; 21
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	d7 dc       	rcall	.-1618   	; 0x178 <_ZN8AT24C256nwEj>
     7ca:	ec 01       	movw	r28, r24
     7cc:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <twi>
     7d0:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <twi+0x1>
     7d4:	0f 2e       	mov	r0, r31
     7d6:	f0 e5       	ldi	r31, 0x50	; 80
     7d8:	cf 2e       	mov	r12, r31
     7da:	f3 ec       	ldi	r31, 0xC3	; 195
     7dc:	df 2e       	mov	r13, r31
     7de:	e1 2c       	mov	r14, r1
     7e0:	f1 2c       	mov	r15, r1
     7e2:	f0 2d       	mov	r31, r0
     7e4:	01 e0       	ldi	r16, 0x01	; 1
     7e6:	21 e0       	ldi	r18, 0x01	; 1
     7e8:	41 e0       	ldi	r20, 0x01	; 1
     7ea:	91 dc       	rcall	.-1758   	; 0x10e <_ZN8AT24C256C1EP3TWIhhhm>
     7ec:	d0 93 95 00 	sts	0x0095, r29	; 0x800095 <eep1+0x1>
     7f0:	c0 93 94 00 	sts	0x0094, r28	; 0x800094 <eep1>
AT24C256 *eep2 = new AT24C256(twi, 0, 1, 1, 50000);
     7f4:	85 e1       	ldi	r24, 0x15	; 21
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	bf dc       	rcall	.-1666   	; 0x178 <_ZN8AT24C256nwEj>
     7fa:	ec 01       	movw	r28, r24
     7fc:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <twi>
     800:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <twi+0x1>
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	82 dc       	rcall	.-1788   	; 0x10e <_ZN8AT24C256C1EP3TWIhhhm>
     80a:	d0 93 93 00 	sts	0x0093, r29	; 0x800093 <eep2+0x1>
     80e:	c0 93 92 00 	sts	0x0092, r28	; 0x800092 <eep2>
AT24C256 *eep3 = new AT24C256(twi, 0, 0, 0, 50000);
     812:	85 e1       	ldi	r24, 0x15	; 21
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	b0 dc       	rcall	.-1696   	; 0x178 <_ZN8AT24C256nwEj>
     818:	ec 01       	movw	r28, r24
     81a:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <twi>
     81e:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <twi+0x1>
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	72 dc       	rcall	.-1820   	; 0x10e <_ZN8AT24C256C1EP3TWIhhhm>
     82a:	d0 93 91 00 	sts	0x0091, r29	; 0x800091 <eep3+0x1>
     82e:	c0 93 90 00 	sts	0x0090, r28	; 0x800090 <eep3>
	
	/* Replace with your application code */
	while (1)
	{
	}
     832:	df 91       	pop	r29
     834:	cf 91       	pop	r28
     836:	1f 91       	pop	r17
     838:	0f 91       	pop	r16
     83a:	ff 90       	pop	r15
     83c:	ef 90       	pop	r14
     83e:	df 90       	pop	r13
     840:	cf 90       	pop	r12
     842:	bf 90       	pop	r11
     844:	af 90       	pop	r10
     846:	8f 90       	pop	r8
     848:	08 95       	ret

0000084a <__vector_17>:
uint16_t e1 = 0;
float e2 = 0;
long e3 = 0;

ISR(TWI_vect)
{
     84a:	1f 92       	push	r1
     84c:	0f 92       	push	r0
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	0f 92       	push	r0
     852:	11 24       	eor	r1, r1
     854:	2f 93       	push	r18
     856:	3f 93       	push	r19
     858:	4f 93       	push	r20
     85a:	5f 93       	push	r21
     85c:	6f 93       	push	r22
     85e:	7f 93       	push	r23
     860:	8f 93       	push	r24
     862:	9f 93       	push	r25
     864:	af 93       	push	r26
     866:	bf 93       	push	r27
     868:	ef 93       	push	r30
     86a:	ff 93       	push	r31
	twi->HandleDataChange();
     86c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     870:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     874:	51 d3       	rcall	.+1698   	; 0xf18 <_ZN3TWI16HandleDataChangeEv>
}
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	4f 91       	pop	r20
     88a:	3f 91       	pop	r19
     88c:	2f 91       	pop	r18
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
	twi->CheckDevices();
     8ba:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     8be:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     8c2:	44 d3       	rcall	.+1672   	; 0xf4c <_ZN3TWI12CheckDevicesEv>
	
	if(allowPrintE1)
     8c4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <allowPrintE1>
     8c8:	88 23       	and	r24, r24
     8ca:	71 f1       	breq	.+92     	; 0x928 <__vector_9+0x90>
	{
		TWI_TransactionStatus ts1 = eep1->GetTransactionStatus();
     8cc:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <eep1>
     8d0:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <eep1+0x1>
     8d4:	dc 01       	movw	r26, r24
     8d6:	ed 91       	ld	r30, X+
     8d8:	fc 91       	ld	r31, X
     8da:	02 80       	ldd	r0, Z+2	; 0x02
     8dc:	f3 81       	ldd	r31, Z+3	; 0x03
     8de:	e0 2d       	mov	r30, r0
     8e0:	09 95       	icall
		if(ts1 == TWI_Ok)
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	a1 f4       	brne	.+40     	; 0x90e <__vector_9+0x76>
		{
			allowPrintE1 = false;
     8e6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <allowPrintE1>
			lcd->PrintText(StringHandler::FloatToString(e1, 0), 0, 0);			
     8ea:	60 91 8e 00 	lds	r22, 0x008E	; 0x80008e <e1>
     8ee:	70 91 8f 00 	lds	r23, 0x008F	; 0x80008f <e1+0x1>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	33 d4       	rcall	.+2150   	; 0x115e <__floatunsisf>
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	ab d1       	rcall	.+854    	; 0xc52 <_ZN13StringHandler13FloatToStringEfh>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	bc 01       	movw	r22, r24
     902:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     906:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     90a:	85 de       	rcall	.-758    	; 0x616 <_ZN7HD447809PrintTextEPKchh>
     90c:	0d c0       	rjmp	.+26     	; 0x928 <__vector_9+0x90>
		}
		else if(ts1 == TWI_Error)
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	59 f4       	brne	.+22     	; 0x928 <__vector_9+0x90>
		{
			allowPrintE1 = false;
     912:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <allowPrintE1>
			lcd->PrintText("err1", 0, 0);	
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	63 e7       	ldi	r22, 0x73	; 115
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     922:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     926:	77 de       	rcall	.-786    	; 0x616 <_ZN7HD447809PrintTextEPKchh>
		}
	}
	
	if(allowPrintE2)
     928:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <allowPrintE2>
     92c:	88 23       	and	r24, r24
     92e:	79 f1       	breq	.+94     	; 0x98e <__vector_9+0xf6>
	{
		TWI_TransactionStatus ts2 = eep2->GetTransactionStatus();
     930:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <eep2>
     934:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <eep2+0x1>
     938:	dc 01       	movw	r26, r24
     93a:	ed 91       	ld	r30, X+
     93c:	fc 91       	ld	r31, X
     93e:	02 80       	ldd	r0, Z+2	; 0x02
     940:	f3 81       	ldd	r31, Z+3	; 0x03
     942:	e0 2d       	mov	r30, r0
     944:	09 95       	icall
		if(ts2 == TWI_Ok)
     946:	82 30       	cpi	r24, 0x02	; 2
     948:	a9 f4       	brne	.+42     	; 0x974 <__vector_9+0xdc>
		{
			allowPrintE2 = false;
     94a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <allowPrintE2>
			lcd->PrintText(StringHandler::FloatToString(e2, 5), 0, 1);
     94e:	60 91 8a 00 	lds	r22, 0x008A	; 0x80008a <e2>
     952:	70 91 8b 00 	lds	r23, 0x008B	; 0x80008b <e2+0x1>
     956:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <e2+0x2>
     95a:	90 91 8d 00 	lds	r25, 0x008D	; 0x80008d <e2+0x3>
     95e:	45 e0       	ldi	r20, 0x05	; 5
     960:	78 d1       	rcall	.+752    	; 0xc52 <_ZN13StringHandler13FloatToStringEfh>
     962:	21 e0       	ldi	r18, 0x01	; 1
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	bc 01       	movw	r22, r24
     968:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     96c:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     970:	52 de       	rcall	.-860    	; 0x616 <_ZN7HD447809PrintTextEPKchh>
     972:	0d c0       	rjmp	.+26     	; 0x98e <__vector_9+0xf6>
		}
		else if(ts2 == TWI_Error)
     974:	83 30       	cpi	r24, 0x03	; 3
     976:	59 f4       	brne	.+22     	; 0x98e <__vector_9+0xf6>
		{
			allowPrintE2 = false;
     978:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <allowPrintE2>
			lcd->PrintText("err2", 0, 1);
     97c:	21 e0       	ldi	r18, 0x01	; 1
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	68 e7       	ldi	r22, 0x78	; 120
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     988:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     98c:	44 de       	rcall	.-888    	; 0x616 <_ZN7HD447809PrintTextEPKchh>
		}
	}
	
	if(allowPrintE3)
     98e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <allowPrintE3>
     992:	88 23       	and	r24, r24
     994:	81 f1       	breq	.+96     	; 0x9f6 <__vector_9+0x15e>
	{
		TWI_TransactionStatus ts3 = eep3->GetTransactionStatus();
     996:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <eep3>
     99a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <eep3+0x1>
     99e:	dc 01       	movw	r26, r24
     9a0:	ed 91       	ld	r30, X+
     9a2:	fc 91       	ld	r31, X
     9a4:	02 80       	ldd	r0, Z+2	; 0x02
     9a6:	f3 81       	ldd	r31, Z+3	; 0x03
     9a8:	e0 2d       	mov	r30, r0
     9aa:	09 95       	icall
		if(ts3 == TWI_Ok)
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	b1 f4       	brne	.+44     	; 0x9dc <__vector_9+0x144>
		{
			allowPrintE3 = false;
     9b0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <allowPrintE3>
			lcd->PrintText(StringHandler::FloatToString(e3, 0), 10, 0);
     9b4:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__data_end>
     9b8:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__data_end+0x1>
     9bc:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end+0x2>
     9c0:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x3>
     9c4:	ce d3       	rcall	.+1948   	; 0x1162 <__floatsisf>
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	44 d1       	rcall	.+648    	; 0xc52 <_ZN13StringHandler13FloatToStringEfh>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	4a e0       	ldi	r20, 0x0A	; 10
     9ce:	bc 01       	movw	r22, r24
     9d0:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     9d4:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     9d8:	1e de       	rcall	.-964    	; 0x616 <_ZN7HD447809PrintTextEPKchh>
     9da:	0d c0       	rjmp	.+26     	; 0x9f6 <__vector_9+0x15e>
		}
		else if(ts3 == TWI_Error)
     9dc:	83 30       	cpi	r24, 0x03	; 3
     9de:	59 f4       	brne	.+22     	; 0x9f6 <__vector_9+0x15e>
		{
			allowPrintE3 = false;
     9e0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <allowPrintE3>
			lcd->PrintText("err3", 10, 0);
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	4a e0       	ldi	r20, 0x0A	; 10
     9e8:	6d e7       	ldi	r22, 0x7D	; 125
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <lcd>
     9f0:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <lcd+0x1>
     9f4:	10 de       	rcall	.-992    	; 0x616 <_ZN7HD447809PrintTextEPKchh>
		}
	}
}
     9f6:	ff 91       	pop	r31
     9f8:	ef 91       	pop	r30
     9fa:	bf 91       	pop	r27
     9fc:	af 91       	pop	r26
     9fe:	9f 91       	pop	r25
     a00:	8f 91       	pop	r24
     a02:	7f 91       	pop	r23
     a04:	6f 91       	pop	r22
     a06:	5f 91       	pop	r21
     a08:	4f 91       	pop	r20
     a0a:	3f 91       	pop	r19
     a0c:	2f 91       	pop	r18
     a0e:	0f 90       	pop	r0
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	0f 90       	pop	r0
     a14:	1f 90       	pop	r1
     a16:	18 95       	reti

00000a18 <_ZN8AT24C25613SetDataToReadIjEEvjRT_h>:
	
	TWI_TransactionStatus transactionStatus;
}; 

template <typename T>
void AT24C256::SetDataToRead(uint16_t dataAddress, T &data, uint8_t dataSize)
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
{
	if(dataAddress >= fieldSize) return;
     a20:	77 23       	and	r23, r23
     a22:	9c f0       	brlt	.+38     	; 0xa4a <_ZN8AT24C25613SetDataToReadIjEEvjRT_h+0x32>
	
	if(this->transactionStatus == TWI_InProcess) return;
     a24:	fc 01       	movw	r30, r24
     a26:	34 89       	ldd	r19, Z+20	; 0x14
     a28:	31 30       	cpi	r19, 0x01	; 1
     a2a:	79 f0       	breq	.+30     	; 0xa4a <_ZN8AT24C25613SetDataToReadIjEEvjRT_h+0x32>
     a2c:	8a 01       	movw	r16, r20
     a2e:	ec 01       	movw	r28, r24
	
	this->transactionStatus = TWI_InProcess;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	84 8b       	std	Z+20, r24	; 0x14
	this->operation = TWI_Read;
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	83 8b       	std	Z+19, r24	; 0x13
	
	this->dataAddress = dataAddress;	
     a38:	72 87       	std	Z+10, r23	; 0x0a
     a3a:	61 87       	std	Z+9, r22	; 0x09
		
	this->dataSize = dataSize;
     a3c:	20 8b       	std	Z+16, r18	; 0x10
	
	ClearCounters();
     a3e:	cf 01       	movw	r24, r30
     a40:	a5 db       	rcall	.-2230   	; 0x18c <_ZN8AT24C25613ClearCountersEv>
	
	NormaliseDataRange();	
     a42:	ce 01       	movw	r24, r28
     a44:	a8 db       	rcall	.-2224   	; 0x196 <_ZN8AT24C25618NormaliseDataRangeEv>
	
	this->data = (uint8_t*)&data;
     a46:	1f 87       	std	Y+15, r17	; 0x0f
     a48:	0e 87       	std	Y+14, r16	; 0x0e
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	08 95       	ret

00000a54 <_ZN8AT24C25613SetDataToReadIfEEvjRT_h>:
	
	TWI_TransactionStatus transactionStatus;
}; 

template <typename T>
void AT24C256::SetDataToRead(uint16_t dataAddress, T &data, uint8_t dataSize)
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
{
	if(dataAddress >= fieldSize) return;
     a5c:	77 23       	and	r23, r23
     a5e:	9c f0       	brlt	.+38     	; 0xa86 <_ZN8AT24C25613SetDataToReadIfEEvjRT_h+0x32>
	
	if(this->transactionStatus == TWI_InProcess) return;
     a60:	fc 01       	movw	r30, r24
     a62:	34 89       	ldd	r19, Z+20	; 0x14
     a64:	31 30       	cpi	r19, 0x01	; 1
     a66:	79 f0       	breq	.+30     	; 0xa86 <_ZN8AT24C25613SetDataToReadIfEEvjRT_h+0x32>
     a68:	8a 01       	movw	r16, r20
     a6a:	ec 01       	movw	r28, r24
	
	this->transactionStatus = TWI_InProcess;
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	84 8b       	std	Z+20, r24	; 0x14
	this->operation = TWI_Read;
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	83 8b       	std	Z+19, r24	; 0x13
	
	this->dataAddress = dataAddress;	
     a74:	72 87       	std	Z+10, r23	; 0x0a
     a76:	61 87       	std	Z+9, r22	; 0x09
		
	this->dataSize = dataSize;
     a78:	20 8b       	std	Z+16, r18	; 0x10
	
	ClearCounters();
     a7a:	cf 01       	movw	r24, r30
     a7c:	87 db       	rcall	.-2290   	; 0x18c <_ZN8AT24C25613ClearCountersEv>
	
	NormaliseDataRange();	
     a7e:	ce 01       	movw	r24, r28
     a80:	8a db       	rcall	.-2284   	; 0x196 <_ZN8AT24C25618NormaliseDataRangeEv>
	
	this->data = (uint8_t*)&data;
     a82:	1f 87       	std	Y+15, r17	; 0x0f
     a84:	0e 87       	std	Y+14, r16	; 0x0e
}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	08 95       	ret

00000a90 <_ZN8AT24C25613SetDataToReadIlEEvjRT_h>:
	
	TWI_TransactionStatus transactionStatus;
}; 

template <typename T>
void AT24C256::SetDataToRead(uint16_t dataAddress, T &data, uint8_t dataSize)
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
{
	if(dataAddress >= fieldSize) return;
     a98:	77 23       	and	r23, r23
     a9a:	9c f0       	brlt	.+38     	; 0xac2 <_ZN8AT24C25613SetDataToReadIlEEvjRT_h+0x32>
	
	if(this->transactionStatus == TWI_InProcess) return;
     a9c:	fc 01       	movw	r30, r24
     a9e:	34 89       	ldd	r19, Z+20	; 0x14
     aa0:	31 30       	cpi	r19, 0x01	; 1
     aa2:	79 f0       	breq	.+30     	; 0xac2 <_ZN8AT24C25613SetDataToReadIlEEvjRT_h+0x32>
     aa4:	8a 01       	movw	r16, r20
     aa6:	ec 01       	movw	r28, r24
	
	this->transactionStatus = TWI_InProcess;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	84 8b       	std	Z+20, r24	; 0x14
	this->operation = TWI_Read;
     aac:	82 e0       	ldi	r24, 0x02	; 2
     aae:	83 8b       	std	Z+19, r24	; 0x13
	
	this->dataAddress = dataAddress;	
     ab0:	72 87       	std	Z+10, r23	; 0x0a
     ab2:	61 87       	std	Z+9, r22	; 0x09
		
	this->dataSize = dataSize;
     ab4:	20 8b       	std	Z+16, r18	; 0x10
	
	ClearCounters();
     ab6:	cf 01       	movw	r24, r30
     ab8:	69 db       	rcall	.-2350   	; 0x18c <_ZN8AT24C25613ClearCountersEv>
	
	NormaliseDataRange();	
     aba:	ce 01       	movw	r24, r28
     abc:	6c db       	rcall	.-2344   	; 0x196 <_ZN8AT24C25618NormaliseDataRangeEv>
	
	this->data = (uint8_t*)&data;
     abe:	1f 87       	std	Y+15, r17	; 0x0f
     ac0:	0e 87       	std	Y+14, r16	; 0x0e
}
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	08 95       	ret

00000acc <main>:

int main(void)
{
	
	//T0
	TCCR0|=(1<<CS02)|(1<<CS00);	//prescaler 1024
     acc:	83 b7       	in	r24, 0x33	; 51
     ace:	85 60       	ori	r24, 0x05	; 5
     ad0:	83 bf       	out	0x33, r24	; 51
	TIMSK|=(1<<TOIE0);			//enable interrupt OVF
     ad2:	89 b7       	in	r24, 0x39	; 57
     ad4:	81 60       	ori	r24, 0x01	; 1
     ad6:	89 bf       	out	0x39, r24	; 57
		
	sei();
     ad8:	78 94       	sei
	
	twi->AddDevice(eep1);
     ada:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <eep1>
     ade:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <eep1+0x1>
     ae2:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     ae6:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     aea:	d5 d1       	rcall	.+938    	; 0xe96 <_ZN3TWI9AddDeviceEP4ITWI>
	twi->AddDevice(eep2);
     aec:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <eep2>
     af0:	70 91 93 00 	lds	r23, 0x0093	; 0x800093 <eep2+0x1>
     af4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     af8:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     afc:	cc d1       	rcall	.+920    	; 0xe96 <_ZN3TWI9AddDeviceEP4ITWI>
	twi->AddDevice(eep3);
     afe:	60 91 90 00 	lds	r22, 0x0090	; 0x800090 <eep3>
     b02:	70 91 91 00 	lds	r23, 0x0091	; 0x800091 <eep3+0x1>
     b06:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <twi>
     b0a:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <twi+0x1>
     b0e:	c3 d1       	rcall	.+902    	; 0xe96 <_ZN3TWI9AddDeviceEP4ITWI>
  	//eep2->SetDataToWrite(50, e2, sizeof(e2));
	//
  	//e3 = 338542;
  	//eep3->SetDataToWrite(8150, e3, sizeof(e3));
	
  	eep1->SetDataToRead(0, e1, sizeof(e1));
     b10:	22 e0       	ldi	r18, 0x02	; 2
     b12:	4e e8       	ldi	r20, 0x8E	; 142
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <eep1>
     b1e:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <eep1+0x1>
     b22:	7a df       	rcall	.-268    	; 0xa18 <_ZN8AT24C25613SetDataToReadIjEEvjRT_h>
  	eep2->SetDataToRead(50, e2, sizeof(e2));
     b24:	24 e0       	ldi	r18, 0x04	; 4
     b26:	4a e8       	ldi	r20, 0x8A	; 138
     b28:	50 e0       	ldi	r21, 0x00	; 0
     b2a:	62 e3       	ldi	r22, 0x32	; 50
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <eep2>
     b32:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <eep2+0x1>
     b36:	8e df       	rcall	.-228    	; 0xa54 <_ZN8AT24C25613SetDataToReadIfEEvjRT_h>
  	eep3->SetDataToRead(8150, e3, sizeof(e3));	 
     b38:	24 e0       	ldi	r18, 0x04	; 4
     b3a:	46 e8       	ldi	r20, 0x86	; 134
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	66 ed       	ldi	r22, 0xD6	; 214
     b40:	7f e1       	ldi	r23, 0x1F	; 31
     b42:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <eep3>
     b46:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <eep3+0x1>
     b4a:	a2 df       	rcall	.-188    	; 0xa90 <_ZN8AT24C25613SetDataToReadIlEEvjRT_h>
     b4c:	ff cf       	rjmp	.-2      	; 0xb4c <main+0x80>

00000b4e <_GLOBAL__sub_I_rs>:
	
	/* Replace with your application code */
	while (1)
	{
	}
     b4e:	6f ef       	ldi	r22, 0xFF	; 255
     b50:	7f ef       	ldi	r23, 0xFF	; 255
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	7f dd       	rcall	.-1282   	; 0x656 <_Z41__static_initialization_and_destruction_0ii>
     b58:	08 95       	ret

00000b5a <_ZN4Port10SetAsInputEv>:
bool Port::IsClear()
{
	return !(*this->PIN & (1<<this->pinNum));
}

Port::~Port(){}
     b5a:	dc 01       	movw	r26, r24
     b5c:	12 96       	adiw	r26, 0x02	; 2
     b5e:	ed 91       	ld	r30, X+
     b60:	fc 91       	ld	r31, X
     b62:	13 97       	sbiw	r26, 0x03	; 3
     b64:	40 81       	ld	r20, Z
     b66:	21 e0       	ldi	r18, 0x01	; 1
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	b9 01       	movw	r22, r18
     b6c:	16 96       	adiw	r26, 0x06	; 6
     b6e:	0c 90       	ld	r0, X
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <_ZN4Port10SetAsInputEv+0x1c>
     b72:	66 0f       	add	r22, r22
     b74:	77 1f       	adc	r23, r23
     b76:	0a 94       	dec	r0
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <_ZN4Port10SetAsInputEv+0x18>
     b7a:	cb 01       	movw	r24, r22
     b7c:	80 95       	com	r24
     b7e:	84 23       	and	r24, r20
     b80:	80 83       	st	Z, r24
     b82:	08 95       	ret

00000b84 <_ZN4Port11SetAsOutputEv>:
     b84:	dc 01       	movw	r26, r24
     b86:	12 96       	adiw	r26, 0x02	; 2
     b88:	ed 91       	ld	r30, X+
     b8a:	fc 91       	ld	r31, X
     b8c:	13 97       	sbiw	r26, 0x03	; 3
     b8e:	40 81       	ld	r20, Z
     b90:	21 e0       	ldi	r18, 0x01	; 1
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	c9 01       	movw	r24, r18
     b96:	16 96       	adiw	r26, 0x06	; 6
     b98:	0c 90       	ld	r0, X
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <_ZN4Port11SetAsOutputEv+0x1c>
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	0a 94       	dec	r0
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <_ZN4Port11SetAsOutputEv+0x18>
     ba4:	84 2b       	or	r24, r20
     ba6:	80 83       	st	Z, r24
     ba8:	08 95       	ret

00000baa <_ZN4Port3SetEv>:
     baa:	dc 01       	movw	r26, r24
     bac:	ed 91       	ld	r30, X+
     bae:	fc 91       	ld	r31, X
     bb0:	11 97       	sbiw	r26, 0x01	; 1
     bb2:	40 81       	ld	r20, Z
     bb4:	21 e0       	ldi	r18, 0x01	; 1
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	c9 01       	movw	r24, r18
     bba:	16 96       	adiw	r26, 0x06	; 6
     bbc:	0c 90       	ld	r0, X
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <_ZN4Port3SetEv+0x1a>
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	0a 94       	dec	r0
     bc6:	e2 f7       	brpl	.-8      	; 0xbc0 <_ZN4Port3SetEv+0x16>
     bc8:	84 2b       	or	r24, r20
     bca:	80 83       	st	Z, r24
     bcc:	08 95       	ret

00000bce <_ZN4Port5ClearEv>:
     bce:	dc 01       	movw	r26, r24
     bd0:	ed 91       	ld	r30, X+
     bd2:	fc 91       	ld	r31, X
     bd4:	11 97       	sbiw	r26, 0x01	; 1
     bd6:	40 81       	ld	r20, Z
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	b9 01       	movw	r22, r18
     bde:	16 96       	adiw	r26, 0x06	; 6
     be0:	0c 90       	ld	r0, X
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <_ZN4Port5ClearEv+0x1a>
     be4:	66 0f       	add	r22, r22
     be6:	77 1f       	adc	r23, r23
     be8:	0a 94       	dec	r0
     bea:	e2 f7       	brpl	.-8      	; 0xbe4 <_ZN4Port5ClearEv+0x16>
     bec:	cb 01       	movw	r24, r22
     bee:	80 95       	com	r24
     bf0:	84 23       	and	r24, r20
     bf2:	80 83       	st	Z, r24
     bf4:	08 95       	ret

00000bf6 <_ZN4PortC1EPVhS1_S1_h>:
     bf6:	0f 93       	push	r16
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ec 01       	movw	r28, r24
     bfe:	79 83       	std	Y+1, r23	; 0x01
     c00:	68 83       	st	Y, r22
     c02:	5b 83       	std	Y+3, r21	; 0x03
     c04:	4a 83       	std	Y+2, r20	; 0x02
     c06:	3d 83       	std	Y+5, r19	; 0x05
     c08:	2c 83       	std	Y+4, r18	; 0x04
     c0a:	0e 83       	std	Y+6, r16	; 0x06
     c0c:	a6 df       	rcall	.-180    	; 0xb5a <_ZN4Port10SetAsInputEv>
     c0e:	ce 01       	movw	r24, r28
     c10:	de df       	rcall	.-68     	; 0xbce <_ZN4Port5ClearEv>
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	0f 91       	pop	r16
     c18:	08 95       	ret

00000c1a <_ZN4Port5IsSetEv>:
     c1a:	dc 01       	movw	r26, r24
     c1c:	14 96       	adiw	r26, 0x04	; 4
     c1e:	ed 91       	ld	r30, X+
     c20:	fc 91       	ld	r31, X
     c22:	15 97       	sbiw	r26, 0x05	; 5
     c24:	20 81       	ld	r18, Z
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	f9 01       	movw	r30, r18
     c2a:	16 96       	adiw	r26, 0x06	; 6
     c2c:	0c 90       	ld	r0, X
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <_ZN4Port5IsSetEv+0x1a>
     c30:	f5 95       	asr	r31
     c32:	e7 95       	ror	r30
     c34:	0a 94       	dec	r0
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <_ZN4Port5IsSetEv+0x16>
     c38:	cf 01       	movw	r24, r30
     c3a:	81 70       	andi	r24, 0x01	; 1
     c3c:	08 95       	ret

00000c3e <_ZN4PortnwEj>:

void* Port::operator new(size_t size)
{
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
     c44:	ce 01       	movw	r24, r28
     c46:	dc d5       	rcall	.+3000   	; 0x1800 <malloc>
	}while(ptr == nullptr);
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	e1 f3       	breq	.-8      	; 0xc44 <_ZN4PortnwEj+0x6>
	
	return ptr;
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <_ZN13StringHandler13FloatToStringEfh>:
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
     c52:	2f 92       	push	r2
     c54:	3f 92       	push	r3
     c56:	4f 92       	push	r4
     c58:	5f 92       	push	r5
     c5a:	6f 92       	push	r6
     c5c:	7f 92       	push	r7
     c5e:	8f 92       	push	r8
     c60:	9f 92       	push	r9
     c62:	af 92       	push	r10
     c64:	bf 92       	push	r11
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	00 d0       	rcall	.+0      	; 0xc78 <_ZN13StringHandler13FloatToStringEfh+0x26>
     c78:	00 d0       	rcall	.+0      	; 0xc7a <_ZN13StringHandler13FloatToStringEfh+0x28>
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <_ZN13StringHandler13FloatToStringEfh+0x2a>
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	2b 01       	movw	r4, r22
     c82:	3c 01       	movw	r6, r24
     c84:	94 2e       	mov	r9, r20
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
	
	return resultString;
}
     c86:	2d b6       	in	r2, 0x3d	; 61
     c88:	3e b6       	in	r3, 0x3e	; 62
#include "StringHandler.h"

const char* StringHandler::FloatToString(float value, uint8_t digitsAfterDot)
{
	uint32_t integerPart = fabs(value);
     c8a:	9f 77       	andi	r25, 0x7F	; 127
     c8c:	6b 83       	std	Y+3, r22	; 0x03
     c8e:	7c 83       	std	Y+4, r23	; 0x04
     c90:	8d 83       	std	Y+5, r24	; 0x05
     c92:	9e 83       	std	Y+6, r25	; 0x06
     c94:	38 d2       	rcall	.+1136   	; 0x1106 <__fixunssfsi>
     c96:	a6 2e       	mov	r10, r22
     c98:	b7 2e       	mov	r11, r23
     c9a:	c8 2e       	mov	r12, r24
     c9c:	d9 2e       	mov	r13, r25
     c9e:	26 2f       	mov	r18, r22
     ca0:	37 2f       	mov	r19, r23
     ca2:	48 2f       	mov	r20, r24
     ca4:	59 2f       	mov	r21, r25
	
	uint8_t stringLength = 0;	
     ca6:	81 2c       	mov	r8, r1
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <_ZN13StringHandler13FloatToStringEfh+0x5a>
	do
	{
		integerPart /= 10;
		stringLength++;
     caa:	8f 2c       	mov	r8, r15
	uint32_t integerPart = fabs(value);
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
     cac:	ca 01       	movw	r24, r20
     cae:	b9 01       	movw	r22, r18
     cb0:	2a e0       	ldi	r18, 0x0A	; 10
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	7b d5       	rcall	.+2806   	; 0x17b0 <__udivmodsi4>
		stringLength++;
     cba:	ff 24       	eor	r15, r15
     cbc:	f3 94       	inc	r15
     cbe:	f8 0c       	add	r15, r8
	}
	while(integerPart > 0);
     cc0:	21 15       	cp	r18, r1
     cc2:	31 05       	cpc	r19, r1
     cc4:	41 05       	cpc	r20, r1
     cc6:	51 05       	cpc	r21, r1
     cc8:	81 f7       	brne	.-32     	; 0xcaa <_ZN13StringHandler13FloatToStringEfh+0x58>
	
	integerPart = fabs(value);
	
	uint8_t integerPartLength = stringLength;
	
	if(digitsAfterDot > 0)
     cca:	99 20       	and	r9, r9
     ccc:	21 f0       	breq	.+8      	; 0xcd6 <_ZN13StringHandler13FloatToStringEfh+0x84>
	{
		stringLength++;										//for '.'
     cce:	83 94       	inc	r8
     cd0:	83 94       	inc	r8
		stringLength += digitsAfterDot;						//for .xxxxx
     cd2:	89 0c       	add	r8, r9
     cd4:	01 c0       	rjmp	.+2      	; 0xcd8 <_ZN13StringHandler13FloatToStringEfh+0x86>
	
	uint8_t stringLength = 0;	
	do
	{
		integerPart /= 10;
		stringLength++;
     cd6:	8f 2c       	mov	r8, r15
	{
		stringLength++;										//for '.'
		stringLength += digitsAfterDot;						//for .xxxxx
	}
	
	if(value < 0) stringLength++;							//for '-'
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	a9 01       	movw	r20, r18
     cde:	c3 01       	movw	r24, r6
     ce0:	b2 01       	movw	r22, r4
     ce2:	0d d2       	rcall	.+1050   	; 0x10fe <__cmpsf2>
     ce4:	88 23       	and	r24, r24
     ce6:	0c f4       	brge	.+2      	; 0xcea <_ZN13StringHandler13FloatToStringEfh+0x98>
     ce8:	83 94       	inc	r8
	
	stringLength++;											//for '\0'	
     cea:	83 94       	inc	r8
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
     cec:	8f 2d       	mov	r24, r15
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	ad b7       	in	r26, 0x3d	; 61
     cf4:	be b7       	in	r27, 0x3e	; 62
     cf6:	a8 1b       	sub	r26, r24
     cf8:	b9 0b       	sbc	r27, r25
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	be bf       	out	0x3e, r27	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	ad bf       	out	0x3d, r26	; 61
     d04:	2d b7       	in	r18, 0x3d	; 61
     d06:	3e b7       	in	r19, 0x3e	; 62
     d08:	2f 5f       	subi	r18, 0xFF	; 255
     d0a:	3f 4f       	sbci	r19, 0xFF	; 255
     d0c:	3a 83       	std	Y+2, r19	; 0x02
     d0e:	29 83       	std	Y+1, r18	; 0x01
     d10:	89 01       	movw	r16, r18
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     d12:	ee 24       	eor	r14, r14
     d14:	e3 94       	inc	r14
     d16:	fe 14       	cp	r15, r14
     d18:	b8 f0       	brcs	.+46     	; 0xd48 <_ZN13StringHandler13FloatToStringEfh+0xf6>
	{
		uint8_t dig = integerPart % 10;
				
		integerPart /= 10;
     d1a:	6a 2d       	mov	r22, r10
     d1c:	7b 2d       	mov	r23, r11
     d1e:	8c 2d       	mov	r24, r12
     d20:	9d 2d       	mov	r25, r13
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	42 d5       	rcall	.+2692   	; 0x17b0 <__udivmodsi4>
     d2c:	a2 2e       	mov	r10, r18
     d2e:	b3 2e       	mov	r11, r19
     d30:	c4 2e       	mov	r12, r20
     d32:	d5 2e       	mov	r13, r21
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
     d34:	ef 2d       	mov	r30, r15
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	ee 19       	sub	r30, r14
     d3a:	f1 09       	sbc	r31, r1
     d3c:	e0 0f       	add	r30, r16
     d3e:	f1 1f       	adc	r31, r17
     d40:	60 5d       	subi	r22, 0xD0	; 208
     d42:	60 83       	st	Z, r22
	
	stringLength++;											//for '\0'	
			
	char integerPartDigitsArray[integerPartLength + 1];		// "+ 1" for '\0'
			
	for(uint8_t i = 1; i <= integerPartLength; i++)
     d44:	e3 94       	inc	r14
     d46:	e7 cf       	rjmp	.-50     	; 0xd16 <_ZN13StringHandler13FloatToStringEfh+0xc4>
		integerPart /= 10;
				
		integerPartDigitsArray[integerPartLength - i] = dig + '0';
	}
	
	integerPartDigitsArray[integerPartLength] = '\0';
     d48:	e9 81       	ldd	r30, Y+1	; 0x01
     d4a:	fa 81       	ldd	r31, Y+2	; 0x02
     d4c:	ef 0d       	add	r30, r15
     d4e:	f1 1d       	adc	r31, r1
     d50:	10 82       	st	Z, r1
				
	char* resultString;
	do 
	{
		resultString = (char*)malloc(stringLength);
     d52:	e8 2c       	mov	r14, r8
     d54:	f1 2c       	mov	r15, r1
     d56:	c7 01       	movw	r24, r14
     d58:	53 d5       	rcall	.+2726   	; 0x1800 <malloc>
     d5a:	8c 01       	movw	r16, r24
	}while(resultString == NULL);
     d5c:	89 2b       	or	r24, r25
     d5e:	c9 f3       	breq	.-14     	; 0xd52 <_ZN13StringHandler13FloatToStringEfh+0x100>
	 
			
	if(value < 0)
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	a9 01       	movw	r20, r18
     d66:	c3 01       	movw	r24, r6
     d68:	b2 01       	movw	r22, r4
     d6a:	c9 d1       	rcall	.+914    	; 0x10fe <__cmpsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	5c f4       	brge	.+22     	; 0xd86 <_ZN13StringHandler13FloatToStringEfh+0x134>
	{
		strlcpy(resultString, "-", stringLength);
     d70:	a7 01       	movw	r20, r14
     d72:	62 e8       	ldi	r22, 0x82	; 130
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	c8 01       	movw	r24, r16
     d78:	83 d6       	rcall	.+3334   	; 0x1a80 <strlcpy>
		strlcat(resultString, integerPartDigitsArray, stringLength);
     d7a:	a7 01       	movw	r20, r14
     d7c:	69 81       	ldd	r22, Y+1	; 0x01
     d7e:	7a 81       	ldd	r23, Y+2	; 0x02
     d80:	c8 01       	movw	r24, r16
     d82:	5f d6       	rcall	.+3262   	; 0x1a42 <strlcat>
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <_ZN13StringHandler13FloatToStringEfh+0x13e>
	}
	else strlcpy(resultString, integerPartDigitsArray, stringLength);
     d86:	a7 01       	movw	r20, r14
     d88:	69 81       	ldd	r22, Y+1	; 0x01
     d8a:	7a 81       	ldd	r23, Y+2	; 0x02
     d8c:	c8 01       	movw	r24, r16
     d8e:	78 d6       	rcall	.+3312   	; 0x1a80 <strlcpy>
	
	if(digitsAfterDot == 0)
     d90:	99 20       	and	r9, r9
     d92:	09 f4       	brne	.+2      	; 0xd96 <_ZN13StringHandler13FloatToStringEfh+0x144>
     d94:	59 c0       	rjmp	.+178    	; 0xe48 <_ZN13StringHandler13FloatToStringEfh+0x1f6>
	{		
		return resultString;
	}
		
	strlcat(resultString, ".", stringLength);
     d96:	a7 01       	movw	r20, r14
     d98:	64 e8       	ldi	r22, 0x84	; 132
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	c8 01       	movw	r24, r16
     d9e:	51 d6       	rcall	.+3234   	; 0x1a42 <strlcat>
		
	value = fabs(value) - integerPart;	
     da0:	6a 2d       	mov	r22, r10
     da2:	7b 2d       	mov	r23, r11
     da4:	8c 2d       	mov	r24, r12
     da6:	9d 2d       	mov	r25, r13
     da8:	da d1       	rcall	.+948    	; 0x115e <__floatunsisf>
     daa:	9b 01       	movw	r18, r22
     dac:	ac 01       	movw	r20, r24
     dae:	6b 81       	ldd	r22, Y+3	; 0x03
     db0:	7c 81       	ldd	r23, Y+4	; 0x04
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	3e d1       	rcall	.+636    	; 0x1034 <__subsf3>
     db8:	2b 01       	movw	r4, r22
     dba:	3c 01       	movw	r6, r24
			
	uint32_t mult = (uint32_t)round(pow(10, digitsAfterDot));
     dbc:	69 2d       	mov	r22, r9
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	cc d1       	rcall	.+920    	; 0x115e <__floatunsisf>
     dc6:	9b 01       	movw	r18, r22
     dc8:	ac 01       	movw	r20, r24
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	80 e2       	ldi	r24, 0x20	; 32
     dd0:	91 e4       	ldi	r25, 0x41	; 65
     dd2:	da d2       	rcall	.+1460   	; 0x1388 <pow>
     dd4:	25 d3       	rcall	.+1610   	; 0x1420 <round>
     dd6:	97 d1       	rcall	.+814    	; 0x1106 <__fixunssfsi>
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
     dd8:	c2 d1       	rcall	.+900    	; 0x115e <__floatunsisf>
     dda:	9b 01       	movw	r18, r22
     ddc:	ac 01       	movw	r20, r24
     dde:	c3 01       	movw	r24, r6
     de0:	b2 01       	movw	r22, r4
     de2:	6f d2       	rcall	.+1246   	; 0x12c2 <__mulsf3>
     de4:	1d d3       	rcall	.+1594   	; 0x1420 <round>
     de6:	8f d1       	rcall	.+798    	; 0x1106 <__fixunssfsi>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
     dec:	89 2d       	mov	r24, r9
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	6d b7       	in	r22, 0x3d	; 61
     df4:	7e b7       	in	r23, 0x3e	; 62
     df6:	68 1b       	sub	r22, r24
     df8:	79 0b       	sbc	r23, r25
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	7e bf       	out	0x3e, r23	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	6d bf       	out	0x3d, r22	; 61
     e04:	8d b7       	in	r24, 0x3d	; 61
     e06:	9e b7       	in	r25, 0x3e	; 62
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	5c 01       	movw	r10, r24
     e0c:	6c 01       	movw	r12, r24
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     e0e:	88 24       	eor	r8, r8
     e10:	83 94       	inc	r8
     e12:	98 14       	cp	r9, r8
     e14:	88 f0       	brcs	.+34     	; 0xe38 <_ZN13StringHandler13FloatToStringEfh+0x1e6>
	{
		uint8_t dig = fractionalPart % 10;
				
		fractionalPart /= 10;
     e16:	ca 01       	movw	r24, r20
     e18:	b9 01       	movw	r22, r18
     e1a:	2a e0       	ldi	r18, 0x0A	; 10
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	c6 d4       	rcall	.+2444   	; 0x17b0 <__udivmodsi4>
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
     e24:	e9 2d       	mov	r30, r9
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	e8 19       	sub	r30, r8
     e2a:	f1 09       	sbc	r31, r1
     e2c:	ec 0d       	add	r30, r12
     e2e:	fd 1d       	adc	r31, r13
     e30:	60 5d       	subi	r22, 0xD0	; 208
     e32:	60 83       	st	Z, r22
	
	uint32_t fractionalPart = (uint32_t)round(value * mult);
			
	char fractionalPartDigitsArray[digitsAfterDot + 1];		//for '\0'
			
	for(uint8_t i = 1; i <= digitsAfterDot; i++)
     e34:	83 94       	inc	r8
     e36:	ed cf       	rjmp	.-38     	; 0xe12 <_ZN13StringHandler13FloatToStringEfh+0x1c0>
				
		fractionalPart /= 10;
				
		fractionalPartDigitsArray[digitsAfterDot - i] = dig + '0';
	}			
	fractionalPartDigitsArray[digitsAfterDot] = '\0';	
     e38:	f5 01       	movw	r30, r10
     e3a:	e9 0d       	add	r30, r9
     e3c:	f1 1d       	adc	r31, r1
     e3e:	10 82       	st	Z, r1
			
	strlcat(resultString, fractionalPartDigitsArray, stringLength);	
     e40:	a7 01       	movw	r20, r14
     e42:	b5 01       	movw	r22, r10
     e44:	c8 01       	movw	r24, r16
     e46:	fd d5       	rcall	.+3066   	; 0x1a42 <strlcat>
	
	return resultString;
}
     e48:	c8 01       	movw	r24, r16
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	3e be       	out	0x3e, r3	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	2d be       	out	0x3d, r2	; 61
     e54:	26 96       	adiw	r28, 0x06	; 6
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	1f 91       	pop	r17
     e66:	0f 91       	pop	r16
     e68:	ff 90       	pop	r15
     e6a:	ef 90       	pop	r14
     e6c:	df 90       	pop	r13
     e6e:	cf 90       	pop	r12
     e70:	bf 90       	pop	r11
     e72:	af 90       	pop	r10
     e74:	9f 90       	pop	r9
     e76:	8f 90       	pop	r8
     e78:	7f 90       	pop	r7
     e7a:	6f 90       	pop	r6
     e7c:	5f 90       	pop	r5
     e7e:	4f 90       	pop	r4
     e80:	3f 90       	pop	r3
     e82:	2f 90       	pop	r2
     e84:	08 95       	ret

00000e86 <_ZN3TWIC1Em>:
	TWCR = (1<<TWEN)|(0<<TWIE)|(0<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|(0<<TWWC);
	
	++selectedDevice %= devicesQuantiy;
}

TWI::~TWI()
     e86:	fc 01       	movw	r30, r24
     e88:	40 83       	st	Z, r20
     e8a:	51 83       	std	Z+1, r21	; 0x01
     e8c:	62 83       	std	Z+2, r22	; 0x02
     e8e:	73 83       	std	Z+3, r23	; 0x03
     e90:	16 86       	std	Z+14, r1	; 0x0e
     e92:	17 86       	std	Z+15, r1	; 0x0f
     e94:	08 95       	ret

00000e96 <_ZN3TWI9AddDeviceEP4ITWI>:
     e96:	dc 01       	movw	r26, r24
     e98:	1e 96       	adiw	r26, 0x0e	; 14
     e9a:	9c 91       	ld	r25, X
     e9c:	1e 97       	sbiw	r26, 0x0e	; 14
     e9e:	93 30       	cpi	r25, 0x03	; 3
     ea0:	60 f4       	brcc	.+24     	; 0xeba <_ZN3TWI9AddDeviceEP4ITWI+0x24>
     ea2:	e9 2f       	mov	r30, r25
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	34 96       	adiw	r30, 0x04	; 4
     ea8:	ee 0f       	add	r30, r30
     eaa:	ff 1f       	adc	r31, r31
     eac:	ea 0f       	add	r30, r26
     eae:	fb 1f       	adc	r31, r27
     eb0:	71 83       	std	Z+1, r23	; 0x01
     eb2:	60 83       	st	Z, r22
     eb4:	9f 5f       	subi	r25, 0xFF	; 255
     eb6:	1e 96       	adiw	r26, 0x0e	; 14
     eb8:	9c 93       	st	X, r25
     eba:	08 95       	ret

00000ebc <_ZN3TWI17SetClockFrequencyEm>:
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	ec 01       	movw	r28, r24
     eca:	6a 01       	movw	r12, r20
     ecc:	7b 01       	movw	r14, r22
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	ae 81       	ldd	r26, Y+6	; 0x06
     ed4:	bf 81       	ldd	r27, Y+7	; 0x07
     ed6:	84 17       	cp	r24, r20
     ed8:	95 07       	cpc	r25, r21
     eda:	a6 07       	cpc	r26, r22
     edc:	b7 07       	cpc	r27, r23
     ede:	a9 f0       	breq	.+42     	; 0xf0a <_ZN3TWI17SetClockFrequencyEm+0x4e>
     ee0:	68 81       	ld	r22, Y
     ee2:	79 81       	ldd	r23, Y+1	; 0x01
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	9b 81       	ldd	r25, Y+3	; 0x03
     ee8:	a7 01       	movw	r20, r14
     eea:	96 01       	movw	r18, r12
     eec:	61 d4       	rcall	.+2242   	; 0x17b0 <__udivmodsi4>
     eee:	da 01       	movw	r26, r20
     ef0:	c9 01       	movw	r24, r18
     ef2:	40 97       	sbiw	r24, 0x10	; 16
     ef4:	a1 09       	sbc	r26, r1
     ef6:	b1 09       	sbc	r27, r1
     ef8:	b6 95       	lsr	r27
     efa:	a7 95       	ror	r26
     efc:	97 95       	ror	r25
     efe:	87 95       	ror	r24
     f00:	80 b9       	out	0x00, r24	; 0
     f02:	cc 82       	std	Y+4, r12	; 0x04
     f04:	dd 82       	std	Y+5, r13	; 0x05
     f06:	ee 82       	std	Y+6, r14	; 0x06
     f08:	ff 82       	std	Y+7, r15	; 0x07
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	df 90       	pop	r13
     f14:	cf 90       	pop	r12
     f16:	08 95       	ret

00000f18 <_ZN3TWI16HandleDataChangeEv>:
     f18:	dc 01       	movw	r26, r24
     f1a:	1f 96       	adiw	r26, 0x0f	; 15
     f1c:	9c 91       	ld	r25, X
     f1e:	1f 97       	sbiw	r26, 0x0f	; 15
     f20:	e9 2f       	mov	r30, r25
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	34 96       	adiw	r30, 0x04	; 4
     f26:	ee 0f       	add	r30, r30
     f28:	ff 1f       	adc	r31, r31
     f2a:	ea 0f       	add	r30, r26
     f2c:	fb 1f       	adc	r31, r27
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	dc 01       	movw	r26, r24
     f34:	ed 91       	ld	r30, X+
     f36:	fc 91       	ld	r31, X
     f38:	04 80       	ldd	r0, Z+4	; 0x04
     f3a:	f5 81       	ldd	r31, Z+5	; 0x05
     f3c:	e0 2d       	mov	r30, r0
     f3e:	61 b1       	in	r22, 0x01	; 1
     f40:	68 7f       	andi	r22, 0xF8	; 248
     f42:	09 95       	icall
     f44:	08 95       	ret

00000f46 <_ZN3TWI5StartEv>:
     f46:	85 ea       	ldi	r24, 0xA5	; 165
     f48:	86 bf       	out	0x36, r24	; 54
     f4a:	08 95       	ret

00000f4c <_ZN3TWI12CheckDevicesEv>:
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	06 b6       	in	r0, 0x36	; 54
     f52:	00 fc       	sbrc	r0, 0
     f54:	2f c0       	rjmp	.+94     	; 0xfb4 <_ZN3TWI12CheckDevicesEv+0x68>
     f56:	ec 01       	movw	r28, r24
     f58:	ef 85       	ldd	r30, Y+15	; 0x0f
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	34 96       	adiw	r30, 0x04	; 4
     f5e:	ee 0f       	add	r30, r30
     f60:	ff 1f       	adc	r31, r31
     f62:	e8 0f       	add	r30, r24
     f64:	f9 1f       	adc	r31, r25
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	dc 01       	movw	r26, r24
     f6c:	ed 91       	ld	r30, X+
     f6e:	fc 91       	ld	r31, X
     f70:	02 80       	ldd	r0, Z+2	; 0x02
     f72:	f3 81       	ldd	r31, Z+3	; 0x03
     f74:	e0 2d       	mov	r30, r0
     f76:	09 95       	icall
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	b9 f4       	brne	.+46     	; 0xfaa <_ZN3TWI12CheckDevicesEv+0x5e>
     f7c:	ef 85       	ldd	r30, Y+15	; 0x0f
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	34 96       	adiw	r30, 0x04	; 4
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	ec 0f       	add	r30, r28
     f88:	fd 1f       	adc	r31, r29
     f8a:	80 81       	ld	r24, Z
     f8c:	91 81       	ldd	r25, Z+1	; 0x01
     f8e:	dc 01       	movw	r26, r24
     f90:	ed 91       	ld	r30, X+
     f92:	fc 91       	ld	r31, X
     f94:	01 90       	ld	r0, Z+
     f96:	f0 81       	ld	r31, Z
     f98:	e0 2d       	mov	r30, r0
     f9a:	09 95       	icall
     f9c:	ab 01       	movw	r20, r22
     f9e:	bc 01       	movw	r22, r24
     fa0:	ce 01       	movw	r24, r28
     fa2:	8c df       	rcall	.-232    	; 0xebc <_ZN3TWI17SetClockFrequencyEm>
     fa4:	ce 01       	movw	r24, r28
     fa6:	cf df       	rcall	.-98     	; 0xf46 <_ZN3TWI5StartEv>
     fa8:	05 c0       	rjmp	.+10     	; 0xfb4 <_ZN3TWI12CheckDevicesEv+0x68>
     faa:	8f 85       	ldd	r24, Y+15	; 0x0f
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	6e 85       	ldd	r22, Y+14	; 0x0e
     fb0:	f3 d3       	rcall	.+2022   	; 0x1798 <__udivmodqi4>
     fb2:	9f 87       	std	Y+15, r25	; 0x0f
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <_ZN3TWI11WriteToTWDREh>:
     fba:	63 b9       	out	0x03, r22	; 3
     fbc:	85 e8       	ldi	r24, 0x85	; 133
     fbe:	86 bf       	out	0x36, r24	; 54
     fc0:	08 95       	ret

00000fc2 <_ZN3TWI3ACKEv>:
     fc2:	85 ec       	ldi	r24, 0xC5	; 197
     fc4:	86 bf       	out	0x36, r24	; 54
     fc6:	08 95       	ret

00000fc8 <_ZN3TWI4NACKEv>:
     fc8:	85 e8       	ldi	r24, 0x85	; 133
     fca:	86 bf       	out	0x36, r24	; 54
     fcc:	08 95       	ret

00000fce <_ZN3TWI12ReadFromTWDREv>:
     fce:	83 b1       	in	r24, 0x03	; 3
     fd0:	08 95       	ret

00000fd2 <_ZN3TWI4StopEv>:
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	ec 01       	movw	r28, r24
     fd8:	84 e9       	ldi	r24, 0x94	; 148
     fda:	86 bf       	out	0x36, r24	; 54
     fdc:	ef 85       	ldd	r30, Y+15	; 0x0f
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	34 96       	adiw	r30, 0x04	; 4
     fe2:	ee 0f       	add	r30, r30
     fe4:	ff 1f       	adc	r31, r31
     fe6:	ec 0f       	add	r30, r28
     fe8:	fd 1f       	adc	r31, r29
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	dc 01       	movw	r26, r24
     ff0:	ed 91       	ld	r30, X+
     ff2:	fc 91       	ld	r31, X
     ff4:	04 80       	ldd	r0, Z+4	; 0x04
     ff6:	f5 81       	ldd	r31, Z+5	; 0x05
     ff8:	e0 2d       	mov	r30, r0
     ffa:	68 ef       	ldi	r22, 0xF8	; 248
     ffc:	09 95       	icall
     ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1000:	8f 5f       	subi	r24, 0xFF	; 255
    1002:	6e 85       	ldd	r22, Y+14	; 0x0e
    1004:	c9 d3       	rcall	.+1938   	; 0x1798 <__udivmodqi4>
    1006:	9f 87       	std	Y+15, r25	; 0x0f
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <_ZN3TWI16DisableInterruptEv>:
    100e:	fc 01       	movw	r30, r24
    1010:	84 e1       	ldi	r24, 0x14	; 20
    1012:	86 bf       	out	0x36, r24	; 54
    1014:	87 85       	ldd	r24, Z+15	; 0x0f
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	66 85       	ldd	r22, Z+14	; 0x0e
    101a:	be d3       	rcall	.+1916   	; 0x1798 <__udivmodqi4>
    101c:	97 87       	std	Z+15, r25	; 0x0f
    101e:	08 95       	ret

00001020 <_ZN3TWInwEj>:
{

}

void* TWI::operator new(size_t size)
{
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	ec 01       	movw	r28, r24
	void* ptr;
	do
	{
		ptr = malloc(size);
    1026:	ce 01       	movw	r24, r28
    1028:	eb d3       	rcall	.+2006   	; 0x1800 <malloc>
	}while(ptr == nullptr);
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	e1 f3       	breq	.-8      	; 0x1026 <_ZN3TWInwEj+0x6>
	
	return ptr;
}
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <__subsf3>:
    1034:	50 58       	subi	r21, 0x80	; 128

00001036 <__addsf3>:
    1036:	bb 27       	eor	r27, r27
    1038:	aa 27       	eor	r26, r26
    103a:	0e d0       	rcall	.+28     	; 0x1058 <__addsf3x>
    103c:	08 c1       	rjmp	.+528    	; 0x124e <__fp_round>
    103e:	f9 d0       	rcall	.+498    	; 0x1232 <__fp_pscA>
    1040:	30 f0       	brcs	.+12     	; 0x104e <__addsf3+0x18>
    1042:	fe d0       	rcall	.+508    	; 0x1240 <__fp_pscB>
    1044:	20 f0       	brcs	.+8      	; 0x104e <__addsf3+0x18>
    1046:	31 f4       	brne	.+12     	; 0x1054 <__addsf3+0x1e>
    1048:	9f 3f       	cpi	r25, 0xFF	; 255
    104a:	11 f4       	brne	.+4      	; 0x1050 <__addsf3+0x1a>
    104c:	1e f4       	brtc	.+6      	; 0x1054 <__addsf3+0x1e>
    104e:	ee c0       	rjmp	.+476    	; 0x122c <__fp_nan>
    1050:	0e f4       	brtc	.+2      	; 0x1054 <__addsf3+0x1e>
    1052:	e0 95       	com	r30
    1054:	e7 fb       	bst	r30, 7
    1056:	e4 c0       	rjmp	.+456    	; 0x1220 <__fp_inf>

00001058 <__addsf3x>:
    1058:	e9 2f       	mov	r30, r25
    105a:	0a d1       	rcall	.+532    	; 0x1270 <__fp_split3>
    105c:	80 f3       	brcs	.-32     	; 0x103e <__addsf3+0x8>
    105e:	ba 17       	cp	r27, r26
    1060:	62 07       	cpc	r22, r18
    1062:	73 07       	cpc	r23, r19
    1064:	84 07       	cpc	r24, r20
    1066:	95 07       	cpc	r25, r21
    1068:	18 f0       	brcs	.+6      	; 0x1070 <__addsf3x+0x18>
    106a:	71 f4       	brne	.+28     	; 0x1088 <__addsf3x+0x30>
    106c:	9e f5       	brtc	.+102    	; 0x10d4 <__addsf3x+0x7c>
    106e:	22 c1       	rjmp	.+580    	; 0x12b4 <__fp_zero>
    1070:	0e f4       	brtc	.+2      	; 0x1074 <__addsf3x+0x1c>
    1072:	e0 95       	com	r30
    1074:	0b 2e       	mov	r0, r27
    1076:	ba 2f       	mov	r27, r26
    1078:	a0 2d       	mov	r26, r0
    107a:	0b 01       	movw	r0, r22
    107c:	b9 01       	movw	r22, r18
    107e:	90 01       	movw	r18, r0
    1080:	0c 01       	movw	r0, r24
    1082:	ca 01       	movw	r24, r20
    1084:	a0 01       	movw	r20, r0
    1086:	11 24       	eor	r1, r1
    1088:	ff 27       	eor	r31, r31
    108a:	59 1b       	sub	r21, r25
    108c:	99 f0       	breq	.+38     	; 0x10b4 <__addsf3x+0x5c>
    108e:	59 3f       	cpi	r21, 0xF9	; 249
    1090:	50 f4       	brcc	.+20     	; 0x10a6 <__addsf3x+0x4e>
    1092:	50 3e       	cpi	r21, 0xE0	; 224
    1094:	68 f1       	brcs	.+90     	; 0x10f0 <__addsf3x+0x98>
    1096:	1a 16       	cp	r1, r26
    1098:	f0 40       	sbci	r31, 0x00	; 0
    109a:	a2 2f       	mov	r26, r18
    109c:	23 2f       	mov	r18, r19
    109e:	34 2f       	mov	r19, r20
    10a0:	44 27       	eor	r20, r20
    10a2:	58 5f       	subi	r21, 0xF8	; 248
    10a4:	f3 cf       	rjmp	.-26     	; 0x108c <__addsf3x+0x34>
    10a6:	46 95       	lsr	r20
    10a8:	37 95       	ror	r19
    10aa:	27 95       	ror	r18
    10ac:	a7 95       	ror	r26
    10ae:	f0 40       	sbci	r31, 0x00	; 0
    10b0:	53 95       	inc	r21
    10b2:	c9 f7       	brne	.-14     	; 0x10a6 <__addsf3x+0x4e>
    10b4:	7e f4       	brtc	.+30     	; 0x10d4 <__addsf3x+0x7c>
    10b6:	1f 16       	cp	r1, r31
    10b8:	ba 0b       	sbc	r27, r26
    10ba:	62 0b       	sbc	r22, r18
    10bc:	73 0b       	sbc	r23, r19
    10be:	84 0b       	sbc	r24, r20
    10c0:	ba f0       	brmi	.+46     	; 0x10f0 <__addsf3x+0x98>
    10c2:	91 50       	subi	r25, 0x01	; 1
    10c4:	a1 f0       	breq	.+40     	; 0x10ee <__addsf3x+0x96>
    10c6:	ff 0f       	add	r31, r31
    10c8:	bb 1f       	adc	r27, r27
    10ca:	66 1f       	adc	r22, r22
    10cc:	77 1f       	adc	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	c2 f7       	brpl	.-16     	; 0x10c2 <__addsf3x+0x6a>
    10d2:	0e c0       	rjmp	.+28     	; 0x10f0 <__addsf3x+0x98>
    10d4:	ba 0f       	add	r27, r26
    10d6:	62 1f       	adc	r22, r18
    10d8:	73 1f       	adc	r23, r19
    10da:	84 1f       	adc	r24, r20
    10dc:	48 f4       	brcc	.+18     	; 0x10f0 <__addsf3x+0x98>
    10de:	87 95       	ror	r24
    10e0:	77 95       	ror	r23
    10e2:	67 95       	ror	r22
    10e4:	b7 95       	ror	r27
    10e6:	f7 95       	ror	r31
    10e8:	9e 3f       	cpi	r25, 0xFE	; 254
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <__addsf3x+0x96>
    10ec:	b3 cf       	rjmp	.-154    	; 0x1054 <__addsf3+0x1e>
    10ee:	93 95       	inc	r25
    10f0:	88 0f       	add	r24, r24
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <__addsf3x+0x9e>
    10f4:	99 27       	eor	r25, r25
    10f6:	ee 0f       	add	r30, r30
    10f8:	97 95       	ror	r25
    10fa:	87 95       	ror	r24
    10fc:	08 95       	ret

000010fe <__cmpsf2>:
    10fe:	6c d0       	rcall	.+216    	; 0x11d8 <__fp_cmp>
    1100:	08 f4       	brcc	.+2      	; 0x1104 <__cmpsf2+0x6>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	08 95       	ret

00001106 <__fixunssfsi>:
    1106:	bc d0       	rcall	.+376    	; 0x1280 <__fp_splitA>
    1108:	88 f0       	brcs	.+34     	; 0x112c <__fixunssfsi+0x26>
    110a:	9f 57       	subi	r25, 0x7F	; 127
    110c:	90 f0       	brcs	.+36     	; 0x1132 <__fixunssfsi+0x2c>
    110e:	b9 2f       	mov	r27, r25
    1110:	99 27       	eor	r25, r25
    1112:	b7 51       	subi	r27, 0x17	; 23
    1114:	a0 f0       	brcs	.+40     	; 0x113e <__fixunssfsi+0x38>
    1116:	d1 f0       	breq	.+52     	; 0x114c <__fixunssfsi+0x46>
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	88 1f       	adc	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	1a f0       	brmi	.+6      	; 0x1128 <__fixunssfsi+0x22>
    1122:	ba 95       	dec	r27
    1124:	c9 f7       	brne	.-14     	; 0x1118 <__fixunssfsi+0x12>
    1126:	12 c0       	rjmp	.+36     	; 0x114c <__fixunssfsi+0x46>
    1128:	b1 30       	cpi	r27, 0x01	; 1
    112a:	81 f0       	breq	.+32     	; 0x114c <__fixunssfsi+0x46>
    112c:	c3 d0       	rcall	.+390    	; 0x12b4 <__fp_zero>
    112e:	b1 e0       	ldi	r27, 0x01	; 1
    1130:	08 95       	ret
    1132:	c0 c0       	rjmp	.+384    	; 0x12b4 <__fp_zero>
    1134:	67 2f       	mov	r22, r23
    1136:	78 2f       	mov	r23, r24
    1138:	88 27       	eor	r24, r24
    113a:	b8 5f       	subi	r27, 0xF8	; 248
    113c:	39 f0       	breq	.+14     	; 0x114c <__fixunssfsi+0x46>
    113e:	b9 3f       	cpi	r27, 0xF9	; 249
    1140:	cc f3       	brlt	.-14     	; 0x1134 <__fixunssfsi+0x2e>
    1142:	86 95       	lsr	r24
    1144:	77 95       	ror	r23
    1146:	67 95       	ror	r22
    1148:	b3 95       	inc	r27
    114a:	d9 f7       	brne	.-10     	; 0x1142 <__fixunssfsi+0x3c>
    114c:	3e f4       	brtc	.+14     	; 0x115c <__fixunssfsi+0x56>
    114e:	90 95       	com	r25
    1150:	80 95       	com	r24
    1152:	70 95       	com	r23
    1154:	61 95       	neg	r22
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	8f 4f       	sbci	r24, 0xFF	; 255
    115a:	9f 4f       	sbci	r25, 0xFF	; 255
    115c:	08 95       	ret

0000115e <__floatunsisf>:
    115e:	e8 94       	clt
    1160:	09 c0       	rjmp	.+18     	; 0x1174 <__floatsisf+0x12>

00001162 <__floatsisf>:
    1162:	97 fb       	bst	r25, 7
    1164:	3e f4       	brtc	.+14     	; 0x1174 <__floatsisf+0x12>
    1166:	90 95       	com	r25
    1168:	80 95       	com	r24
    116a:	70 95       	com	r23
    116c:	61 95       	neg	r22
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	99 23       	and	r25, r25
    1176:	a9 f0       	breq	.+42     	; 0x11a2 <__floatsisf+0x40>
    1178:	f9 2f       	mov	r31, r25
    117a:	96 e9       	ldi	r25, 0x96	; 150
    117c:	bb 27       	eor	r27, r27
    117e:	93 95       	inc	r25
    1180:	f6 95       	lsr	r31
    1182:	87 95       	ror	r24
    1184:	77 95       	ror	r23
    1186:	67 95       	ror	r22
    1188:	b7 95       	ror	r27
    118a:	f1 11       	cpse	r31, r1
    118c:	f8 cf       	rjmp	.-16     	; 0x117e <__floatsisf+0x1c>
    118e:	fa f4       	brpl	.+62     	; 0x11ce <__floatsisf+0x6c>
    1190:	bb 0f       	add	r27, r27
    1192:	11 f4       	brne	.+4      	; 0x1198 <__floatsisf+0x36>
    1194:	60 ff       	sbrs	r22, 0
    1196:	1b c0       	rjmp	.+54     	; 0x11ce <__floatsisf+0x6c>
    1198:	6f 5f       	subi	r22, 0xFF	; 255
    119a:	7f 4f       	sbci	r23, 0xFF	; 255
    119c:	8f 4f       	sbci	r24, 0xFF	; 255
    119e:	9f 4f       	sbci	r25, 0xFF	; 255
    11a0:	16 c0       	rjmp	.+44     	; 0x11ce <__floatsisf+0x6c>
    11a2:	88 23       	and	r24, r24
    11a4:	11 f0       	breq	.+4      	; 0x11aa <__floatsisf+0x48>
    11a6:	96 e9       	ldi	r25, 0x96	; 150
    11a8:	11 c0       	rjmp	.+34     	; 0x11cc <__floatsisf+0x6a>
    11aa:	77 23       	and	r23, r23
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <__floatsisf+0x54>
    11ae:	9e e8       	ldi	r25, 0x8E	; 142
    11b0:	87 2f       	mov	r24, r23
    11b2:	76 2f       	mov	r23, r22
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <__floatsisf+0x5e>
    11b6:	66 23       	and	r22, r22
    11b8:	71 f0       	breq	.+28     	; 0x11d6 <__floatsisf+0x74>
    11ba:	96 e8       	ldi	r25, 0x86	; 134
    11bc:	86 2f       	mov	r24, r22
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	2a f0       	brmi	.+10     	; 0x11ce <__floatsisf+0x6c>
    11c4:	9a 95       	dec	r25
    11c6:	66 0f       	add	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	88 1f       	adc	r24, r24
    11cc:	da f7       	brpl	.-10     	; 0x11c4 <__floatsisf+0x62>
    11ce:	88 0f       	add	r24, r24
    11d0:	96 95       	lsr	r25
    11d2:	87 95       	ror	r24
    11d4:	97 f9       	bld	r25, 7
    11d6:	08 95       	ret

000011d8 <__fp_cmp>:
    11d8:	99 0f       	add	r25, r25
    11da:	00 08       	sbc	r0, r0
    11dc:	55 0f       	add	r21, r21
    11de:	aa 0b       	sbc	r26, r26
    11e0:	e0 e8       	ldi	r30, 0x80	; 128
    11e2:	fe ef       	ldi	r31, 0xFE	; 254
    11e4:	16 16       	cp	r1, r22
    11e6:	17 06       	cpc	r1, r23
    11e8:	e8 07       	cpc	r30, r24
    11ea:	f9 07       	cpc	r31, r25
    11ec:	c0 f0       	brcs	.+48     	; 0x121e <__fp_cmp+0x46>
    11ee:	12 16       	cp	r1, r18
    11f0:	13 06       	cpc	r1, r19
    11f2:	e4 07       	cpc	r30, r20
    11f4:	f5 07       	cpc	r31, r21
    11f6:	98 f0       	brcs	.+38     	; 0x121e <__fp_cmp+0x46>
    11f8:	62 1b       	sub	r22, r18
    11fa:	73 0b       	sbc	r23, r19
    11fc:	84 0b       	sbc	r24, r20
    11fe:	95 0b       	sbc	r25, r21
    1200:	39 f4       	brne	.+14     	; 0x1210 <__fp_cmp+0x38>
    1202:	0a 26       	eor	r0, r26
    1204:	61 f0       	breq	.+24     	; 0x121e <__fp_cmp+0x46>
    1206:	23 2b       	or	r18, r19
    1208:	24 2b       	or	r18, r20
    120a:	25 2b       	or	r18, r21
    120c:	21 f4       	brne	.+8      	; 0x1216 <__fp_cmp+0x3e>
    120e:	08 95       	ret
    1210:	0a 26       	eor	r0, r26
    1212:	09 f4       	brne	.+2      	; 0x1216 <__fp_cmp+0x3e>
    1214:	a1 40       	sbci	r26, 0x01	; 1
    1216:	a6 95       	lsr	r26
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	81 1d       	adc	r24, r1
    121c:	81 1d       	adc	r24, r1
    121e:	08 95       	ret

00001220 <__fp_inf>:
    1220:	97 f9       	bld	r25, 7
    1222:	9f 67       	ori	r25, 0x7F	; 127
    1224:	80 e8       	ldi	r24, 0x80	; 128
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	08 95       	ret

0000122c <__fp_nan>:
    122c:	9f ef       	ldi	r25, 0xFF	; 255
    122e:	80 ec       	ldi	r24, 0xC0	; 192
    1230:	08 95       	ret

00001232 <__fp_pscA>:
    1232:	00 24       	eor	r0, r0
    1234:	0a 94       	dec	r0
    1236:	16 16       	cp	r1, r22
    1238:	17 06       	cpc	r1, r23
    123a:	18 06       	cpc	r1, r24
    123c:	09 06       	cpc	r0, r25
    123e:	08 95       	ret

00001240 <__fp_pscB>:
    1240:	00 24       	eor	r0, r0
    1242:	0a 94       	dec	r0
    1244:	12 16       	cp	r1, r18
    1246:	13 06       	cpc	r1, r19
    1248:	14 06       	cpc	r1, r20
    124a:	05 06       	cpc	r0, r21
    124c:	08 95       	ret

0000124e <__fp_round>:
    124e:	09 2e       	mov	r0, r25
    1250:	03 94       	inc	r0
    1252:	00 0c       	add	r0, r0
    1254:	11 f4       	brne	.+4      	; 0x125a <__fp_round+0xc>
    1256:	88 23       	and	r24, r24
    1258:	52 f0       	brmi	.+20     	; 0x126e <__fp_round+0x20>
    125a:	bb 0f       	add	r27, r27
    125c:	40 f4       	brcc	.+16     	; 0x126e <__fp_round+0x20>
    125e:	bf 2b       	or	r27, r31
    1260:	11 f4       	brne	.+4      	; 0x1266 <__fp_round+0x18>
    1262:	60 ff       	sbrs	r22, 0
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__fp_round+0x20>
    1266:	6f 5f       	subi	r22, 0xFF	; 255
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	8f 4f       	sbci	r24, 0xFF	; 255
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	08 95       	ret

00001270 <__fp_split3>:
    1270:	57 fd       	sbrc	r21, 7
    1272:	90 58       	subi	r25, 0x80	; 128
    1274:	44 0f       	add	r20, r20
    1276:	55 1f       	adc	r21, r21
    1278:	59 f0       	breq	.+22     	; 0x1290 <__fp_splitA+0x10>
    127a:	5f 3f       	cpi	r21, 0xFF	; 255
    127c:	71 f0       	breq	.+28     	; 0x129a <__fp_splitA+0x1a>
    127e:	47 95       	ror	r20

00001280 <__fp_splitA>:
    1280:	88 0f       	add	r24, r24
    1282:	97 fb       	bst	r25, 7
    1284:	99 1f       	adc	r25, r25
    1286:	61 f0       	breq	.+24     	; 0x12a0 <__fp_splitA+0x20>
    1288:	9f 3f       	cpi	r25, 0xFF	; 255
    128a:	79 f0       	breq	.+30     	; 0x12aa <__fp_splitA+0x2a>
    128c:	87 95       	ror	r24
    128e:	08 95       	ret
    1290:	12 16       	cp	r1, r18
    1292:	13 06       	cpc	r1, r19
    1294:	14 06       	cpc	r1, r20
    1296:	55 1f       	adc	r21, r21
    1298:	f2 cf       	rjmp	.-28     	; 0x127e <__fp_split3+0xe>
    129a:	46 95       	lsr	r20
    129c:	f1 df       	rcall	.-30     	; 0x1280 <__fp_splitA>
    129e:	08 c0       	rjmp	.+16     	; 0x12b0 <__fp_splitA+0x30>
    12a0:	16 16       	cp	r1, r22
    12a2:	17 06       	cpc	r1, r23
    12a4:	18 06       	cpc	r1, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	f1 cf       	rjmp	.-30     	; 0x128c <__fp_splitA+0xc>
    12aa:	86 95       	lsr	r24
    12ac:	71 05       	cpc	r23, r1
    12ae:	61 05       	cpc	r22, r1
    12b0:	08 94       	sec
    12b2:	08 95       	ret

000012b4 <__fp_zero>:
    12b4:	e8 94       	clt

000012b6 <__fp_szero>:
    12b6:	bb 27       	eor	r27, r27
    12b8:	66 27       	eor	r22, r22
    12ba:	77 27       	eor	r23, r23
    12bc:	cb 01       	movw	r24, r22
    12be:	97 f9       	bld	r25, 7
    12c0:	08 95       	ret

000012c2 <__mulsf3>:
    12c2:	0b d0       	rcall	.+22     	; 0x12da <__mulsf3x>
    12c4:	c4 cf       	rjmp	.-120    	; 0x124e <__fp_round>
    12c6:	b5 df       	rcall	.-150    	; 0x1232 <__fp_pscA>
    12c8:	28 f0       	brcs	.+10     	; 0x12d4 <__mulsf3+0x12>
    12ca:	ba df       	rcall	.-140    	; 0x1240 <__fp_pscB>
    12cc:	18 f0       	brcs	.+6      	; 0x12d4 <__mulsf3+0x12>
    12ce:	95 23       	and	r25, r21
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <__mulsf3+0x12>
    12d2:	a6 cf       	rjmp	.-180    	; 0x1220 <__fp_inf>
    12d4:	ab cf       	rjmp	.-170    	; 0x122c <__fp_nan>
    12d6:	11 24       	eor	r1, r1
    12d8:	ee cf       	rjmp	.-36     	; 0x12b6 <__fp_szero>

000012da <__mulsf3x>:
    12da:	ca df       	rcall	.-108    	; 0x1270 <__fp_split3>
    12dc:	a0 f3       	brcs	.-24     	; 0x12c6 <__mulsf3+0x4>

000012de <__mulsf3_pse>:
    12de:	95 9f       	mul	r25, r21
    12e0:	d1 f3       	breq	.-12     	; 0x12d6 <__mulsf3+0x14>
    12e2:	95 0f       	add	r25, r21
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	55 1f       	adc	r21, r21
    12e8:	62 9f       	mul	r22, r18
    12ea:	f0 01       	movw	r30, r0
    12ec:	72 9f       	mul	r23, r18
    12ee:	bb 27       	eor	r27, r27
    12f0:	f0 0d       	add	r31, r0
    12f2:	b1 1d       	adc	r27, r1
    12f4:	63 9f       	mul	r22, r19
    12f6:	aa 27       	eor	r26, r26
    12f8:	f0 0d       	add	r31, r0
    12fa:	b1 1d       	adc	r27, r1
    12fc:	aa 1f       	adc	r26, r26
    12fe:	64 9f       	mul	r22, r20
    1300:	66 27       	eor	r22, r22
    1302:	b0 0d       	add	r27, r0
    1304:	a1 1d       	adc	r26, r1
    1306:	66 1f       	adc	r22, r22
    1308:	82 9f       	mul	r24, r18
    130a:	22 27       	eor	r18, r18
    130c:	b0 0d       	add	r27, r0
    130e:	a1 1d       	adc	r26, r1
    1310:	62 1f       	adc	r22, r18
    1312:	73 9f       	mul	r23, r19
    1314:	b0 0d       	add	r27, r0
    1316:	a1 1d       	adc	r26, r1
    1318:	62 1f       	adc	r22, r18
    131a:	83 9f       	mul	r24, r19
    131c:	a0 0d       	add	r26, r0
    131e:	61 1d       	adc	r22, r1
    1320:	22 1f       	adc	r18, r18
    1322:	74 9f       	mul	r23, r20
    1324:	33 27       	eor	r19, r19
    1326:	a0 0d       	add	r26, r0
    1328:	61 1d       	adc	r22, r1
    132a:	23 1f       	adc	r18, r19
    132c:	84 9f       	mul	r24, r20
    132e:	60 0d       	add	r22, r0
    1330:	21 1d       	adc	r18, r1
    1332:	82 2f       	mov	r24, r18
    1334:	76 2f       	mov	r23, r22
    1336:	6a 2f       	mov	r22, r26
    1338:	11 24       	eor	r1, r1
    133a:	9f 57       	subi	r25, 0x7F	; 127
    133c:	50 40       	sbci	r21, 0x00	; 0
    133e:	8a f0       	brmi	.+34     	; 0x1362 <__mulsf3_pse+0x84>
    1340:	e1 f0       	breq	.+56     	; 0x137a <__mulsf3_pse+0x9c>
    1342:	88 23       	and	r24, r24
    1344:	4a f0       	brmi	.+18     	; 0x1358 <__mulsf3_pse+0x7a>
    1346:	ee 0f       	add	r30, r30
    1348:	ff 1f       	adc	r31, r31
    134a:	bb 1f       	adc	r27, r27
    134c:	66 1f       	adc	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	50 40       	sbci	r21, 0x00	; 0
    1356:	a9 f7       	brne	.-22     	; 0x1342 <__mulsf3_pse+0x64>
    1358:	9e 3f       	cpi	r25, 0xFE	; 254
    135a:	51 05       	cpc	r21, r1
    135c:	70 f0       	brcs	.+28     	; 0x137a <__mulsf3_pse+0x9c>
    135e:	60 cf       	rjmp	.-320    	; 0x1220 <__fp_inf>
    1360:	aa cf       	rjmp	.-172    	; 0x12b6 <__fp_szero>
    1362:	5f 3f       	cpi	r21, 0xFF	; 255
    1364:	ec f3       	brlt	.-6      	; 0x1360 <__mulsf3_pse+0x82>
    1366:	98 3e       	cpi	r25, 0xE8	; 232
    1368:	dc f3       	brlt	.-10     	; 0x1360 <__mulsf3_pse+0x82>
    136a:	86 95       	lsr	r24
    136c:	77 95       	ror	r23
    136e:	67 95       	ror	r22
    1370:	b7 95       	ror	r27
    1372:	f7 95       	ror	r31
    1374:	e7 95       	ror	r30
    1376:	9f 5f       	subi	r25, 0xFF	; 255
    1378:	c1 f7       	brne	.-16     	; 0x136a <__mulsf3_pse+0x8c>
    137a:	fe 2b       	or	r31, r30
    137c:	88 0f       	add	r24, r24
    137e:	91 1d       	adc	r25, r1
    1380:	96 95       	lsr	r25
    1382:	87 95       	ror	r24
    1384:	97 f9       	bld	r25, 7
    1386:	08 95       	ret

00001388 <pow>:
    1388:	fa 01       	movw	r30, r20
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	30 96       	adiw	r30, 0x00	; 0
    1390:	21 05       	cpc	r18, r1
    1392:	31 05       	cpc	r19, r1
    1394:	99 f1       	breq	.+102    	; 0x13fc <pow+0x74>
    1396:	61 15       	cp	r22, r1
    1398:	71 05       	cpc	r23, r1
    139a:	61 f4       	brne	.+24     	; 0x13b4 <pow+0x2c>
    139c:	80 38       	cpi	r24, 0x80	; 128
    139e:	bf e3       	ldi	r27, 0x3F	; 63
    13a0:	9b 07       	cpc	r25, r27
    13a2:	49 f1       	breq	.+82     	; 0x13f6 <pow+0x6e>
    13a4:	68 94       	set
    13a6:	90 38       	cpi	r25, 0x80	; 128
    13a8:	81 05       	cpc	r24, r1
    13aa:	61 f0       	breq	.+24     	; 0x13c4 <pow+0x3c>
    13ac:	80 38       	cpi	r24, 0x80	; 128
    13ae:	bf ef       	ldi	r27, 0xFF	; 255
    13b0:	9b 07       	cpc	r25, r27
    13b2:	41 f0       	breq	.+16     	; 0x13c4 <pow+0x3c>
    13b4:	99 23       	and	r25, r25
    13b6:	42 f5       	brpl	.+80     	; 0x1408 <pow+0x80>
    13b8:	ff 3f       	cpi	r31, 0xFF	; 255
    13ba:	e1 05       	cpc	r30, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	21 05       	cpc	r18, r1
    13c0:	11 f1       	breq	.+68     	; 0x1406 <pow+0x7e>
    13c2:	e8 94       	clt
    13c4:	08 94       	sec
    13c6:	e7 95       	ror	r30
    13c8:	d9 01       	movw	r26, r18
    13ca:	aa 23       	and	r26, r26
    13cc:	29 f4       	brne	.+10     	; 0x13d8 <pow+0x50>
    13ce:	ab 2f       	mov	r26, r27
    13d0:	be 2f       	mov	r27, r30
    13d2:	f8 5f       	subi	r31, 0xF8	; 248
    13d4:	d0 f3       	brcs	.-12     	; 0x13ca <pow+0x42>
    13d6:	10 c0       	rjmp	.+32     	; 0x13f8 <pow+0x70>
    13d8:	ff 5f       	subi	r31, 0xFF	; 255
    13da:	70 f4       	brcc	.+28     	; 0x13f8 <pow+0x70>
    13dc:	a6 95       	lsr	r26
    13de:	e0 f7       	brcc	.-8      	; 0x13d8 <pow+0x50>
    13e0:	f7 39       	cpi	r31, 0x97	; 151
    13e2:	50 f0       	brcs	.+20     	; 0x13f8 <pow+0x70>
    13e4:	19 f0       	breq	.+6      	; 0x13ec <pow+0x64>
    13e6:	ff 3a       	cpi	r31, 0xAF	; 175
    13e8:	38 f4       	brcc	.+14     	; 0x13f8 <pow+0x70>
    13ea:	9f 77       	andi	r25, 0x7F	; 127
    13ec:	9f 93       	push	r25
    13ee:	0c d0       	rcall	.+24     	; 0x1408 <pow+0x80>
    13f0:	0f 90       	pop	r0
    13f2:	07 fc       	sbrc	r0, 7
    13f4:	90 58       	subi	r25, 0x80	; 128
    13f6:	08 95       	ret
    13f8:	3e f0       	brts	.+14     	; 0x1408 <pow+0x80>
    13fa:	18 cf       	rjmp	.-464    	; 0x122c <__fp_nan>
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	80 e8       	ldi	r24, 0x80	; 128
    1402:	9f e3       	ldi	r25, 0x3F	; 63
    1404:	08 95       	ret
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	9f 77       	andi	r25, 0x7F	; 127
    140a:	5f 93       	push	r21
    140c:	4f 93       	push	r20
    140e:	3f 93       	push	r19
    1410:	2f 93       	push	r18
    1412:	e7 d0       	rcall	.+462    	; 0x15e2 <log>
    1414:	2f 91       	pop	r18
    1416:	3f 91       	pop	r19
    1418:	4f 91       	pop	r20
    141a:	5f 91       	pop	r21
    141c:	52 df       	rcall	.-348    	; 0x12c2 <__mulsf3>
    141e:	25 c0       	rjmp	.+74     	; 0x146a <exp>

00001420 <round>:
    1420:	2f df       	rcall	.-418    	; 0x1280 <__fp_splitA>
    1422:	e0 f0       	brcs	.+56     	; 0x145c <round+0x3c>
    1424:	9e 37       	cpi	r25, 0x7E	; 126
    1426:	d8 f0       	brcs	.+54     	; 0x145e <round+0x3e>
    1428:	96 39       	cpi	r25, 0x96	; 150
    142a:	b8 f4       	brcc	.+46     	; 0x145a <round+0x3a>
    142c:	9e 38       	cpi	r25, 0x8E	; 142
    142e:	48 f4       	brcc	.+18     	; 0x1442 <round+0x22>
    1430:	67 2f       	mov	r22, r23
    1432:	78 2f       	mov	r23, r24
    1434:	88 27       	eor	r24, r24
    1436:	98 5f       	subi	r25, 0xF8	; 248
    1438:	f9 cf       	rjmp	.-14     	; 0x142c <round+0xc>
    143a:	86 95       	lsr	r24
    143c:	77 95       	ror	r23
    143e:	67 95       	ror	r22
    1440:	93 95       	inc	r25
    1442:	95 39       	cpi	r25, 0x95	; 149
    1444:	d0 f3       	brcs	.-12     	; 0x143a <round+0x1a>
    1446:	b6 2f       	mov	r27, r22
    1448:	b1 70       	andi	r27, 0x01	; 1
    144a:	6b 0f       	add	r22, r27
    144c:	71 1d       	adc	r23, r1
    144e:	81 1d       	adc	r24, r1
    1450:	20 f4       	brcc	.+8      	; 0x145a <round+0x3a>
    1452:	87 95       	ror	r24
    1454:	77 95       	ror	r23
    1456:	67 95       	ror	r22
    1458:	93 95       	inc	r25
    145a:	33 c0       	rjmp	.+102    	; 0x14c2 <__fp_mintl>
    145c:	4d c0       	rjmp	.+154    	; 0x14f8 <__fp_mpack>
    145e:	2b cf       	rjmp	.-426    	; 0x12b6 <__fp_szero>
    1460:	19 f4       	brne	.+6      	; 0x1468 <round+0x48>
    1462:	0e f0       	brts	.+2      	; 0x1466 <round+0x46>
    1464:	dd ce       	rjmp	.-582    	; 0x1220 <__fp_inf>
    1466:	26 cf       	rjmp	.-436    	; 0x12b4 <__fp_zero>
    1468:	e1 ce       	rjmp	.-574    	; 0x122c <__fp_nan>

0000146a <exp>:
    146a:	0a df       	rcall	.-492    	; 0x1280 <__fp_splitA>
    146c:	c8 f3       	brcs	.-14     	; 0x1460 <round+0x40>
    146e:	96 38       	cpi	r25, 0x86	; 134
    1470:	c0 f7       	brcc	.-16     	; 0x1462 <round+0x42>
    1472:	07 f8       	bld	r0, 7
    1474:	0f 92       	push	r0
    1476:	e8 94       	clt
    1478:	2b e3       	ldi	r18, 0x3B	; 59
    147a:	3a ea       	ldi	r19, 0xAA	; 170
    147c:	48 eb       	ldi	r20, 0xB8	; 184
    147e:	5f e7       	ldi	r21, 0x7F	; 127
    1480:	2e df       	rcall	.-420    	; 0x12de <__mulsf3_pse>
    1482:	0f 92       	push	r0
    1484:	0f 92       	push	r0
    1486:	0f 92       	push	r0
    1488:	4d b7       	in	r20, 0x3d	; 61
    148a:	5e b7       	in	r21, 0x3e	; 62
    148c:	0f 92       	push	r0
    148e:	e9 d0       	rcall	.+466    	; 0x1662 <modf>
    1490:	e6 e2       	ldi	r30, 0x26	; 38
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	3f d0       	rcall	.+126    	; 0x1514 <__fp_powser>
    1496:	4f 91       	pop	r20
    1498:	5f 91       	pop	r21
    149a:	ef 91       	pop	r30
    149c:	ff 91       	pop	r31
    149e:	e5 95       	asr	r30
    14a0:	ee 1f       	adc	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	49 f0       	breq	.+18     	; 0x14b8 <exp+0x4e>
    14a6:	fe 57       	subi	r31, 0x7E	; 126
    14a8:	e0 68       	ori	r30, 0x80	; 128
    14aa:	44 27       	eor	r20, r20
    14ac:	ee 0f       	add	r30, r30
    14ae:	44 1f       	adc	r20, r20
    14b0:	fa 95       	dec	r31
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <exp+0x42>
    14b4:	41 95       	neg	r20
    14b6:	55 0b       	sbc	r21, r21
    14b8:	5b d0       	rcall	.+182    	; 0x1570 <ldexp>
    14ba:	0f 90       	pop	r0
    14bc:	07 fe       	sbrs	r0, 7
    14be:	4f c0       	rjmp	.+158    	; 0x155e <inverse>
    14c0:	08 95       	ret

000014c2 <__fp_mintl>:
    14c2:	88 23       	and	r24, r24
    14c4:	71 f4       	brne	.+28     	; 0x14e2 <__fp_mintl+0x20>
    14c6:	77 23       	and	r23, r23
    14c8:	21 f0       	breq	.+8      	; 0x14d2 <__fp_mintl+0x10>
    14ca:	98 50       	subi	r25, 0x08	; 8
    14cc:	87 2b       	or	r24, r23
    14ce:	76 2f       	mov	r23, r22
    14d0:	07 c0       	rjmp	.+14     	; 0x14e0 <__fp_mintl+0x1e>
    14d2:	66 23       	and	r22, r22
    14d4:	11 f4       	brne	.+4      	; 0x14da <__fp_mintl+0x18>
    14d6:	99 27       	eor	r25, r25
    14d8:	0d c0       	rjmp	.+26     	; 0x14f4 <__fp_mintl+0x32>
    14da:	90 51       	subi	r25, 0x10	; 16
    14dc:	86 2b       	or	r24, r22
    14de:	70 e0       	ldi	r23, 0x00	; 0
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	2a f0       	brmi	.+10     	; 0x14ee <__fp_mintl+0x2c>
    14e4:	9a 95       	dec	r25
    14e6:	66 0f       	add	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	88 1f       	adc	r24, r24
    14ec:	da f7       	brpl	.-10     	; 0x14e4 <__fp_mintl+0x22>
    14ee:	88 0f       	add	r24, r24
    14f0:	96 95       	lsr	r25
    14f2:	87 95       	ror	r24
    14f4:	97 f9       	bld	r25, 7
    14f6:	08 95       	ret

000014f8 <__fp_mpack>:
    14f8:	9f 3f       	cpi	r25, 0xFF	; 255
    14fa:	31 f0       	breq	.+12     	; 0x1508 <__fp_mpack_finite+0xc>

000014fc <__fp_mpack_finite>:
    14fc:	91 50       	subi	r25, 0x01	; 1
    14fe:	20 f4       	brcc	.+8      	; 0x1508 <__fp_mpack_finite+0xc>
    1500:	87 95       	ror	r24
    1502:	77 95       	ror	r23
    1504:	67 95       	ror	r22
    1506:	b7 95       	ror	r27
    1508:	88 0f       	add	r24, r24
    150a:	91 1d       	adc	r25, r1
    150c:	96 95       	lsr	r25
    150e:	87 95       	ror	r24
    1510:	97 f9       	bld	r25, 7
    1512:	08 95       	ret

00001514 <__fp_powser>:
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	1f 93       	push	r17
    151a:	0f 93       	push	r16
    151c:	ff 92       	push	r15
    151e:	ef 92       	push	r14
    1520:	df 92       	push	r13
    1522:	7b 01       	movw	r14, r22
    1524:	8c 01       	movw	r16, r24
    1526:	68 94       	set
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <__fp_powser+0x20>
    152a:	da 2e       	mov	r13, r26
    152c:	ef 01       	movw	r28, r30
    152e:	d5 de       	rcall	.-598    	; 0x12da <__mulsf3x>
    1530:	fe 01       	movw	r30, r28
    1532:	e8 94       	clt
    1534:	a5 91       	lpm	r26, Z+
    1536:	25 91       	lpm	r18, Z+
    1538:	35 91       	lpm	r19, Z+
    153a:	45 91       	lpm	r20, Z+
    153c:	55 91       	lpm	r21, Z+
    153e:	ae f3       	brts	.-22     	; 0x152a <__fp_powser+0x16>
    1540:	ef 01       	movw	r28, r30
    1542:	8a dd       	rcall	.-1260   	; 0x1058 <__addsf3x>
    1544:	fe 01       	movw	r30, r28
    1546:	97 01       	movw	r18, r14
    1548:	a8 01       	movw	r20, r16
    154a:	da 94       	dec	r13
    154c:	79 f7       	brne	.-34     	; 0x152c <__fp_powser+0x18>
    154e:	df 90       	pop	r13
    1550:	ef 90       	pop	r14
    1552:	ff 90       	pop	r15
    1554:	0f 91       	pop	r16
    1556:	1f 91       	pop	r17
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <inverse>:
    155e:	9b 01       	movw	r18, r22
    1560:	ac 01       	movw	r20, r24
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	80 e8       	ldi	r24, 0x80	; 128
    1568:	9f e3       	ldi	r25, 0x3F	; 63
    156a:	ae c0       	rjmp	.+348    	; 0x16c8 <__divsf3>
    156c:	59 ce       	rjmp	.-846    	; 0x1220 <__fp_inf>
    156e:	c4 cf       	rjmp	.-120    	; 0x14f8 <__fp_mpack>

00001570 <ldexp>:
    1570:	87 de       	rcall	.-754    	; 0x1280 <__fp_splitA>
    1572:	e8 f3       	brcs	.-6      	; 0x156e <inverse+0x10>
    1574:	99 23       	and	r25, r25
    1576:	d9 f3       	breq	.-10     	; 0x156e <inverse+0x10>
    1578:	94 0f       	add	r25, r20
    157a:	51 1d       	adc	r21, r1
    157c:	bb f3       	brvs	.-18     	; 0x156c <inverse+0xe>
    157e:	91 50       	subi	r25, 0x01	; 1
    1580:	50 40       	sbci	r21, 0x00	; 0
    1582:	94 f0       	brlt	.+36     	; 0x15a8 <ldexp+0x38>
    1584:	59 f0       	breq	.+22     	; 0x159c <ldexp+0x2c>
    1586:	88 23       	and	r24, r24
    1588:	32 f0       	brmi	.+12     	; 0x1596 <ldexp+0x26>
    158a:	66 0f       	add	r22, r22
    158c:	77 1f       	adc	r23, r23
    158e:	88 1f       	adc	r24, r24
    1590:	91 50       	subi	r25, 0x01	; 1
    1592:	50 40       	sbci	r21, 0x00	; 0
    1594:	c1 f7       	brne	.-16     	; 0x1586 <ldexp+0x16>
    1596:	9e 3f       	cpi	r25, 0xFE	; 254
    1598:	51 05       	cpc	r21, r1
    159a:	44 f7       	brge	.-48     	; 0x156c <inverse+0xe>
    159c:	88 0f       	add	r24, r24
    159e:	91 1d       	adc	r25, r1
    15a0:	96 95       	lsr	r25
    15a2:	87 95       	ror	r24
    15a4:	97 f9       	bld	r25, 7
    15a6:	08 95       	ret
    15a8:	5f 3f       	cpi	r21, 0xFF	; 255
    15aa:	ac f0       	brlt	.+42     	; 0x15d6 <ldexp+0x66>
    15ac:	98 3e       	cpi	r25, 0xE8	; 232
    15ae:	9c f0       	brlt	.+38     	; 0x15d6 <ldexp+0x66>
    15b0:	bb 27       	eor	r27, r27
    15b2:	86 95       	lsr	r24
    15b4:	77 95       	ror	r23
    15b6:	67 95       	ror	r22
    15b8:	b7 95       	ror	r27
    15ba:	08 f4       	brcc	.+2      	; 0x15be <ldexp+0x4e>
    15bc:	b1 60       	ori	r27, 0x01	; 1
    15be:	93 95       	inc	r25
    15c0:	c1 f7       	brne	.-16     	; 0x15b2 <ldexp+0x42>
    15c2:	bb 0f       	add	r27, r27
    15c4:	58 f7       	brcc	.-42     	; 0x159c <ldexp+0x2c>
    15c6:	11 f4       	brne	.+4      	; 0x15cc <ldexp+0x5c>
    15c8:	60 ff       	sbrs	r22, 0
    15ca:	e8 cf       	rjmp	.-48     	; 0x159c <ldexp+0x2c>
    15cc:	6f 5f       	subi	r22, 0xFF	; 255
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	8f 4f       	sbci	r24, 0xFF	; 255
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	e3 cf       	rjmp	.-58     	; 0x159c <ldexp+0x2c>
    15d6:	6f ce       	rjmp	.-802    	; 0x12b6 <__fp_szero>
    15d8:	0e f0       	brts	.+2      	; 0x15dc <ldexp+0x6c>
    15da:	8e cf       	rjmp	.-228    	; 0x14f8 <__fp_mpack>
    15dc:	27 ce       	rjmp	.-946    	; 0x122c <__fp_nan>
    15de:	68 94       	set
    15e0:	1f ce       	rjmp	.-962    	; 0x1220 <__fp_inf>

000015e2 <log>:
    15e2:	4e de       	rcall	.-868    	; 0x1280 <__fp_splitA>
    15e4:	c8 f3       	brcs	.-14     	; 0x15d8 <ldexp+0x68>
    15e6:	99 23       	and	r25, r25
    15e8:	d1 f3       	breq	.-12     	; 0x15de <ldexp+0x6e>
    15ea:	c6 f3       	brts	.-16     	; 0x15dc <ldexp+0x6c>
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	1f 93       	push	r17
    15f2:	0f 93       	push	r16
    15f4:	ff 92       	push	r15
    15f6:	c9 2f       	mov	r28, r25
    15f8:	dd 27       	eor	r29, r29
    15fa:	88 23       	and	r24, r24
    15fc:	2a f0       	brmi	.+10     	; 0x1608 <log+0x26>
    15fe:	21 97       	sbiw	r28, 0x01	; 1
    1600:	66 0f       	add	r22, r22
    1602:	77 1f       	adc	r23, r23
    1604:	88 1f       	adc	r24, r24
    1606:	da f7       	brpl	.-10     	; 0x15fe <log+0x1c>
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e8       	ldi	r20, 0x80	; 128
    160e:	5f eb       	ldi	r21, 0xBF	; 191
    1610:	9f e3       	ldi	r25, 0x3F	; 63
    1612:	88 39       	cpi	r24, 0x98	; 152
    1614:	20 f0       	brcs	.+8      	; 0x161e <log+0x3c>
    1616:	80 3e       	cpi	r24, 0xE0	; 224
    1618:	30 f0       	brcs	.+12     	; 0x1626 <log+0x44>
    161a:	21 96       	adiw	r28, 0x01	; 1
    161c:	8f 77       	andi	r24, 0x7F	; 127
    161e:	0b dd       	rcall	.-1514   	; 0x1036 <__addsf3>
    1620:	ee e4       	ldi	r30, 0x4E	; 78
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	03 c0       	rjmp	.+6      	; 0x162c <log+0x4a>
    1626:	07 dd       	rcall	.-1522   	; 0x1036 <__addsf3>
    1628:	eb e7       	ldi	r30, 0x7B	; 123
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	73 df       	rcall	.-282    	; 0x1514 <__fp_powser>
    162e:	8b 01       	movw	r16, r22
    1630:	be 01       	movw	r22, r28
    1632:	ec 01       	movw	r28, r24
    1634:	fb 2e       	mov	r15, r27
    1636:	6f 57       	subi	r22, 0x7F	; 127
    1638:	71 09       	sbc	r23, r1
    163a:	75 95       	asr	r23
    163c:	77 1f       	adc	r23, r23
    163e:	88 0b       	sbc	r24, r24
    1640:	99 0b       	sbc	r25, r25
    1642:	8f dd       	rcall	.-1250   	; 0x1162 <__floatsisf>
    1644:	28 e1       	ldi	r18, 0x18	; 24
    1646:	32 e7       	ldi	r19, 0x72	; 114
    1648:	41 e3       	ldi	r20, 0x31	; 49
    164a:	5f e3       	ldi	r21, 0x3F	; 63
    164c:	46 de       	rcall	.-884    	; 0x12da <__mulsf3x>
    164e:	af 2d       	mov	r26, r15
    1650:	98 01       	movw	r18, r16
    1652:	ae 01       	movw	r20, r28
    1654:	ff 90       	pop	r15
    1656:	0f 91       	pop	r16
    1658:	1f 91       	pop	r17
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	fc dc       	rcall	.-1544   	; 0x1058 <__addsf3x>
    1660:	f6 cd       	rjmp	.-1044   	; 0x124e <__fp_round>

00001662 <modf>:
    1662:	fa 01       	movw	r30, r20
    1664:	dc 01       	movw	r26, r24
    1666:	aa 0f       	add	r26, r26
    1668:	bb 1f       	adc	r27, r27
    166a:	9b 01       	movw	r18, r22
    166c:	ac 01       	movw	r20, r24
    166e:	bf 57       	subi	r27, 0x7F	; 127
    1670:	28 f4       	brcc	.+10     	; 0x167c <modf+0x1a>
    1672:	22 27       	eor	r18, r18
    1674:	33 27       	eor	r19, r19
    1676:	44 27       	eor	r20, r20
    1678:	50 78       	andi	r21, 0x80	; 128
    167a:	1f c0       	rjmp	.+62     	; 0x16ba <modf+0x58>
    167c:	b7 51       	subi	r27, 0x17	; 23
    167e:	88 f4       	brcc	.+34     	; 0x16a2 <modf+0x40>
    1680:	ab 2f       	mov	r26, r27
    1682:	00 24       	eor	r0, r0
    1684:	46 95       	lsr	r20
    1686:	37 95       	ror	r19
    1688:	27 95       	ror	r18
    168a:	01 1c       	adc	r0, r1
    168c:	a3 95       	inc	r26
    168e:	d2 f3       	brmi	.-12     	; 0x1684 <modf+0x22>
    1690:	00 20       	and	r0, r0
    1692:	69 f0       	breq	.+26     	; 0x16ae <modf+0x4c>
    1694:	22 0f       	add	r18, r18
    1696:	33 1f       	adc	r19, r19
    1698:	44 1f       	adc	r20, r20
    169a:	b3 95       	inc	r27
    169c:	da f3       	brmi	.-10     	; 0x1694 <modf+0x32>
    169e:	0d d0       	rcall	.+26     	; 0x16ba <modf+0x58>
    16a0:	c9 cc       	rjmp	.-1646   	; 0x1034 <__subsf3>
    16a2:	61 30       	cpi	r22, 0x01	; 1
    16a4:	71 05       	cpc	r23, r1
    16a6:	a0 e8       	ldi	r26, 0x80	; 128
    16a8:	8a 07       	cpc	r24, r26
    16aa:	b9 46       	sbci	r27, 0x69	; 105
    16ac:	30 f4       	brcc	.+12     	; 0x16ba <modf+0x58>
    16ae:	9b 01       	movw	r18, r22
    16b0:	ac 01       	movw	r20, r24
    16b2:	66 27       	eor	r22, r22
    16b4:	77 27       	eor	r23, r23
    16b6:	88 27       	eor	r24, r24
    16b8:	90 78       	andi	r25, 0x80	; 128
    16ba:	30 96       	adiw	r30, 0x00	; 0
    16bc:	21 f0       	breq	.+8      	; 0x16c6 <modf+0x64>
    16be:	20 83       	st	Z, r18
    16c0:	31 83       	std	Z+1, r19	; 0x01
    16c2:	42 83       	std	Z+2, r20	; 0x02
    16c4:	53 83       	std	Z+3, r21	; 0x03
    16c6:	08 95       	ret

000016c8 <__divsf3>:
    16c8:	0c d0       	rcall	.+24     	; 0x16e2 <__divsf3x>
    16ca:	c1 cd       	rjmp	.-1150   	; 0x124e <__fp_round>
    16cc:	b9 dd       	rcall	.-1166   	; 0x1240 <__fp_pscB>
    16ce:	40 f0       	brcs	.+16     	; 0x16e0 <__divsf3+0x18>
    16d0:	b0 dd       	rcall	.-1184   	; 0x1232 <__fp_pscA>
    16d2:	30 f0       	brcs	.+12     	; 0x16e0 <__divsf3+0x18>
    16d4:	21 f4       	brne	.+8      	; 0x16de <__divsf3+0x16>
    16d6:	5f 3f       	cpi	r21, 0xFF	; 255
    16d8:	19 f0       	breq	.+6      	; 0x16e0 <__divsf3+0x18>
    16da:	a2 cd       	rjmp	.-1212   	; 0x1220 <__fp_inf>
    16dc:	51 11       	cpse	r21, r1
    16de:	eb cd       	rjmp	.-1066   	; 0x12b6 <__fp_szero>
    16e0:	a5 cd       	rjmp	.-1206   	; 0x122c <__fp_nan>

000016e2 <__divsf3x>:
    16e2:	c6 dd       	rcall	.-1140   	; 0x1270 <__fp_split3>
    16e4:	98 f3       	brcs	.-26     	; 0x16cc <__divsf3+0x4>

000016e6 <__divsf3_pse>:
    16e6:	99 23       	and	r25, r25
    16e8:	c9 f3       	breq	.-14     	; 0x16dc <__divsf3+0x14>
    16ea:	55 23       	and	r21, r21
    16ec:	b1 f3       	breq	.-20     	; 0x16da <__divsf3+0x12>
    16ee:	95 1b       	sub	r25, r21
    16f0:	55 0b       	sbc	r21, r21
    16f2:	bb 27       	eor	r27, r27
    16f4:	aa 27       	eor	r26, r26
    16f6:	62 17       	cp	r22, r18
    16f8:	73 07       	cpc	r23, r19
    16fa:	84 07       	cpc	r24, r20
    16fc:	38 f0       	brcs	.+14     	; 0x170c <__divsf3_pse+0x26>
    16fe:	9f 5f       	subi	r25, 0xFF	; 255
    1700:	5f 4f       	sbci	r21, 0xFF	; 255
    1702:	22 0f       	add	r18, r18
    1704:	33 1f       	adc	r19, r19
    1706:	44 1f       	adc	r20, r20
    1708:	aa 1f       	adc	r26, r26
    170a:	a9 f3       	breq	.-22     	; 0x16f6 <__divsf3_pse+0x10>
    170c:	33 d0       	rcall	.+102    	; 0x1774 <__divsf3_pse+0x8e>
    170e:	0e 2e       	mov	r0, r30
    1710:	3a f0       	brmi	.+14     	; 0x1720 <__divsf3_pse+0x3a>
    1712:	e0 e8       	ldi	r30, 0x80	; 128
    1714:	30 d0       	rcall	.+96     	; 0x1776 <__divsf3_pse+0x90>
    1716:	91 50       	subi	r25, 0x01	; 1
    1718:	50 40       	sbci	r21, 0x00	; 0
    171a:	e6 95       	lsr	r30
    171c:	00 1c       	adc	r0, r0
    171e:	ca f7       	brpl	.-14     	; 0x1712 <__divsf3_pse+0x2c>
    1720:	29 d0       	rcall	.+82     	; 0x1774 <__divsf3_pse+0x8e>
    1722:	fe 2f       	mov	r31, r30
    1724:	27 d0       	rcall	.+78     	; 0x1774 <__divsf3_pse+0x8e>
    1726:	66 0f       	add	r22, r22
    1728:	77 1f       	adc	r23, r23
    172a:	88 1f       	adc	r24, r24
    172c:	bb 1f       	adc	r27, r27
    172e:	26 17       	cp	r18, r22
    1730:	37 07       	cpc	r19, r23
    1732:	48 07       	cpc	r20, r24
    1734:	ab 07       	cpc	r26, r27
    1736:	b0 e8       	ldi	r27, 0x80	; 128
    1738:	09 f0       	breq	.+2      	; 0x173c <__divsf3_pse+0x56>
    173a:	bb 0b       	sbc	r27, r27
    173c:	80 2d       	mov	r24, r0
    173e:	bf 01       	movw	r22, r30
    1740:	ff 27       	eor	r31, r31
    1742:	93 58       	subi	r25, 0x83	; 131
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	2a f0       	brmi	.+10     	; 0x1752 <__divsf3_pse+0x6c>
    1748:	9e 3f       	cpi	r25, 0xFE	; 254
    174a:	51 05       	cpc	r21, r1
    174c:	68 f0       	brcs	.+26     	; 0x1768 <__divsf3_pse+0x82>
    174e:	68 cd       	rjmp	.-1328   	; 0x1220 <__fp_inf>
    1750:	b2 cd       	rjmp	.-1180   	; 0x12b6 <__fp_szero>
    1752:	5f 3f       	cpi	r21, 0xFF	; 255
    1754:	ec f3       	brlt	.-6      	; 0x1750 <__divsf3_pse+0x6a>
    1756:	98 3e       	cpi	r25, 0xE8	; 232
    1758:	dc f3       	brlt	.-10     	; 0x1750 <__divsf3_pse+0x6a>
    175a:	86 95       	lsr	r24
    175c:	77 95       	ror	r23
    175e:	67 95       	ror	r22
    1760:	b7 95       	ror	r27
    1762:	f7 95       	ror	r31
    1764:	9f 5f       	subi	r25, 0xFF	; 255
    1766:	c9 f7       	brne	.-14     	; 0x175a <__divsf3_pse+0x74>
    1768:	88 0f       	add	r24, r24
    176a:	91 1d       	adc	r25, r1
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	97 f9       	bld	r25, 7
    1772:	08 95       	ret
    1774:	e1 e0       	ldi	r30, 0x01	; 1
    1776:	66 0f       	add	r22, r22
    1778:	77 1f       	adc	r23, r23
    177a:	88 1f       	adc	r24, r24
    177c:	bb 1f       	adc	r27, r27
    177e:	62 17       	cp	r22, r18
    1780:	73 07       	cpc	r23, r19
    1782:	84 07       	cpc	r24, r20
    1784:	ba 07       	cpc	r27, r26
    1786:	20 f0       	brcs	.+8      	; 0x1790 <__divsf3_pse+0xaa>
    1788:	62 1b       	sub	r22, r18
    178a:	73 0b       	sbc	r23, r19
    178c:	84 0b       	sbc	r24, r20
    178e:	ba 0b       	sbc	r27, r26
    1790:	ee 1f       	adc	r30, r30
    1792:	88 f7       	brcc	.-30     	; 0x1776 <__divsf3_pse+0x90>
    1794:	e0 95       	com	r30
    1796:	08 95       	ret

00001798 <__udivmodqi4>:
    1798:	99 1b       	sub	r25, r25
    179a:	79 e0       	ldi	r23, 0x09	; 9
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <__udivmodqi4_ep>

0000179e <__udivmodqi4_loop>:
    179e:	99 1f       	adc	r25, r25
    17a0:	96 17       	cp	r25, r22
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <__udivmodqi4_ep>
    17a4:	96 1b       	sub	r25, r22

000017a6 <__udivmodqi4_ep>:
    17a6:	88 1f       	adc	r24, r24
    17a8:	7a 95       	dec	r23
    17aa:	c9 f7       	brne	.-14     	; 0x179e <__udivmodqi4_loop>
    17ac:	80 95       	com	r24
    17ae:	08 95       	ret

000017b0 <__udivmodsi4>:
    17b0:	a1 e2       	ldi	r26, 0x21	; 33
    17b2:	1a 2e       	mov	r1, r26
    17b4:	aa 1b       	sub	r26, r26
    17b6:	bb 1b       	sub	r27, r27
    17b8:	fd 01       	movw	r30, r26
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <__udivmodsi4_ep>

000017bc <__udivmodsi4_loop>:
    17bc:	aa 1f       	adc	r26, r26
    17be:	bb 1f       	adc	r27, r27
    17c0:	ee 1f       	adc	r30, r30
    17c2:	ff 1f       	adc	r31, r31
    17c4:	a2 17       	cp	r26, r18
    17c6:	b3 07       	cpc	r27, r19
    17c8:	e4 07       	cpc	r30, r20
    17ca:	f5 07       	cpc	r31, r21
    17cc:	20 f0       	brcs	.+8      	; 0x17d6 <__udivmodsi4_ep>
    17ce:	a2 1b       	sub	r26, r18
    17d0:	b3 0b       	sbc	r27, r19
    17d2:	e4 0b       	sbc	r30, r20
    17d4:	f5 0b       	sbc	r31, r21

000017d6 <__udivmodsi4_ep>:
    17d6:	66 1f       	adc	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	88 1f       	adc	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	1a 94       	dec	r1
    17e0:	69 f7       	brne	.-38     	; 0x17bc <__udivmodsi4_loop>
    17e2:	60 95       	com	r22
    17e4:	70 95       	com	r23
    17e6:	80 95       	com	r24
    17e8:	90 95       	com	r25
    17ea:	9b 01       	movw	r18, r22
    17ec:	ac 01       	movw	r20, r24
    17ee:	bd 01       	movw	r22, r26
    17f0:	cf 01       	movw	r24, r30
    17f2:	08 95       	ret

000017f4 <__tablejump2__>:
    17f4:	ee 0f       	add	r30, r30
    17f6:	ff 1f       	adc	r31, r31
    17f8:	05 90       	lpm	r0, Z+
    17fa:	f4 91       	lpm	r31, Z
    17fc:	e0 2d       	mov	r30, r0
    17fe:	09 94       	ijmp

00001800 <malloc>:
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	82 30       	cpi	r24, 0x02	; 2
    180a:	91 05       	cpc	r25, r1
    180c:	10 f4       	brcc	.+4      	; 0x1812 <malloc+0x12>
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__flp>
    1816:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <__flp+0x1>
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	a0 e0       	ldi	r26, 0x00	; 0
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	30 97       	sbiw	r30, 0x00	; 0
    1824:	19 f1       	breq	.+70     	; 0x186c <malloc+0x6c>
    1826:	40 81       	ld	r20, Z
    1828:	51 81       	ldd	r21, Z+1	; 0x01
    182a:	02 81       	ldd	r16, Z+2	; 0x02
    182c:	13 81       	ldd	r17, Z+3	; 0x03
    182e:	48 17       	cp	r20, r24
    1830:	59 07       	cpc	r21, r25
    1832:	c8 f0       	brcs	.+50     	; 0x1866 <malloc+0x66>
    1834:	84 17       	cp	r24, r20
    1836:	95 07       	cpc	r25, r21
    1838:	69 f4       	brne	.+26     	; 0x1854 <malloc+0x54>
    183a:	10 97       	sbiw	r26, 0x00	; 0
    183c:	31 f0       	breq	.+12     	; 0x184a <malloc+0x4a>
    183e:	12 96       	adiw	r26, 0x02	; 2
    1840:	0c 93       	st	X, r16
    1842:	12 97       	sbiw	r26, 0x02	; 2
    1844:	13 96       	adiw	r26, 0x03	; 3
    1846:	1c 93       	st	X, r17
    1848:	27 c0       	rjmp	.+78     	; 0x1898 <malloc+0x98>
    184a:	00 93 aa 00 	sts	0x00AA, r16	; 0x8000aa <__flp>
    184e:	10 93 ab 00 	sts	0x00AB, r17	; 0x8000ab <__flp+0x1>
    1852:	22 c0       	rjmp	.+68     	; 0x1898 <malloc+0x98>
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	19 f0       	breq	.+6      	; 0x1860 <malloc+0x60>
    185a:	42 17       	cp	r20, r18
    185c:	53 07       	cpc	r21, r19
    185e:	18 f4       	brcc	.+6      	; 0x1866 <malloc+0x66>
    1860:	9a 01       	movw	r18, r20
    1862:	bd 01       	movw	r22, r26
    1864:	ef 01       	movw	r28, r30
    1866:	df 01       	movw	r26, r30
    1868:	f8 01       	movw	r30, r16
    186a:	db cf       	rjmp	.-74     	; 0x1822 <malloc+0x22>
    186c:	21 15       	cp	r18, r1
    186e:	31 05       	cpc	r19, r1
    1870:	f9 f0       	breq	.+62     	; 0x18b0 <malloc+0xb0>
    1872:	28 1b       	sub	r18, r24
    1874:	39 0b       	sbc	r19, r25
    1876:	24 30       	cpi	r18, 0x04	; 4
    1878:	31 05       	cpc	r19, r1
    187a:	80 f4       	brcc	.+32     	; 0x189c <malloc+0x9c>
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	9b 81       	ldd	r25, Y+3	; 0x03
    1880:	61 15       	cp	r22, r1
    1882:	71 05       	cpc	r23, r1
    1884:	21 f0       	breq	.+8      	; 0x188e <malloc+0x8e>
    1886:	fb 01       	movw	r30, r22
    1888:	93 83       	std	Z+3, r25	; 0x03
    188a:	82 83       	std	Z+2, r24	; 0x02
    188c:	04 c0       	rjmp	.+8      	; 0x1896 <malloc+0x96>
    188e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__flp+0x1>
    1892:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__flp>
    1896:	fe 01       	movw	r30, r28
    1898:	32 96       	adiw	r30, 0x02	; 2
    189a:	44 c0       	rjmp	.+136    	; 0x1924 <malloc+0x124>
    189c:	fe 01       	movw	r30, r28
    189e:	e2 0f       	add	r30, r18
    18a0:	f3 1f       	adc	r31, r19
    18a2:	81 93       	st	Z+, r24
    18a4:	91 93       	st	Z+, r25
    18a6:	22 50       	subi	r18, 0x02	; 2
    18a8:	31 09       	sbc	r19, r1
    18aa:	39 83       	std	Y+1, r19	; 0x01
    18ac:	28 83       	st	Y, r18
    18ae:	3a c0       	rjmp	.+116    	; 0x1924 <malloc+0x124>
    18b0:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__brkval>
    18b4:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__brkval+0x1>
    18b8:	23 2b       	or	r18, r19
    18ba:	41 f4       	brne	.+16     	; 0x18cc <malloc+0xcc>
    18bc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    18c0:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    18c4:	30 93 a9 00 	sts	0x00A9, r19	; 0x8000a9 <__brkval+0x1>
    18c8:	20 93 a8 00 	sts	0x00A8, r18	; 0x8000a8 <__brkval>
    18cc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    18d0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    18d4:	21 15       	cp	r18, r1
    18d6:	31 05       	cpc	r19, r1
    18d8:	41 f4       	brne	.+16     	; 0x18ea <malloc+0xea>
    18da:	2d b7       	in	r18, 0x3d	; 61
    18dc:	3e b7       	in	r19, 0x3e	; 62
    18de:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    18e2:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    18e6:	24 1b       	sub	r18, r20
    18e8:	35 0b       	sbc	r19, r21
    18ea:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <__brkval>
    18ee:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <__brkval+0x1>
    18f2:	e2 17       	cp	r30, r18
    18f4:	f3 07       	cpc	r31, r19
    18f6:	a0 f4       	brcc	.+40     	; 0x1920 <malloc+0x120>
    18f8:	2e 1b       	sub	r18, r30
    18fa:	3f 0b       	sbc	r19, r31
    18fc:	28 17       	cp	r18, r24
    18fe:	39 07       	cpc	r19, r25
    1900:	78 f0       	brcs	.+30     	; 0x1920 <malloc+0x120>
    1902:	ac 01       	movw	r20, r24
    1904:	4e 5f       	subi	r20, 0xFE	; 254
    1906:	5f 4f       	sbci	r21, 0xFF	; 255
    1908:	24 17       	cp	r18, r20
    190a:	35 07       	cpc	r19, r21
    190c:	48 f0       	brcs	.+18     	; 0x1920 <malloc+0x120>
    190e:	4e 0f       	add	r20, r30
    1910:	5f 1f       	adc	r21, r31
    1912:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <__brkval+0x1>
    1916:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <__brkval>
    191a:	81 93       	st	Z+, r24
    191c:	91 93       	st	Z+, r25
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <malloc+0x124>
    1920:	e0 e0       	ldi	r30, 0x00	; 0
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	cf 01       	movw	r24, r30
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	08 95       	ret

00001930 <free>:
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	09 f4       	brne	.+2      	; 0x193a <free+0xa>
    1938:	81 c0       	rjmp	.+258    	; 0x1a3c <free+0x10c>
    193a:	fc 01       	movw	r30, r24
    193c:	32 97       	sbiw	r30, 0x02	; 2
    193e:	13 82       	std	Z+3, r1	; 0x03
    1940:	12 82       	std	Z+2, r1	; 0x02
    1942:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <__flp>
    1946:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <__flp+0x1>
    194a:	10 97       	sbiw	r26, 0x00	; 0
    194c:	81 f4       	brne	.+32     	; 0x196e <free+0x3e>
    194e:	20 81       	ld	r18, Z
    1950:	31 81       	ldd	r19, Z+1	; 0x01
    1952:	82 0f       	add	r24, r18
    1954:	93 1f       	adc	r25, r19
    1956:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__brkval>
    195a:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__brkval+0x1>
    195e:	28 17       	cp	r18, r24
    1960:	39 07       	cpc	r19, r25
    1962:	51 f5       	brne	.+84     	; 0x19b8 <free+0x88>
    1964:	f0 93 a9 00 	sts	0x00A9, r31	; 0x8000a9 <__brkval+0x1>
    1968:	e0 93 a8 00 	sts	0x00A8, r30	; 0x8000a8 <__brkval>
    196c:	67 c0       	rjmp	.+206    	; 0x1a3c <free+0x10c>
    196e:	ed 01       	movw	r28, r26
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	ce 17       	cp	r28, r30
    1976:	df 07       	cpc	r29, r31
    1978:	40 f4       	brcc	.+16     	; 0x198a <free+0x5a>
    197a:	4a 81       	ldd	r20, Y+2	; 0x02
    197c:	5b 81       	ldd	r21, Y+3	; 0x03
    197e:	9e 01       	movw	r18, r28
    1980:	41 15       	cp	r20, r1
    1982:	51 05       	cpc	r21, r1
    1984:	f1 f0       	breq	.+60     	; 0x19c2 <free+0x92>
    1986:	ea 01       	movw	r28, r20
    1988:	f5 cf       	rjmp	.-22     	; 0x1974 <free+0x44>
    198a:	d3 83       	std	Z+3, r29	; 0x03
    198c:	c2 83       	std	Z+2, r28	; 0x02
    198e:	40 81       	ld	r20, Z
    1990:	51 81       	ldd	r21, Z+1	; 0x01
    1992:	84 0f       	add	r24, r20
    1994:	95 1f       	adc	r25, r21
    1996:	c8 17       	cp	r28, r24
    1998:	d9 07       	cpc	r29, r25
    199a:	59 f4       	brne	.+22     	; 0x19b2 <free+0x82>
    199c:	88 81       	ld	r24, Y
    199e:	99 81       	ldd	r25, Y+1	; 0x01
    19a0:	84 0f       	add	r24, r20
    19a2:	95 1f       	adc	r25, r21
    19a4:	02 96       	adiw	r24, 0x02	; 2
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	93 83       	std	Z+3, r25	; 0x03
    19b0:	82 83       	std	Z+2, r24	; 0x02
    19b2:	21 15       	cp	r18, r1
    19b4:	31 05       	cpc	r19, r1
    19b6:	29 f4       	brne	.+10     	; 0x19c2 <free+0x92>
    19b8:	f0 93 ab 00 	sts	0x00AB, r31	; 0x8000ab <__flp+0x1>
    19bc:	e0 93 aa 00 	sts	0x00AA, r30	; 0x8000aa <__flp>
    19c0:	3d c0       	rjmp	.+122    	; 0x1a3c <free+0x10c>
    19c2:	e9 01       	movw	r28, r18
    19c4:	fb 83       	std	Y+3, r31	; 0x03
    19c6:	ea 83       	std	Y+2, r30	; 0x02
    19c8:	49 91       	ld	r20, Y+
    19ca:	59 91       	ld	r21, Y+
    19cc:	c4 0f       	add	r28, r20
    19ce:	d5 1f       	adc	r29, r21
    19d0:	ec 17       	cp	r30, r28
    19d2:	fd 07       	cpc	r31, r29
    19d4:	61 f4       	brne	.+24     	; 0x19ee <free+0xbe>
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	84 0f       	add	r24, r20
    19dc:	95 1f       	adc	r25, r21
    19de:	02 96       	adiw	r24, 0x02	; 2
    19e0:	e9 01       	movw	r28, r18
    19e2:	99 83       	std	Y+1, r25	; 0x01
    19e4:	88 83       	st	Y, r24
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	9b 83       	std	Y+3, r25	; 0x03
    19ec:	8a 83       	std	Y+2, r24	; 0x02
    19ee:	e0 e0       	ldi	r30, 0x00	; 0
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	12 96       	adiw	r26, 0x02	; 2
    19f4:	8d 91       	ld	r24, X+
    19f6:	9c 91       	ld	r25, X
    19f8:	13 97       	sbiw	r26, 0x03	; 3
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <free+0xd4>
    19fe:	fd 01       	movw	r30, r26
    1a00:	dc 01       	movw	r26, r24
    1a02:	f7 cf       	rjmp	.-18     	; 0x19f2 <free+0xc2>
    1a04:	8d 91       	ld	r24, X+
    1a06:	9c 91       	ld	r25, X
    1a08:	11 97       	sbiw	r26, 0x01	; 1
    1a0a:	9d 01       	movw	r18, r26
    1a0c:	2e 5f       	subi	r18, 0xFE	; 254
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	82 0f       	add	r24, r18
    1a12:	93 1f       	adc	r25, r19
    1a14:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <__brkval>
    1a18:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <__brkval+0x1>
    1a1c:	28 17       	cp	r18, r24
    1a1e:	39 07       	cpc	r19, r25
    1a20:	69 f4       	brne	.+26     	; 0x1a3c <free+0x10c>
    1a22:	30 97       	sbiw	r30, 0x00	; 0
    1a24:	29 f4       	brne	.+10     	; 0x1a30 <free+0x100>
    1a26:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__flp+0x1>
    1a2a:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__flp>
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <free+0x104>
    1a30:	13 82       	std	Z+3, r1	; 0x03
    1a32:	12 82       	std	Z+2, r1	; 0x02
    1a34:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <__brkval+0x1>
    1a38:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <__brkval>
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <strlcat>:
    1a42:	dc 01       	movw	r26, r24
    1a44:	fb 01       	movw	r30, r22
    1a46:	41 50       	subi	r20, 0x01	; 1
    1a48:	50 40       	sbci	r21, 0x00	; 0
    1a4a:	70 f0       	brcs	.+28     	; 0x1a68 <strlcat+0x26>
    1a4c:	0d 90       	ld	r0, X+
    1a4e:	00 20       	and	r0, r0
    1a50:	d1 f7       	brne	.-12     	; 0x1a46 <strlcat+0x4>
    1a52:	11 97       	sbiw	r26, 0x01	; 1
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <strlcat+0x1c>
    1a56:	01 90       	ld	r0, Z+
    1a58:	0d 92       	st	X+, r0
    1a5a:	00 20       	and	r0, r0
    1a5c:	61 f0       	breq	.+24     	; 0x1a76 <strlcat+0x34>
    1a5e:	41 50       	subi	r20, 0x01	; 1
    1a60:	50 40       	sbci	r21, 0x00	; 0
    1a62:	c8 f7       	brcc	.-14     	; 0x1a56 <strlcat+0x14>
    1a64:	1c 92       	st	X, r1
    1a66:	bf 01       	movw	r22, r30
    1a68:	01 90       	ld	r0, Z+
    1a6a:	00 20       	and	r0, r0
    1a6c:	e9 f7       	brne	.-6      	; 0x1a68 <strlcat+0x26>
    1a6e:	e6 1b       	sub	r30, r22
    1a70:	f7 0b       	sbc	r31, r23
    1a72:	ae 0f       	add	r26, r30
    1a74:	bf 1f       	adc	r27, r31
    1a76:	08 94       	sec
    1a78:	a8 0b       	sbc	r26, r24
    1a7a:	b9 0b       	sbc	r27, r25
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	08 95       	ret

00001a80 <strlcpy>:
    1a80:	dc 01       	movw	r26, r24
    1a82:	fb 01       	movw	r30, r22
    1a84:	41 50       	subi	r20, 0x01	; 1
    1a86:	50 40       	sbci	r21, 0x00	; 0
    1a88:	58 f0       	brcs	.+22     	; 0x1aa0 <strlcpy+0x20>
    1a8a:	49 f0       	breq	.+18     	; 0x1a9e <strlcpy+0x1e>
    1a8c:	01 90       	ld	r0, Z+
    1a8e:	0d 92       	st	X+, r0
    1a90:	00 20       	and	r0, r0
    1a92:	c1 f7       	brne	.-16     	; 0x1a84 <strlcpy+0x4>
    1a94:	e6 1b       	sub	r30, r22
    1a96:	f7 0b       	sbc	r31, r23
    1a98:	31 97       	sbiw	r30, 0x01	; 1
    1a9a:	cf 01       	movw	r24, r30
    1a9c:	08 95       	ret
    1a9e:	1c 92       	st	X, r1
    1aa0:	01 90       	ld	r0, Z+
    1aa2:	00 20       	and	r0, r0
    1aa4:	e9 f7       	brne	.-6      	; 0x1aa0 <strlcpy+0x20>
    1aa6:	f6 cf       	rjmp	.-20     	; 0x1a94 <strlcpy+0x14>

00001aa8 <_exit>:
    1aa8:	f8 94       	cli

00001aaa <__stop_program>:
    1aaa:	ff cf       	rjmp	.-2      	; 0x1aaa <__stop_program>
